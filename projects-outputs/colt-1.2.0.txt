All Method Calls (11261)

<java.lang.String; length[]; int; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; Format[java.lang.String]; void; null; s>
<java.lang.String; substring[int, int]; java.lang.String; corejava.Format; Format[java.lang.String]; void; null; s>
<java.io.PrintStream; print[java.lang.String]; void; corejava.Format; printf[java.lang.String, double]; void; null; System.out>
<corejava.Format; format[double]; java.lang.String; corejava.Format; printf[java.lang.String, double]; void; null; new Format(fmt)>
<java.io.PrintStream; print[java.lang.String]; void; corejava.Format; printf[java.lang.String, int]; void; null; System.out>
<corejava.Format; format[int]; java.lang.String; corejava.Format; printf[java.lang.String, int]; void; null; new Format(fmt)>
<java.io.PrintStream; print[java.lang.String]; void; corejava.Format; printf[java.lang.String, long]; void; null; System.out>
<corejava.Format; format[long]; java.lang.String; corejava.Format; printf[java.lang.String, long]; void; null; new Format(fmt)>
<java.io.PrintStream; print[java.lang.String]; void; corejava.Format; printf[java.lang.String, char]; void; null; System.out>
<corejava.Format; format[char]; java.lang.String; corejava.Format; printf[java.lang.String, char]; void; null; new Format(fmt)>
<java.io.PrintStream; print[java.lang.String]; void; corejava.Format; printf[java.lang.String, java.lang.String]; void; null; System.out>
<corejava.Format; format[java.lang.String]; java.lang.String; corejava.Format; printf[java.lang.String, java.lang.String]; void; null; new Format(fmt)>
<corejava.Format; atol[java.lang.String]; long; corejava.Format; atoi[java.lang.String]; int; null; this>
<java.lang.String; length[]; int; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.Character; isWhitespace[char]; boolean; corejava.Format; atol[java.lang.String]; long; null; Character>
<java.lang.String; charAt[int]; char; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atol[java.lang.String]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atol[java.lang.String]; long; null; s>
<corejava.Format; parseLong[java.lang.String, int]; long; corejava.Format; atol[java.lang.String]; long; null; this>
<java.lang.String; substring[int]; java.lang.String; corejava.Format; atol[java.lang.String]; long; null; s>
<corejava.Format; parseLong[java.lang.String, int]; long; corejava.Format; atol[java.lang.String]; long; null; this>
<corejava.Format; parseLong[java.lang.String, int]; long; corejava.Format; atol[java.lang.String]; long; null; this>
<java.lang.String; length[]; int; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.Character; isWhitespace[char]; boolean; corejava.Format; parseLong[java.lang.String, int]; long; null; Character>
<java.lang.String; charAt[int]; char; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; parseLong[java.lang.String, int]; long; null; s>
<java.lang.String; length[]; int; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.Character; isWhitespace[char]; boolean; corejava.Format; atof[java.lang.String]; double; null; Character>
<java.lang.String; charAt[int]; char; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; length[]; int; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; length[]; int; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; length[]; int; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; atof[java.lang.String]; double; null; s>
<corejava.Format; parseLong[java.lang.String, int]; long; corejava.Format; atof[java.lang.String]; double; null; this>
<java.lang.String; substring[int]; java.lang.String; corejava.Format; atof[java.lang.String]; double; null; s>
<java.lang.Math; pow[double, double]; double; corejava.Format; atof[java.lang.String]; double; null; Math>
<java.lang.Double; isNaN[double]; boolean; corejava.Format; format[double]; java.lang.String; null; Double>
<corejava.Format; fixedFormat[double]; java.lang.String; corejava.Format; format[double]; java.lang.String; null; this>
<corejava.Format; expFormat[double]; java.lang.String; corejava.Format; format[double]; java.lang.String; null; this>
<corejava.Format; pad[java.lang.String]; java.lang.String; corejava.Format; format[double]; java.lang.String; null; this>
<corejava.Format; sign[int, java.lang.String]; java.lang.String; corejava.Format; format[double]; java.lang.String; null; this>
<corejava.Format; format[long]; java.lang.String; corejava.Format; format[int]; java.lang.String; null; this>
<java.lang.String; substring[int]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; ("" + x)>
<corejava.Format; convert[long, int, int, java.lang.String]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; this>
<corejava.Format; convert[long, int, int, java.lang.String]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; this>
<corejava.Format; convert[long, int, int, java.lang.String]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; this>
<corejava.Format; pad[java.lang.String]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; this>
<corejava.Format; sign[int, java.lang.String]; java.lang.String; corejava.Format; format[long]; java.lang.String; null; this>
<corejava.Format; pad[java.lang.String]; java.lang.String; corejava.Format; format[char]; java.lang.String; null; this>
<java.lang.String; length[]; int; corejava.Format; format[java.lang.String]; java.lang.String; null; s>
<java.lang.String; substring[int, int]; java.lang.String; corejava.Format; format[java.lang.String]; java.lang.String; null; s>
<corejava.Format; pad[java.lang.String]; java.lang.String; corejava.Format; format[java.lang.String]; java.lang.String; null; this>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, java.lang.String]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, char]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, long]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, java.lang.String]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, int]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<corejava.Format; printf[java.lang.String, double]; void; corejava.Format; main[java.lang.String[]]; void; null; Format>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; corejava.Format; repeat[char, int]; java.lang.String; null; s>
<java.lang.StringBuffer; toString[]; java.lang.String; corejava.Format; repeat[char, int]; java.lang.String; null; s>
<java.lang.String; charAt[int]; char; corejava.Format; convert[long, int, int, java.lang.String]; java.lang.String; null; d>
<corejava.Format; repeat[char, int]; java.lang.String; corejava.Format; pad[java.lang.String]; java.lang.String; null; this>
<java.lang.String; length[]; int; corejava.Format; pad[java.lang.String]; java.lang.String; null; r>
<java.lang.String; length[]; int; corejava.Format; sign[int, java.lang.String]; java.lang.String; null; r>
<java.lang.String; charAt[int]; char; corejava.Format; sign[int, java.lang.String]; java.lang.String; null; r>
<corejava.Format; repeat[char, int]; java.lang.String; corejava.Format; sign[int, java.lang.String]; java.lang.String; null; this>
<java.lang.String; length[]; int; corejava.Format; sign[int, java.lang.String]; java.lang.String; null; p>
<java.lang.String; length[]; int; corejava.Format; sign[int, java.lang.String]; java.lang.String; null; r>
<corejava.Format; expFormat[double]; java.lang.String; corejava.Format; fixedFormat[double]; java.lang.String; null; this>
<corejava.Format; expFormat[double]; java.lang.String; corejava.Format; fixedFormat[double]; java.lang.String; null; this>
<java.lang.String; substring[int, int]; java.lang.String; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; length[]; int; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; length[]; int; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; length[]; int; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; charAt[int]; char; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; charAt[int]; char; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<java.lang.String; substring[int, int]; java.lang.String; corejava.Format; fixedFormat[double]; java.lang.String; null; z>
<corejava.Format; fixedFormat[double]; java.lang.String; corejava.Format; expFormat[double]; java.lang.String; null; this>
<corejava.Format; fixedFormat[double]; java.lang.String; corejava.Format; expFormat[double]; java.lang.String; null; this>
<java.lang.String; substring[int, int]; java.lang.String; corejava.Format; expFormat[double]; java.lang.String; null; p>
<java.lang.String; length[]; int; corejava.Format; expFormat[double]; java.lang.String; null; p>
<java.lang.String; length[]; int; corejava.Format; expFormat[double]; java.lang.String; null; p>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; Histogram3D[java.lang.String, hep.aida.IAxis, hep.aida.IAxis, hep.aida.IAxis]; void; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; Histogram3D[java.lang.String, hep.aida.IAxis, hep.aida.IAxis, hep.aida.IAxis]; void; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; Histogram3D[java.lang.String, hep.aida.IAxis, hep.aida.IAxis, hep.aida.IAxis]; void; null; zAxis>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.Histogram3D; binEntries[int, int, int]; int; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.Histogram3D; binEntries[int, int, int]; int; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.Histogram3D; binEntries[int, int, int]; int; null; this>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram3D; binError[int, int, int]; double; null; Math>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.Histogram3D; binError[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.Histogram3D; binError[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.Histogram3D; binError[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.Histogram3D; binHeight[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.Histogram3D; binHeight[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.Histogram3D; binHeight[int, int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; xAxis>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; yAxis>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double]; void; null; zAxis>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; xAxis>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; yAxis>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram3D; fill[double, double, double, double]; void; null; zAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; null; yAxis>
<hep.aida.ref.Histogram2D; setContents[int[][], double[][], double[][]]; void; hep.aida.ref.Histogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; null; result>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceXZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceXZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; zAxis>
<hep.aida.ref.Histogram2D; setContents[int[][], double[][], double[][]]; void; hep.aida.ref.Histogram3D; internalSliceXZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; result>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceYZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram3D; internalSliceYZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; zAxis>
<hep.aida.ref.Histogram2D; setContents[int[][], double[][], double[][]]; void; hep.aida.ref.Histogram3D; internalSliceYZ[java.lang.String, int, int]; hep.aida.IHistogram2D; null; result>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram3D; rmsX[]; double; null; Math>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram3D; rmsY[]; double; null; Math>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram3D; rmsZ[]; double; null; Math>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; allEntries[]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; allEntries[]; int; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; allEntries[]; int; null; zAxis>
<hep.aida.IHistogram3D; binEntries[int, int, int]; int; hep.aida.ref.AbstractHistogram3D; allEntries[]; int; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; entries[]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; entries[]; int; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; entries[]; int; null; zAxis>
<hep.aida.IHistogram3D; binEntries[int, int, int]; int; hep.aida.ref.AbstractHistogram3D; entries[]; int; null; this>
<hep.aida.ref.AbstractHistogram3D; allEntries[]; int; hep.aida.ref.AbstractHistogram3D; extraEntries[]; int; null; this>
<hep.aida.ref.AbstractHistogram3D; entries[]; int; hep.aida.ref.AbstractHistogram3D; extraEntries[]; int; null; this>
<hep.aida.IHistogram3D; fill[double, double, double, double]; void; hep.aida.ref.AbstractHistogram3D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; mapX[int]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; mapY[int]; int; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; null; zAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; minMaxBins[]; int[]; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; minMaxBins[]; int[]; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; minMaxBins[]; int[]; null; zAxis>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.AbstractHistogram3D; minMaxBins[]; int[]; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; projectionXY[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; projectionXY[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.AbstractHistogram3D; projectionXY[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.AbstractHistogram3D; projectionXY[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; projectionXZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceXZ[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; projectionXZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.AbstractHistogram3D; projectionXZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.AbstractHistogram3D; projectionXZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; projectionYZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceYZ[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; projectionYZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.AbstractHistogram3D; projectionYZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.AbstractHistogram3D; projectionYZ[]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; sliceXY[int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceXY[int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.AbstractHistogram3D; sliceXY[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapZ[int]; int; hep.aida.ref.AbstractHistogram3D; sliceXY[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; sliceXY[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceXY[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; sliceXZ[int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceXZ[int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.AbstractHistogram3D; sliceXZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapY[int]; int; hep.aida.ref.AbstractHistogram3D; sliceXZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; sliceXZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceXY[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceXZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; sliceYZ[int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceYZ[int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.AbstractHistogram3D; sliceYZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; mapX[int]; int; hep.aida.ref.AbstractHistogram3D; sliceYZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram3D; sliceYZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.ref.AbstractHistogram3D; internalSliceYZ[java.lang.String, int, int]; hep.aida.IHistogram2D; hep.aida.ref.AbstractHistogram3D; sliceYZ[int, int]; hep.aida.IHistogram2D; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumAllBinHeights[]; double; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumAllBinHeights[]; double; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumAllBinHeights[]; double; null; zAxis>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.AbstractHistogram3D; sumAllBinHeights[]; double; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumBinHeights[]; double; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumBinHeights[]; double; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram3D; sumBinHeights[]; double; null; zAxis>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.AbstractHistogram3D; sumBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; sumAllBinHeights[]; double; hep.aida.ref.AbstractHistogram3D; sumExtraBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram3D; sumBinHeights[]; double; hep.aida.ref.AbstractHistogram3D; sumExtraBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram1D; entries[]; int; hep.aida.ref.AbstractHistogram1D; allEntries[]; int; null; this>
<hep.aida.ref.AbstractHistogram1D; extraEntries[]; int; hep.aida.ref.AbstractHistogram1D; allEntries[]; int; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram1D; entries[]; int; null; xAxis>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.AbstractHistogram1D; entries[]; int; null; this>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.AbstractHistogram1D; extraEntries[]; int; null; this>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.AbstractHistogram1D; extraEntries[]; int; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram1D; map[int]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram1D; minMaxBins[]; int[]; null; xAxis>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram1D; minMaxBins[]; int[]; null; this>
<hep.aida.ref.AbstractHistogram1D; sumBinHeights[]; double; hep.aida.ref.AbstractHistogram1D; sumAllBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram1D; sumExtraBinHeights[]; double; hep.aida.ref.AbstractHistogram1D; sumAllBinHeights[]; double; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram1D; sumBinHeights[]; double; null; xAxis>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram1D; sumBinHeights[]; double; null; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram1D; sumExtraBinHeights[]; double; null; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram1D; sumExtraBinHeights[]; double; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram2D; Histogram2D[java.lang.String, hep.aida.IAxis, hep.aida.IAxis]; void; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram2D; Histogram2D[java.lang.String, hep.aida.IAxis, hep.aida.IAxis]; void; null; yAxis>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.Histogram2D; binEntries[int, int]; int; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.Histogram2D; binEntries[int, int]; int; null; this>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram2D; binError[int, int]; double; null; Math>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.Histogram2D; binError[int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.Histogram2D; binError[int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.Histogram2D; binHeight[int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.Histogram2D; binHeight[int, int]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.Histogram2D; fill[double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram2D; fill[double, double]; void; null; xAxis>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.Histogram2D; fill[double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram2D; fill[double, double]; void; null; yAxis>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.Histogram2D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram2D; fill[double, double, double]; void; null; xAxis>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.Histogram2D; fill[double, double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram2D; fill[double, double, double]; void; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram2D; internalSliceX[java.lang.String, int, int]; hep.aida.IHistogram1D; null; xAxis>
<hep.aida.ref.Histogram1D; setContents[int[], double[], double[]]; void; hep.aida.ref.Histogram2D; internalSliceX[java.lang.String, int, int]; hep.aida.IHistogram1D; null; result>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram2D; internalSliceY[java.lang.String, int, int]; hep.aida.IHistogram1D; null; yAxis>
<hep.aida.ref.Histogram1D; setContents[int[], double[], double[]]; void; hep.aida.ref.Histogram2D; internalSliceY[java.lang.String, int, int]; hep.aida.IHistogram1D; null; result>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram2D; rmsX[]; double; null; Math>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram2D; rmsY[]; double; null; Math>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; edges[hep.aida.IAxis]; double[]; null; axis>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; edges[hep.aida.IAxis]; double[]; null; axis>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; edges[hep.aida.IAxis]; double[]; null; axis>
<cern.colt.matrix.impl.Former; form[double]; java.lang.String; hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; null; formatter>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram1D]; double[]; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram1D]; double[]; bins[]; h>
<hep.aida.IHistogram1D; binError[int]; double; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram1D]; double[]; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram2D]; double[][]; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram2D]; double[][]; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram2D]; double[][]; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram2D]; double[][]; bins[]; h>
<hep.aida.IHistogram2D; binError[int, int]; double; hep.aida.ref.Converter; toArrayErrors[hep.aida.IHistogram2D]; double[][]; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram1D]; double[]; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram1D]; double[]; bins[]; h>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram1D]; double[]; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; bins[]; h>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; bins[]; h>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[double]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.ref.Converter; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; buf>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; axis>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; axis>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; buf>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; axis>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; buf>
<hep.aida.ref.Converter; toString[double[]]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; this>
<hep.aida.ref.Converter; edges[hep.aida.IAxis]; double[]; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IAxis]; java.lang.String; null; buf>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; new cern.colt.matrix.impl.FormerFactory()>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; System>
<hep.aida.IHistogram1D; minMaxBins[]; int[]; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram; entries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram; extraEntries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram1D; mean[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram1D; rms[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; upperEdge[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; binLowerEdge[int]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<cern.colt.matrix.DoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; heights.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; assign[double[]]; heights>
<hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram1D]; double[]; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; this>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; new cern.colt.matrix.impl.FormerFactory()>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; System>
<hep.aida.IHistogram2D; minMaxBins[]; int[]; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram; entries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram; extraEntries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; meanX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; rmsX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; meanY[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; rmsX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; upperEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; upperEdge[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; binLowerEdge[int]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; binLowerEdge[int]; h>
<cern.colt.list.ObjectArrayList; reverse[]; void; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; new cern.colt.list.ObjectArrayList(yEdges)>
<hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram2D]; double[][]; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; heights.viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; viewRowFlip[]; heights>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; new cern.colt.matrix.impl.FormerFactory()>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; System>
<hep.aida.IHistogram3D; minMaxBins[]; int[]; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram; entries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram; extraEntries[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; meanX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; rmsX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; meanY[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; rmsX[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; meanZ[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; rmsZ[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IHistogram3D; binHeight[int, int, int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; upperEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; upperEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; lowerEdge[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; upperEdge[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram3D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; binLowerEdge[int]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram3D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; binLowerEdge[int]; h>
<cern.colt.list.ObjectArrayList; reverse[]; void; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; new cern.colt.list.ObjectArrayList(yEdges)>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; bins[]; h>
<hep.aida.ref.Converter; form[cern.colt.matrix.impl.Former, double]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<hep.aida.IAxis; binLowerEdge[int]; double; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; h.zAxis()>
<hep.aida.IHistogram3D; zAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; binLowerEdge[int]; h>
<cern.colt.list.ObjectArrayList; reverse[]; void; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; new cern.colt.list.ObjectArrayList(zEdges)>
<hep.aida.ref.Converter; toArrayHeights[hep.aida.IHistogram3D]; double[][][]; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix3D; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; heights.viewDice(2,1,0).viewSliceFlip()>
<cern.colt.matrix.DoubleMatrix3D; viewSliceFlip[]; cern.colt.matrix.DoubleMatrix3D; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; viewRowFlip[]; heights.viewDice(2,1,0)>
<cern.colt.matrix.DoubleMatrix3D; viewDice[int, int, int]; cern.colt.matrix.DoubleMatrix3D; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; viewSliceFlip[]; heights>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<hep.aida.IHistogram1D; binError[int]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; lowerEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; upperEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram; entries[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.Double; isNaN[double]; boolean; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; Double>
<hep.aida.IHistogram1D; mean[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram1D; mean[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.Double; isNaN[double]; boolean; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; Double>
<hep.aida.IHistogram1D; rms[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<hep.aida.IHistogram1D; rms[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram1D]; java.lang.String; null; buf>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IHistogram2D; binEntries[int, int]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h>
<hep.aida.IHistogram2D; binError[int, int]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; lowerEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; upperEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; lowerEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; upperEdge[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; bins[]; h>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.ref.Converter; toXML[hep.aida.IHistogram2D]; java.lang.String; null; out>
<hep.aida.IHistogram1D; fill[double]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; h1>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test; main[java.lang.String[]]; void; null; r>
<hep.aida.IHistogram2D; fill[double, double]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; h2>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test; main[java.lang.String[]]; void; null; r>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test; main[java.lang.String[]]; void; null; r>
<hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionX[]; hep.aida.IHistogram1D; hep.aida.ref.Test; main[java.lang.String[]]; void; null; h2>
<hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test; main[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionY[]; hep.aida.IHistogram1D; hep.aida.ref.Test; main[java.lang.String[]]; void; null; h2>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; bins[]; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<hep.aida.IHistogram1D; binError[int]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; lowerEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; upperEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; bins[]; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram; entries[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.lang.Double; isNaN[double]; boolean; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; Double>
<hep.aida.IHistogram1D; mean[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram1D; mean[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.lang.Double; isNaN[double]; boolean; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; Double>
<hep.aida.IHistogram1D; rms[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<hep.aida.IHistogram1D; rms[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.io.PrintWriter; close[]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; out>
<java.lang.Throwable; printStackTrace[]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; x>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IHistogram; title[]; java.lang.String; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IHistogram2D; binEntries[int, int]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h>
<hep.aida.IHistogram2D; binError[int, int]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; lowerEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; upperEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; lowerEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; lowerEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; upperEdge[]; double; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; upperEdge[]; h>
<java.io.PrintWriter; print[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; bins[]; h>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; println[java.lang.String]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.io.PrintWriter; close[]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; out>
<java.lang.Throwable; printStackTrace[]; void; hep.aida.ref.Test; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; x>
<java.lang.Object; clone[]; double[]; hep.aida.ref.VariableAxis; VariableAxis[double[]]; void; null; edges>
<hep.aida.ref.VariableAxis; binLowerEdge[int]; double; hep.aida.ref.VariableAxis; binCentre[int]; double; null; this>
<hep.aida.ref.VariableAxis; binUpperEdge[int]; double; hep.aida.ref.VariableAxis; binCentre[int]; double; null; this>
<hep.aida.ref.VariableAxis; upperEdge[]; double; hep.aida.ref.VariableAxis; binLowerEdge[int]; double; null; this>
<hep.aida.ref.VariableAxis; lowerEdge[]; double; hep.aida.ref.VariableAxis; binUpperEdge[int]; double; null; this>
<hep.aida.ref.VariableAxis; binUpperEdge[int]; double; hep.aida.ref.VariableAxis; binWidth[int]; double; null; this>
<hep.aida.ref.VariableAxis; binLowerEdge[int]; double; hep.aida.ref.VariableAxis; binWidth[int]; double; null; this>
<java.util.Arrays; binarySearch[double[], double]; int; hep.aida.ref.VariableAxis; coordToIndex[double]; int; null; java.util.Arrays>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.VariableAxis; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[double]; java.lang.StringBuffer; hep.aida.ref.VariableAxis; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.VariableAxis; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.ref.VariableAxis; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.ref.VariableAxis; toString[double[]]; java.lang.String; null; buf>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; maxBin[hep.aida.IHistogram1D]; int; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; maxBin[hep.aida.IHistogram1D]; int; bins[]; h>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.Util; maxBin[hep.aida.IHistogram1D]; int; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; maxBinX[hep.aida.IHistogram2D]; int; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; maxBinX[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; maxBinX[hep.aida.IHistogram2D]; int; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Util; maxBinX[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Util; maxBinX[hep.aida.IHistogram2D]; int; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; maxBinY[hep.aida.IHistogram2D]; int; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; maxBinY[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; maxBinY[hep.aida.IHistogram2D]; int; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Util; maxBinY[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Util; maxBinY[hep.aida.IHistogram2D]; int; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; minBin[hep.aida.IHistogram1D]; int; null; h.xAxis()>
<hep.aida.IHistogram1D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; minBin[hep.aida.IHistogram1D]; int; bins[]; h>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.Util; minBin[hep.aida.IHistogram1D]; int; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; minBinX[hep.aida.IHistogram2D]; int; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; minBinX[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; minBinX[hep.aida.IHistogram2D]; int; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Util; minBinX[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Util; minBinX[hep.aida.IHistogram2D]; int; null; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; minBinY[hep.aida.IHistogram2D]; int; null; h.xAxis()>
<hep.aida.IHistogram2D; xAxis[]; hep.aida.IAxis; hep.aida.ref.Util; minBinY[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Util; minBinY[hep.aida.IHistogram2D]; int; null; h.yAxis()>
<hep.aida.IHistogram2D; yAxis[]; hep.aida.IAxis; hep.aida.ref.Util; minBinY[hep.aida.IHistogram2D]; int; bins[]; h>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.Util; minBinY[hep.aida.IHistogram2D]; int; null; h>
<hep.aida.ref.FixedAxis; upperEdge[]; double; hep.aida.ref.FixedAxis; binLowerEdge[int]; double; null; this>
<java.lang.Math; floor[double]; double; hep.aida.ref.FixedAxis; coordToIndex[double]; int; null; Math>
<java.lang.Math; floor[double]; double; hep.aida.ref.FixedAxis; xgetBin[double]; int; null; Math>
<hep.aida.IHistogram1D; fill[double]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; h1>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; r>
<hep.aida.IHistogram2D; fill[double, double]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; h2>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; r>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; r>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionX[]; hep.aida.IHistogram1D; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; h2>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionY[]; hep.aida.IHistogram1D; hep.aida.ref.Test2; main[java.lang.String[]]; void; null; h2>
<hep.aida.IHistogram1D; fill[double]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; h1>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<hep.aida.IHistogram2D; fill[double, double]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; h2>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<hep.aida.IHistogram3D; fill[double, double, double]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; h3>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<java.util.Random; nextGaussian[]; double; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; r>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram3D, java.lang.String]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; this>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionX[]; hep.aida.IHistogram1D; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; h2>
<hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; this>
<hep.aida.IHistogram2D; projectionY[]; hep.aida.IHistogram1D; hep.aida.ref.Test2; main2[java.lang.String[]]; void; null; h2>
<java.io.PrintStream; println[java.lang.String]; void; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; System.out>
<hep.aida.ref.Converter; toString[hep.aida.IHistogram1D]; java.lang.String; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram1D, java.lang.String]; void; null; new Converter()>
<java.io.PrintStream; println[java.lang.String]; void; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; System.out>
<hep.aida.ref.Converter; toString[hep.aida.IHistogram2D]; java.lang.String; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram2D, java.lang.String]; void; null; new Converter()>
<java.io.PrintStream; println[java.lang.String]; void; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram3D, java.lang.String]; void; null; System.out>
<hep.aida.ref.Converter; toString[hep.aida.IHistogram3D]; java.lang.String; hep.aida.ref.Test2; writeAsXML[hep.aida.IHistogram3D, java.lang.String]; void; null; new Converter()>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.Histogram1D; Histogram1D[java.lang.String, hep.aida.IAxis]; void; null; axis>
<hep.aida.ref.AbstractHistogram1D; map[int]; int; hep.aida.ref.Histogram1D; binEntries[int]; int; null; this>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram1D; binError[int]; double; null; Math>
<hep.aida.ref.AbstractHistogram1D; map[int]; int; hep.aida.ref.Histogram1D; binError[int]; double; null; this>
<hep.aida.ref.AbstractHistogram1D; map[int]; int; hep.aida.ref.Histogram1D; binHeight[int]; double; null; this>
<hep.aida.ref.AbstractHistogram1D; map[int]; int; hep.aida.ref.Histogram1D; fill[double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram1D; fill[double]; void; null; xAxis>
<hep.aida.ref.AbstractHistogram1D; map[int]; int; hep.aida.ref.Histogram1D; fill[double, double]; void; null; this>
<hep.aida.IAxis; coordToIndex[double]; int; hep.aida.ref.Histogram1D; fill[double, double]; void; null; xAxis>
<java.lang.Math; sqrt[double]; double; hep.aida.ref.Histogram1D; rms[]; double; null; Math>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; allEntries[]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; allEntries[]; int; null; yAxis>
<hep.aida.IHistogram2D; binEntries[int, int]; int; hep.aida.ref.AbstractHistogram2D; allEntries[]; int; null; this>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.AbstractHistogram2D; binEntriesX[int]; int; null; projectionX()>
<hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; binEntriesX[int]; int; binEntries[int]; this>
<hep.aida.IHistogram1D; binEntries[int]; int; hep.aida.ref.AbstractHistogram2D; binEntriesY[int]; int; null; projectionY()>
<hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; binEntriesY[int]; int; binEntries[int]; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram2D; binHeightX[int]; double; null; projectionX()>
<hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; binHeightX[int]; double; binHeight[int]; this>
<hep.aida.IHistogram1D; binHeight[int]; double; hep.aida.ref.AbstractHistogram2D; binHeightY[int]; double; null; projectionY()>
<hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; binHeightY[int]; double; binHeight[int]; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; entries[]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; entries[]; int; null; yAxis>
<hep.aida.IHistogram2D; binEntries[int, int]; int; hep.aida.ref.AbstractHistogram2D; entries[]; int; null; this>
<hep.aida.ref.AbstractHistogram2D; allEntries[]; int; hep.aida.ref.AbstractHistogram2D; extraEntries[]; int; null; this>
<hep.aida.ref.AbstractHistogram2D; entries[]; int; hep.aida.ref.AbstractHistogram2D; extraEntries[]; int; null; this>
<hep.aida.IHistogram2D; fill[double, double, double]; void; hep.aida.ref.AbstractHistogram2D; fill[double, double]; void; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; mapX[int]; int; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; mapY[int]; int; null; yAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; minMaxBins[]; int[]; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; minMaxBins[]; int[]; null; yAxis>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.AbstractHistogram2D; minMaxBins[]; int[]; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceX[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.AbstractHistogram2D; projectionX[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceY[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.AbstractHistogram2D; projectionY[]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.AbstractHistogram2D; sliceX[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; sliceX[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceX[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; sliceX[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.AbstractHistogram2D; sliceX[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapY[int]; int; hep.aida.ref.AbstractHistogram2D; sliceX[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; sliceX[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceX[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; sliceX[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.AbstractHistogram2D; sliceY[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; sliceY[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceY[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; sliceY[int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.AbstractHistogram2D; sliceY[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; mapX[int]; int; hep.aida.ref.AbstractHistogram2D; sliceY[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.Histogram; title[]; java.lang.String; hep.aida.ref.AbstractHistogram2D; sliceY[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.ref.AbstractHistogram2D; internalSliceY[java.lang.String, int, int]; hep.aida.IHistogram1D; hep.aida.ref.AbstractHistogram2D; sliceY[int, int]; hep.aida.IHistogram1D; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; sumAllBinHeights[]; double; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; sumAllBinHeights[]; double; null; yAxis>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.AbstractHistogram2D; sumAllBinHeights[]; double; null; this>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; sumBinHeights[]; double; null; xAxis>
<hep.aida.IAxis; bins[]; int; hep.aida.ref.AbstractHistogram2D; sumBinHeights[]; double; null; yAxis>
<hep.aida.IHistogram2D; binHeight[int, int]; double; hep.aida.ref.AbstractHistogram2D; sumBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; sumAllBinHeights[]; double; hep.aida.ref.AbstractHistogram2D; sumExtraBinHeights[]; double; null; this>
<hep.aida.ref.AbstractHistogram2D; sumBinHeights[]; double; hep.aida.ref.AbstractHistogram2D; sumExtraBinHeights[]; double; null; this>
<hep.aida.bin.DynamicBin1D; clear[]; void; hep.aida.bin.DynamicBin1D; DynamicBin1D[]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.DynamicBin1D; add[double]; void; null; elements>
<hep.aida.bin.DynamicBin1D; invalidateAll[]; void; hep.aida.bin.DynamicBin1D; add[double]; void; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; hep.aida.bin.DynamicBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this.elements>
<hep.aida.bin.DynamicBin1D; invalidateAll[]; void; hep.aida.bin.DynamicBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; elements>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleFunction; apply[double]; double; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; elements>
<cern.colt.list.AbstractList; clear[]; void; hep.aida.bin.DynamicBin1D; clear[]; void; null; this.elements>
<cern.colt.list.AbstractList; clear[]; void; hep.aida.bin.DynamicBin1D; clear[]; void; null; this.sortedElements>
<hep.aida.bin.DynamicBin1D; validateAll[]; void; hep.aida.bin.DynamicBin1D; clear[]; void; null; this>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; clone[]; java.lang.Object; null; clone.elements>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; clone[]; java.lang.Object; null; clone.sortedElements>
<hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; hep.aida.bin.DynamicBin1D; correlation[hep.aida.bin.DynamicBin1D]; double; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.DynamicBin1D; correlation[hep.aida.bin.DynamicBin1D]; double; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.DynamicBin1D; correlation[hep.aida.bin.DynamicBin1D]; double; null; other>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; other>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this.elements>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; other.elements>
<hep.aida.bin.DynamicBin1D; sum[]; double; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this>
<hep.aida.bin.DynamicBin1D; sum[]; double; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; other>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; covariance[hep.aida.bin.DynamicBin1D]; double; null; this>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; elements[]; cern.colt.list.DoubleArrayList; null; elements_unsafe()>
<hep.aida.bin.DynamicBin1D; elements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; elements[]; cern.colt.list.DoubleArrayList; copy[]; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; null; sortedElements_unsafe()>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; elements[]; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; null; other.sortedElements_unsafe()>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; elements[]; other>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.DynamicBin1D; includes[double[], double[], int, int, int, int]; boolean; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.DynamicBin1D; includes[double[], double[], int, int, int, int]; boolean; hep.aida.bin.DynamicBin1D; equals[java.lang.Object]; boolean; null; this>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; hep.aida.bin.DynamicBin1D; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; Descriptive>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; frequencyMap[]; cern.colt.map.AbstractDoubleIntMap; null; this>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; frequencyMap[]; cern.colt.map.AbstractDoubleIntMap; null; this.elements>
<cern.colt.map.AbstractDoubleIntMap; put[double, int]; boolean; hep.aida.bin.DynamicBin1D; frequencyMap[]; cern.colt.map.AbstractDoubleIntMap; null; map>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; hep.aida.bin.DynamicBin1D; frequencyMap[]; cern.colt.map.AbstractDoubleIntMap; null; map>
<hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; hep.aida.bin.DynamicBin1D; max[]; double; null; this>
<hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; hep.aida.bin.DynamicBin1D; min[]; double; null; this>
<cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; hep.aida.bin.DynamicBin1D; moment[int, double]; double; null; Descriptive>
<cern.jet.stat.Descriptive; quantile[cern.colt.list.DoubleArrayList, double]; double; hep.aida.bin.DynamicBin1D; quantile[double]; double; null; Descriptive>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; quantile[double]; double; null; this>
<cern.jet.stat.Descriptive; quantileInverse[cern.colt.list.DoubleArrayList, double]; double; hep.aida.bin.DynamicBin1D; quantileInverse[double]; double; null; Descriptive>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; quantileInverse[double]; double; null; this>
<cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; quantiles[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Descriptive>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; quantiles[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; hep.aida.bin.DynamicBin1D; removeAllOf[cern.colt.list.DoubleArrayList]; boolean; null; this.elements>
<hep.aida.bin.DynamicBin1D; clearAllMeasures[]; void; hep.aida.bin.DynamicBin1D; removeAllOf[cern.colt.list.DoubleArrayList]; boolean; null; this>
<hep.aida.bin.DynamicBin1D; invalidateAll[]; void; hep.aida.bin.DynamicBin1D; removeAllOf[cern.colt.list.DoubleArrayList]; boolean; null; this>
<cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; hep.aida.bin.DynamicBin1D; removeAllOf[cern.colt.list.DoubleArrayList]; boolean; null; this.sortedElements>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; cern.jet.random.Uniform>
<cern.colt.buffer.DoubleBuffer; clear[]; void; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; buffer>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; this>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; sampler>
<cern.colt.buffer.DoubleBuffer; add[double]; void; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; buffer>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; this.elements>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; this>
<cern.colt.buffer.DoubleBuffer; add[double]; void; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; buffer>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; this.elements>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; uniform>
<cern.colt.buffer.DoubleBuffer; flush[]; void; hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; null; buffer>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; cern.jet.random.Uniform>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; this>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; other>
<hep.aida.bin.AbstractBin1D; buffered[int]; cern.colt.buffer.DoubleBuffer; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; sample1>
<java.lang.Math; min[int, int]; int; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; Math>
<hep.aida.bin.AbstractBin1D; buffered[int]; cern.colt.buffer.DoubleBuffer; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; sample2>
<java.lang.Math; min[int, int]; int; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; Math>
<hep.aida.bin.AbstractBin1D; buffered[int]; cern.colt.buffer.DoubleBuffer; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; bootstrap>
<java.lang.Math; min[int, int]; int; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; Math>
<hep.aida.bin.DynamicBin1D; clear[]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; sample1>
<hep.aida.bin.DynamicBin1D; clear[]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; sample2>
<hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; clear[]; this>
<hep.aida.bin.DynamicBin1D; sample[int, boolean, cern.jet.random.engine.RandomEngine, cern.colt.buffer.DoubleBuffer]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; other>
<cern.colt.buffer.DoubleBuffer; add[double]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; bootBuffer>
<hep.aida.bin.BinBinFunction1D; apply[hep.aida.bin.DynamicBin1D, hep.aida.bin.DynamicBin1D]; double; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; function>
<cern.colt.buffer.DoubleBuffer; flush[]; void; hep.aida.bin.DynamicBin1D; sampleBootstrap[hep.aida.bin.DynamicBin1D, int, cern.jet.random.engine.RandomEngine, hep.aida.bin.BinBinFunction1D]; hep.aida.bin.DynamicBin1D; null; bootBuffer>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; size[]; int; null; elements>
<cern.colt.list.AbstractList; clear[]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this.sortedElements>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this.sortedElements>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; sort[]; void; null; this.elements>
<cern.colt.list.AbstractList; sort[]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this.sortedElements>
<hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this>
<hep.aida.bin.DynamicBin1D; invalidateAll[]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; hep.aida.bin.DynamicBin1D; sort[]; void; null; this.elements>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; sortedElements[]; cern.colt.list.DoubleArrayList; null; sortedElements_unsafe()>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; sortedElements[]; cern.colt.list.DoubleArrayList; copy[]; this>
<hep.aida.bin.DynamicBin1D; sort[]; void; hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; null; this>
<cern.jet.stat.Descriptive; standardize[cern.colt.list.DoubleArrayList, double, double]; void; hep.aida.bin.DynamicBin1D; standardize[double, double]; void; null; Descriptive>
<hep.aida.bin.DynamicBin1D; clearAllMeasures[]; void; hep.aida.bin.DynamicBin1D; standardize[double, double]; void; null; this>
<hep.aida.bin.DynamicBin1D; invalidateAll[]; void; hep.aida.bin.DynamicBin1D; standardize[double, double]; void; null; this>
<hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; hep.aida.bin.DynamicBin1D; sum[]; double; null; this>
<hep.aida.bin.DynamicBin1D; updateSumOfInversions[]; void; hep.aida.bin.DynamicBin1D; sumOfInversions[]; double; null; this>
<hep.aida.bin.DynamicBin1D; updateSumOfLogarithms[]; void; hep.aida.bin.DynamicBin1D; sumOfLogarithms[]; double; null; this>
<cern.jet.stat.Descriptive; sumOfPowers[cern.colt.list.DoubleArrayList, int]; double; hep.aida.bin.DynamicBin1D; sumOfPowers[int]; double; null; Descriptive>
<hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; hep.aida.bin.DynamicBin1D; sumOfSquares[]; double; null; this>
<hep.aida.bin.DynamicBin1D; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; distinctElements>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.DynamicBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.DynamicBin1D; sortedElements[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; trim[int, int]; void; null; this>
<hep.aida.bin.DynamicBin1D; clear[]; void; hep.aida.bin.DynamicBin1D; trim[int, int]; void; null; this>
<hep.aida.bin.DynamicBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; hep.aida.bin.DynamicBin1D; trim[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; trim[int, int]; void; null; elems>
<cern.jet.stat.Descriptive; trimmedMean[cern.colt.list.DoubleArrayList, double, int, int]; double; hep.aida.bin.DynamicBin1D; trimmedMean[int, int]; double; null; Descriptive>
<hep.aida.bin.DynamicBin1D; sortedElements_unsafe[]; cern.colt.list.DoubleArrayList; hep.aida.bin.DynamicBin1D; trimmedMean[int, int]; double; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.DynamicBin1D; trimmedMean[int, int]; double; null; this>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; hep.aida.bin.DynamicBin1D; trimToSize[]; void; null; this.elements>
<cern.colt.list.AbstractList; clear[]; void; hep.aida.bin.DynamicBin1D; trimToSize[]; void; null; this.sortedElements>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; hep.aida.bin.DynamicBin1D; trimToSize[]; void; null; this.sortedElements>
<cern.jet.stat.Descriptive; incrementalUpdate[cern.colt.list.DoubleArrayList, int, int, double[]]; void; hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; null; Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; null; this.elements>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.DynamicBin1D; updateIncrementalStats[]; void; null; this.elements>
<cern.jet.stat.Descriptive; sumOfInversions[cern.colt.list.DoubleArrayList, int, int]; double; hep.aida.bin.DynamicBin1D; updateSumOfInversions[]; void; null; Descriptive>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; updateSumOfInversions[]; void; null; this>
<cern.jet.stat.Descriptive; sumOfLogarithms[cern.colt.list.DoubleArrayList, int, int]; double; hep.aida.bin.DynamicBin1D; updateSumOfLogarithms[]; void; null; Descriptive>
<hep.aida.bin.DynamicBin1D; size[]; int; hep.aida.bin.DynamicBin1D; updateSumOfLogarithms[]; void; null; this>
<hep.aida.bin.DynamicBin1D; max[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.AbstractBin1D; mean[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.QuantileBin1D; median[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.DynamicBin1D; min[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.AbstractBin1D; rms[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.DynamicBin1D; size[]; int; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.DynamicBin1D; sum[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.DynamicBin1D; sumOfLogarithms[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<hep.aida.bin.DynamicBin1D; quantile[double]; double; java.lang.Object; apply[hep.aida.bin.DynamicBin1D]; double; null; bin>
<cern.colt.matrix.impl.Former; form[double]; java.lang.String; java.lang.Object; name[]; java.lang.String; null; new cern.colt.matrix.impl.FormerFactory().create("%1.2G")>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; java.lang.Object; name[]; java.lang.String; form[double]; new cern.colt.matrix.impl.FormerFactory()>
<cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; hep.aida.bin.QuantileBin1D; QuantileBin1D[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine, boolean, boolean, int]; void; null; QuantileFinderFactory>
<hep.aida.bin.QuantileBin1D; clear[]; void; hep.aida.bin.QuantileBin1D; QuantileBin1D[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine, boolean, boolean, int]; void; null; this>
<cern.jet.stat.quantile.DoubleQuantileFinder; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; hep.aida.bin.QuantileBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this.finder>
<cern.jet.stat.quantile.DoubleQuantileFinder; clear[]; void; hep.aida.bin.QuantileBin1D; clear[]; void; null; this.finder>
<cern.jet.stat.quantile.DoubleQuantileFinder; clone[]; java.lang.Object; hep.aida.bin.QuantileBin1D; clone[]; java.lang.Object; null; clone.finder>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; q>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; q>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; q>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; q>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; q>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.QuantileBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; median[]; double; null; this>
<cern.colt.list.DoubleArrayList; get[int]; double; hep.aida.bin.QuantileBin1D; quantile[double]; double; null; quantiles(new DoubleArrayList(new double[]{phi}))>
<hep.aida.bin.QuantileBin1D; quantiles[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; hep.aida.bin.QuantileBin1D; quantile[double]; double; get[int]; this>
<cern.jet.stat.quantile.DoubleQuantileFinder; phi[double]; double; hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; null; finder>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; hep.aida.bin.QuantileBin1D; quantiles[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; finder>
<java.lang.Math; round[double]; long; hep.aida.bin.QuantileBin1D; sizeOfRange[double, double]; int; null; Math>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.QuantileBin1D; sizeOfRange[double, double]; int; null; this>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; sizeOfRange[double, double]; int; null; this>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; sizeOfRange[double, double]; int; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<cern.colt.list.DoubleArrayList; elements[]; double[]; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<cern.colt.list.DoubleArrayList; elements[]; double[]; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; quantiles(new DoubleArrayList(subBins))>
<hep.aida.bin.QuantileBin1D; quantiles[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; elements[]; this>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; this>
<java.lang.Math; min[int, int]; int; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; Math>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; this>
<java.lang.Math; log[double]; double; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; Math>
<java.lang.Math; pow[double, double]; double; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; Math>
<java.lang.Math; round[double]; long; hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; null; Math>
<hep.aida.ref.Converter; edges[hep.aida.IAxis]; double[]; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; new hep.aida.ref.Converter()>
<cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<cern.colt.list.DoubleArrayList; set[int, double]; void; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; this>
<cern.colt.list.DoubleArrayList; get[int]; double; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; percentages>
<hep.aida.bin.QuantileBin1D; splitApproximately[cern.colt.list.DoubleArrayList, int]; hep.aida.bin.MightyStaticBin1D[]; hep.aida.bin.QuantileBin1D; splitApproximately[hep.aida.IAxis, int]; hep.aida.bin.MightyStaticBin1D[]; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.QuantileBin1D; quantileInverse[double]; double; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.QuantileBin1D; median[]; double; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.QuantileBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.StaticBin1D; clear[]; void; hep.aida.bin.StaticBin1D; StaticBin1D[]; void; null; this>
<hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; hep.aida.bin.StaticBin1D; add[double]; void; null; this>
<cern.jet.stat.Descriptive; incrementalUpdate[cern.colt.list.DoubleArrayList, int, int, double[]]; void; hep.aida.bin.StaticBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; Descriptive>
<hep.aida.bin.StaticBin1D; clearAllMeasures[]; void; hep.aida.bin.StaticBin1D; clear[]; void; null; this>
<hep.aida.bin.AbstractBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; null; list>
<hep.aida.bin.AbstractBin1D; add[double]; void; hep.aida.bin.AbstractBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; hep.aida.bin.AbstractBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; list>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; min[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; min[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; max[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; max[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; rms[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; rms[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; variance[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; variance[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; standardError[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; standardError[]; double; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; other>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.AbstractBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin1D; min[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin1D; min[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin1D; max[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin1D; max[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; mean[]; double; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; mean[]; double; null; this>
<cern.jet.stat.Descriptive; rms[int, double]; double; hep.aida.bin.AbstractBin1D; rms[]; double; null; Descriptive>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; rms[]; double; null; this>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; rms[]; double; null; this>
<java.lang.Math; sqrt[double]; double; hep.aida.bin.AbstractBin1D; standardDeviation[]; double; null; Math>
<hep.aida.bin.AbstractBin1D; variance[]; double; hep.aida.bin.AbstractBin1D; standardDeviation[]; double; null; this>
<cern.jet.stat.Descriptive; standardError[int, double]; double; hep.aida.bin.AbstractBin1D; standardError[]; double; null; Descriptive>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; standardError[]; double; null; this>
<hep.aida.bin.AbstractBin1D; variance[]; double; hep.aida.bin.AbstractBin1D; standardError[]; double; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<java.lang.Class; getName[]; java.lang.String; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends hep.aida.bin.AbstractBin1D>; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; getName[]; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; min[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; max[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; rms[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; variance[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; standardError[]; double; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.AbstractBin1D; toString[]; java.lang.String; null; buf>
<cern.jet.stat.Descriptive; sampleVariance[int, double, double]; double; hep.aida.bin.AbstractBin1D; variance[]; double; null; Descriptive>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin1D; variance[]; double; null; this>
<hep.aida.bin.AbstractBin1D; sum[]; double; hep.aida.bin.AbstractBin1D; variance[]; double; null; this>
<hep.aida.bin.AbstractBin1D; sumOfSquares[]; double; hep.aida.bin.AbstractBin1D; variance[]; double; null; this>
<hep.aida.bin.AbstractBin; center[int]; double; hep.aida.bin.AbstractBin; center[]; double; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin; size[]; int; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin; value[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin; value[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin; error[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin; error[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin; center[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.AbstractBin; center[]; double; hep.aida.bin.AbstractBin; equals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.AbstractBin; error[int]; double; hep.aida.bin.AbstractBin; error[]; double; null; this>
<hep.aida.bin.AbstractBin; offset[int]; double; hep.aida.bin.AbstractBin; offset[]; double; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin; toString[]; java.lang.String; null; buf>
<java.lang.Class; getName[]; java.lang.String; hep.aida.bin.AbstractBin; toString[]; java.lang.String; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends hep.aida.bin.AbstractBin>; hep.aida.bin.AbstractBin; toString[]; java.lang.String; getName[]; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.AbstractBin; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.AbstractBin; toString[]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin; value[int]; double; hep.aida.bin.AbstractBin; value[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; setMaxOrderForSumOfPowers[int]; void; hep.aida.bin.MightyStaticBin1D; MightyStaticBin1D[boolean, boolean, int]; void; null; this>
<hep.aida.bin.StaticBin1D; clear[]; void; hep.aida.bin.MightyStaticBin1D; MightyStaticBin1D[boolean, boolean, int]; void; null; this>
<cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; hep.aida.bin.MightyStaticBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; Descriptive>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.jet.stat.Descriptive; sumOfInversions[cern.colt.list.DoubleArrayList, int, int]; double; hep.aida.bin.MightyStaticBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; Descriptive>
<cern.jet.stat.Descriptive; sumOfLogarithms[cern.colt.list.DoubleArrayList, int, int]; double; hep.aida.bin.MightyStaticBin1D; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; Descriptive>
<java.lang.Object; clone[]; double[]; hep.aida.bin.MightyStaticBin1D; clone[]; java.lang.Object; null; clone.sumOfPowers>
<hep.aida.bin.MightyStaticBin1D; hasSumOfLogarithms[]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfLogarithms[]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<hep.aida.bin.MightyStaticBin1D; hasSumOfInversions[]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfInversions[]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; skew[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; skew[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<hep.aida.bin.AbstractBin1D; relError[double, double]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; m>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.MightyStaticBin1D; compareWith[hep.aida.bin.AbstractBin1D]; java.lang.String; null; buf>
<cern.jet.stat.Descriptive; geometricMean[int, double]; double; hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; null; Descriptive>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfLogarithms[]; double; hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfInversions[]; boolean; hep.aida.bin.MightyStaticBin1D; getMinOrderForSumOfPowers[]; int; null; this>
<cern.jet.stat.Descriptive; harmonicMean[int, double]; double; hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; null; Descriptive>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfInversions[]; double; hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; getMinOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; null; this>
<cern.jet.stat.Descriptive; kurtosis[double, double]; double; hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; null; Descriptive>
<hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<java.lang.Math; min[int, int]; int; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; Math>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; sumOfPows>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; sumOfPows>
<hep.aida.bin.StaticBin1D; sum[]; double; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; add[double]; this>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; sumOfPows>
<hep.aida.bin.StaticBin1D; sumOfSquares[]; double; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; sumOfPows>
<hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<cern.jet.stat.Descriptive; moment[int, double, int, double[]]; double; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; Descriptive>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; null; sumOfPows>
<cern.jet.stat.Descriptive; product[int, double]; double; hep.aida.bin.MightyStaticBin1D; product[]; double; null; Descriptive>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; product[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfLogarithms[]; double; hep.aida.bin.MightyStaticBin1D; product[]; double; null; this>
<cern.jet.stat.Descriptive; skew[double, double]; double; hep.aida.bin.MightyStaticBin1D; skew[]; double; null; Descriptive>
<hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; hep.aida.bin.MightyStaticBin1D; skew[]; double; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.MightyStaticBin1D; skew[]; double; null; this>
<hep.aida.bin.AbstractBin1D; standardDeviation[]; double; hep.aida.bin.MightyStaticBin1D; skew[]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfPowers[int]; boolean; hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfInversions[]; double; hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; null; this>
<hep.aida.bin.StaticBin1D; size[]; int; hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; null; this>
<hep.aida.bin.StaticBin1D; sum[]; double; hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; null; this>
<hep.aida.bin.StaticBin1D; sumOfSquares[]; double; hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfLogarithms[]; boolean; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; geometricMean[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; product[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; hasSumOfInversions[]; boolean; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; harmonicMean[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; sumOfInversions[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.Math; min[int, int]; int; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; Math>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; skew[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; kurtosis[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; sumOfPowers[int]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; moment[int, double]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<hep.aida.bin.AbstractBin1D; mean[]; double; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; hep.aida.bin.MightyStaticBin1D; toString[]; java.lang.String; null; buf>
<hep.aida.bin.MightyStaticBin1D; sumOfInversions[]; double; hep.aida.bin.MightyStaticBin1D; xequals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfInversions[]; double; hep.aida.bin.MightyStaticBin1D; xequals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.MightyStaticBin1D; sumOfLogarithms[]; double; hep.aida.bin.MightyStaticBin1D; xequals[java.lang.Object]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; sumOfLogarithms[]; double; hep.aida.bin.MightyStaticBin1D; xequals[java.lang.Object]; boolean; null; other>
<hep.aida.bin.MightyStaticBin1D; getMinOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; xhasSumOfPowers[int, int]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; xhasSumOfPowers[int, int]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; getMinOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; xisLegalOrder[int]; boolean; null; this>
<hep.aida.bin.MightyStaticBin1D; getMaxOrderForSumOfPowers[]; int; hep.aida.bin.MightyStaticBin1D; xisLegalOrder[int]; boolean; null; this>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.Timer; Timer[]; void; null; this>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.Timer; display[]; cern.colt.Timer; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.Timer; elapsedTime[]; float; null; this>
<java.lang.System; currentTimeMillis[]; long; cern.colt.Timer; millis[]; long; null; System>
<cern.colt.Timer; millis[]; long; cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; null; this>
<cern.colt.Timer; millis[]; long; cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; null; other>
<cern.colt.Timer; seconds[]; float; cern.colt.Timer; minutes[]; float; null; this>
<cern.colt.Timer; millis[]; long; cern.colt.Timer; plus[cern.colt.Timer]; cern.colt.Timer; null; this>
<cern.colt.Timer; millis[]; long; cern.colt.Timer; plus[cern.colt.Timer]; cern.colt.Timer; null; other>
<cern.colt.Timer; millis[]; long; cern.colt.Timer; seconds[]; float; null; this>
<java.lang.System; currentTimeMillis[]; long; cern.colt.Timer; start[]; cern.colt.Timer; null; System>
<java.lang.System; currentTimeMillis[]; long; cern.colt.Timer; stop[]; cern.colt.Timer; null; System>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; new Timer()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.Timer; test[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; display[]; t>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; null; t.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.Timer; test[int]; void; display[]; t>
<java.lang.Float; toString[float]; java.lang.String; cern.colt.Timer; toString[]; java.lang.String; null; Float>
<cern.colt.Timer; elapsedTime[]; float; cern.colt.Timer; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractBooleanList; beforeInsert[int, boolean]; void; cern.colt.list.AbstractBooleanList; add[boolean]; void; null; this>
<cern.colt.list.AbstractBooleanList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractBooleanList, int, int]; void; cern.colt.list.AbstractBooleanList; addAllOfFromTo[cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractBooleanList; beforeInsert[int, boolean]; void; null; this>
<cern.colt.list.AbstractBooleanList; set[int, boolean]; void; cern.colt.list.AbstractBooleanList; beforeInsert[int, boolean]; void; null; this>
<cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractBooleanList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; cern.colt.list.AbstractBooleanList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; ensureCapacity[int]; void; cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; setSizeRaw[int]; void; cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; binarySearch[boolean]; int; null; this>
<cern.colt.list.AbstractBooleanList; toInt[boolean]; int; cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; get[int]; boolean; cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; toInt[boolean]; int; cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; toInt[boolean]; int; cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; cern.colt.list.AbstractBooleanList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; contains[boolean]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; delete[boolean]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractBooleanList; delete[boolean]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; elements[]; boolean[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractBooleanList; elements[boolean[]]; cern.colt.list.AbstractBooleanList; null; this>
<cern.colt.list.AbstractBooleanList; addAllOfFromTo[cern.colt.list.AbstractBooleanList, int, int]; void; cern.colt.list.AbstractBooleanList; elements[boolean[]]; cern.colt.list.AbstractBooleanList; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; fillFromToWith[int, int, boolean]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; fillFromToWith[int, int, boolean]; void; null; this>
<cern.colt.function.BooleanProcedure; apply[boolean]; boolean; cern.colt.list.AbstractBooleanList; forEach[cern.colt.function.BooleanProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractBooleanList; get[int]; boolean; cern.colt.list.AbstractBooleanList; forEach[cern.colt.function.BooleanProcedure]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; get[int]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; indexOf[boolean]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; lastIndexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; lastIndexOf[boolean]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; lastIndexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; lastIndexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; lastIndexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; null; this>
<cern.colt.list.AbstractBooleanList; addAllOfFromTo[cern.colt.list.AbstractBooleanList, int, int]; void; cern.colt.list.AbstractBooleanList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; null; part>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractBooleanList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; cern.colt.list.AbstractBooleanList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; setSizeRaw[int]; void; cern.colt.list.AbstractBooleanList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; other>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; other>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; other>
<cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; removeFromTo[int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; cern.colt.list.AbstractBooleanList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractBooleanList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractBooleanList; set[int, boolean]; void; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Boolean; booleanValue[]; boolean; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; ((Boolean)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; booleanValue[]; e>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractBooleanList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; reverse[]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; set[int, boolean]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; getQuick[int]; boolean; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; setQuick[int, boolean]; void; cern.colt.list.AbstractBooleanList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; times[int]; cern.colt.list.AbstractBooleanList; null; this>
<cern.colt.list.AbstractBooleanList; addAllOfFromTo[cern.colt.list.AbstractBooleanList, int, int]; void; cern.colt.list.AbstractBooleanList; times[int]; cern.colt.list.AbstractBooleanList; null; newList>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; times[int]; cern.colt.list.AbstractBooleanList; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractBooleanList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractBooleanList; get[int]; boolean; cern.colt.list.AbstractBooleanList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[boolean[]]; java.lang.String; cern.colt.list.AbstractBooleanList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractBooleanList; elements[]; boolean[]; cern.colt.list.AbstractBooleanList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractBooleanList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; cern.colt.list.AbstractBooleanList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.AbstractBooleanList; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractByteList; beforeInsert[int, byte]; void; cern.colt.list.AbstractByteList; add[byte]; void; null; this>
<cern.colt.list.AbstractByteList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractByteList, int, int]; void; cern.colt.list.AbstractByteList; addAllOfFromTo[cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractByteList; beforeInsert[int, byte]; void; null; this>
<cern.colt.list.AbstractByteList; set[int, byte]; void; cern.colt.list.AbstractByteList; beforeInsert[int, byte]; void; null; this>
<cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractByteList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; cern.colt.list.AbstractByteList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; ensureCapacity[int]; void; cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; binarySearchFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; binarySearch[byte]; int; null; this>
<cern.colt.list.AbstractByteList; get[int]; byte; cern.colt.list.AbstractByteList; binarySearchFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; partFromTo[int, int]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; contains[byte]; boolean; null; this>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; delete[byte]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractByteList; delete[byte]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; elements[]; byte[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; null; this>
<cern.colt.list.AbstractByteList; addAllOfFromTo[cern.colt.list.AbstractByteList, int, int]; void; cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; null; this>
<cern.colt.function.ByteProcedure; apply[byte]; boolean; cern.colt.list.AbstractByteList; forEach[cern.colt.function.ByteProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractByteList; get[int]; byte; cern.colt.list.AbstractByteList; forEach[cern.colt.function.ByteProcedure]; boolean; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; get[int]; byte; null; this>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; indexOf[byte]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; lastIndexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; lastIndexOf[byte]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; lastIndexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; lastIndexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; lastIndexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; elements[]; byte[]; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[byte[], int, int]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractByteList; elements[]; byte[]; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; mergeSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; partFromTo[int, int]; cern.colt.list.AbstractByteList; null; this>
<cern.colt.list.AbstractByteList; addAllOfFromTo[cern.colt.list.AbstractByteList, int, int]; void; cern.colt.list.AbstractByteList; partFromTo[int, int]; cern.colt.list.AbstractByteList; null; part>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; elements[]; byte[]; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[byte[], int, int]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractByteList; elements[]; byte[]; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; quickSort[byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractByteList; elements[byte[]]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; quickSortFromTo[int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractByteList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; cern.colt.list.AbstractByteList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.AbstractByteList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; other>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; other>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; other>
<cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; partFromTo[int, int]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; removeFromTo[int, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractByteList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; cern.colt.list.AbstractByteList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractByteList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractByteList; set[int, byte]; void; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; byteValue[]; byte; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; byteValue[]; e>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractByteList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; reverse[]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; set[int, byte]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; getQuick[int]; byte; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; setQuick[int, byte]; void; cern.colt.list.AbstractByteList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; times[int]; cern.colt.list.AbstractByteList; null; this>
<cern.colt.list.AbstractByteList; addAllOfFromTo[cern.colt.list.AbstractByteList, int, int]; void; cern.colt.list.AbstractByteList; times[int]; cern.colt.list.AbstractByteList; null; newList>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; times[int]; cern.colt.list.AbstractByteList; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractByteList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractByteList; get[int]; byte; cern.colt.list.AbstractByteList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[byte[]]; java.lang.String; cern.colt.list.AbstractByteList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractByteList; elements[]; byte[]; cern.colt.list.AbstractByteList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractByteList; partFromTo[int, int]; cern.colt.list.AbstractByteList; cern.colt.list.AbstractByteList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.AbstractByteList; toString[]; java.lang.String; null; this>
<cern.colt.list.ShortArrayList; elements[short[]]; cern.colt.list.AbstractShortList; cern.colt.list.ShortArrayList; ShortArrayList[short[]]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.ShortArrayList; ShortArrayList[int]; void; null; this>
<cern.colt.list.ShortArrayList; ensureCapacity[int]; void; cern.colt.list.ShortArrayList; add[short]; void; null; this>
<cern.colt.list.ShortArrayList; ensureCapacity[int]; void; cern.colt.list.ShortArrayList; beforeInsert[int, short]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ShortArrayList; beforeInsert[int, short]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[short[], short, int, int]; int; cern.colt.list.ShortArrayList; binarySearchFromTo[short, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; short[]; cern.colt.list.ShortArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.ShortArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.ShortArrayList; clone[]; java.lang.Object; cern.colt.list.ShortArrayList; copy[]; cern.colt.list.ShortArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; countSortFromTo[int, int, short, short]; void; null; this>
<cern.colt.list.AbstractShortList; fillFromToWith[int, int, short]; void; cern.colt.list.ShortArrayList; countSortFromTo[int, int, short, short]; void; null; this>
<cern.colt.Arrays; ensureCapacity[short[], int]; short[]; cern.colt.list.ShortArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.ShortArrayList; elements[]; short[]; cern.colt.list.ShortArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.ShortArrayList; elements[]; short[]; cern.colt.list.ShortArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.ShortProcedure; apply[short]; boolean; cern.colt.list.ShortArrayList; forEach[cern.colt.function.ShortProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; indexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; lastIndexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; partFromTo[int, int]; cern.colt.list.AbstractShortList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ShortArrayList; partFromTo[int, int]; cern.colt.list.AbstractShortList; null; System>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractShortList; clone[]; java.lang.Object; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; sortedList>
<cern.colt.list.ShortArrayList; binarySearchFromTo[short, int, int]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; sortedList>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ShortArrayList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ShortArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; System>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractShortList; clone[]; java.lang.Object; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; sortedList>
<cern.colt.list.ShortArrayList; binarySearchFromTo[short, int, int]; int; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; sortedList>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ShortArrayList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.ShortArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ShortArrayList; sortFromTo[int, int]; void; null; this>
<java.lang.Math; log[double]; double; cern.colt.list.ShortArrayList; sortFromTo[int, int]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.list.ShortArrayList; sortFromTo[int, int]; void; null; Math>
<cern.colt.list.ShortArrayList; countSortFromTo[int, int, short, short]; void; cern.colt.list.ShortArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; cern.colt.list.ShortArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[short[], int]; short[]; cern.colt.list.ShortArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.ShortArrayList; trimToSize[]; void; null; this>
<cern.colt.list.CharArrayList; elements[char[]]; cern.colt.list.AbstractCharList; cern.colt.list.CharArrayList; CharArrayList[char[]]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.CharArrayList; CharArrayList[int]; void; null; this>
<cern.colt.list.CharArrayList; ensureCapacity[int]; void; cern.colt.list.CharArrayList; add[char]; void; null; this>
<cern.colt.list.CharArrayList; ensureCapacity[int]; void; cern.colt.list.CharArrayList; beforeInsert[int, char]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.CharArrayList; beforeInsert[int, char]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[char[], char, int, int]; int; cern.colt.list.CharArrayList; binarySearchFromTo[char, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; char[]; cern.colt.list.CharArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.CharArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.CharArrayList; clone[]; java.lang.Object; cern.colt.list.CharArrayList; copy[]; cern.colt.list.CharArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; countSortFromTo[int, int, char, char]; void; null; this>
<cern.colt.list.AbstractCharList; fillFromToWith[int, int, char]; void; cern.colt.list.CharArrayList; countSortFromTo[int, int, char, char]; void; null; this>
<cern.colt.Arrays; ensureCapacity[char[], int]; char[]; cern.colt.list.CharArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.CharArrayList; elements[]; char[]; cern.colt.list.CharArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.CharArrayList; elements[]; char[]; cern.colt.list.CharArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.CharProcedure; apply[char]; boolean; cern.colt.list.CharArrayList; forEach[cern.colt.function.CharProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; indexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; lastIndexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; partFromTo[int, int]; cern.colt.list.AbstractCharList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.CharArrayList; partFromTo[int, int]; cern.colt.list.AbstractCharList; null; System>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractCharList; clone[]; java.lang.Object; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; sortedList>
<cern.colt.list.CharArrayList; binarySearchFromTo[char, int, int]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; sortedList>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.CharArrayList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.CharArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; System>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractCharList; clone[]; java.lang.Object; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; sortedList>
<cern.colt.list.CharArrayList; binarySearchFromTo[char, int, int]; int; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; sortedList>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.CharArrayList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.CharArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.CharArrayList; sortFromTo[int, int]; void; null; this>
<java.lang.Math; log[double]; double; cern.colt.list.CharArrayList; sortFromTo[int, int]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.list.CharArrayList; sortFromTo[int, int]; void; null; Math>
<cern.colt.list.CharArrayList; countSortFromTo[int, int, char, char]; void; cern.colt.list.CharArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; cern.colt.list.CharArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[char[], int]; char[]; cern.colt.list.CharArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.CharArrayList; trimToSize[]; void; null; this>
<cern.colt.list.FloatArrayList; elements[float[]]; cern.colt.list.AbstractFloatList; cern.colt.list.FloatArrayList; FloatArrayList[float[]]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.FloatArrayList; FloatArrayList[int]; void; null; this>
<cern.colt.list.FloatArrayList; ensureCapacity[int]; void; cern.colt.list.FloatArrayList; add[float]; void; null; this>
<cern.colt.list.FloatArrayList; ensureCapacity[int]; void; cern.colt.list.FloatArrayList; beforeInsert[int, float]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.FloatArrayList; beforeInsert[int, float]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[float[], float, int, int]; int; cern.colt.list.FloatArrayList; binarySearchFromTo[float, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; float[]; cern.colt.list.FloatArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.FloatArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.FloatArrayList; clone[]; java.lang.Object; cern.colt.list.FloatArrayList; copy[]; cern.colt.list.FloatArrayList; setSizeRaw[int]; this>
<cern.colt.Arrays; ensureCapacity[float[], int]; float[]; cern.colt.list.FloatArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.FloatArrayList; elements[]; float[]; cern.colt.list.FloatArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.FloatArrayList; elements[]; float[]; cern.colt.list.FloatArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.FloatProcedure; apply[float]; boolean; cern.colt.list.FloatArrayList; forEach[cern.colt.function.FloatProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; indexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; lastIndexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.FloatArrayList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; null; System>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractFloatList; clone[]; java.lang.Object; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; sortedList>
<cern.colt.list.FloatArrayList; binarySearchFromTo[float, int, int]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; sortedList>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.FloatArrayList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.FloatArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; System>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractFloatList; clone[]; java.lang.Object; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; sortedList>
<cern.colt.list.FloatArrayList; binarySearchFromTo[float, int, int]; int; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; sortedList>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.FloatArrayList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.FloatArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.FloatArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.Arrays; trimToCapacity[float[], int]; float[]; cern.colt.list.FloatArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.FloatArrayList; trimToSize[]; void; null; this>
<cern.colt.list.AbstractShortList; beforeInsert[int, short]; void; cern.colt.list.AbstractShortList; add[short]; void; null; this>
<cern.colt.list.AbstractShortList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractShortList, int, int]; void; cern.colt.list.AbstractShortList; addAllOfFromTo[cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractShortList; beforeInsert[int, short]; void; null; this>
<cern.colt.list.AbstractShortList; set[int, short]; void; cern.colt.list.AbstractShortList; beforeInsert[int, short]; void; null; this>
<cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractShortList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; cern.colt.list.AbstractShortList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; ensureCapacity[int]; void; cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; binarySearchFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; binarySearch[short]; int; null; this>
<cern.colt.list.AbstractShortList; get[int]; short; cern.colt.list.AbstractShortList; binarySearchFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; partFromTo[int, int]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; contains[short]; boolean; null; this>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; delete[short]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractShortList; delete[short]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; elements[]; short[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; null; this>
<cern.colt.list.AbstractShortList; addAllOfFromTo[cern.colt.list.AbstractShortList, int, int]; void; cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; fillFromToWith[int, int, short]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; fillFromToWith[int, int, short]; void; null; this>
<cern.colt.function.ShortProcedure; apply[short]; boolean; cern.colt.list.AbstractShortList; forEach[cern.colt.function.ShortProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractShortList; get[int]; short; cern.colt.list.AbstractShortList; forEach[cern.colt.function.ShortProcedure]; boolean; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; get[int]; short; null; this>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; indexOf[short]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; lastIndexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; lastIndexOf[short]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; lastIndexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; lastIndexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; lastIndexOfFromTo[short, int, int]; int; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; elements[]; short[]; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[short[], int, int]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractShortList; elements[]; short[]; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; mergeSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; partFromTo[int, int]; cern.colt.list.AbstractShortList; null; this>
<cern.colt.list.AbstractShortList; addAllOfFromTo[cern.colt.list.AbstractShortList, int, int]; void; cern.colt.list.AbstractShortList; partFromTo[int, int]; cern.colt.list.AbstractShortList; null; part>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; elements[]; short[]; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[short[], int, int]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractShortList; elements[]; short[]; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; quickSort[short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractShortList; elements[short[]]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; quickSortFromTo[int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractShortList; removeAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; cern.colt.list.AbstractShortList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setSizeRaw[int]; void; cern.colt.list.AbstractShortList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; other>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; other>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; null; other>
<cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; partFromTo[int, int]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; removeFromTo[int, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractShortList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractShortList, int]; void; cern.colt.list.AbstractShortList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractShortList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractShortList; set[int, short]; void; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; shortValue[]; short; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; shortValue[]; e>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; indexOfFromTo[short, int, int]; int; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; other>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractShortList; retainAll[cern.colt.list.AbstractShortList]; boolean; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; reverse[]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; set[int, short]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; getQuick[int]; short; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; setQuick[int, short]; void; cern.colt.list.AbstractShortList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; times[int]; cern.colt.list.AbstractShortList; null; this>
<cern.colt.list.AbstractShortList; addAllOfFromTo[cern.colt.list.AbstractShortList, int, int]; void; cern.colt.list.AbstractShortList; times[int]; cern.colt.list.AbstractShortList; null; newList>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; times[int]; cern.colt.list.AbstractShortList; null; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractShortList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractShortList; get[int]; short; cern.colt.list.AbstractShortList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[short[]]; java.lang.String; cern.colt.list.AbstractShortList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractShortList; elements[]; short[]; cern.colt.list.AbstractShortList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractShortList; partFromTo[int, int]; cern.colt.list.AbstractShortList; cern.colt.list.AbstractShortList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractShortList; size[]; int; cern.colt.list.AbstractShortList; toString[]; java.lang.String; null; this>
<cern.colt.list.LongArrayList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.LongArrayList; LongArrayList[long[]]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.LongArrayList; LongArrayList[int]; void; null; this>
<cern.colt.list.LongArrayList; ensureCapacity[int]; void; cern.colt.list.LongArrayList; add[long]; void; null; this>
<cern.colt.list.LongArrayList; ensureCapacity[int]; void; cern.colt.list.LongArrayList; beforeInsert[int, long]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.LongArrayList; beforeInsert[int, long]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[long[], long, int, int]; int; cern.colt.list.LongArrayList; binarySearchFromTo[long, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; long[]; cern.colt.list.LongArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.LongArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.LongArrayList; clone[]; java.lang.Object; cern.colt.list.LongArrayList; copy[]; cern.colt.list.LongArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; countSortFromTo[int, int, long, long]; void; null; this>
<cern.colt.list.AbstractLongList; fillFromToWith[int, int, long]; void; cern.colt.list.LongArrayList; countSortFromTo[int, int, long, long]; void; null; this>
<cern.colt.Arrays; ensureCapacity[long[], int]; long[]; cern.colt.list.LongArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.LongArrayList; elements[]; long[]; cern.colt.list.LongArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.LongArrayList; elements[]; long[]; cern.colt.list.LongArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.LongProcedure; apply[long]; boolean; cern.colt.list.LongArrayList; forEach[cern.colt.function.LongProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; indexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; lastIndexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; partFromTo[int, int]; cern.colt.list.AbstractLongList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.LongArrayList; partFromTo[int, int]; cern.colt.list.AbstractLongList; null; System>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractLongList; clone[]; java.lang.Object; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; sortedList>
<cern.colt.list.LongArrayList; binarySearchFromTo[long, int, int]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; sortedList>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.LongArrayList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.LongArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; System>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractLongList; clone[]; java.lang.Object; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; sortedList>
<cern.colt.list.LongArrayList; binarySearchFromTo[long, int, int]; int; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; sortedList>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.LongArrayList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.LongArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.LongArrayList; sortFromTo[int, int]; void; null; this>
<java.lang.Math; log[double]; double; cern.colt.list.LongArrayList; sortFromTo[int, int]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.list.LongArrayList; sortFromTo[int, int]; void; null; Math>
<cern.colt.list.LongArrayList; countSortFromTo[int, int, long, long]; void; cern.colt.list.LongArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; cern.colt.list.LongArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[long[], int]; long[]; cern.colt.list.LongArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.LongArrayList; trimToSize[]; void; null; this>
<cern.colt.list.AbstractIntList; beforeInsert[int, int]; void; cern.colt.list.AbstractIntList; add[int]; void; null; this>
<cern.colt.list.AbstractIntList; addAllOfFromTo[cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; addAllOf[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; addAllOf[cern.colt.list.IntArrayList]; void; null; other>
<cern.colt.list.AbstractIntList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; addAllOfFromTo[cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractIntList; beforeInsert[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; set[int, int]; void; cern.colt.list.AbstractIntList; beforeInsert[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractIntList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; cern.colt.list.AbstractIntList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; ensureCapacity[int]; void; cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; binarySearchFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; binarySearch[int]; int; null; this>
<cern.colt.list.AbstractIntList; get[int]; int; cern.colt.list.AbstractIntList; binarySearchFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; partFromTo[int, int]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; contains[int]; boolean; null; this>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; delete[int]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractIntList; delete[int]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; elements[]; int[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; null; this>
<cern.colt.list.AbstractIntList; addAllOfFromTo[cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; fillFromToWith[int, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; fillFromToWith[int, int, int]; void; null; this>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.list.AbstractIntList; forEach[cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractIntList; get[int]; int; cern.colt.list.AbstractIntList; forEach[cern.colt.function.IntProcedure]; boolean; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; get[int]; int; null; this>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; indexOf[int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; lastIndexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; lastIndexOf[int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; lastIndexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; lastIndexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; lastIndexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; elements[]; int[]; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[int[], int, int]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractIntList; elements[]; int[]; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; mergeSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; partFromTo[int, int]; cern.colt.list.AbstractIntList; null; this>
<cern.colt.list.AbstractIntList; addAllOfFromTo[cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; partFromTo[int, int]; cern.colt.list.AbstractIntList; null; part>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; elements[]; int[]; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[int[], int, int]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractIntList; elements[]; int[]; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; quickSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractIntList; elements[int[]]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; quickSortFromTo[int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractIntList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; cern.colt.list.AbstractIntList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.AbstractIntList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; other>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; other>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; other>
<cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; partFromTo[int, int]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; removeFromTo[int, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; cern.colt.list.AbstractIntList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractIntList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractIntList; set[int, int]; void; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; intValue[]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; intValue[]; e>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractIntList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; reverse[]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; set[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; getQuick[int]; int; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; setQuick[int, int]; void; cern.colt.list.AbstractIntList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; times[int]; cern.colt.list.AbstractIntList; null; this>
<cern.colt.list.AbstractIntList; addAllOfFromTo[cern.colt.list.AbstractIntList, int, int]; void; cern.colt.list.AbstractIntList; times[int]; cern.colt.list.AbstractIntList; null; newList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; times[int]; cern.colt.list.AbstractIntList; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractIntList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractIntList; get[int]; int; cern.colt.list.AbstractIntList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[int[]]; java.lang.String; cern.colt.list.AbstractIntList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractIntList; elements[]; int[]; cern.colt.list.AbstractIntList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractIntList; partFromTo[int, int]; cern.colt.list.AbstractIntList; cern.colt.list.AbstractIntList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.AbstractIntList; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractCollection; isEmpty[]; boolean; null; this>
<java.util.AbstractCollection; toString[]; java.lang.String; cern.colt.list.AbstractCollection; toString[]; java.lang.String; null; toList()>
<cern.colt.list.AbstractCollection; toList[]; java.util.ArrayList; cern.colt.list.AbstractCollection; toString[]; java.lang.String; toString[]; this>
<cern.colt.list.AbstractFloatList; beforeInsert[int, float]; void; cern.colt.list.AbstractFloatList; add[float]; void; null; this>
<cern.colt.list.AbstractFloatList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractFloatList, int, int]; void; cern.colt.list.AbstractFloatList; addAllOfFromTo[cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractFloatList; beforeInsert[int, float]; void; null; this>
<cern.colt.list.AbstractFloatList; set[int, float]; void; cern.colt.list.AbstractFloatList; beforeInsert[int, float]; void; null; this>
<cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractFloatList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; cern.colt.list.AbstractFloatList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; ensureCapacity[int]; void; cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; binarySearchFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; binarySearch[float]; int; null; this>
<cern.colt.list.AbstractFloatList; get[int]; float; cern.colt.list.AbstractFloatList; binarySearchFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; contains[float]; boolean; null; this>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; delete[float]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractFloatList; delete[float]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; elements[]; float[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; null; this>
<cern.colt.list.AbstractFloatList; addAllOfFromTo[cern.colt.list.AbstractFloatList, int, int]; void; cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; fillFromToWith[int, int, float]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; fillFromToWith[int, int, float]; void; null; this>
<cern.colt.function.FloatProcedure; apply[float]; boolean; cern.colt.list.AbstractFloatList; forEach[cern.colt.function.FloatProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractFloatList; get[int]; float; cern.colt.list.AbstractFloatList; forEach[cern.colt.function.FloatProcedure]; boolean; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; get[int]; float; null; this>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; indexOf[float]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; lastIndexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; lastIndexOf[float]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; lastIndexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; lastIndexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; lastIndexOfFromTo[float, int, int]; int; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; elements[]; float[]; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[float[], int, int]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractFloatList; elements[]; float[]; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; mergeSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; null; this>
<cern.colt.list.AbstractFloatList; addAllOfFromTo[cern.colt.list.AbstractFloatList, int, int]; void; cern.colt.list.AbstractFloatList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; null; part>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; elements[]; float[]; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[float[], int, int]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractFloatList; elements[]; float[]; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; quickSort[float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractFloatList; elements[float[]]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; quickSortFromTo[int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractFloatList; removeAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; cern.colt.list.AbstractFloatList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setSizeRaw[int]; void; cern.colt.list.AbstractFloatList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; other>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; other>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; null; other>
<cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; removeFromTo[int, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractFloatList, int]; void; cern.colt.list.AbstractFloatList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractFloatList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractFloatList; set[int, float]; void; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; floatValue[]; float; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; floatValue[]; e>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; indexOfFromTo[float, int, int]; int; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; other>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractFloatList; retainAll[cern.colt.list.AbstractFloatList]; boolean; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; reverse[]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; set[int, float]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; getQuick[int]; float; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; setQuick[int, float]; void; cern.colt.list.AbstractFloatList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; times[int]; cern.colt.list.AbstractFloatList; null; this>
<cern.colt.list.AbstractFloatList; addAllOfFromTo[cern.colt.list.AbstractFloatList, int, int]; void; cern.colt.list.AbstractFloatList; times[int]; cern.colt.list.AbstractFloatList; null; newList>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; times[int]; cern.colt.list.AbstractFloatList; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractFloatList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractFloatList; get[int]; float; cern.colt.list.AbstractFloatList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[float[]]; java.lang.String; cern.colt.list.AbstractFloatList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractFloatList; elements[]; float[]; cern.colt.list.AbstractFloatList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractFloatList; partFromTo[int, int]; cern.colt.list.AbstractFloatList; cern.colt.list.AbstractFloatList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.AbstractFloatList; toString[]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; elements[java.lang.Object[]]; cern.colt.list.ObjectArrayList; cern.colt.list.ObjectArrayList; ObjectArrayList[java.lang.Object[]]; void; null; this>
<cern.colt.list.ObjectArrayList; ensureCapacity[int]; void; cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; null; this>
<cern.colt.list.ObjectArrayList; beforeInsertAllOfFromTo[int, cern.colt.list.ObjectArrayList, int, int]; void; cern.colt.list.ObjectArrayList; addAllOfFromTo[cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; ensureCapacity[int]; void; cern.colt.list.ObjectArrayList; beforeInsert[int, java.lang.Object]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; beforeInsert[int, java.lang.Object]; void; null; System>
<cern.colt.list.ObjectArrayList; beforeInsertDummies[int, int]; void; cern.colt.list.ObjectArrayList; beforeInsertAllOfFromTo[int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; replaceFromToWithFrom[int, int, cern.colt.list.ObjectArrayList, int]; void; cern.colt.list.ObjectArrayList; beforeInsertAllOfFromTo[int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; ensureCapacity[int]; void; cern.colt.list.ObjectArrayList; beforeInsertDummies[int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; beforeInsertDummies[int, int]; void; null; System>
<cern.colt.list.ObjectArrayList; binarySearchFromTo[java.lang.Object, int, int]; int; cern.colt.list.ObjectArrayList; binarySearch[java.lang.Object]; int; null; this>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.list.ObjectArrayList; binarySearchFromTo[java.lang.Object, int, int]; int; null; ((Comparable)midVal)>
<cern.colt.Sorting; binarySearchFromTo[java.lang.Object[], java.lang.Object, int, int, java.util.Comparator]; int; cern.colt.list.ObjectArrayList; binarySearchFromTo[java.lang.Object, int, int, java.util.Comparator]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; java.lang.Object[]; cern.colt.list.ObjectArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; contains[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.list.ObjectArrayList; clone[]; java.lang.Object; cern.colt.list.ObjectArrayList; copy[]; cern.colt.list.ObjectArrayList; null; this>
<cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; delete[java.lang.Object, boolean]; void; null; this>
<cern.colt.list.ObjectArrayList; removeFromTo[int, int]; void; cern.colt.list.ObjectArrayList; delete[java.lang.Object, boolean]; void; null; this>
<cern.colt.Arrays; ensureCapacity[java.lang.Object[], int]; java.lang.Object[]; cern.colt.list.ObjectArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.ObjectArrayList; equals[java.lang.Object, boolean]; boolean; cern.colt.list.ObjectArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.list.ObjectArrayList; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.ObjectArrayList; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.list.ObjectArrayList; equals[java.lang.Object, boolean]; boolean; null; other>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; equals[java.lang.Object, boolean]; boolean; null; theElements[i]>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; fillFromToWith[int, int, java.lang.Object]; void; null; this>
<cern.colt.list.ObjectArrayList; setQuick[int, java.lang.Object]; void; cern.colt.list.ObjectArrayList; fillFromToWith[int, int, java.lang.Object]; void; null; this>
<cern.colt.function.ObjectProcedure; apply[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; forEach[cern.colt.function.ObjectProcedure]; boolean; null; procedure>
<cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; indexOf[java.lang.Object, boolean]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; null; element>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; isSortedFromTo[int, int]; boolean; null; this>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.list.ObjectArrayList; isSortedFromTo[int, int]; boolean; null; ((Comparable)theElements[i])>
<cern.colt.list.ObjectArrayList; lastIndexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; lastIndexOf[java.lang.Object, boolean]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; lastIndexOfFromTo[java.lang.Object, int, int, boolean]; int; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; lastIndexOfFromTo[java.lang.Object, int, int, boolean]; int; null; element>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; mergeSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[java.lang.Object[], int, int]; void; cern.colt.list.ObjectArrayList; mergeSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; mergeSortFromTo[int, int, java.util.Comparator]; void; null; this>
<java.util.Arrays; sort[java.lang.Object[], int, int, java.util.Comparator<? super java.lang.Object>]; void; cern.colt.list.ObjectArrayList; mergeSortFromTo[int, int, java.util.Comparator]; void; null; java.util.Arrays>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; partFromTo[int, int]; cern.colt.list.ObjectArrayList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; partFromTo[int, int]; cern.colt.list.ObjectArrayList; null; System>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; quickSort[java.lang.Object[], int, int]; void; cern.colt.list.ObjectArrayList; quickSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; quickSortFromTo[int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; quickSort[java.lang.Object[], int, int, java.util.Comparator]; void; cern.colt.list.ObjectArrayList; quickSortFromTo[int, int, java.util.Comparator]; void; null; cern.colt.Sorting>
<cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; removeAll[cern.colt.list.ObjectArrayList, boolean]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ObjectArrayList; removeAll[cern.colt.list.ObjectArrayList, boolean]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; removeFromTo[int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; removeFromTo[int, int]; void; null; System>
<cern.colt.list.ObjectArrayList; fillFromToWith[int, int, java.lang.Object]; void; cern.colt.list.ObjectArrayList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFrom[int, int, cern.colt.list.ObjectArrayList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFrom[int, int, cern.colt.list.ObjectArrayList, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFrom[int, int, cern.colt.list.ObjectArrayList, int]; void; null; System>
<cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; partFromTo[int, int]; cern.colt.list.ObjectArrayList; cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; beforeInsertDummies[int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<cern.colt.list.ObjectArrayList; removeFromTo[int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ObjectArrayList; replaceFromToWithFromTo[int, int, cern.colt.list.ObjectArrayList, int, int]; void; null; System>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<java.util.Collection; size[]; int; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; e>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ObjectArrayList; retainAll[cern.colt.list.ObjectArrayList, boolean]; boolean; null; this>
<cern.colt.list.ObjectArrayList; indexOfFromTo[java.lang.Object, int, int, boolean]; int; cern.colt.list.ObjectArrayList; retainAll[cern.colt.list.ObjectArrayList, boolean]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ObjectArrayList; retainAll[cern.colt.list.ObjectArrayList, boolean]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ObjectArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.ObjectArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.ObjectArrayList; addAllOfFromTo[cern.colt.list.ObjectArrayList, int, int]; void; cern.colt.list.ObjectArrayList; times[int]; cern.colt.list.ObjectArrayList; null; newList>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.ObjectArrayList; times[int]; cern.colt.list.ObjectArrayList; null; this>
<java.lang.reflect.Array; newInstance[java.lang.Class<?>, int]; java.lang.Object; cern.colt.list.ObjectArrayList; toArray[java.lang.Object[]]; java.lang.Object[]; null; java.lang.reflect.Array>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; cern.colt.list.ObjectArrayList; toArray[java.lang.Object[]]; java.lang.Object[]; null; array.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object[]>; cern.colt.list.ObjectArrayList; toArray[java.lang.Object[]]; java.lang.Object[]; getComponentType[]; array>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.ObjectArrayList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; toList[]; java.util.ArrayList; null; list>
<cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; cern.colt.list.ObjectArrayList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.list.ObjectArrayList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.ObjectArrayList; partFromTo[int, int]; cern.colt.list.ObjectArrayList; cern.colt.list.ObjectArrayList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.ObjectArrayList; toString[]; java.lang.String; null; this>
<cern.colt.Arrays; trimToCapacity[java.lang.Object[], int]; java.lang.Object[]; cern.colt.list.ObjectArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.ObjectArrayList; trimToSize[]; void; null; this>
<cern.colt.list.AbstractCharList; beforeInsert[int, char]; void; cern.colt.list.AbstractCharList; add[char]; void; null; this>
<cern.colt.list.AbstractCharList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractCharList, int, int]; void; cern.colt.list.AbstractCharList; addAllOfFromTo[cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractCharList; beforeInsert[int, char]; void; null; this>
<cern.colt.list.AbstractCharList; set[int, char]; void; cern.colt.list.AbstractCharList; beforeInsert[int, char]; void; null; this>
<cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractCharList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; cern.colt.list.AbstractCharList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; ensureCapacity[int]; void; cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; binarySearchFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; binarySearch[char]; int; null; this>
<cern.colt.list.AbstractCharList; get[int]; char; cern.colt.list.AbstractCharList; binarySearchFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; partFromTo[int, int]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; contains[char]; boolean; null; this>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; delete[char]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractCharList; delete[char]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; elements[]; char[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; null; this>
<cern.colt.list.AbstractCharList; addAllOfFromTo[cern.colt.list.AbstractCharList, int, int]; void; cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; fillFromToWith[int, int, char]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; fillFromToWith[int, int, char]; void; null; this>
<cern.colt.function.CharProcedure; apply[char]; boolean; cern.colt.list.AbstractCharList; forEach[cern.colt.function.CharProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractCharList; get[int]; char; cern.colt.list.AbstractCharList; forEach[cern.colt.function.CharProcedure]; boolean; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; get[int]; char; null; this>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; indexOf[char]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; lastIndexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; lastIndexOf[char]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; lastIndexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; lastIndexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; lastIndexOfFromTo[char, int, int]; int; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; elements[]; char[]; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[char[], int, int]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractCharList; elements[]; char[]; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; mergeSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; partFromTo[int, int]; cern.colt.list.AbstractCharList; null; this>
<cern.colt.list.AbstractCharList; addAllOfFromTo[cern.colt.list.AbstractCharList, int, int]; void; cern.colt.list.AbstractCharList; partFromTo[int, int]; cern.colt.list.AbstractCharList; null; part>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; elements[]; char[]; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[char[], int, int]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractCharList; elements[]; char[]; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; quickSort[char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractCharList; elements[char[]]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; quickSortFromTo[int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractCharList; removeAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; cern.colt.list.AbstractCharList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setSizeRaw[int]; void; cern.colt.list.AbstractCharList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; other>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; other>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; null; other>
<cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; partFromTo[int, int]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; removeFromTo[int, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractCharList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractCharList, int]; void; cern.colt.list.AbstractCharList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractCharList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractCharList; set[int, char]; void; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Character; charValue[]; char; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; ((Character)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; charValue[]; e>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; indexOfFromTo[char, int, int]; int; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; other>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractCharList; retainAll[cern.colt.list.AbstractCharList]; boolean; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; reverse[]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; set[int, char]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; getQuick[int]; char; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; setQuick[int, char]; void; cern.colt.list.AbstractCharList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; times[int]; cern.colt.list.AbstractCharList; null; this>
<cern.colt.list.AbstractCharList; addAllOfFromTo[cern.colt.list.AbstractCharList, int, int]; void; cern.colt.list.AbstractCharList; times[int]; cern.colt.list.AbstractCharList; null; newList>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; times[int]; cern.colt.list.AbstractCharList; null; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractCharList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractCharList; get[int]; char; cern.colt.list.AbstractCharList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[char[]]; java.lang.String; cern.colt.list.AbstractCharList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractCharList; elements[]; char[]; cern.colt.list.AbstractCharList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractCharList; partFromTo[int, int]; cern.colt.list.AbstractCharList; cern.colt.list.AbstractCharList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractCharList; size[]; int; cern.colt.list.AbstractCharList; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.SimpleLongArrayList; SimpleLongArrayList[long[]]; void; null; this>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.SimpleLongArrayList; SimpleLongArrayList[int]; void; null; this>
<cern.colt.Arrays; ensureCapacity[long[], int]; long[]; cern.colt.list.SimpleLongArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.Arrays; trimToCapacity[long[], int]; long[]; cern.colt.list.SimpleLongArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.SimpleLongArrayList; trimToSize[]; void; null; this>
<cern.colt.list.ByteArrayList; elements[byte[]]; cern.colt.list.AbstractByteList; cern.colt.list.ByteArrayList; ByteArrayList[byte[]]; void; null; this>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.ByteArrayList; ByteArrayList[int]; void; null; this>
<cern.colt.list.ByteArrayList; ensureCapacity[int]; void; cern.colt.list.ByteArrayList; add[byte]; void; null; this>
<cern.colt.list.ByteArrayList; ensureCapacity[int]; void; cern.colt.list.ByteArrayList; beforeInsert[int, byte]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ByteArrayList; beforeInsert[int, byte]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[byte[], byte, int, int]; int; cern.colt.list.ByteArrayList; binarySearchFromTo[byte, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; byte[]; cern.colt.list.ByteArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractByteList; setSizeRaw[int]; void; cern.colt.list.ByteArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.ByteArrayList; clone[]; java.lang.Object; cern.colt.list.ByteArrayList; copy[]; cern.colt.list.ByteArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; countSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.list.ByteArrayList; countSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; countSortFromTo[int, int, byte, byte]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.list.ByteArrayList; countSortFromTo[int, int, byte, byte]; void; null; this>
<cern.colt.Arrays; ensureCapacity[byte[], int]; byte[]; cern.colt.list.ByteArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.ByteArrayList; elements[]; byte[]; cern.colt.list.ByteArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.ByteArrayList; elements[]; byte[]; cern.colt.list.ByteArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.ByteProcedure; apply[byte]; boolean; cern.colt.list.ByteArrayList; forEach[cern.colt.function.ByteProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; indexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; lastIndexOfFromTo[byte, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; partFromTo[int, int]; cern.colt.list.AbstractByteList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ByteArrayList; partFromTo[int, int]; cern.colt.list.AbstractByteList; null; System>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractByteList; clone[]; java.lang.Object; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; sortedList>
<cern.colt.list.ByteArrayList; binarySearchFromTo[byte, int, int]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; sortedList>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ByteArrayList; removeAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.ByteArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractByteList, int]; void; null; System>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractByteList; clone[]; java.lang.Object; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; sortedList>
<cern.colt.list.ByteArrayList; binarySearchFromTo[byte, int, int]; int; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; sortedList>
<cern.colt.list.AbstractByteList; indexOfFromTo[byte, int, int]; int; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.ByteArrayList; retainAll[cern.colt.list.AbstractByteList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.ByteArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.ByteArrayList; shuffleFromTo[int, int]; void; null; gen>
<java.lang.Math; log[double]; double; cern.colt.list.ByteArrayList; sortFromTo[int, int]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.list.ByteArrayList; sortFromTo[int, int]; void; null; Math>
<cern.colt.list.ByteArrayList; countSortFromTo[int, int]; void; cern.colt.list.ByteArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractByteList; quickSortFromTo[int, int]; void; cern.colt.list.ByteArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[byte[], int]; byte[]; cern.colt.list.ByteArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractByteList; size[]; int; cern.colt.list.ByteArrayList; trimToSize[]; void; null; this>
<cern.colt.list.AbstractDoubleList; beforeInsert[int, double]; void; cern.colt.list.AbstractDoubleList; add[double]; void; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; addAllOf[cern.colt.list.DoubleArrayList]; void; null; other>
<cern.colt.list.AbstractDoubleList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractDoubleList; beforeInsert[int, double]; void; null; this>
<cern.colt.list.AbstractDoubleList; set[int, double]; void; cern.colt.list.AbstractDoubleList; beforeInsert[int, double]; void; null; this>
<cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractDoubleList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; cern.colt.list.AbstractDoubleList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; ensureCapacity[int]; void; cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; binarySearchFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; binarySearch[double]; int; null; this>
<cern.colt.list.AbstractDoubleList; get[int]; double; cern.colt.list.AbstractDoubleList; binarySearchFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; contains[double]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; delete[double]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractDoubleList; delete[double]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; elements[]; double[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; fillFromToWith[int, int, double]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; fillFromToWith[int, int, double]; void; null; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.list.AbstractDoubleList; forEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractDoubleList; get[int]; double; cern.colt.list.AbstractDoubleList; forEach[cern.colt.function.DoubleProcedure]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; get[int]; double; null; this>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; indexOf[double]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; lastIndexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; lastIndexOf[double]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; lastIndexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; lastIndexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; lastIndexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; elements[]; double[]; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[double[], int, int]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractDoubleList; elements[]; double[]; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; mergeSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; null; part>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; elements[]; double[]; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[double[], int, int]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractDoubleList; elements[]; double[]; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; quickSort[double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractDoubleList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; quickSortFromTo[int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractDoubleList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; other>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; other>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; other>
<cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; cern.colt.list.AbstractDoubleList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractDoubleList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractDoubleList; set[int, double]; void; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; doubleValue[]; double; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; doubleValue[]; e>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractDoubleList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; reverse[]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; set[int, double]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; cern.jet.random.Uniform>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; getQuick[int]; double; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; setQuick[int, double]; void; cern.colt.list.AbstractDoubleList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; times[int]; cern.colt.list.AbstractDoubleList; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.colt.list.AbstractDoubleList; times[int]; cern.colt.list.AbstractDoubleList; null; newList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; times[int]; cern.colt.list.AbstractDoubleList; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractDoubleList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractDoubleList; get[int]; double; cern.colt.list.AbstractDoubleList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.list.AbstractDoubleList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractDoubleList; elements[]; double[]; cern.colt.list.AbstractDoubleList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractDoubleList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; cern.colt.list.AbstractDoubleList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.AbstractDoubleList; toString[]; java.lang.String; null; this>
<cern.colt.list.BooleanArrayList; elements[boolean[]]; cern.colt.list.AbstractBooleanList; cern.colt.list.BooleanArrayList; BooleanArrayList[boolean[]]; void; null; this>
<cern.colt.list.AbstractBooleanList; setSizeRaw[int]; void; cern.colt.list.BooleanArrayList; BooleanArrayList[int]; void; null; this>
<cern.colt.list.BooleanArrayList; ensureCapacity[int]; void; cern.colt.list.BooleanArrayList; add[boolean]; void; null; this>
<cern.colt.list.BooleanArrayList; ensureCapacity[int]; void; cern.colt.list.BooleanArrayList; beforeInsert[int, boolean]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.BooleanArrayList; beforeInsert[int, boolean]; void; null; System>
<java.lang.Object; clone[]; boolean[]; cern.colt.list.BooleanArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractBooleanList; setSizeRaw[int]; void; cern.colt.list.BooleanArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.BooleanArrayList; clone[]; java.lang.Object; cern.colt.list.BooleanArrayList; copy[]; cern.colt.list.BooleanArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; fillFromToWith[int, int, boolean]; void; cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; fillFromToWith[int, int, boolean]; void; cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; ensureCapacity[boolean[], int]; boolean[]; cern.colt.list.BooleanArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.BooleanArrayList; elements[]; boolean[]; cern.colt.list.BooleanArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.BooleanArrayList; elements[]; boolean[]; cern.colt.list.BooleanArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.BooleanProcedure; apply[boolean]; boolean; cern.colt.list.BooleanArrayList; forEach[cern.colt.function.BooleanProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; indexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; lastIndexOfFromTo[boolean, int, int]; int; null; this>
<cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; cern.colt.list.BooleanArrayList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.BooleanArrayList; partFromTo[int, int]; cern.colt.list.AbstractBooleanList; null; System>
<cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; cern.colt.list.BooleanArrayList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractBooleanList; clone[]; java.lang.Object; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; sortedList>
<cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; sortedList>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.BooleanArrayList; removeAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.BooleanArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractBooleanList, int]; void; null; System>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractBooleanList; clone[]; java.lang.Object; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; sortedList>
<cern.colt.list.AbstractBooleanList; binarySearchFromTo[boolean, int, int]; int; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; sortedList>
<cern.colt.list.AbstractBooleanList; indexOfFromTo[boolean, int, int]; int; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.BooleanArrayList; retainAll[cern.colt.list.AbstractBooleanList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.BooleanArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.BooleanArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.BooleanArrayList; countSortFromTo[int, int]; void; cern.colt.list.BooleanArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[boolean[], int]; boolean[]; cern.colt.list.BooleanArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.colt.list.BooleanArrayList; trimToSize[]; void; null; this>
<cern.colt.list.DoubleArrayList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.colt.list.DoubleArrayList; DoubleArrayList[double[]]; void; null; this>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.DoubleArrayList; DoubleArrayList[int]; void; null; this>
<cern.colt.list.DoubleArrayList; ensureCapacity[int]; void; cern.colt.list.DoubleArrayList; add[double]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; null; this>
<cern.colt.list.DoubleArrayList; ensureCapacity[int]; void; cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[double[], double, int, int]; int; cern.colt.list.DoubleArrayList; binarySearchFromTo[double, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; double[]; cern.colt.list.DoubleArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractDoubleList; setSizeRaw[int]; void; cern.colt.list.DoubleArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.DoubleArrayList; clone[]; java.lang.Object; cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; setSizeRaw[int]; this>
<cern.colt.Arrays; ensureCapacity[double[], int]; double[]; cern.colt.list.DoubleArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.list.DoubleArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.list.DoubleArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.list.DoubleArrayList; forEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; indexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; lastIndexOfFromTo[double, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.DoubleArrayList; partFromTo[int, int]; cern.colt.list.AbstractDoubleList; null; System>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractDoubleList; clone[]; java.lang.Object; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; sortedList>
<cern.colt.list.DoubleArrayList; binarySearchFromTo[double, int, int]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; sortedList>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.DoubleArrayList; removeAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; null; System>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractDoubleList; clone[]; java.lang.Object; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; sortedList>
<cern.colt.list.DoubleArrayList; binarySearchFromTo[double, int, int]; int; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; sortedList>
<cern.colt.list.AbstractDoubleList; indexOfFromTo[double, int, int]; int; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.DoubleArrayList; retainAll[cern.colt.list.AbstractDoubleList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.DoubleArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.DoubleArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.Arrays; trimToCapacity[double[], int]; double[]; cern.colt.list.DoubleArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.DoubleArrayList; trimToSize[]; void; null; this>
<cern.colt.list.IntArrayList; elements[int[]]; cern.colt.list.AbstractIntList; cern.colt.list.IntArrayList; IntArrayList[int[]]; void; null; this>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.IntArrayList; IntArrayList[int]; void; null; this>
<cern.colt.list.IntArrayList; ensureCapacity[int]; void; cern.colt.list.IntArrayList; add[int]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.list.IntArrayList; beforeInsert[int, int]; void; null; this>
<cern.colt.list.IntArrayList; ensureCapacity[int]; void; cern.colt.list.IntArrayList; beforeInsert[int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.IntArrayList; beforeInsert[int, int]; void; null; System>
<cern.colt.Sorting; binarySearchFromTo[int[], int, int, int]; int; cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; null; cern.colt.Sorting>
<java.lang.Object; clone[]; int[]; cern.colt.list.IntArrayList; clone[]; java.lang.Object; null; elements>
<cern.colt.list.AbstractIntList; setSizeRaw[int]; void; cern.colt.list.IntArrayList; clone[]; java.lang.Object; null; clone>
<cern.colt.list.IntArrayList; clone[]; java.lang.Object; cern.colt.list.IntArrayList; copy[]; cern.colt.list.IntArrayList; setSizeRaw[int]; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; countSortFromTo[int, int, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; fillFromToWith[int, int, int]; void; cern.colt.list.IntArrayList; countSortFromTo[int, int, int, int]; void; null; this>
<cern.colt.Arrays; ensureCapacity[int[], int]; int[]; cern.colt.list.IntArrayList; ensureCapacity[int]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.list.IntArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.list.IntArrayList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.list.IntArrayList; forEach[cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; indexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; lastIndexOfFromTo[int, int, int]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; partFromTo[int, int]; cern.colt.list.AbstractIntList; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.IntArrayList; partFromTo[int, int]; cern.colt.list.AbstractIntList; null; System>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractIntList; clone[]; java.lang.Object; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; sortedList>
<cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; sortedList>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.IntArrayList; removeAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; null; System>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.jet.math.Arithmetic; log2[double]; double; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; cern.jet.math.Arithmetic>
<cern.colt.list.AbstractIntList; clone[]; java.lang.Object; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractList; quickSort[]; void; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; sortedList>
<cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; sortedList>
<cern.colt.list.AbstractIntList; indexOfFromTo[int, int, int]; int; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.IntArrayList; retainAll[cern.colt.list.AbstractIntList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.IntArrayList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.IntArrayList; sortFromTo[int, int]; void; null; this>
<java.lang.Math; log[double]; double; cern.colt.list.IntArrayList; sortFromTo[int, int]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.list.IntArrayList; sortFromTo[int, int]; void; null; Math>
<cern.colt.list.IntArrayList; countSortFromTo[int, int, int, int]; void; cern.colt.list.IntArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; quickSortFromTo[int, int]; void; cern.colt.list.IntArrayList; sortFromTo[int, int]; void; null; this>
<cern.colt.Arrays; trimToCapacity[int[], int]; int[]; cern.colt.list.IntArrayList; trimToSize[]; void; null; cern.colt.Arrays>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.IntArrayList; trimToSize[]; void; null; this>
<cern.colt.list.AbstractLongList; beforeInsert[int, long]; void; cern.colt.list.AbstractLongList; add[long]; void; null; this>
<cern.colt.list.AbstractLongList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractLongList, int, int]; void; cern.colt.list.AbstractLongList; addAllOfFromTo[cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractLongList; beforeInsert[int, long]; void; null; this>
<cern.colt.list.AbstractLongList; set[int, long]; void; cern.colt.list.AbstractLongList; beforeInsert[int, long]; void; null; this>
<cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractLongList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; cern.colt.list.AbstractLongList; beforeInsertAllOfFromTo[int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; ensureCapacity[int]; void; cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; binarySearchFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; binarySearch[long]; int; null; this>
<cern.colt.list.AbstractLongList; get[int]; long; cern.colt.list.AbstractLongList; binarySearchFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; partFromTo[int, int]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; clone[]; java.lang.Object; null; this>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; contains[long]; boolean; null; this>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; delete[long]; void; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.AbstractLongList; delete[long]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; elements[]; long[]; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; null; this>
<cern.colt.list.AbstractLongList; addAllOfFromTo[cern.colt.list.AbstractLongList, int, int]; void; cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; equals[java.lang.Object]; boolean; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; equals[java.lang.Object]; boolean; null; other>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; fillFromToWith[int, int, long]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; fillFromToWith[int, int, long]; void; null; this>
<cern.colt.function.LongProcedure; apply[long]; boolean; cern.colt.list.AbstractLongList; forEach[cern.colt.function.LongProcedure]; boolean; null; procedure>
<cern.colt.list.AbstractLongList; get[int]; long; cern.colt.list.AbstractLongList; forEach[cern.colt.function.LongProcedure]; boolean; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; get[int]; long; null; this>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; indexOf[long]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; lastIndexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; lastIndexOf[long]; int; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; lastIndexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; lastIndexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; lastIndexOfFromTo[long, int, int]; int; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; elements[]; long[]; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.Sorting; mergeSort[long[], int, int]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractLongList; elements[]; long[]; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; mergeSort[long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; mergeSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; partFromTo[int, int]; cern.colt.list.AbstractLongList; null; this>
<cern.colt.list.AbstractLongList; addAllOfFromTo[cern.colt.list.AbstractLongList, int, int]; void; cern.colt.list.AbstractLongList; partFromTo[int, int]; cern.colt.list.AbstractLongList; null; part>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; elements[]; long[]; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; this>
<java.util.Arrays; sort[long[], int, int]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; java.util.Arrays>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractLongList; elements[]; long[]; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; quickSort[long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; cern.colt.Sorting>
<cern.colt.list.AbstractLongList; elements[long[]]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; quickSortFromTo[int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractLongList; removeAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; cern.colt.list.AbstractLongList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setSizeRaw[int]; void; cern.colt.list.AbstractLongList; removeFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; other>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; other>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; null; other>
<cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; partFromTo[int, int]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; removeFromTo[int, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractLongList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractLongList, int]; void; cern.colt.list.AbstractLongList; replaceFromToWithFromTo[int, int, cern.colt.list.AbstractLongList, int, int]; void; null; this>
<cern.colt.list.AbstractList; checkRange[int, int]; void; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.lang.Math; min[int, int]; int; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; Math>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; other>
<cern.colt.list.AbstractLongList; set[int, long]; void; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; this>
<java.lang.Number; longValue[]; long; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; ((Number)e.next())>
<java.util.Iterator; next[]; java.lang.Object; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; longValue[]; e>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; indexOfFromTo[long, int, int]; int; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; other>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.list.AbstractLongList; retainAll[cern.colt.list.AbstractLongList]; boolean; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; reverse[]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; set[int, long]; void; null; this>
<cern.colt.list.AbstractList; checkRangeFromTo[int, int, int]; void; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; gen>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; getQuick[int]; long; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; setQuick[int, long]; void; cern.colt.list.AbstractLongList; shuffleFromTo[int, int]; void; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; times[int]; cern.colt.list.AbstractLongList; null; this>
<cern.colt.list.AbstractLongList; addAllOfFromTo[cern.colt.list.AbstractLongList, int, int]; void; cern.colt.list.AbstractLongList; times[int]; cern.colt.list.AbstractLongList; null; newList>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; times[int]; cern.colt.list.AbstractLongList; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; toList[]; java.util.ArrayList; null; this>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractLongList; toList[]; java.util.ArrayList; null; list>
<cern.colt.list.AbstractLongList; get[int]; long; cern.colt.list.AbstractLongList; toList[]; java.util.ArrayList; null; this>
<cern.colt.Arrays; toString[long[]]; java.lang.String; cern.colt.list.AbstractLongList; toString[]; java.lang.String; null; cern.colt.Arrays>
<cern.colt.list.AbstractLongList; elements[]; long[]; cern.colt.list.AbstractLongList; toString[]; java.lang.String; null; partFromTo(0,size() - 1)>
<cern.colt.list.AbstractLongList; partFromTo[int, int]; cern.colt.list.AbstractLongList; cern.colt.list.AbstractLongList; toString[]; java.lang.String; elements[]; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.AbstractLongList; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractList; beforeInsertAllOf[int, java.util.Collection]; void; cern.colt.list.AbstractList; addAllOf[java.util.Collection]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; addAllOf[java.util.Collection]; void; null; this>
<cern.colt.list.AbstractList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractList; beforeInsertAllOf[int, java.util.Collection]; void; null; this>
<java.util.Collection; size[]; int; cern.colt.list.AbstractList; beforeInsertAllOf[int, java.util.Collection]; void; null; collection>
<cern.colt.list.AbstractList; replaceFromWith[int, java.util.Collection]; void; cern.colt.list.AbstractList; beforeInsertAllOf[int, java.util.Collection]; void; null; this>
<cern.colt.list.AbstractList; removeFromTo[int, int]; void; cern.colt.list.AbstractList; clear[]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; clear[]; void; null; this>
<cern.colt.list.AbstractList; mergeSortFromTo[int, int]; void; cern.colt.list.AbstractList; mergeSort[]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; mergeSort[]; void; null; this>
<cern.colt.list.AbstractList; quickSortFromTo[int, int]; void; cern.colt.list.AbstractList; quickSort[]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; quickSort[]; void; null; this>
<cern.colt.list.AbstractList; removeFromTo[int, int]; void; cern.colt.list.AbstractList; remove[int]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; setSize[int]; void; null; this>
<cern.colt.list.AbstractList; beforeInsertDummies[int, int]; void; cern.colt.list.AbstractList; setSize[int]; void; null; this>
<cern.colt.list.AbstractList; removeFromTo[int, int]; void; cern.colt.list.AbstractList; setSize[int]; void; null; this>
<cern.colt.list.AbstractList; shuffleFromTo[int, int]; void; cern.colt.list.AbstractList; shuffle[]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; shuffle[]; void; null; this>
<cern.colt.list.AbstractList; sortFromTo[int, int]; void; cern.colt.list.AbstractList; sort[]; void; null; this>
<cern.colt.list.AbstractCollection; size[]; int; cern.colt.list.AbstractList; sort[]; void; null; this>
<cern.colt.list.AbstractList; quickSortFromTo[int, int]; void; cern.colt.list.AbstractList; sortFromTo[int, int]; void; null; this>
<cern.colt.list.MinMaxNumberList; setUp[long, long, int]; void; cern.colt.list.MinMaxNumberList; MinMaxNumberList[long, long, int]; void; null; this>
<cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; cern.colt.list.MinMaxNumberList; add[long]; void; null; this>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.list.MinMaxNumberList; add[long]; void; null; QuickBitVector>
<cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; cern.colt.list.MinMaxNumberList; addAllOfFromTo[long[], int, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.list.MinMaxNumberList; addAllOfFromTo[long[], int, int]; void; null; QuickBitVector>
<java.lang.Math; round[double]; long; cern.colt.list.MinMaxNumberList; bitsPerElement[long, long]; int; null; Math>
<java.lang.Math; ceil[double]; double; cern.colt.list.MinMaxNumberList; bitsPerElement[long, long]; int; null; Math>
<cern.jet.math.Arithmetic; log[double, double]; double; cern.colt.list.MinMaxNumberList; bitsPerElement[long, long]; int; null; cern.jet.math.Arithmetic>
<cern.colt.list.MinMaxNumberList; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; null; this>
<cern.colt.bitvector.BitVector; setSize[int]; void; cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; null; vector>
<cern.colt.bitvector.BitVector; elements[]; long[]; cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; null; vector>
<cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; cern.colt.list.MinMaxNumberList; getQuick[int]; long; null; QuickBitVector>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.list.MinMaxNumberList; partFromTo[int, int, cern.colt.bitvector.BitVector, int, long[], int]; void; null; qualificants>
<cern.colt.bitvector.BitVector; get[int]; boolean; cern.colt.list.MinMaxNumberList; partFromTo[int, int, cern.colt.bitvector.BitVector, int, long[], int]; void; null; qualificants>
<cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; cern.colt.list.MinMaxNumberList; partFromTo[int, int, cern.colt.bitvector.BitVector, int, long[], int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.list.MinMaxNumberList; setQuick[int, long]; void; null; QuickBitVector>
<cern.colt.list.MinMaxNumberList; setUpBitsPerEntry[long, long]; void; cern.colt.list.MinMaxNumberList; setUp[long, long, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; makeBitVector[int, int]; long[]; cern.colt.list.MinMaxNumberList; setUp[long, long, int]; void; null; QuickBitVector>
<cern.colt.list.MinMaxNumberList; bitsPerElement[long, long]; int; cern.colt.list.MinMaxNumberList; setUpBitsPerEntry[long, long]; void; null; this>
<cern.colt.list.MinMaxNumberList; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.list.MinMaxNumberList; trimToSize[]; void; null; this>
<cern.colt.bitvector.BitVector; setSize[int]; void; cern.colt.list.MinMaxNumberList; trimToSize[]; void; null; vector>
<cern.colt.bitvector.BitVector; elements[]; long[]; cern.colt.list.MinMaxNumberList; trimToSize[]; void; null; vector>
<cern.colt.list.DistinctNumberList; setUp[long[], int]; void; cern.colt.list.DistinctNumberList; DistinctNumberList[long[], int]; void; null; this>
<cern.colt.list.MinMaxNumberList; add[long]; void; cern.colt.list.DistinctNumberList; add[long]; void; null; elements>
<cern.colt.list.DistinctNumberList; codeOf[long]; int; cern.colt.list.DistinctNumberList; add[long]; void; null; this>
<java.util.Arrays; binarySearch[long[], long]; int; cern.colt.list.DistinctNumberList; codeOf[long]; int; null; java.util.Arrays>
<cern.colt.list.MinMaxNumberList; ensureCapacity[int]; void; cern.colt.list.DistinctNumberList; ensureCapacity[int]; void; null; elements>
<cern.colt.list.MinMaxNumberList; getQuick[int]; long; cern.colt.list.DistinctNumberList; getQuick[int]; long; null; elements>
<cern.colt.list.AbstractLongList; removeFromTo[int, int]; void; cern.colt.list.DistinctNumberList; removeFromTo[int, int]; void; null; elements>
<cern.colt.list.MinMaxNumberList; setQuick[int, long]; void; cern.colt.list.DistinctNumberList; setQuick[int, long]; void; null; elements>
<cern.colt.list.DistinctNumberList; codeOf[long]; int; cern.colt.list.DistinctNumberList; setQuick[int, long]; void; null; this>
<cern.colt.list.MinMaxNumberList; setSizeRaw[int]; void; cern.colt.list.DistinctNumberList; setSizeRaw[int]; void; null; elements>
<cern.colt.list.MinMaxNumberList; trimToSize[]; void; cern.colt.list.DistinctNumberList; trimToSize[]; void; null; elements>
<cern.colt.list.AbstractFloatList; beforeInsert[int, float]; void; cern.colt.list.adapter.FloatListAdapter; add[int, java.lang.Object]; void; null; content>
<cern.colt.list.adapter.FloatListAdapter; value[java.lang.Object]; float; cern.colt.list.adapter.FloatListAdapter; add[int, java.lang.Object]; void; null; this>
<cern.colt.list.adapter.FloatListAdapter; object[float]; java.lang.Object; cern.colt.list.adapter.FloatListAdapter; get[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractFloatList; get[int]; float; cern.colt.list.adapter.FloatListAdapter; get[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.FloatListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.FloatListAdapter; remove[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.adapter.FloatListAdapter; remove[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.FloatListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.FloatListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractFloatList; set[int, float]; void; cern.colt.list.adapter.FloatListAdapter; set[int, java.lang.Object]; java.lang.Object; null; content>
<cern.colt.list.adapter.FloatListAdapter; value[java.lang.Object]; float; cern.colt.list.adapter.FloatListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractFloatList; size[]; int; cern.colt.list.adapter.FloatListAdapter; size[]; int; null; content>
<java.lang.Number; floatValue[]; float; cern.colt.list.adapter.FloatListAdapter; value[java.lang.Object]; float; null; ((Number)element)>
<cern.colt.list.AbstractLongList; beforeInsert[int, long]; void; cern.colt.list.adapter.LongListAdapter; add[int, java.lang.Object]; void; null; content>
<cern.colt.list.adapter.LongListAdapter; value[java.lang.Object]; long; cern.colt.list.adapter.LongListAdapter; add[int, java.lang.Object]; void; null; this>
<cern.colt.list.adapter.LongListAdapter; object[long]; java.lang.Object; cern.colt.list.adapter.LongListAdapter; get[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractLongList; get[int]; long; cern.colt.list.adapter.LongListAdapter; get[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.LongListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.LongListAdapter; remove[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.adapter.LongListAdapter; remove[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.LongListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.LongListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractLongList; set[int, long]; void; cern.colt.list.adapter.LongListAdapter; set[int, java.lang.Object]; java.lang.Object; null; content>
<cern.colt.list.adapter.LongListAdapter; value[java.lang.Object]; long; cern.colt.list.adapter.LongListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.list.adapter.LongListAdapter; size[]; int; null; content>
<java.lang.Number; longValue[]; long; cern.colt.list.adapter.LongListAdapter; value[java.lang.Object]; long; null; ((Number)element)>
<cern.colt.list.ObjectArrayList; beforeInsert[int, java.lang.Object]; void; cern.colt.list.adapter.ObjectListAdapter; add[int, java.lang.Object]; void; null; content>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.list.adapter.ObjectListAdapter; get[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.ObjectListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.ObjectListAdapter; remove[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.adapter.ObjectListAdapter; remove[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.ObjectListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.ObjectListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; cern.colt.list.adapter.ObjectListAdapter; set[int, java.lang.Object]; java.lang.Object; null; content>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.list.adapter.ObjectListAdapter; size[]; int; null; content>
<cern.colt.list.AbstractDoubleList; beforeInsert[int, double]; void; cern.colt.list.adapter.DoubleListAdapter; add[int, java.lang.Object]; void; null; content>
<cern.colt.list.adapter.DoubleListAdapter; value[java.lang.Object]; double; cern.colt.list.adapter.DoubleListAdapter; add[int, java.lang.Object]; void; null; this>
<cern.colt.list.adapter.DoubleListAdapter; object[double]; java.lang.Object; cern.colt.list.adapter.DoubleListAdapter; get[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractDoubleList; get[int]; double; cern.colt.list.adapter.DoubleListAdapter; get[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.DoubleListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.DoubleListAdapter; remove[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.adapter.DoubleListAdapter; remove[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.DoubleListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.DoubleListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractDoubleList; set[int, double]; void; cern.colt.list.adapter.DoubleListAdapter; set[int, java.lang.Object]; java.lang.Object; null; content>
<cern.colt.list.adapter.DoubleListAdapter; value[java.lang.Object]; double; cern.colt.list.adapter.DoubleListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.list.adapter.DoubleListAdapter; size[]; int; null; content>
<java.lang.Number; doubleValue[]; double; cern.colt.list.adapter.DoubleListAdapter; value[java.lang.Object]; double; null; ((Number)element)>
<cern.colt.list.AbstractIntList; beforeInsert[int, int]; void; cern.colt.list.adapter.IntListAdapter; add[int, java.lang.Object]; void; null; content>
<cern.colt.list.adapter.IntListAdapter; value[java.lang.Object]; int; cern.colt.list.adapter.IntListAdapter; add[int, java.lang.Object]; void; null; this>
<cern.colt.list.adapter.IntListAdapter; object[int]; java.lang.Object; cern.colt.list.adapter.IntListAdapter; get[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractIntList; get[int]; int; cern.colt.list.adapter.IntListAdapter; get[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.IntListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.IntListAdapter; remove[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.list.adapter.IntListAdapter; remove[int]; java.lang.Object; null; content>
<cern.colt.list.adapter.IntListAdapter; get[int]; java.lang.Object; cern.colt.list.adapter.IntListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractIntList; set[int, int]; void; cern.colt.list.adapter.IntListAdapter; set[int, java.lang.Object]; java.lang.Object; null; content>
<cern.colt.list.adapter.IntListAdapter; value[java.lang.Object]; int; cern.colt.list.adapter.IntListAdapter; set[int, java.lang.Object]; java.lang.Object; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.list.adapter.IntListAdapter; size[]; int; null; content>
<java.lang.Number; intValue[]; int; cern.colt.list.adapter.IntListAdapter; value[java.lang.Object]; int; null; ((Number)element)>
<cern.colt.bitvector.BitVector; elements[long[], int]; void; cern.colt.bitvector.BitVector; BitVector[long[], int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; makeBitVector[int, int]; long[]; cern.colt.bitvector.BitVector; BitVector[int]; void; null; QuickBitVector>
<cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitVector; and[cern.colt.bitvector.BitVector]; void; null; this>
<cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitVector; andNot[cern.colt.bitvector.BitVector]; void; null; this>
<cern.colt.bitvector.BitVector; numberOfFullUnits[]; int; cern.colt.bitvector.BitVector; cardinality[]; int; null; this>
<cern.colt.bitvector.BitVector; numberOfBitsInPartialUnit[]; int; cern.colt.bitvector.BitVector; cardinality[]; int; null; this>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; null; other>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; null; other>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.bitvector.BitVector; clear[int]; void; null; String>
<cern.colt.bitvector.QuickBitVector; clear[long[], int]; void; cern.colt.bitvector.BitVector; clear[int]; void; null; QuickBitVector>
<java.lang.Object; clone[]; long[]; cern.colt.bitvector.BitVector; clone[]; java.lang.Object; null; this.bits>
<cern.colt.bitvector.BitVector; clone[]; java.lang.Object; cern.colt.bitvector.BitVector; copy[]; cern.colt.bitvector.BitVector; null; this>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; this>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; other>
<cern.colt.bitvector.BitVector; numberOfFullUnits[]; int; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; this>
<cern.colt.bitvector.BitVector; numberOfBitsInPartialUnit[]; int; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; this>
<cern.colt.bitvector.BitVector; get[int]; boolean; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; this>
<cern.colt.bitvector.BitVector; get[int]; boolean; cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; null; other>
<cern.colt.bitvector.BitVector; checkRangeFromTo[int, int, int]; void; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; this>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<java.lang.Math; min[int, int]; int; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; Math>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; QuickBitVector>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; null; procedure>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.bitvector.BitVector; get[int]; boolean; null; String>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitVector; get[int]; boolean; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; cern.colt.bitvector.BitVector; getLongFromTo[int, int]; long; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitVector; getQuick[int]; boolean; null; QuickBitVector>
<cern.colt.bitvector.BitVector; forEachIndexFromToInState[int, int, boolean, cern.colt.function.IntProcedure]; boolean; cern.colt.bitvector.BitVector; indexOfFromTo[int, int, boolean]; int; null; this>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; numberOfBitsInPartialUnit[]; int; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; numberOfFullUnits[]; int; null; QuickBitVector>
<cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitVector; or[cern.colt.bitvector.BitVector]; void; null; this>
<cern.colt.bitvector.BitVector; checkRangeFromTo[int, int, int]; void; cern.colt.bitvector.BitVector; partFromTo[int, int]; cern.colt.bitvector.BitVector; null; this>
<cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; cern.colt.bitvector.BitVector; partFromTo[int, int]; cern.colt.bitvector.BitVector; null; part>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.bitvector.BitVector; put[int, boolean]; void; null; String>
<cern.colt.bitvector.QuickBitVector; set[long[], int]; void; cern.colt.bitvector.BitVector; put[int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; clear[long[], int]; void; cern.colt.bitvector.BitVector; put[int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; putLongFromTo[long, int, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; set[long[], int]; void; cern.colt.bitvector.BitVector; putQuick[int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; clear[long[], int]; void; cern.colt.bitvector.BitVector; putQuick[int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.BitVector; checkRangeFromTo[int, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; this>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; source>
<cern.colt.bitvector.BitVector; copy[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; source>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; null; QuickBitVector>
<cern.colt.bitvector.BitVector; checkRangeFromTo[int, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; this>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; unit[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; offset[int]; int; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; null; QuickBitVector>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.bitvector.BitVector; set[int]; void; null; String>
<cern.colt.bitvector.QuickBitVector; set[long[], int]; void; cern.colt.bitvector.BitVector; set[int]; void; null; QuickBitVector>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; setSize[int]; void; null; this>
<cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; cern.colt.bitvector.BitVector; setSize[int]; void; null; newVector>
<java.lang.Math; min[int, int]; int; cern.colt.bitvector.BitVector; setSize[int]; void; null; Math>
<cern.colt.bitvector.BitVector; size[]; int; cern.colt.bitvector.BitVector; setSize[int]; void; null; this>
<cern.colt.bitvector.BitVector; elements[long[], int]; void; cern.colt.bitvector.BitVector; setSize[int]; void; null; this>
<cern.colt.bitvector.BitVector; elements[]; long[]; cern.colt.bitvector.BitVector; setSize[int]; void; null; newVector>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; buffer>
<cern.colt.bitvector.BitVector; get[int]; boolean; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; buffer>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.bitvector.BitVector; toString[]; java.lang.String; null; buffer>
<cern.colt.bitvector.BitVector; checkSize[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitVector; xor[cern.colt.bitvector.BitVector]; void; null; this>
<cern.colt.bitvector.BitMatrix; elements[long[], int, int]; void; cern.colt.bitvector.BitMatrix; BitMatrix[int, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; makeBitVector[int, int]; long[]; cern.colt.bitvector.BitMatrix; BitMatrix[int, int]; void; null; QuickBitVector>
<cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; cern.colt.bitvector.BitMatrix; and[cern.colt.bitvector.BitMatrix]; void; null; this>
<cern.colt.bitvector.BitVector; and[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitMatrix; and[cern.colt.bitvector.BitMatrix]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; and[cern.colt.bitvector.BitMatrix]; void; and[cern.colt.bitvector.BitVector]; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; and[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; cern.colt.bitvector.BitMatrix; andNot[cern.colt.bitvector.BitMatrix]; void; null; this>
<cern.colt.bitvector.BitVector; andNot[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitMatrix; andNot[cern.colt.bitvector.BitMatrix]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; andNot[cern.colt.bitvector.BitMatrix]; void; andNot[cern.colt.bitvector.BitVector]; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; andNot[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitVector; cardinality[]; int; cern.colt.bitvector.BitMatrix; cardinality[]; int; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; cardinality[]; int; cardinality[]; this>
<cern.colt.bitvector.BitMatrix; columns[]; int; cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitMatrix; rows[]; int; cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitMatrix; columns[]; int; cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitMatrix; rows[]; int; cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitVector; clear[]; void; cern.colt.bitvector.BitMatrix; clear[]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; clear[]; void; clear[]; this>
<java.lang.Object; clone[]; long[]; cern.colt.bitvector.BitMatrix; clone[]; java.lang.Object; null; this.bits>
<cern.colt.bitvector.BitMatrix; clone[]; java.lang.Object; cern.colt.bitvector.BitMatrix; copy[]; cern.colt.bitvector.BitMatrix; null; this>
<cern.colt.bitvector.BitMatrix; columns[]; int; cern.colt.bitvector.BitMatrix; equals[java.lang.Object]; boolean; null; other>
<cern.colt.bitvector.BitMatrix; rows[]; int; cern.colt.bitvector.BitMatrix; equals[java.lang.Object]; boolean; null; other>
<cern.colt.bitvector.BitVector; equals[java.lang.Object]; boolean; cern.colt.bitvector.BitMatrix; equals[java.lang.Object]; boolean; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; equals[java.lang.Object]; boolean; null; other>
<cern.colt.bitvector.BitMatrix; size[]; int; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; this>
<cern.colt.bitvector.BitMatrix; size[]; int; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; this>
<cern.colt.bitvector.BitVector; numberOfBitsInPartialUnit[]; int; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; vector>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; procedure>
<cern.colt.bitvector.BitVector; numberOfFullUnits[]; int; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; vector>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; procedure>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; cern.colt.bitvector.BitMatrix; forEachCoordinateInState[boolean, cern.colt.function.IntIntProcedure]; boolean; null; procedure>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitMatrix; get[int, int]; boolean; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; get[long[], int]; boolean; cern.colt.bitvector.BitMatrix; getQuick[int, int]; boolean; null; QuickBitVector>
<cern.colt.bitvector.BitVector; hashCode[]; int; cern.colt.bitvector.BitMatrix; hashCode[]; int; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; hashCode[]; int; hashCode[]; this>
<cern.colt.bitvector.BitVector; not[]; void; cern.colt.bitvector.BitMatrix; not[]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; not[]; void; not[]; this>
<cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; cern.colt.bitvector.BitMatrix; or[cern.colt.bitvector.BitMatrix]; void; null; this>
<cern.colt.bitvector.BitVector; or[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitMatrix; or[cern.colt.bitvector.BitMatrix]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; or[cern.colt.bitvector.BitMatrix]; void; or[cern.colt.bitvector.BitVector]; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; or[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; cern.colt.bitvector.BitMatrix; part[int, int, int, int]; cern.colt.bitvector.BitMatrix; null; subMatrix>
<cern.colt.bitvector.QuickBitVector; put[long[], int, boolean]; void; cern.colt.bitvector.BitMatrix; put[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.QuickBitVector; put[long[], int, boolean]; void; cern.colt.bitvector.BitMatrix; putQuick[int, int, boolean]; void; null; QuickBitVector>
<cern.colt.bitvector.BitMatrix; containsBox[int, int, int, int]; void; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; this>
<cern.colt.bitvector.BitMatrix; containsBox[int, int, int, int]; void; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; source>
<java.awt.Rectangle; intersects[java.awt.Rectangle]; boolean; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; destRect>
<cern.colt.bitvector.BitMatrix; copy[]; cern.colt.bitvector.BitMatrix; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; source>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; source>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; this>
<cern.colt.bitvector.BitMatrix; columns[]; int; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; source>
<cern.colt.bitvector.BitVector; replaceFromToWith[int, int, cern.colt.bitvector.BitVector, int]; void; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, cern.colt.bitvector.BitMatrix, int, int]; void; null; destVector>
<cern.colt.bitvector.BitMatrix; containsBox[int, int, int, int]; void; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, boolean]; void; null; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, boolean]; void; null; this>
<cern.colt.bitvector.BitVector; replaceFromToWith[int, int, boolean]; void; cern.colt.bitvector.BitMatrix; replaceBoxWith[int, int, int, int, boolean]; void; null; destVector>
<cern.colt.bitvector.BitMatrix; size[]; int; cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; null; this>
<cern.colt.bitvector.BitVector; toString[]; java.lang.String; cern.colt.bitvector.BitMatrix; toString[]; java.lang.String; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; toString[]; java.lang.String; toString[]; this>
<cern.colt.bitvector.BitMatrix; checkDimensionCompatibility[cern.colt.bitvector.BitMatrix]; void; cern.colt.bitvector.BitMatrix; xor[cern.colt.bitvector.BitMatrix]; void; null; this>
<cern.colt.bitvector.BitVector; xor[cern.colt.bitvector.BitVector]; void; cern.colt.bitvector.BitMatrix; xor[cern.colt.bitvector.BitMatrix]; void; null; toBitVector()>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; xor[cern.colt.bitvector.BitMatrix]; void; xor[cern.colt.bitvector.BitVector]; this>
<cern.colt.bitvector.BitMatrix; toBitVector[]; cern.colt.bitvector.BitVector; cern.colt.bitvector.BitMatrix; xor[cern.colt.bitvector.BitMatrix]; void; null; other>
<cern.colt.bitvector.QuickBitVector; precomputePows[]; long[]; cern.colt.bitvector.BitMatrix; xor[cern.colt.bitvector.BitMatrix]; void; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; getLongFromTo[long[], int, int]; long; null; this>
<cern.colt.bitvector.QuickBitVector; set[long[], int]; void; cern.colt.bitvector.QuickBitVector; put[long[], int, boolean]; void; null; this>
<cern.colt.bitvector.QuickBitVector; clear[long[], int]; void; cern.colt.bitvector.QuickBitVector; put[long[], int, boolean]; void; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; null; this>
<cern.colt.bitvector.QuickBitVector; bitMaskWithBitsSetFromTo[int, int]; long; cern.colt.bitvector.QuickBitVector; putLongFromTo[long[], long, int, int]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; binarySearchFromTo[java.lang.Object[], java.lang.Object, int, int, java.util.Comparator]; int; null; comparator>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; binarySearchFromTo[int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.Sorting; lower_bound[int[], int, int, int]; int; cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; null; this>
<cern.colt.Sorting; upper_bound[int[], int, int, int]; int; cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; null; this>
<cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; null; this>
<cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; null; this>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; null; comp>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; null; comp>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; null; comp>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; null; comp>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; null; comp>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; null; comp>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; null; comp>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; null; comp>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; null; comp>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; null; comp>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; null; comp>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; null; comp>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; null; comp>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; null; comp>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; null; ((Comparable)x[a])>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; null; ((Comparable)x[a])>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; null; ((Comparable)x[b])>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; null; comp>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; null; comp>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; null; comp>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[byte[], int, int]; void; null; this>
<java.lang.Object; clone[]; byte[]; cern.colt.Sorting; mergeSort[byte[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; cern.colt.Sorting; mergeSort[byte[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<java.lang.Object; clone[]; byte[]; cern.colt.Sorting; mergeSort[byte[], int, int, cern.colt.function.ByteComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; mergeSort[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[char[], int, int]; void; null; this>
<java.lang.Object; clone[]; char[]; cern.colt.Sorting; mergeSort[char[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; cern.colt.Sorting; mergeSort[char[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<java.lang.Object; clone[]; char[]; cern.colt.Sorting; mergeSort[char[], int, int, cern.colt.function.CharComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; mergeSort[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; mergeSort2[double[], int, int]; void; cern.colt.Sorting; mergeSort[double[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<java.lang.Object; clone[]; double[]; cern.colt.Sorting; mergeSort[double[], int, int, cern.colt.function.DoubleComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; mergeSort[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; mergeSort2[float[], int, int]; void; cern.colt.Sorting; mergeSort[float[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<java.lang.Object; clone[]; float[]; cern.colt.Sorting; mergeSort[float[], int, int, cern.colt.function.FloatComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; mergeSort[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[int[], int, int]; void; null; this>
<java.lang.Object; clone[]; int[]; cern.colt.Sorting; mergeSort[int[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; cern.colt.Sorting; mergeSort[int[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<java.lang.Object; clone[]; int[]; cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[long[], int, int]; void; null; this>
<java.lang.Object; clone[]; long[]; cern.colt.Sorting; mergeSort[long[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; cern.colt.Sorting; mergeSort[long[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<java.lang.Object; clone[]; long[]; cern.colt.Sorting; mergeSort[long[], int, int, cern.colt.function.LongComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; mergeSort[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[short[], int, int]; void; null; this>
<java.lang.Object; clone[]; short[]; cern.colt.Sorting; mergeSort[short[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; cern.colt.Sorting; mergeSort[short[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<java.lang.Object; clone[]; short[]; cern.colt.Sorting; mergeSort[short[], int, int, cern.colt.function.ShortComparator]; void; null; a>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; mergeSort[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int]; void; null; System>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; c>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; System>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; mergeSort1[byte[], byte[], int, int, cern.colt.function.ByteComparator]; void; null; c>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int]; void; null; System>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; c>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; System>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; mergeSort1[char[], char[], int, int, cern.colt.function.CharComparator]; void; null; c>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; null; System>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; c>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; System>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; mergeSort1[double[], double[], int, int, cern.colt.function.DoubleComparator]; void; null; c>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; null; System>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; c>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; System>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; mergeSort1[float[], float[], int, int, cern.colt.function.FloatComparator]; void; null; c>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int]; void; null; System>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; c>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; System>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; mergeSort1[int[], int[], int, int, cern.colt.function.IntComparator]; void; null; c>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int]; void; null; System>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; c>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; System>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; mergeSort1[long[], long[], int, int, cern.colt.function.LongComparator]; void; null; c>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int]; void; null; System>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; c>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; c>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; System>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; mergeSort1[short[], short[], int, int, cern.colt.function.ShortComparator]; void; null; c>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; this>
<java.lang.Double; doubleToLongBits[double]; long; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; Double>
<java.lang.Double; doubleToLongBits[double]; long; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; Double>
<java.lang.Object; clone[]; double[]; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[double[], double[], int, int]; void; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; this>
<cern.colt.list.DoubleArrayList; binarySearchFromTo[double, int, int]; int; cern.colt.Sorting; mergeSort2[double[], int, int]; void; null; new cern.colt.list.DoubleArrayList(a)>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; this>
<java.lang.Float; floatToIntBits[float]; int; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; Float>
<java.lang.Float; floatToIntBits[float]; int; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; Float>
<java.lang.Object; clone[]; float[]; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; a>
<cern.colt.Sorting; mergeSort1[float[], float[], int, int]; void; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; this>
<cern.colt.list.FloatArrayList; binarySearchFromTo[float, int, int]; int; cern.colt.Sorting; mergeSort2[float[], int, int]; void; null; new cern.colt.list.FloatArrayList(a)>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; null; this>
<cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; null; this>
<cern.colt.Sorting; inplace_merge[int[], int, int, int]; void; cern.colt.Sorting; mergeSortInPlace[int[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; quickSort[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; quickSort[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; quickSort[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; quickSort[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; quickSort[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; quickSort[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort[java.lang.Object[]]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; cern.colt.Sorting; quickSort[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; cern.colt.Sorting; quickSort[java.lang.Object[], java.util.Comparator]; void; null; this>
<cern.colt.Sorting; rangeCheck[int, int, int]; void; cern.colt.Sorting; quickSort[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; quickSort[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; comp>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; med3[byte[], int, int, int, cern.colt.function.ByteComparator]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; comp>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.function.ByteComparator; compare[byte, byte]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; comp>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[byte[], int, int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[byte[], int, int, int]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; cern.colt.Sorting; quickSort1[byte[], int, int, cern.colt.function.ByteComparator]; void; null; this>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; comp>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; med3[char[], int, int, int, cern.colt.function.CharComparator]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; comp>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.function.CharComparator; compare[char, char]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; comp>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[char[], int, int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[char[], int, int, int]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; cern.colt.Sorting; quickSort1[char[], int, int, cern.colt.function.CharComparator]; void; null; this>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; comp>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; med3[double[], int, int, int, cern.colt.function.DoubleComparator]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; comp>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.function.DoubleComparator; compare[double, double]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; comp>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[double[], int, int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[double[], int, int, int]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; cern.colt.Sorting; quickSort1[double[], int, int, cern.colt.function.DoubleComparator]; void; null; this>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; comp>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; med3[float[], int, int, int, cern.colt.function.FloatComparator]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; comp>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.function.FloatComparator; compare[float, float]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; comp>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[float[], int, int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[float[], int, int, int]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; cern.colt.Sorting; quickSort1[float[], int, int, cern.colt.function.FloatComparator]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; comp>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; med3[int[], int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; comp>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; comp>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[int[], int, int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[int[], int, int, int]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.Sorting; quickSort1[int[], int, int, cern.colt.function.IntComparator]; void; null; this>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; comp>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; med3[long[], int, int, int, cern.colt.function.LongComparator]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; comp>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.function.LongComparator; compare[long, long]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; comp>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[long[], int, int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[long[], int, int, int]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; cern.colt.Sorting; quickSort1[long[], int, int, cern.colt.function.LongComparator]; void; null; this>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; ((Comparable)x[j - 1])>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; ((Comparable)x[b])>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<java.lang.Comparable; compareTo[java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; ((Comparable)x[c])>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; Math>
<cern.colt.Sorting; vecswap[java.lang.Object[], int, int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; Math>
<cern.colt.Sorting; vecswap[java.lang.Object[], int, int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; comp>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; comp>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; comp>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; Math>
<cern.colt.Sorting; vecswap[java.lang.Object[], int, int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; Math>
<cern.colt.Sorting; vecswap[java.lang.Object[], int, int, int]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; cern.colt.Sorting; quickSort1[java.lang.Object[], int, int, java.util.Comparator]; void; null; this>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; comp>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; med3[short[], int, int, int, cern.colt.function.ShortComparator]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; comp>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.function.ShortComparator; compare[short, short]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; comp>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[short[], int, int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; Math>
<cern.colt.Sorting; vecswap[short[], int, int, int]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; cern.colt.Sorting; quickSort1[short[], int, int, cern.colt.function.ShortComparator]; void; null; this>
<cern.colt.Sorting; swap[byte[], int, int]; void; cern.colt.Sorting; vecswap[byte[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[char[], int, int]; void; cern.colt.Sorting; vecswap[char[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[double[], int, int]; void; cern.colt.Sorting; vecswap[double[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[float[], int, int]; void; cern.colt.Sorting; vecswap[float[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[int[], int, int]; void; cern.colt.Sorting; vecswap[int[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[long[], int, int]; void; cern.colt.Sorting; vecswap[long[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[java.lang.Object[], int, int]; void; cern.colt.Sorting; vecswap[java.lang.Object[], int, int, int]; void; null; this>
<cern.colt.Sorting; swap[short[], int, int]; void; cern.colt.Sorting; vecswap[short[], int, int, int]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[int[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSortingTest; demo1[]; void; null; GenericSorting>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[int[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo1[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[int[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSortingTest; demo2[]; void; null; GenericSorting>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[int[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.colt.Arrays; toString[double[]]; java.lang.String; cern.colt.GenericSortingTest; demo2[]; void; null; Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; demo2[]; void; null; System.out>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<java.lang.Math; min[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; Math>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; A1>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.GenericSortingTest; testRandomly[int]; void; null; A1>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericSortingTest; testRandomly[int]; void; null; gen>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; A1>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; A2>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; cern.colt.matrix.doublealgo.Sorting.quickSort>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; cern.colt.matrix.doublealgo.Sorting.mergeSort>
<cern.colt.matrix.DoubleMatrix1D; equals[java.lang.Object]; boolean; cern.colt.GenericSortingTest; testRandomly[int]; void; null; S1.viewColumn(c)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.GenericSortingTest; testRandomly[int]; void; equals[java.lang.Object]; S1>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.GenericSortingTest; testRandomly[int]; void; null; S2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.GenericSortingTest; testRandomly[int]; void; null; System.out>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; binarySearchFromTo[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[double[], double, int, int]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; dualPartition[double[], double[], int, int, double]; int; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; dualPartition[double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; dualPartition[int[], int[], int, int, int]; int; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; dualPartition[int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; binarySearchFromTo[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; genericPartition[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp3>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp3>
<cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; genericPartition[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; int; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.Partitioning; genericPartition[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; int; null; swapper>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.Partitioning; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[double[], double, int, int]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; partition[double[], int, int, double]; int; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; partition[int[], int, int, int]; int; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<cern.colt.Partitioning; med3[java.lang.Object[], int, int, int, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[java.lang.Object[], java.lang.Object, int, int, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; Sorting>
<cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object, java.util.Comparator]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; comp>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; comp>
<cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator]; void; null; this>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; cern.colt.Partitioning; partition[java.lang.Object[], int, int, java.lang.Object, java.util.Comparator]; int; null; comp>
<cern.colt.Partitioning; partition[double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; partition[cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.Partitioning; partition[cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.Partitioning; partition[cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; splitters>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.Partitioning; partition[cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; splitters>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.Partitioning; partition[cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; splitIndexes>
<cern.colt.Partitioning; partition[int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; partition[cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.Partitioning; partition[cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.Partitioning; partition[cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; splitters>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.Partitioning; partition[cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; splitters>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.Partitioning; partition[cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; splitIndexes>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[double[], int, int, int]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[double[], double, int, int]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double]; int; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; cern.colt.Partitioning; triplePartition[double[], double[], double[], int, int, double[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; med3[int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Sorting; binarySearchFromTo[int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; Sorting>
<cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int]; int; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; cern.colt.Partitioning; triplePartition[int[], int[], int[], int, int, int[], int, int, int[]]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[byte[], int]; byte[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[char[], int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[double[], int]; double[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[float[], int]; float[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[int[], int]; int[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[long[], int]; long[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[java.lang.Object[], int]; java.lang.Object[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[short[], int]; short[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; ensureCapacity[boolean[], int]; boolean[]; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[byte[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; cern.colt.Arrays; toString[byte[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[byte[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[byte[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[byte[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[char[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.Arrays; toString[char[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[char[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[char[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[char[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[double]; java.lang.StringBuffer; cern.colt.Arrays; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[double[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[float[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[float]; java.lang.StringBuffer; cern.colt.Arrays; toString[float[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[float[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[float[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[float[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[int[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; cern.colt.Arrays; toString[int[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[int[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[int[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[int[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[long[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; cern.colt.Arrays; toString[long[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[long[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[long[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[long[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[java.lang.Object[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[short[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; cern.colt.Arrays; toString[short[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[short[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[short[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[short[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[boolean[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; cern.colt.Arrays; toString[boolean[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[boolean[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.Arrays; toString[boolean[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.Arrays; toString[boolean[]]; java.lang.String; null; buf>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[byte[], int]; byte[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[char[], int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[double[], int]; double[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[float[], int]; float[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[int[], int]; int[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[long[], int]; long[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[java.lang.Object[], int]; java.lang.Object[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[short[], int]; short[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.Arrays; trimToCapacity[boolean[], int]; boolean[]; null; System>
<cern.colt.buffer.DoubleBuffer; flush[]; void; cern.colt.buffer.DoubleBuffer; add[double]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.buffer.DoubleBuffer; addAllOf[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.buffer.DoubleBuffer; flush[]; void; cern.colt.buffer.DoubleBuffer; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.buffer.DoubleBufferConsumer; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer; flush[]; void; null; list>
<cern.colt.buffer.DoubleBufferConsumer; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer; flush[]; void; null; this.target>
<cern.colt.buffer.IntBuffer3D; flush[]; void; cern.colt.buffer.IntBuffer3D; add[int, int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.buffer.IntBuffer3D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; xElements>
<cern.colt.buffer.IntBuffer3D; flush[]; void; cern.colt.buffer.IntBuffer3D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.buffer.IntBuffer3DConsumer; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer3D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer3D; flush[]; void; null; xList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer3D; flush[]; void; null; yList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer3D; flush[]; void; null; zList>
<cern.colt.buffer.IntBuffer3DConsumer; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer3D; flush[]; void; null; this.target>
<cern.colt.buffer.DoubleBuffer3D; flush[]; void; cern.colt.buffer.DoubleBuffer3D; add[double, double, double]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.buffer.DoubleBuffer3D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; xElements>
<cern.colt.buffer.DoubleBuffer3D; flush[]; void; cern.colt.buffer.DoubleBuffer3D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.buffer.DoubleBuffer3DConsumer; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer3D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer3D; flush[]; void; null; xList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer3D; flush[]; void; null; yList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer3D; flush[]; void; null; zList>
<cern.colt.buffer.DoubleBuffer3DConsumer; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer3D; flush[]; void; null; this.target>
<cern.colt.buffer.IntBuffer; flush[]; void; cern.colt.buffer.IntBuffer; add[int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.buffer.IntBuffer; addAllOf[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.buffer.IntBuffer; flush[]; void; cern.colt.buffer.IntBuffer; addAllOf[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.buffer.IntBufferConsumer; addAllOf[cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer; addAllOf[cern.colt.list.IntArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer; flush[]; void; null; list>
<cern.colt.buffer.IntBufferConsumer; addAllOf[cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer; flush[]; void; null; this.target>
<cern.colt.buffer.IntBuffer2D; flush[]; void; cern.colt.buffer.IntBuffer2D; add[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.buffer.IntBuffer2D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; x>
<cern.colt.buffer.IntBuffer2D; flush[]; void; cern.colt.buffer.IntBuffer2D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.buffer.IntBuffer2DConsumer; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer2D; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer2D; flush[]; void; null; xList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.IntBuffer2D; flush[]; void; null; yList>
<cern.colt.buffer.IntBuffer2DConsumer; addAllOf[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; cern.colt.buffer.IntBuffer2D; flush[]; void; null; this.target>
<cern.colt.buffer.ObjectBuffer; flush[]; void; cern.colt.buffer.ObjectBuffer; add[java.lang.Object]; void; null; this>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.buffer.ObjectBuffer; addAllOf[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.buffer.ObjectBuffer; flush[]; void; cern.colt.buffer.ObjectBuffer; addAllOf[cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.buffer.ObjectBufferConsumer; addAllOf[cern.colt.list.ObjectArrayList]; void; cern.colt.buffer.ObjectBuffer; addAllOf[cern.colt.list.ObjectArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.ObjectBuffer; flush[]; void; null; list>
<cern.colt.buffer.ObjectBufferConsumer; addAllOf[cern.colt.list.ObjectArrayList]; void; cern.colt.buffer.ObjectBuffer; flush[]; void; null; this.target>
<cern.colt.buffer.DoubleBuffer2D; flush[]; void; cern.colt.buffer.DoubleBuffer2D; add[double, double]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.buffer.DoubleBuffer2D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; x>
<cern.colt.buffer.DoubleBuffer2D; flush[]; void; cern.colt.buffer.DoubleBuffer2D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.buffer.DoubleBuffer2DConsumer; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer2D; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; null; this.target>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer2D; flush[]; void; null; xList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.buffer.DoubleBuffer2D; flush[]; void; null; yList>
<cern.colt.buffer.DoubleBuffer2DConsumer; addAllOf[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; void; cern.colt.buffer.DoubleBuffer2D; flush[]; void; null; this.target>
<cern.colt.Version; getPackage[]; java.lang.Package; cern.colt.Version; asString[]; java.lang.String; null; this>
<java.lang.Package; getImplementationVendor[]; java.lang.String; cern.colt.Version; asString[]; java.lang.String; null; getPackage()>
<cern.colt.Version; getPackage[]; java.lang.Package; cern.colt.Version; asString[]; java.lang.String; getImplementationVendor[]; this>
<cern.colt.Version; getMajorVersion[]; int; cern.colt.Version; asString[]; java.lang.String; null; this>
<cern.colt.Version; getMinorVersion[]; int; cern.colt.Version; asString[]; java.lang.String; null; this>
<cern.colt.Version; getMicroVersion[]; int; cern.colt.Version; asString[]; java.lang.String; null; this>
<cern.colt.Version; getBuildVersion[]; int; cern.colt.Version; asString[]; java.lang.String; null; this>
<cern.colt.Version; getBuildTime[]; java.lang.String; cern.colt.Version; asString[]; java.lang.String; null; this>
<cern.colt.Version; getPackage[]; java.lang.Package; cern.colt.Version; getBuildTime[]; java.lang.String; null; this>
<java.lang.Package; getImplementationVersion[]; java.lang.String; cern.colt.Version; getBuildTime[]; java.lang.String; null; getPackage()>
<cern.colt.Version; getPackage[]; java.lang.Package; cern.colt.Version; getBuildTime[]; java.lang.String; getImplementationVersion[]; this>
<java.lang.String; indexOf[int]; int; cern.colt.Version; getBuildTime[]; java.lang.String; null; s>
<java.lang.String; substring[int, int]; java.lang.String; cern.colt.Version; getBuildTime[]; java.lang.String; null; s>
<java.lang.String; length[]; int; cern.colt.Version; getBuildTime[]; java.lang.String; null; s>
<cern.colt.Version; numbers[]; int[]; cern.colt.Version; getBuildVersion[]; int; null; this>
<cern.colt.Version; numbers[]; int[]; cern.colt.Version; getMajorVersion[]; int; null; this>
<cern.colt.Version; numbers[]; int[]; cern.colt.Version; getMicroVersion[]; int; null; this>
<cern.colt.Version; numbers[]; int[]; cern.colt.Version; getMinorVersion[]; int; null; this>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; cern.colt.Version; getPackage[]; java.lang.Package; null; Package>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.Version; main[java.lang.String[]]; void; null; System.out>
<cern.colt.Version; asString[]; java.lang.String; cern.colt.Version; main[java.lang.String[]]; void; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; function>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; haveSharedCells[cern.colt.matrix.DoubleMatrix1D]; boolean; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; other>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; function>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; nonZeroIndexes>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; cardinality[]; int; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; cardinality[int]; int; null; this>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; null; copy>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, double]; boolean; cern.colt.matrix.DoubleMatrix1D; equals[double]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; cern.colt.matrix.DoubleMatrix1D; equals[java.lang.Object]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; cern.colt.matrix.DoubleMatrix1D; get[int]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; get[int]; double; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; indexList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; indexList>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix1D; cardinality[int]; int; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; indexList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; valueList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; indexList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; indexList>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix1D; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix1D]; boolean; cern.colt.matrix.DoubleMatrix1D; haveSharedCells[cern.colt.matrix.DoubleMatrix1D]; boolean; null; getContent()>
<cern.colt.matrix.DoubleMatrix1D; getContent[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; haveSharedCells[cern.colt.matrix.DoubleMatrix1D]; boolean; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix1D]; this>
<cern.colt.matrix.DoubleMatrix1D; getContent[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; haveSharedCells[cern.colt.matrix.DoubleMatrix1D]; boolean; null; other>
<cern.colt.matrix.DoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; other>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; other>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.DoubleMatrix1D; toArray[]; double[]; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; null; this>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; cern.colt.matrix.DoubleMatrix1D; toString[]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.DoubleMatrix1D; view[]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; vFlip[]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewFlip[]; cern.colt.matrix.DoubleMatrix1D; null; view()>
<cern.colt.matrix.DoubleMatrix1D; view[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewFlip[]; cern.colt.matrix.DoubleMatrix1D; vFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; vPart[int, int]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; null; view()>
<cern.colt.matrix.DoubleMatrix1D; view[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; vPart[int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; viewSelectionLike[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; condition>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; matches>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; null; matches>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewSorted[]; cern.colt.matrix.DoubleMatrix1D; null; cern.colt.matrix.doublealgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix1D; vStrides[int]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewStrides[int]; cern.colt.matrix.DoubleMatrix1D; null; view()>
<cern.colt.matrix.DoubleMatrix1D; view[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix1D; viewStrides[int]; cern.colt.matrix.DoubleMatrix1D; vStrides[int]; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.matrix.DoubleMatrix1D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; null; y>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; null; nonZeroIndexes>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; null; y>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleMatrix1D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.DoubleMatrix1D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; ascending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; descending(slices,rows,columns)>
<cern.colt.matrix.DoubleFactory3D; descending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; ascending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory3D; ascending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; F>
<cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory3D; ascending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; F>
<cern.colt.matrix.DoubleFactory3D; make[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; descending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleFactory3D; descending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.DoubleMatrix3D; assign[double]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; make[int, int, int, double]; cern.colt.matrix.DoubleMatrix3D; null; make(slices,rows,columns)>
<cern.colt.matrix.DoubleFactory3D; make[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; make[int, int, int, double]; cern.colt.matrix.DoubleMatrix3D; assign[double]; this>
<cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; random[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; make(slices,rows,columns)>
<cern.colt.matrix.DoubleFactory3D; make[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleFactory3D; random[int, int, int]; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; random[]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory3D; random[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; haveSharedCells[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; other>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; other>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; cardinality[]; int; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; null; like()>
<cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; this>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; cern.colt.matrix.DoubleMatrix2D; equals[double]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.DoubleMatrix2D; equals[java.lang.Object]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.IntIntDoubleFunction; apply[int, int, double]; double; cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; rowList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; columnList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; rowList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; columnList>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.DoubleMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix2D; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.DoubleMatrix2D; haveSharedCells[cern.colt.matrix.DoubleMatrix2D]; boolean; null; getContent()>
<cern.colt.matrix.DoubleMatrix2D; getContent[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; haveSharedCells[cern.colt.matrix.DoubleMatrix2D]; boolean; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix2D]; this>
<cern.colt.matrix.DoubleMatrix2D; getContent[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; haveSharedCells[cern.colt.matrix.DoubleMatrix2D]; boolean; null; other>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; toArray[]; double[][]; null; this>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; toString[]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix2D; like1D[int, int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vColumnFlip[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix2D; null; view()>
<cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix2D; vColumnFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vDice[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; null; view()>
<cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; vDice[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vPart[int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; null; view()>
<cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; vPart[int, int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix2D; like1D[int, int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vRowFlip[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; null; view()>
<cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; vRowFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRowIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumnIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowOffset[int]; int; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnOffset[int]; int; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewSelectionLike[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix1DProcedure; apply[cern.colt.matrix.DoubleMatrix1D]; boolean; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; condition>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; matches>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.DoubleMatrix2D; viewSelection[cern.colt.matrix.DoubleMatrix1DProcedure]; cern.colt.matrix.DoubleMatrix2D; null; matches>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewSorted[int]; cern.colt.matrix.DoubleMatrix2D; null; cern.colt.matrix.doublealgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix2D; vStrides[int, int]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; null; view()>
<cern.colt.matrix.DoubleMatrix2D; view[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; vStrides[int, int]; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.matrix.DoubleMatrix2D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; B>
<cern.colt.function.Double9Function; apply[double, double, double, double, double, double, double, double, double]; double; cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; function>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; this>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.DoubleMatrix2D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.DoubleMatrix2D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Stencil; stencil27[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function, int, cern.colt.matrix.DoubleMatrix3DProcedure, int]; int; null; A>
<cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; cern.colt.matrix.doublealgo.Stencil; stencil27[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function, int, cern.colt.matrix.DoubleMatrix3DProcedure, int]; int; null; A>
<cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; cern.colt.matrix.doublealgo.Stencil; stencil27[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function, int, cern.colt.matrix.DoubleMatrix3DProcedure, int]; int; null; B>
<cern.colt.matrix.DoubleMatrix3DProcedure; apply[cern.colt.matrix.DoubleMatrix3D]; boolean; cern.colt.matrix.doublealgo.Stencil; stencil27[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function, int, cern.colt.matrix.DoubleMatrix3DProcedure, int]; int; null; hasConverged>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Stencil; stencil9[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function, int, cern.colt.matrix.DoubleMatrix2DProcedure, int]; int; null; A>
<cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; cern.colt.matrix.doublealgo.Stencil; stencil9[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function, int, cern.colt.matrix.DoubleMatrix2DProcedure, int]; int; null; A>
<cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; cern.colt.matrix.doublealgo.Stencil; stencil9[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function, int, cern.colt.matrix.DoubleMatrix2DProcedure, int]; int; null; B>
<cern.colt.matrix.DoubleMatrix2DProcedure; apply[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.doublealgo.Stencil; stencil9[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function, int, cern.colt.matrix.DoubleMatrix2DProcedure, int]; int; null; hasConverged>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; abs[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; abs[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; div[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; equals[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; equals[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; equals[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; greater[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; greater[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; greater[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; greater[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; less[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; less[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; less[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; less[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; minus[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; minusMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.doublealgo.Transform; minusMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; minusMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.doublealgo.Transform; minusMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; negate[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; negate[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; negate[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; negate[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; plus[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; plusMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.doublealgo.Transform; plusMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; plusMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.doublealgo.Transform; plusMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.jet.math.Functions; pow[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix1D, double]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.jet.math.Functions; pow[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Transform; pow[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractFormatter; setFormat[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; Formatter[java.lang.String]; void; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setAlignment[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; Formatter[java.lang.String]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; new Formatter(format)>
<cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; new Formatter(format)>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; new Formatter()>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo1[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; new Formatter(format)>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; matrix>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; System.out>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; String>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; matrix>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; new Formatter()>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo2[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; start[]; timer>
<java.lang.StringBuffer; append[double]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; buf>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; matrix>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; start[]; timer>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; new cern.colt.matrix.impl.FormerFactory()>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; buf>
<cern.colt.matrix.impl.Former; form[double]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; format>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; matrix>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; new Formatter(null)>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; new Formatter("%G")>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Formatter; demo3[int, double]; void; display[]; timer>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo4[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo4[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo4[]; void; null; new Formatter("%G")>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.doublealgo.Formatter; demo5[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo5[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo5[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo5[]; void; null; new Formatter("%G")>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo5[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; new Formatter()>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; new Formatter()>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo6[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<hep.aida.bin.BinFunctions1D; quantile[double]; hep.aida.bin.BinFunction1D; cern.colt.matrix.doublealgo.Formatter; demo7[]; void; null; F>
<hep.aida.bin.BinFunctions1D; quantile[double]; hep.aida.bin.BinFunction1D; cern.colt.matrix.doublealgo.Formatter; demo7[]; void; null; F>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; demo7[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; demo7[]; void; null; new Formatter(format)>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; demo7[]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.impl.Former; form[double]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; form[cern.colt.matrix.DoubleMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; formatter>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.doublealgo.Formatter; form[cern.colt.matrix.DoubleMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; matrix>
<cern.colt.matrix.doublealgo.Formatter; form[cern.colt.matrix.DoubleMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; form[cern.colt.matrix.impl.AbstractMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; formatRow[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String[]; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String[][]; null; this>
<java.lang.String; lastIndexOf[int]; int; cern.colt.matrix.doublealgo.Formatter; indexOfDecimalPoint[java.lang.String]; int; null; s>
<java.lang.String; lastIndexOf[int]; int; cern.colt.matrix.doublealgo.Formatter; indexOfDecimalPoint[java.lang.String]; int; null; s>
<java.lang.String; lastIndexOf[int]; int; cern.colt.matrix.doublealgo.Formatter; indexOfDecimalPoint[java.lang.String]; int; null; s>
<java.lang.String; length[]; int; cern.colt.matrix.doublealgo.Formatter; indexOfDecimalPoint[java.lang.String]; int; null; s>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.doublealgo.Formatter; lead[java.lang.String]; int; null; alignment>
<cern.colt.matrix.doublealgo.Formatter; indexOfDecimalPoint[java.lang.String]; int; cern.colt.matrix.doublealgo.Formatter; lead[java.lang.String]; int; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; copy>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; copy>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setRowSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; copy>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setRowSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setSliceSeparator[java.lang.String]; void; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toSourceCode[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.DoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; easy.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; assign[cern.colt.matrix.DoubleMatrix1D]; easy>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix1D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; matrix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; matrix>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; new cern.colt.matrix.objectalgo.Formatter()>
<cern.colt.matrix.ObjectFactory2D; make[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; cern.colt.matrix.ObjectFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; cern.colt.matrix.doublealgo.Statistic>
<cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; cern.colt.matrix.doublealgo.Statistic>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; rowStats>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; tmp.viewPart(0,0,matrix.rows(),matrix.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; assign[cern.colt.matrix.DoubleMatrix2D]; tmp>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; tmp.viewPart(matrix.rows(),0,aggr.length,matrix.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; assign[cern.colt.matrix.DoubleMatrix2D]; tmp>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.doublealgo.Formatter; format[cern.colt.matrix.DoubleMatrix2D]; java.lang.String[][]; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; cern.colt.matrix.ObjectFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; allStats.viewPart(0,0,matrix.rows() + aggr.length,matrix.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; assign[java.lang.Object[][]]; allStats>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; allStats.viewColumn(matrix.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; assign[java.lang.Object]; allStats>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; allStats.viewPart(0,matrix.columns() + 1,matrix.rows(),aggr.length)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; assign[java.lang.Object[][]]; allStats>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<hep.aida.bin.BinFunction1D; name[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; aggr[i]>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<cern.colt.list.ObjectArrayList; toArray[java.lang.Object[]]; java.lang.Object[]; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<hep.aida.bin.BinFunction1D; name[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; aggr[i]>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<cern.colt.list.ObjectArrayList; toArray[java.lang.Object[]]; java.lang.Object[]; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; list>
<cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; new cern.colt.matrix.objectalgo.Formatter()>
<java.lang.String; length[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; s>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; Math>
<java.lang.String; length[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; rowAxisName>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<java.lang.String; lastIndexOf[java.lang.String, int]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; s>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; buf>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; matrix>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.doublealgo.Formatter; xtoTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.doublealgo.Sorting; runSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; cern.colt.GenericSorting>
<cern.colt.Sorting; quickSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.doublealgo.Sorting; runSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; cern.colt.GenericSorting>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; vector>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.doublealgo.Sorting; compareNaN[double, double]; int; java.lang.Object; compare[int, int]; int; null; this>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; vector>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleComparator]; cern.colt.matrix.DoubleMatrix1D; null; vector>
<cern.colt.function.DoubleComparator; compare[double, double]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleComparator]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleComparator]; cern.colt.matrix.DoubleMatrix1D; null; vector>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.doublealgo.Sorting; compareNaN[double, double]; int; java.lang.Object; compare[int, int]; int; null; this>
<cern.colt.matrix.doublealgo.Sorting; runSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; col>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; col>
<cern.colt.matrix.doublealgo.Sorting; compareNaN[double, double]; int; java.lang.Object; compare[int, int]; int; null; this>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.doublealgo.DoubleMatrix1DComparator; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; Statistic>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; toArray[]; double[]; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; tmp.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; toArray[]; tmp>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix.viewRow(row)>
<cern.colt.matrix.DoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; viewColumn[int]; matrix>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; sliceView>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; sliceView>
<cern.colt.matrix.doublealgo.Sorting; compareNaN[double, double]; int; java.lang.Object; compare[int, int]; int; null; this>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.doublealgo.DoubleMatrix2DComparator; compare[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.doublealgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.DoubleFactory2D; descending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo1[]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix1D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; null; a>
<cern.colt.matrix.DoubleMatrix1D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; null; b>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo1[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo1[]; void; null; sort>
<cern.colt.matrix.DoubleFactory3D; descending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Sorting; zdemo2[]; void; null; DoubleFactory3D.dense>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; int; null; a>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; int; null; b>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo2[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.doublealgo.DoubleMatrix2DComparator]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Sorting; zdemo2[]; void; null; sort>
<java.lang.Math; sin[double]; double; java.lang.Object; compare[double, double]; int; null; Math>
<java.lang.Math; sin[double]; double; java.lang.Object; compare[double, double]; int; null; Math>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo3[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleComparator]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; zdemo3[]; void; null; sort>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; zdemo3[]; void; null; sorted>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo3[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo4[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo4[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; zdemo4[]; void; null; matrix1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo4[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; A>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; A>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; start[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; B>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; start[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; B.viewPart(0,0,rows,columns)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; assign[cern.colt.matrix.DoubleMatrix2D]; B>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; A>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; start[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; B.viewSelection(null,null)>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; assign[cern.colt.matrix.DoubleMatrix2D]; B>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; A>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; sort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; Math>
<java.lang.Integer; toString[int]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; Integer>
<java.lang.Integer; toString[int]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; new cern.colt.matrix.doublealgo.Formatter("%G")>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; A>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; System.out>
<hep.aida.bin.QuantileBin1D; median[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; null; cern.colt.matrix.doublealgo.Statistic.bin(x)>
<cern.colt.matrix.doublealgo.Statistic; bin[cern.colt.matrix.DoubleMatrix1D]; hep.aida.bin.DynamicBin1D; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; median[]; cern.colt.matrix.doublealgo.Statistic>
<hep.aida.bin.QuantileBin1D; median[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; null; cern.colt.matrix.doublealgo.Statistic.bin(y)>
<cern.colt.matrix.doublealgo.Statistic; bin[cern.colt.matrix.DoubleMatrix1D]; hep.aida.bin.DynamicBin1D; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; int; median[]; cern.colt.matrix.doublealgo.Statistic>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.DoubleMatrix1DComparator]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; sort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo5[int, int, boolean]; void; display[]; timer>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; quickSort>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; quickSort>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; mergeSort>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; mergeSort>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo6[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; toArray[]; double[]; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; A.viewColumn(0)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; toArray[]; A>
<cern.colt.matrix.DoubleMatrix1D; toArray[]; double[]; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; A.viewColumn(0)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; toArray[]; A>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; quickSort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; mergeSort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; quickSort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; start[]; timer>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix2D, double[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; mergeSort>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Sorting; zdemo7[int, int, boolean]; void; display[]; timer>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int[], int, int, int, double[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int[], int, int, int, double[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int[], int, int, int, double[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; columnView>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; columnView>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; java.lang.Object; compare[int, int]; int; null; columnView>
<cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int[], int, int, int, double[], int, int, int[]]; void; null; cern.colt.Partitioning>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int, double[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int, double[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int[], int, int, int, double[], int, int, int[]]; void; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int, double[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int, double[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Partitioning; partition[cern.colt.matrix.DoubleMatrix2D, int, double[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<java.lang.Math; sqrt[double]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; Math>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; F>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; F>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; F>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; a>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; F>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewColumn(column)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; toArray[double[]]; matrix>
<hep.aida.bin.DynamicBin1D; clear[]; void; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; bin>
<hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; bin>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; result>
<hep.aida.bin.BinFunction1D; apply[hep.aida.bin.DynamicBin1D]; double; cern.colt.matrix.doublealgo.Statistic; aggregate[cern.colt.matrix.DoubleMatrix2D, hep.aida.bin.BinFunction1D[], cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; aggr[i]>
<hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.colt.matrix.doublealgo.Statistic; bin[cern.colt.matrix.DoubleMatrix1D]; hep.aida.bin.DynamicBin1D; null; bin>
<cern.colt.matrix.DoubleFactory1D; toList[cern.colt.matrix.DoubleMatrix1D]; cern.colt.list.DoubleArrayList; cern.colt.matrix.doublealgo.Statistic; bin[cern.colt.matrix.DoubleMatrix1D]; hep.aida.bin.DynamicBin1D; null; DoubleFactory1D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; zSum[]; double; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; cols[i]>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; cols[i]>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; covariance>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; weights>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; sorted>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; sorted>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; distinct>
<cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; weights>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; sorted>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; y>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; sorted>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; z>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; sorted>
<cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; distinct>
<cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; cern.colt.matrix.doublealgo.Statistic; cube[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; this>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo1[]; void; null; factory>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo1[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo1[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo1[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; factory>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; this>
<cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; this>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; factory.make(values)>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; viewDice[]; factory>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; A>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; null; distance(A,norm)>
<cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; demo3[cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; void; viewDice[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.doublealgo.Statistic$VectorVectorFunction; apply[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; null; distanceFunction>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; null; distance>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.doublealgo.Statistic; distance[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.doublealgo.Statistic.VectorVectorFunction]; cern.colt.matrix.DoubleMatrix2D; null; distance>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram1D; null; vector>
<hep.aida.IHistogram1D; fill[double]; void; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram1D; null; histo>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram1D; null; vector>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<hep.aida.IHistogram2D; fill[double, double]; void; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; histo>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; weights>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<hep.aida.IHistogram2D; fill[double, double, double]; void; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; histo>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; x>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; y>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram2D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram2D; null; weights>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; weights>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<hep.aida.IHistogram3D; fill[double, double, double, double]; void; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; histo>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; x>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; y>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; z>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.doublealgo.Statistic; histogram[hep.aida.IHistogram3D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; hep.aida.IHistogram3D; null; weights>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.doublealgo.Statistic; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.doublealgo.Statistic; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.doublealgo.Statistic; main[java.lang.String[]]; void; null; args[2]>
<cern.colt.matrix.doublealgo.Statistic; demo2[int, int, boolean]; void; cern.colt.matrix.doublealgo.Statistic; main[java.lang.String[]]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; System>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix1D, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix1D; null; matrix>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; System>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix2D, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; System>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<java.lang.Math; round[double]; long; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; Math>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; cern.jet.random.sampling.RandomSampler>
<cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.doublealgo.Statistic; viewSample[cern.colt.matrix.DoubleMatrix3D, double, double, double, cern.jet.random.engine.RandomEngine]; cern.colt.matrix.DoubleMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(0,0,r,ac)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(0,ac,r,bc)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(0,0,ar,c)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(ar,0,br,c)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; null; descending(rows,columns)>
<cern.colt.matrix.DoubleFactory2D; descending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleFactory2D; checkRectangularShape[cern.colt.matrix.DoubleMatrix2D[][]]; void; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(r,c,part.rows(),part.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; sum.viewPart(0,0,ar,ac)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; sum>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; sum.viewPart(ar,ac,br,bc)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; sum>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; diag.viewPart(0,0,A.rows(),A.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; diag.viewPart(A.rows(),A.columns(),B.rows(),B.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; diag.viewPart(A.rows() + B.rows(),A.columns() + B.columns(),C.rows(),C.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; composeDiagonal[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleFactory2D; checkRectangularShape[cern.colt.matrix.DoubleMatrix2D[][]]; void; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; part>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; null; part>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; identity(3)>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; viewColumnFlip[]; this>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; identity(3)>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; viewRowFlip[]; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; descending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo1[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<cern.colt.matrix.DoubleFactory2D; compose[cern.colt.matrix.DoubleMatrix2D[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; D>
<cern.colt.matrix.DoubleFactory2D; decompose[cern.colt.matrix.DoubleMatrix2D[][], cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; this>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.DoubleFactory2D; demo2[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; descending[int, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleFactory2D; descending[int, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; vector>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; diag>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; vector>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleFactory2D; make1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; diag>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.DoubleFactory2D; diagonal[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; make[double[], int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.DoubleFactory2D; make[double[], int]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; null; make(rows,columns)>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; assign[double]; this>
<cern.colt.matrix.DoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory2D; make1D[int]; cern.colt.matrix.DoubleMatrix1D; null; make(0,0)>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; make1D[int]; cern.colt.matrix.DoubleMatrix1D; like1D[int]; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; random[int, int]; cern.colt.matrix.DoubleMatrix2D; null; make(rows,columns)>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; random[int, int]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; random[]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory2D; random[int, int]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; null; matrix.viewPart(r * i,c * j,r,c)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; matrix>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<java.lang.Math; round[double]; long; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; sampler>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.DoubleFactory2D; sample[cern.colt.matrix.DoubleMatrix2D, double, double]; cern.colt.matrix.DoubleMatrix2D; null; matrix>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; aggregate[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; function>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; haveSharedCells[cern.colt.matrix.ObjectMatrix1D]; boolean; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; copy[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; other>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; function>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; y>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; cardinality[]; int; null; this>
<cern.colt.matrix.ObjectMatrix1D; like[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; copy[]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; copy[]; cern.colt.matrix.ObjectMatrix1D; null; copy>
<cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; other>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; getQuick(i)>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; equals[java.lang.Object]; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; cern.colt.matrix.ObjectMatrix1D; get[int]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; get[int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; indexList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; indexList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix1D; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix1D]; boolean; cern.colt.matrix.ObjectMatrix1D; haveSharedCells[cern.colt.matrix.ObjectMatrix1D]; boolean; null; getContent()>
<cern.colt.matrix.ObjectMatrix1D; getContent[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; haveSharedCells[cern.colt.matrix.ObjectMatrix1D]; boolean; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix1D]; this>
<cern.colt.matrix.ObjectMatrix1D; getContent[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; haveSharedCells[cern.colt.matrix.ObjectMatrix1D]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix1D; like[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; like[]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; cern.colt.matrix.ObjectMatrix1D; set[int, java.lang.Object]; void; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; set[int, java.lang.Object]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.ObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; other>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; other>
<cern.colt.matrix.ObjectMatrix1D; toArray[java.lang.Object[]]; void; cern.colt.matrix.ObjectMatrix1D; toArray[]; java.lang.Object[]; null; this>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; toArray[java.lang.Object[]]; void; null; this>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; cern.colt.matrix.ObjectMatrix1D; toString[]; java.lang.String; null; new cern.colt.matrix.objectalgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; view[]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; vFlip[]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewFlip[]; cern.colt.matrix.ObjectMatrix1D; null; view()>
<cern.colt.matrix.ObjectMatrix1D; view[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewFlip[]; cern.colt.matrix.ObjectMatrix1D; vFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; vPart[int, int]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; null; view()>
<cern.colt.matrix.ObjectMatrix1D; view[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; vPart[int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; viewSelectionLike[int[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.function.ObjectProcedure; apply[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; condition>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; matches>
<cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.ObjectMatrix1D; viewSelection[cern.colt.function.ObjectProcedure]; cern.colt.matrix.ObjectMatrix1D; null; matches>
<cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewSorted[]; cern.colt.matrix.ObjectMatrix1D; null; cern.colt.matrix.objectalgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix1D; vStrides[int]; cern.colt.matrix.impl.AbstractMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewStrides[int]; cern.colt.matrix.ObjectMatrix1D; null; view()>
<cern.colt.matrix.ObjectMatrix1D; view[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix1D; viewStrides[int]; cern.colt.matrix.ObjectMatrix1D; vStrides[int]; this>
<cern.colt.function.ObjectProcedure; apply[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix1D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; procedure>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectMatrix1D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(0,0,r,ac)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(0,ac,r,bc)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendColumns[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(0,0,ar,c)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(ar,0,br,c)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; appendRows[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.ObjectFactory2D; checkRectangularShape[cern.colt.matrix.ObjectMatrix2D[][]]; void; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; Math>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(r,c,part.rows(),part.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; compose[cern.colt.matrix.ObjectMatrix2D[][]]; cern.colt.matrix.ObjectMatrix2D; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; sum.viewPart(0,0,ar,ac)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; sum>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; sum.viewPart(ar,ac,br,bc)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; sum>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; C>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; diag.viewPart(0,0,A.rows(),A.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; diag.viewPart(A.rows(),A.columns(),B.rows(),B.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; diag.viewPart(A.rows() + B.rows(),A.columns() + B.columns(),C.rows(),C.columns())>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; diag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; composeDiagonal[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; C>
<cern.colt.matrix.ObjectFactory2D; checkRectangularShape[cern.colt.matrix.ObjectMatrix2D[][]]; void; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; part>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; part>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; part>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; decompose[cern.colt.matrix.ObjectMatrix2D[][], cern.colt.matrix.ObjectMatrix2D]; void; null; part>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix2D; null; vector>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix2D; null; diag>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix2D; null; vector>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.ObjectFactory2D; make1D[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; setQuick[int, java.lang.Object]; void; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; diag>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectFactory2D; diagonal[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; make[java.lang.Object[], int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectFactory2D; make[java.lang.Object[], int]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; make[int, int, java.lang.Object]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; make[int, int, java.lang.Object]; cern.colt.matrix.ObjectMatrix2D; null; make(rows,columns)>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; make[int, int, java.lang.Object]; cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object]; this>
<cern.colt.matrix.ObjectMatrix2D; like1D[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory2D; make1D[int]; cern.colt.matrix.ObjectMatrix1D; null; make(0,0)>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; make1D[int]; cern.colt.matrix.ObjectMatrix1D; like1D[int]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectFactory2D; repeat[cern.colt.matrix.ObjectMatrix2D, int, int]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectFactory2D; repeat[cern.colt.matrix.ObjectMatrix2D, int, int]; cern.colt.matrix.ObjectMatrix2D; null; A>
<cern.colt.matrix.ObjectFactory2D; make[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; repeat[cern.colt.matrix.ObjectMatrix2D, int, int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; repeat[cern.colt.matrix.ObjectMatrix2D, int, int]; cern.colt.matrix.ObjectMatrix2D; null; matrix.viewPart(r * i,c * j,r,c)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectFactory2D; repeat[cern.colt.matrix.ObjectMatrix2D, int, int]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; aggregate[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; function>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; haveSharedCells[cern.colt.matrix.ObjectMatrix3D]; boolean; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; copy[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; other>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; other>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; function>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix3D; null; y>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; cardinality[]; int; null; this>
<cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; copy[]; cern.colt.matrix.ObjectMatrix3D; null; like()>
<cern.colt.matrix.ObjectMatrix3D; like[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; copy[]; cern.colt.matrix.ObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; this>
<cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; other>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; getQuick(slice,row,column)>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; equals[java.lang.Object]; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; get[int, int, int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; sliceList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; rowList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; columnList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; sliceList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; rowList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; columnList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix3D; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix3D]; boolean; cern.colt.matrix.ObjectMatrix3D; haveSharedCells[cern.colt.matrix.ObjectMatrix3D]; boolean; null; getContent()>
<cern.colt.matrix.ObjectMatrix3D; getContent[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; haveSharedCells[cern.colt.matrix.ObjectMatrix3D]; boolean; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix3D]; this>
<cern.colt.matrix.ObjectMatrix3D; getContent[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; haveSharedCells[cern.colt.matrix.ObjectMatrix3D]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix3D; like[int, int, int]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; like[]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix3D; set[int, int, int, java.lang.Object]; void; null; this>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; toArray[]; java.lang.Object[][][]; null; this>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; cern.colt.matrix.ObjectMatrix3D; toString[]; java.lang.String; null; new cern.colt.matrix.objectalgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.ObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vColumnFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewColumnFlip[]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewColumnFlip[]; cern.colt.matrix.ObjectMatrix3D; vColumnFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vDice[int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewDice[int, int, int]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewDice[int, int, int]; cern.colt.matrix.ObjectMatrix3D; vDice[int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vPart[int, int, int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewPart[int, int, int, int, int, int]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewPart[int, int, int, int, int, int]; cern.colt.matrix.ObjectMatrix3D; vPart[int, int, int, int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.ObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vRowFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewRowFlip[]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewRowFlip[]; cern.colt.matrix.ObjectMatrix3D; vRowFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSliceIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRowIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumnIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; viewSelectionLike[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix2DProcedure; apply[cern.colt.matrix.ObjectMatrix2D]; boolean; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; condition>
<cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; matches>
<cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.ObjectMatrix3D; viewSelection[cern.colt.matrix.ObjectMatrix2DProcedure]; cern.colt.matrix.ObjectMatrix3D; null; matches>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vSliceFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewSliceFlip[]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewSliceFlip[]; cern.colt.matrix.ObjectMatrix3D; vSliceFlip[]; this>
<cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewSorted[int, int]; cern.colt.matrix.ObjectMatrix3D; null; cern.colt.matrix.objectalgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix3D; vStrides[int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewStrides[int, int, int]; cern.colt.matrix.ObjectMatrix3D; null; view()>
<cern.colt.matrix.ObjectMatrix3D; view[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectMatrix3D; viewStrides[int, int, int]; cern.colt.matrix.ObjectMatrix3D; vStrides[int, int, int]; this>
<cern.colt.function.ObjectProcedure; apply[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix3D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; procedure>
<cern.colt.matrix.ObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix3D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; this>
<cern.colt.function.IntIntIntProcedure; apply[int, int, int]; boolean; cern.colt.matrix.ObjectMatrix3D; xforEachCoordinate[cern.colt.function.IntIntIntProcedure]; boolean; null; procedure>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; aggr>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; f>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; aggregate[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction]; java.lang.Object; null; other>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; function>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; haveSharedCells[cern.colt.matrix.ObjectMatrix2D]; boolean; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; copy[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; other>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; other>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; function>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; y>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; cardinality[]; int; null; this>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; copy[]; cern.colt.matrix.ObjectMatrix2D; null; like()>
<cern.colt.matrix.ObjectMatrix2D; like[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; copy[]; cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; this>
<cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; other>
<java.lang.Object; equals[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; getQuick(row,column)>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; equals[java.lang.Object]; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; equals[java.lang.Object, boolean]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; get[int, int]; java.lang.Object; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; rowList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; columnList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; rowList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; columnList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.matrix.ObjectMatrix2D; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix2D]; boolean; cern.colt.matrix.ObjectMatrix2D; haveSharedCells[cern.colt.matrix.ObjectMatrix2D]; boolean; null; getContent()>
<cern.colt.matrix.ObjectMatrix2D; getContent[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; haveSharedCells[cern.colt.matrix.ObjectMatrix2D]; boolean; haveSharedCellsRaw[cern.colt.matrix.ObjectMatrix2D]; this>
<cern.colt.matrix.ObjectMatrix2D; getContent[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; haveSharedCells[cern.colt.matrix.ObjectMatrix2D]; boolean; null; other>
<cern.colt.matrix.ObjectMatrix2D; like[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; like[]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; cern.colt.matrix.ObjectMatrix2D; set[int, int, java.lang.Object]; void; null; this>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; toArray[]; java.lang.Object[][]; null; this>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.ObjectMatrix2D; toString[]; java.lang.String; null; new cern.colt.matrix.objectalgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix2D; like1D[int, int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vColumnFlip[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewColumnFlip[]; cern.colt.matrix.ObjectMatrix2D; null; view()>
<cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewColumnFlip[]; cern.colt.matrix.ObjectMatrix2D; vColumnFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vDice[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewDice[]; cern.colt.matrix.ObjectMatrix2D; null; view()>
<cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewDice[]; cern.colt.matrix.ObjectMatrix2D; vDice[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vPart[int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; null; view()>
<cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; vPart[int, int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix2D; like1D[int, int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; vRowFlip[]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewRowFlip[]; cern.colt.matrix.ObjectMatrix2D; null; view()>
<cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewRowFlip[]; cern.colt.matrix.ObjectMatrix2D; vRowFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRowIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumnIndexes[int[]]; void; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowOffset[int]; int; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnOffset[int]; int; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; viewSelectionLike[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix1DProcedure; apply[cern.colt.matrix.ObjectMatrix1D]; boolean; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; condition>
<cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; matches>
<cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.ObjectMatrix2D; viewSelection[cern.colt.matrix.ObjectMatrix1DProcedure]; cern.colt.matrix.ObjectMatrix2D; null; matches>
<cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewSorted[int]; cern.colt.matrix.ObjectMatrix2D; null; cern.colt.matrix.objectalgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix2D; vStrides[int, int]; cern.colt.matrix.impl.AbstractMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewStrides[int, int]; cern.colt.matrix.ObjectMatrix2D; null; view()>
<cern.colt.matrix.ObjectMatrix2D; view[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.ObjectMatrix2D; viewStrides[int, int]; cern.colt.matrix.ObjectMatrix2D; vStrides[int, int]; this>
<cern.colt.function.ObjectProcedure; apply[java.lang.Object]; boolean; cern.colt.matrix.ObjectMatrix2D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; procedure>
<cern.colt.matrix.ObjectMatrix2D; getQuick[int, int]; java.lang.Object; cern.colt.matrix.ObjectMatrix2D; xforEach[cern.colt.function.ObjectProcedure]; boolean; null; this>
<java.lang.String; valueOf[double]; java.lang.String; java.lang.Object; form[double]; java.lang.String; null; String>
<corejava.Format; format[double]; java.lang.String; java.lang.Object; form[double]; java.lang.String; null; f>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix1D; SelectedSparseDoubleMatrix1D[int, cern.colt.map.AbstractIntDoubleMap, int, int, int[], int]; void; null; this>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SelectedSparseDoubleMatrix1D; getQuick[int]; double; null; elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix1D; setQuick[int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix1D; setQuick[int, double]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkBox[int, int, int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.impl.AbstractMatrix3D; checkColumnIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.impl.AbstractMatrix3D; checkRowIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D, cern.colt.matrix.impl.AbstractMatrix3D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D, cern.colt.matrix.impl.AbstractMatrix3D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D, cern.colt.matrix.impl.AbstractMatrix3D]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.impl.AbstractMatrix3D; checkSliceIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowOffset[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnOffset[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.impl.AbstractMatrix3D; index[int, int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int, int, int, int, int, int, int]; void; cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix3D; toStringShort[]; java.lang.String; null; AbstractFormatter>
<cern.colt.matrix.impl.AbstractMatrix3D; shape[]; int[]; cern.colt.matrix.impl.AbstractMatrix3D; vDice[int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkBox[int, int, int, int, int, int]; void; cern.colt.matrix.impl.AbstractMatrix3D; vPart[int, int, int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCMDoubleMatrix2D; RCMDoubleMatrix2D[double[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; RCMDoubleMatrix2D[int, int]; void; null; this>
<cern.colt.list.AbstractIntList; binarySearch[int]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; getQuick[int, int]; double; null; indexes[row]>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; cern.colt.matrix.impl.RCMDoubleMatrix2D; getQuick[int, int]; double; null; values[row]>
<cern.colt.list.AbstractIntList; binarySearch[int]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; valueList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; valueList>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; valueList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; valueList>
<cern.colt.list.DoubleArrayList; setQuick[int, double]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; values[i]>
<cern.colt.list.IntArrayList; beforeInsert[int, int]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; indexes[i]>
<cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; setQuick[int, int, double]; void; null; values[i]>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; cern.jet.math.Functions>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; indexes[i]>
<cern.colt.list.IntArrayList; getQuick[int]; int; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; indexes[i]>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; values[i]>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.RCMDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.list.IntArrayList, cern.colt.matrix.DoubleMatrix1D[], double, double]; void; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; SelectedSparseDoubleMatrix2D[int, int, cern.colt.map.AbstractIntDoubleMap, int, int, int, int, int[], int[], int]; void; null; this>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; getQuick[int, int]; double; null; elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; setQuick[int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; setQuick[int, int, double]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; WrapperDoubleMatrix2D[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.WrapperDoubleMatrix2D; WrapperDoubleMatrix2D[cern.colt.matrix.DoubleMatrix2D]; void; null; newContent>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.WrapperDoubleMatrix2D; WrapperDoubleMatrix2D[cern.colt.matrix.DoubleMatrix2D]; void; null; newContent>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.WrapperDoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; null; content>
<cern.colt.matrix.DoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.WrapperDoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; null; content>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; viewDice()>
<cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; viewRow[int]; this>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.impl.AbstractMatrix2D; checkBox[int, int, int, int]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRowIndexes[int[]]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumnIndexes[int[]]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix2D; getQuick[int, int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix2D; setQuick[int, int, double]; void; null; content>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; DenseDoubleMatrix2D[double[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; DenseDoubleMatrix2D[int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; DenseDoubleMatrix2D[int, int, double[], int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; null; System>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; System>
<cern.colt.matrix.DoubleMatrix2D; haveSharedCells[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; other>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; other>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; other>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.DenseDoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; BB>
<cern.colt.function.Double9Function; apply[double, double, double, double, double, double, double, double, double]; double; cern.colt.matrix.impl.DenseDoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; null; function>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; yy>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; zz>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B.zMult(this,null,alpha,beta,!transposeB,true)>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; viewDice[]; B>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; BB>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; CC>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix2D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; RCDoubleMatrix2D[double[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; RCDoubleMatrix2D[int, int]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.RCDoubleMatrix2D; RCDoubleMatrix2D[int, int]; void; null; "matrix too large">
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; RCDoubleMatrix2D[int, int]; void; null; exc>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; null; indexes>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.matrix.impl.RCDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.RCDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.RCDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; source>
<cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; System>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; other.indexes>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this.indexes>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this.values>
<cern.colt.list.IntArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractIntList, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this.indexes>
<cern.colt.list.DoubleArrayList; replaceFromToWithFrom[int, int, cern.colt.list.AbstractDoubleList, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this.values>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.RCDoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; indexes>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.impl.RCDoubleMatrix2D; remove[int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; indexes>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.impl.RCDoubleMatrix2D; remove[int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; indexes>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.function.IntIntDoubleFunction; apply[int, int, double]; double; cern.colt.matrix.impl.RCDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; getQuick[int, int]; double; null; indexes>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; cern.colt.matrix.impl.RCDoubleMatrix2D; getQuick[int, int]; double; null; values>
<cern.colt.list.IntArrayList; beforeInsert[int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; insert[int, int, int, double]; void; null; indexes>
<cern.colt.list.DoubleArrayList; beforeInsert[int, double]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; insert[int, int, int, double]; void; null; values>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; remove[int, int]; void; null; indexes>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; remove[int, int]; void; null; values>
<cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; null; indexes>
<cern.colt.matrix.impl.RCDoubleMatrix2D; remove[int, int]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; null; this>
<cern.colt.list.DoubleArrayList; setQuick[int, double]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; null; values>
<cern.colt.matrix.impl.RCDoubleMatrix2D; insert[int, int, int, double]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; setQuick[int, int, double]; void; null; this>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; trimToSize[]; void; null; indexes>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.colt.matrix.impl.RCDoubleMatrix2D; trimToSize[]; void; null; values>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; (transposeA ? viewDice() : this)>
<cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; toStringShort[]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; indexes>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; values>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.PlusMult; plusMult[double]; cern.jet.math.PlusMult; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.PlusMult>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; indexes>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; values>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; Crows[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.RCDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; Crows[j]>
<cern.colt.matrix.DoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.SparseDoubleMatrix1D; SparseDoubleMatrix1D[double[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; SparseDoubleMatrix1D[int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; SparseDoubleMatrix1D[int, cern.colt.map.AbstractIntDoubleMap, int, int]; void; null; this>
<cern.colt.map.AbstractMap; clear[]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; null; this.elements>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseDoubleMatrix1D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SparseDoubleMatrix1D; getQuick[int]; double; null; elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix1D; setQuick[int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix1D; setQuick[int, double]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractFormatter; setupBlanksCache[]; void; cern.colt.matrix.impl.SparseDoubleMatrix1D; viewSelectionLike[int[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; alignment>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; Math>
<java.lang.String; length[]; int; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; s>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; Math>
<cern.colt.matrix.impl.AbstractFormatter; lead[java.lang.String]; int; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignmentCode[java.lang.String]; int; null; alignment>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignmentCode[java.lang.String]; int; null; alignment>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignmentCode[java.lang.String]; int; null; alignment>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignmentCode[java.lang.String]; int; null; alignment>
<cern.colt.matrix.impl.AbstractFormatter; alignmentCode[java.lang.String]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; setLength[int]; void; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; alignment>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; length[]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; alignment>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractFormatter; lead[java.lang.String]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; length[]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; alignment>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.String; length[]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; length[]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; alignment>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; this>
<java.lang.StringBuffer; length[]; int; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; alignRow[java.lang.String[], int[], int[]]; void; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; null; buf>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; cern.colt.matrix.impl.AbstractFormatter; formatRow[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String[]; null; factory>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.AbstractFormatter; formatRow[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String[]; null; vector>
<cern.colt.matrix.impl.AbstractFormatter; form[cern.colt.matrix.impl.AbstractMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; formatRow[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String[]; null; this>
<java.lang.String; length[]; int; cern.colt.matrix.impl.AbstractFormatter; lead[java.lang.String]; int; null; s>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; null; this>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; setupBlanksCache[]; void; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; setupBlanksCache[]; void; null; buf>
<java.lang.String; substring[int, int]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; setupBlanksCache[]; void; null; str>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; null; matrix>
<java.lang.StringBuffer; setLength[int]; void; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; s>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; total>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; total>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; null; total>
<cern.colt.matrix.impl.AbstractFormatter; format[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String[][]; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; align[java.lang.String[][]]; void; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; toString[java.lang.String[][]]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; total>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.impl.AbstractFormatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; total>
<cern.colt.matrix.DoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.impl.SparseDoubleMatrix3D; SparseDoubleMatrix3D[double[][][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SparseDoubleMatrix3D; SparseDoubleMatrix3D[int, int, int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int, int, int, int, int, int, int]; void; cern.colt.matrix.impl.SparseDoubleMatrix3D; SparseDoubleMatrix3D[int, int, int, cern.colt.map.AbstractIntDoubleMap, int, int, int, int, int, int]; void; null; this>
<cern.colt.map.AbstractMap; clear[]; void; cern.colt.matrix.impl.SparseDoubleMatrix3D; assign[double]; cern.colt.matrix.DoubleMatrix3D; null; this.elements>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseDoubleMatrix3D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseDoubleMatrix3D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SparseDoubleMatrix3D; getQuick[int, int, int]; double; null; elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix3D; setQuick[int, int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix3D; setQuick[int, int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseDoubleMatrix3D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; DoubleFactory1D.dense>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; DoubleFactory1D.dense>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; DoubleFactory1D.dense>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; Algebra.DEFAULT>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; Algebra.DEFAULT>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.impl.NormInfinityTest; main[java.lang.String[]]; void; null; Algebra.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; SelectedDenseObjectMatrix2D[int, int, java.lang.Object[], int, int, int, int, int[], int[], int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; master.viewPart(2,1,2,3)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; assign[double]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; master.viewPart(2,1,2,3)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; copy[]; master>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; copyPart>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; copyPart>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; master>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest[int, int, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; Factory2D>
<cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; Transform>
<java.lang.Math; sin[double]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; Math>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; master.viewPart(1,1,4,5)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; viewSelection[int[], int[]]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view1.viewStrides(2,2)>
<cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; viewStrides[int, int]; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view3>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; Factory2D>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view3>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; view3>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest10[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; master>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest11[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; appendColumns[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; appendRows[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; repeat[cern.colt.matrix.DoubleMatrix2D, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest12[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[cern.colt.function.DoubleProcedure]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; pow[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; between[double, double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.jet.math.Functions; between[double, double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<cern.jet.math.Functions; swapArgs[cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<cern.colt.matrix.DoubleFactory3D; ascending[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; cern.colt.matrix.DoubleFactory3D.dense>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; x>
<cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; x>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; x>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.math.Functions; random[]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; F>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; matrix>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.colt.matrix.impl.TestMatrix2D; doubleTest13[]; void; null; cern.jet.random.Poisson>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; Transform>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; a>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; b>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; LinearAlgebra>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest14[int, int, int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; Factory2D>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; A.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; assign[double]; A>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; LinearAlgebra>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest15[int, int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; B>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; C>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest17[int]; void; null; B>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A00>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A01>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A02>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A10>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A12>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; A20>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest18[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; Factory2D>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; cern.colt.matrix.linalg.Property.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A00>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A01>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A02>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A10>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A12>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; Factory2D.ascending(s,s)>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; assign[cern.colt.function.DoubleFunction]; Factory2D>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; A20>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest19[int]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; containsKey[int]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; containsKey[int]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; containsValue[double]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[int]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<cern.colt.map.AbstractIntDoubleMap; keyOf[double]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; map>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest2[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; LinearAlgebra>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; LinearAlgebra>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; LinearAlgebra>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Math>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest20[]; void; null; Factory1D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest21[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest21[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest21[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest21[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.impl.TestMatrix2D; doubleTest21[]; void; null; new cern.colt.matrix.doublealgo.Formatter(null)>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Property>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Property>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Property>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Property>
<java.io.PrintStream; println[boolean]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; System.out>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest22[]; void; null; Property>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; Factory2D.dense>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; Factory2D.sparse>
<cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; A.like1D(size)>
<cern.colt.matrix.DoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; assign[double]; A>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; Property>
<cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; b>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; solved>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; display[]; timer>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; lu>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; start[]; timer>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; solved>
<cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; assign[cern.colt.matrix.DoubleMatrix1D]; lu>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest23[int, int, double, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; factory>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; new cern.colt.Timer()>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; A>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; display[]; timer>
<cern.colt.matrix.DoubleMatrix2D; toArray[]; double[][]; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; factory.make(size,size,value)>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; toArray[]; factory>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; start[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; System.out>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest24[int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; factory>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; Property>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; new cern.colt.Timer()>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; Algebra.ZERO>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest25[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; factory>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; Property>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; int; null; a>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; java.lang.Object; compare[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; int; null; b>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; System.out>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; Algebra.ZERO>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest26[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; patternMatrix>
<cern.colt.matrix.linalg.Algebra; transpose[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; Algebra.DEFAULT>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; Algebra.DEFAULT>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; Algebra.DEFAULT>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; Algebra.DEFAULT>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; Algebra.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest27[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[]; void; null; f>
<cern.colt.matrix.DoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[]; void; null; vector>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[cern.colt.matrix.DoubleFactory2D]; void; null; f>
<cern.colt.matrix.DoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[cern.colt.matrix.DoubleFactory2D]; void; null; vector>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[cern.colt.matrix.DoubleFactory2D]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[cern.colt.matrix.DoubleFactory2D]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest28[cern.colt.matrix.DoubleFactory2D]; void; null; System.out>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; null; new DenseDoubleMatrix2D(size,size)>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; null; f>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; null; matrix>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[int, cern.colt.matrix.DoubleFactory2D]; void; display[]; timer>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[cern.colt.matrix.DoubleFactory2D]; void; null; f>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[cern.colt.matrix.DoubleFactory2D]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest29[cern.colt.matrix.DoubleFactory2D]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; master.viewPart(2,0,2,3)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; assign[double]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; flip1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; flip2.viewPart(0,0,2,2)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; assign[double]; flip2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest3[]; void; null; System.out>
<cern.colt.matrix.linalg.Blas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[]; void; null; SeqBlas.seqBlas>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int]; void; null; new cern.colt.Timer()>
<cern.colt.list.IntArrayList; binarySearchFromTo[int, int, int]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int]; void; null; list>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int]; void; null; System.out>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int]; void; display[]; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; null; new cern.colt.Timer()>
<cern.colt.Sorting; binarySearchFromTo[int[], int, int, int]; int; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; null; cern.colt.Sorting>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<cern.colt.matrix.DoubleFactory1D; descending[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; Factory1D.dense>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; b>
<cern.colt.matrix.DoubleMatrix1D; viewFlip[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; c>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; d>
<cern.colt.matrix.DoubleMatrix1D; viewSorted[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; b>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest31[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest32[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest32[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest33[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest33[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; equals[double]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest33[]; void; null; x>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; Property.DEFAULT>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; Algebra.DEFAULT>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; A>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; B>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest34[]; void; null; DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest36[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; viewSorted[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest36[]; void; null; doubleDense>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest36[]; void; null; doubleDense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest36[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest36[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; master>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; master.viewPart(2,0,2,3)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; assign[double]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; Transform>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest4[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; master.viewPart(2,0,2,3)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; assign[double]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; master.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; viewSelection[int[]]; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; view2.viewPart(0,2)>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; assign[double]; view2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest6[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; view2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest7[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; view2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest8[]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; ascending[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; Factory2D>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; master>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; view1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; view2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTest9[]; void; null; System.out>
<cern.colt.matrix.impl.TestMatrix2D; solve[int, double[], double[]]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTestQR[]; void; null; this>
<cern.colt.matrix.impl.TestMatrix2D; solve[int, double[], double[]]; void; cern.colt.matrix.impl.TestMatrix2D; doubleTestQR[]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.TestMatrix2D; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.TestMatrix2D; main[java.lang.String[]]; void; null; Integer>
<cern.colt.matrix.impl.TestMatrix2D; doubleTest30[int, int]; void; cern.colt.matrix.impl.TestMatrix2D; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; H.viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; H>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; Algebra.DEFAULT.inverse(H.viewDice().zMult(H,null))>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; Algebra.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; H.viewDice()>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; H>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; H>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; Hplus>
<cern.jet.math.Functions; round[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; cern.jet.math.Functions>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; testLU[]; void; null; System.out>
<cern.colt.matrix.doublealgo.Statistic; bin[cern.colt.matrix.DoubleMatrix1D]; hep.aida.bin.DynamicBin1D; cern.colt.matrix.impl.TestMatrix2D; testMax[]; void; null; cern.colt.matrix.doublealgo.Statistic>
<hep.aida.bin.DynamicBin1D; max[]; double; cern.colt.matrix.impl.TestMatrix2D; testMax[]; void; null; d1ynamicBin>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.TestMatrix2D; testMax[]; void; null; System.out>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.DelegateDoubleMatrix1D; DelegateDoubleMatrix1D[cern.colt.matrix.DoubleMatrix2D, int]; void; null; newContent>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.DelegateDoubleMatrix1D; DelegateDoubleMatrix1D[cern.colt.matrix.DoubleMatrix2D, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.DelegateDoubleMatrix1D; DelegateDoubleMatrix1D[cern.colt.matrix.DoubleMatrix2D, int]; void; null; newContent>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.DelegateDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.DelegateDoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; null; content>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.DelegateDoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; null; content>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.DelegateDoubleMatrix1D; setQuick[int, double]; void; null; content>
<cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.impl.SparseObjectMatrix3D; SparseObjectMatrix3D[java.lang.Object[][][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SparseObjectMatrix3D; SparseObjectMatrix3D[int, int, int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int, int, int, int, int, int, int]; void; cern.colt.matrix.impl.SparseObjectMatrix3D; SparseObjectMatrix3D[int, int, int, cern.colt.map.AbstractIntObjectMap, int, int, int, int, int, int]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseObjectMatrix3D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseObjectMatrix3D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SparseObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; null; elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SparseObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseObjectMatrix3D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; SelectedDenseDoubleMatrix3D[double[], int[], int[], int[], int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.impl.DenseObjectMatrix1D; DenseObjectMatrix1D[java.lang.Object[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; DenseObjectMatrix1D[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; DenseObjectMatrix1D[int, java.lang.Object[], int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; null; System>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; function>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; System>
<cern.colt.matrix.ObjectMatrix1D; haveSharedCells[cern.colt.matrix.ObjectMatrix1D]; boolean; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; copy[]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; other>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; other>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.impl.DenseObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix1D; null; function>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseObjectMatrix1D; swap[cern.colt.matrix.ObjectMatrix1D]; void; null; y>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix1D; toArray[java.lang.Object[]]; void; null; System>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; WrapperDoubleMatrix1D[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.WrapperDoubleMatrix1D; WrapperDoubleMatrix1D[cern.colt.matrix.DoubleMatrix1D]; void; null; newContent>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.WrapperDoubleMatrix1D; like[int]; cern.colt.matrix.DoubleMatrix1D; null; content>
<cern.colt.matrix.DoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.WrapperDoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; null; content>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; setQuick[int, double]; void; null; content>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; setQuick[int, double]; void; null; content>
<cern.colt.matrix.impl.AbstractMatrix1D; checkRange[int, int]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; setQuick[int, double]; void; null; content>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndexes[int[]]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; viewSelection[int[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; setQuick[int, double]; void; null; content>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.impl.WrapperDoubleMatrix1D; getQuick[int]; double; null; content>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.impl.WrapperDoubleMatrix1D; setQuick[int, double]; void; null; content>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; kind>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; kind>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; cern.colt.matrix.DoubleFactory2D.dense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; dense>
<cern.colt.matrix.DoubleMatrix2D; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; dense>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; dense>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; dense>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; dense>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; ADense>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; matrix>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; C>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; timer3>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; A>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; timer3>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; B>
<cern.colt.Timer; millis[]; long; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; timer3>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; null; System.out>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; new Double(args[5])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; new Double(args[6])>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; args[7]>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; new Double(args[8])>
<cern.colt.matrix.impl.Benchmark; benchmark[int, int, java.lang.String, boolean, int, double, double, double]; void; cern.colt.matrix.impl.Benchmark; main[java.lang.String[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix1D; SelectedSparseObjectMatrix1D[int, cern.colt.map.AbstractIntObjectMap, int, int, int[], int]; void; null; this>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SelectedSparseObjectMatrix1D; getQuick[int]; java.lang.Object; null; elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix1D; setQuick[int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix1D; setQuick[int, java.lang.Object]; void; null; this.elements>
<cern.colt.matrix.ObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.impl.SparseObjectMatrix2D; SparseObjectMatrix2D[java.lang.Object[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.SparseObjectMatrix2D; SparseObjectMatrix2D[int, int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SparseObjectMatrix2D; SparseObjectMatrix2D[int, int, cern.colt.map.AbstractIntObjectMap, int, int, int, int]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseObjectMatrix2D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseObjectMatrix2D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SparseObjectMatrix2D; getQuick[int, int]; java.lang.Object; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SparseObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseObjectMatrix2D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; SelectedSparseObjectMatrix3D[cern.colt.map.AbstractIntObjectMap, int[], int[], int[], int]; void; null; this>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; getQuick[int, int, int]; java.lang.Object; null; elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; setQuick[int, int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; SelectedSparseObjectMatrix2D[int, int, cern.colt.map.AbstractIntObjectMap, int, int, int, int, int[], int[], int]; void; null; this>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; getQuick[int, int]; java.lang.Object; null; elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; setQuick[int, int, java.lang.Object]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedSparseObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix1D; SelectedDenseDoubleMatrix1D[int, double[], int, int, int[], int]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; TridiagonalDoubleMatrix2D[double[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; TridiagonalDoubleMatrix2D[int, int]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; TridiagonalDoubleMatrix2D[int, int]; void; null; Math>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[int, int, double]; double; null; function>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; System>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; source>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; y>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; y>
<cern.colt.function.IntIntDoubleFunction; apply[int, int, double]; double; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; function>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; (transposeA ? viewDice() : this)>
<cern.colt.matrix.impl.WrapperDoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; toStringShort[]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.PlusMult; plusMult[double]; cern.jet.math.PlusMult; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.PlusMult>
<cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.TridiagonalDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; apply[int, int, double]; double; null; Crows[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; apply[int, int, double]; double; null; Crows[j]>
<cern.colt.matrix.impl.DenseObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.impl.DenseObjectMatrix3D; DenseObjectMatrix3D[java.lang.Object[][][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix3D; DenseObjectMatrix3D[int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int, int, int, int, int, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix3D; DenseObjectMatrix3D[int, int, int, java.lang.Object[], int, int, int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[java.lang.Object[][][]]; cern.colt.matrix.ObjectMatrix3D; null; System>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; haveSharedCells[cern.colt.matrix.ObjectMatrix3D]; boolean; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; copy[]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix3D; assign[cern.colt.matrix.ObjectMatrix3D]; cern.colt.matrix.ObjectMatrix3D; null; System>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix1D; SelectedDenseObjectMatrix1D[int, java.lang.Object[], int, int, int[], int]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.impl.DenseDoubleMatrix3D; DenseDoubleMatrix3D[double[][][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; DenseDoubleMatrix3D[int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; setUp[int, int, int, int, int, int, int, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; DenseDoubleMatrix3D[int, int, int, double[], int, int, int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; System>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; haveSharedCells[cern.colt.matrix.DoubleMatrix3D]; boolean; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; other>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; System>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.impl.DenseDoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix3D; index[int, int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix3D; index[int, int, int]; int; cern.colt.matrix.impl.DenseDoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; BB>
<cern.colt.function.Double27Function; apply[double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double]; double; cern.colt.matrix.impl.DenseDoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; function>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.DenseDoubleMatrix1D; DenseDoubleMatrix1D[double[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; DenseDoubleMatrix1D[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; DenseDoubleMatrix1D[int, double[], int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[double[]]; cern.colt.matrix.DoubleMatrix1D; null; System>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; function>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; System>
<cern.colt.matrix.DoubleMatrix1D; haveSharedCells[cern.colt.matrix.DoubleMatrix1D]; boolean; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; other>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; other>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; other>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.impl.DenseDoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; null; function>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; cardinality[int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseDoubleMatrix1D; toArray[double[]]; void; null; System>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; null; yy>
<cern.colt.matrix.impl.DenseDoubleMatrix1D; index[int]; int; cern.colt.matrix.impl.DenseDoubleMatrix1D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; myfactory>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; myfactory>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; xmatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; ymatrix>
<cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; myAlgebra>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; System.err>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; System.err>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.QRTest; main[java.lang.String[]]; void; null; System.err>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkBox[int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.impl.AbstractMatrix2D; checkColumnIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.AbstractMatrix2D; checkRowIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D, cern.colt.matrix.impl.AbstractMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D, cern.colt.matrix.impl.AbstractMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D, cern.colt.matrix.impl.AbstractMatrix2D]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowOffset[int]; int; cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnOffset[int]; int; cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.impl.AbstractMatrix2D; index[int, int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; null; AbstractFormatter>
<cern.colt.matrix.impl.AbstractMatrix2D; checkBox[int, int, int, int]; void; cern.colt.matrix.impl.AbstractMatrix2D; vPart[int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix2D; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; emptyLoop>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; emptyLoop>
<java.io.PrintStream; println[int]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; emptyLoop2>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; emptyLoop2>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; freeMemory[]; Runtime>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix; ensureCapacity[int]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<cern.colt.matrix.impl.SparseDoubleMatrix2D; ensureCapacity[int]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; ((SparseDoubleMatrix2D)matrix)>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; seconds[]; timer1>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; cardinality[]; int; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; seconds[]; timer2>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer4>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; view>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer4.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer4>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer4.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer4>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer4.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; seconds[]; timer4>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; freeMemory[]; Runtime>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer3>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; display[]; timer3>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; seconds[]; timer3>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; kind>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; cern.colt.matrix.doublealgo.Transform>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer1>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; matrix>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2>
<cern.colt.matrix.doublealgo.Transform; mult[cern.colt.matrix.DoubleMatrix2D, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; cern.colt.matrix.doublealgo.Transform>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; timer2>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; emptyLoop>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; emptyLoop>
<java.io.PrintStream; println[int]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; emptyLoop2>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; emptyLoop2>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; display[]; timer1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; seconds[]; timer1>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer2.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; display[]; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; display[]; timer2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; seconds[]; timer2>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; freeMemory[]; Runtime>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; display[]; timer3>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; seconds[]; timer3>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; emptyLoop>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; emptyLoop>
<java.io.PrintStream; println[int]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; emptyLoop2>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; emptyLoop2>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer1>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; display[]; timer1>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer1.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; seconds[]; timer1>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer2.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; display[]; timer2>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; display[]; timer2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer2.minus(emptyLoop2)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; seconds[]; timer2>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; freeMemory[]; Runtime>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer3>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; display[]; timer3>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; timer3.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; seconds[]; timer3>
<java.lang.Runtime; gc[]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; sleep[long]; Thread>
<java.lang.Runtime; freeMemory[]; long; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; m>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; null; System.out>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; new Double(args[5])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; new Double(args[6])>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; args[7]>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; kind>
<cern.colt.matrix.impl.BenchmarkMatrix2D; intBenchmarkPrimitive[int, int, int, boolean]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; kind>
<cern.colt.matrix.impl.BenchmarkMatrix2D; intBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<cern.colt.matrix.impl.BenchmarkMatrix2D; intBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; kind>
<cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitive[int, int, int, boolean]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; kind>
<cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkPrimitiveOptimized[int, int, int, boolean]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; command>
<cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmarkMult[int, int, int, java.lang.String, boolean, int, double, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<cern.colt.matrix.impl.BenchmarkMatrix2D; doubleBenchmark[int, int, int, java.lang.String, boolean, int, double, double]; void; cern.colt.matrix.impl.BenchmarkMatrix2D; main[java.lang.String[]]; void; null; this>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.impl.SparseObjectMatrix1D; SparseObjectMatrix1D[java.lang.Object[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; cern.colt.matrix.impl.SparseObjectMatrix1D; SparseObjectMatrix1D[int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.SparseObjectMatrix1D; SparseObjectMatrix1D[int, cern.colt.map.AbstractIntObjectMap, int, int]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseObjectMatrix1D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseObjectMatrix1D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.matrix.impl.SparseObjectMatrix1D; getQuick[int]; java.lang.Object; null; elements>
<cern.colt.map.AbstractIntObjectMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseObjectMatrix1D; setQuick[int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractIntObjectMap; put[int, java.lang.Object]; boolean; cern.colt.matrix.impl.SparseObjectMatrix1D; setQuick[int, java.lang.Object]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseObjectMatrix1D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; SelectedSparseDoubleMatrix3D[cern.colt.map.AbstractIntDoubleMap, int[], int[], int[], int]; void; null; this>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; getQuick[int, int, int]; double; null; elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; setQuick[int, int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; setQuick[int, int, int, double]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.impl.SelectedSparseDoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; SelectedDenseDoubleMatrix2D[int, int, double[], int, int, int, int, int[], int[], int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkRow[int]; void; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedDenseDoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; checkIndex[int]; void; cern.colt.matrix.impl.AbstractMatrix1D; checkIndexes[int[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; checkSize[double[]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix1D; _offset[int]; int; cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; _rank[int]; int; cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; setUp[int, int, int]; void; cern.colt.matrix.impl.AbstractMatrix1D; setUp[int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; stride[int]; int; null; this>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String; cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; null; AbstractFormatter>
<cern.colt.matrix.impl.AbstractMatrix1D; checkRange[int, int]; void; cern.colt.matrix.impl.AbstractMatrix1D; vPart[int, int]; cern.colt.matrix.impl.AbstractMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix2D; assign[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; SparseDoubleMatrix2D[double[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; SparseDoubleMatrix2D[int, int, int, double, double]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; SparseDoubleMatrix2D[int, int, cern.colt.map.AbstractIntDoubleMap, int, int, int, int]; void; null; this>
<cern.colt.map.AbstractMap; clear[]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.function.DoubleFunction]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.map.AbstractIntDoubleMap]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.impl.SparseDoubleMatrix2D; setQuick[int, int, double]; void; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.matrix.impl.SparseDoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, int, double]; double; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, double]; boolean; null; y>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; elements>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; java.lang.Object; apply[int, double]; boolean; null; y>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; elements>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.matrix.impl.SparseDoubleMatrix2D; cardinality[]; int; null; this.elements>
<cern.colt.map.AbstractMap; ensureCapacity[int]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; ensureCapacity[int]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; forEachNonZero[cern.colt.function.IntIntDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.function.IntIntDoubleFunction; apply[int, int, double]; double; java.lang.Object; apply[int, double]; boolean; null; function>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; elements>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.matrix.impl.SparseDoubleMatrix2D; getQuick[int, int]; double; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; removeKey[int]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; setQuick[int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; setQuick[int, int, double]; void; null; this.elements>
<cern.colt.map.AbstractMap; trimToSize[]; void; cern.colt.matrix.impl.SparseDoubleMatrix2D; trimToSize[]; void; null; this.elements>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; (transposeA ? viewDice() : this)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; toStringShort[]; this>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.colt.matrix.impl.AbstractMatrix1D; index[int]; int; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; y>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; this.elements>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; z>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; (transposeB ? B.viewDice() : B)>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; toStringShort[]; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; C>
<cern.jet.math.PlusMult; plusMult[double]; cern.jet.math.PlusMult; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; cern.jet.math.PlusMult>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.matrix.impl.SparseDoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; null; this.elements>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; apply[int, double]; boolean; null; Crows[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; apply[int, double]; boolean; null; Crows[j]>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; setUp[int, int, int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; SelectedDenseObjectMatrix3D[java.lang.Object[], int[], int[], int[], int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; _columnOffset[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewColumn[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; _rowOffset[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.impl.SelectedDenseObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.impl.DenseObjectMatrix2D; DenseObjectMatrix2D[java.lang.Object[][]]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; DenseObjectMatrix2D[int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; setUp[int, int, int, int, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; DenseObjectMatrix2D[int, int, java.lang.Object[], int, int, int, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[java.lang.Object[][]]; cern.colt.matrix.ObjectMatrix2D; null; System>
<cern.colt.matrix.impl.DenseObjectMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.function.ObjectFunction; apply[java.lang.Object]; java.lang.Object; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.function.ObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; function>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; System>
<cern.colt.matrix.ObjectMatrix2D; haveSharedCells[cern.colt.matrix.ObjectMatrix2D]; boolean; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; copy[]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; other>
<cern.colt.matrix.impl.DenseObjectMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; other>
<cern.colt.matrix.impl.DenseObjectMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.DenseObjectMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; other>
<cern.colt.matrix.impl.DenseObjectMatrix2D; index[int, int]; int; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.function.ObjectObjectFunction; apply[java.lang.Object, java.lang.Object]; java.lang.Object; cern.colt.matrix.impl.DenseObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction]; cern.colt.matrix.ObjectMatrix2D; null; function>
<cern.colt.matrix.impl.AbstractFormatter; setAlignment[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; Formatter[java.lang.String]; void; null; this>
<cern.colt.matrix.objectalgo.Formatter; form[cern.colt.matrix.ObjectMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; form[cern.colt.matrix.impl.AbstractMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; this>
<cern.colt.matrix.ObjectMatrix1D; get[int]; java.lang.Object; cern.colt.matrix.objectalgo.Formatter; form[cern.colt.matrix.ObjectMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; matrix>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; form[cern.colt.matrix.ObjectMatrix1D, int, cern.colt.matrix.impl.Former]; java.lang.String; null; String>
<cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String[][]; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; formatRow[cern.colt.matrix.impl.AbstractMatrix1D]; java.lang.String[]; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; null; this>
<cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; format[cern.colt.matrix.ObjectMatrix2D]; java.lang.String[][]; null; matrix>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; copy>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; copy>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setRowSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; copy>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; null; copy>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setColumnSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setRowSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.impl.AbstractFormatter; setSliceSeparator[java.lang.String]; void; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toSourceCode[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; copy>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; null; this>
<cern.colt.matrix.ObjectMatrix1D; like2D[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; matrix>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; easy.viewRow(0)>
<cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; assign[cern.colt.matrix.ObjectMatrix1D]; easy>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix1D]; java.lang.String; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; matrix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; this>
<cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; matrix>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix3D]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; Math>
<java.lang.String; length[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; rowAxisName>
<cern.colt.matrix.ObjectMatrix2D; like[int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; assign[cern.colt.matrix.ObjectMatrix2D]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; titleMatrix.viewPart(r,c,rows,columns)>
<cern.colt.matrix.ObjectMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; assign[cern.colt.matrix.ObjectMatrix2D]; titleMatrix>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; titleMatrix.viewRow(0).viewPart(c,columns)>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; assign[java.lang.Object[]]; titleMatrix.viewRow(0)>
<cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; viewPart[int, int]; titleMatrix>
<java.lang.String; length[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; rowAxisName>
<java.lang.String; length[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; rowAxisName>
<java.lang.String; substring[int, int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; rowAxisName>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; titleMatrix.viewColumn(0).viewPart(r,rowAxisName.length())>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; assign[java.lang.Object[]]; titleMatrix.viewColumn(0)>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; viewPart[int, int]; titleMatrix>
<java.lang.String; length[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; rowAxisName>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; titleMatrix.viewColumn(c - 2).viewPart(r,rows)>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; assign[java.lang.Object[]]; titleMatrix.viewColumn(c - 2)>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; viewPart[int, int]; titleMatrix>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; titleMatrix.viewColumn(c - 2 + 1).viewPart(0,rows + r)>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; assign[java.lang.Object]; titleMatrix.viewColumn(c - 2 + 1)>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; viewPart[int, int]; titleMatrix>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; indexOf[java.lang.String]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; total>
<cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; indexOf[java.lang.String]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; total>
<cern.colt.matrix.impl.AbstractFormatter; repeat[char, int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; indexOf[int]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; str>
<cern.colt.matrix.impl.AbstractFormatter; blanks[int]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; total>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; total>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; total>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; this>
<cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; matrix>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.objectalgo.Formatter; toTitleString[cern.colt.matrix.ObjectMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; buf>
<cern.colt.Sorting; mergeSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.objectalgo.Sorting; runSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; cern.colt.GenericSorting>
<cern.colt.Sorting; quickSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; null; cern.colt.Sorting>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.objectalgo.Sorting; runSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; cern.colt.GenericSorting>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; vector>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; vector>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; vector>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D, java.util.Comparator]; cern.colt.matrix.ObjectMatrix1D; null; vector>
<java.util.Comparator; compare[java.lang.Object, java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; vector>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D, java.util.Comparator]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; viewSelection[int[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix1D, java.util.Comparator]; cern.colt.matrix.ObjectMatrix1D; null; vector>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; col>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; col>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, int]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.objectalgo.ObjectMatrix1DComparator]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.objectalgo.ObjectMatrix1DComparator]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; viewRow[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.objectalgo.ObjectMatrix1DComparator]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.objectalgo.ObjectMatrix1DComparator; compare[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.objectalgo.ObjectMatrix1DComparator]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.objectalgo.ObjectMatrix1DComparator]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix3D]; java.lang.String; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; Formatter>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; matrix.viewRow(row)>
<cern.colt.matrix.ObjectMatrix3D; viewRow[int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; viewColumn[int]; matrix>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; sliceView>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; sliceView>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, int, int]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, cern.colt.matrix.objectalgo.ObjectMatrix2DComparator]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, cern.colt.matrix.objectalgo.ObjectMatrix2DComparator]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.ObjectMatrix3D; viewSlice[int]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, cern.colt.matrix.objectalgo.ObjectMatrix2DComparator]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.objectalgo.ObjectMatrix2DComparator; compare[cern.colt.matrix.ObjectMatrix2D, cern.colt.matrix.ObjectMatrix2D]; int; java.lang.Object; compare[int, int]; int; null; c>
<cern.colt.matrix.objectalgo.Sorting; runSort[int[], int, int, cern.colt.function.IntComparator]; void; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, cern.colt.matrix.objectalgo.ObjectMatrix2DComparator]; cern.colt.matrix.ObjectMatrix3D; null; this>
<cern.colt.matrix.ObjectMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.objectalgo.Sorting; sort[cern.colt.matrix.ObjectMatrix3D, cern.colt.matrix.objectalgo.ObjectMatrix2DComparator]; cern.colt.matrix.ObjectMatrix3D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int[], int, int, int, java.lang.Object[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int[], int, int, int, java.lang.Object[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int[], int, int, int, java.lang.Object[], int, int, int[]]; void; null; matrix>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; columnView>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; columnView>
<cern.colt.matrix.ObjectMatrix1D; getQuick[int]; java.lang.Object; java.lang.Object; compare[int, int]; int; null; columnView>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; av>
<cern.colt.Partitioning; genericPartition[int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int[], int, int, int, java.lang.Object[], int, int, int[]]; void; null; cern.colt.Partitioning>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int, java.lang.Object[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int, java.lang.Object[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int[], int, int, int, java.lang.Object[], int, int, int[]]; void; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int, java.lang.Object[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int, java.lang.Object[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<cern.colt.matrix.ObjectMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.ObjectMatrix2D; cern.colt.matrix.objectalgo.Partitioning; partition[cern.colt.matrix.ObjectMatrix2D, int, java.lang.Object[], int[]]; cern.colt.matrix.ObjectMatrix2D; null; matrix>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Boolean; booleanValue[]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; new Boolean(args[k++])>
<java.lang.Boolean; booleanValue[]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; new Boolean(args[k++])>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.SmpBlas; allocateBlas[int, cern.colt.matrix.linalg.Blas]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; cern.colt.matrix.linalg.SmpBlas>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_dgemm[boolean, boolean]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; fun>
<cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Boolean; booleanValue[]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; new Boolean(args[k++])>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.SmpBlas; allocateBlas[int, cern.colt.matrix.linalg.Blas]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; cern.colt.matrix.linalg.SmpBlas>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_dgemv[boolean]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; fun>
<cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.SmpBlas; allocateBlas[int, cern.colt.matrix.linalg.Blas]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; cern.colt.matrix.linalg.SmpBlas>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_pow[int]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; fun>
<cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; Integer>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Double; doubleValue[]; double; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; new Double(args[k++])>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.linalg.SmpBlas; allocateBlas[int, cern.colt.matrix.linalg.Blas]; void; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; cern.colt.matrix.linalg.SmpBlas>
<java.lang.Object; toString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; fun>
<cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; null; this>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; new cern.colt.matrix.impl.DenseDoubleMatrix2D(A.rows(),A.columns())>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; assign[double]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; C>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; B>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; new cern.colt.matrix.impl.DenseDoubleMatrix2D(A.rows(),A.columns())>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; assign[double]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; C.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; assign[cern.colt.matrix.DoubleMatrix1D]; C>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; D>
<cern.colt.matrix.linalg.Blas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.Algebra.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; B>
<java.lang.Math; abs[int]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; Math>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; set[int, int, double]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; get[int, int]; double; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleFunction]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.doublealgo.Statistic; correlation[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.doublealgo.Statistic>
<cern.colt.matrix.doublealgo.Statistic; covariance[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.doublealgo.Statistic>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleFunction]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; cern.colt.matrix.linalg.SmpBlas.smpBlas>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; lu>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.linalg.Property.ZERO>
<cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; lu>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; B>
<cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; lu>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; B>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; C>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; B>
<cern.colt.matrix.impl.DenseDoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; new cern.colt.matrix.impl.DenseDoubleMatrix2D(A.rows(),A.columns())>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; assign[double]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; D>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; C.viewRow(0)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; assign[cern.colt.matrix.DoubleMatrix1D]; C>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; D>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; cardinality[]; int; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; zAssign8Neighbors[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function]; void; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; init[]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewSorted[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; apply[cern.colt.Timer]; void; null; A>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getFactory[java.lang.String]; cern.colt.matrix.DoubleFactory2D; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getFactory[java.lang.String]; cern.colt.matrix.DoubleFactory2D; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getFactory[java.lang.String]; cern.colt.matrix.DoubleFactory2D; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_dgemm[boolean, boolean]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_dgemv[boolean]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; fun_pow[int]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funAssign[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funAssignGetSet[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funAssignGetSetQuick[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funElementwiseMult[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funElementwiseMultB[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funSOR5[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funSOR8[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funLUDecompose[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funLUSolve[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funAssignLog[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; funAssignPlusMult[]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemm[java.lang.String[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; bench_dgemv[java.lang.String[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; cmd>
<cern.colt.matrix.bench.BenchmarkMatrix; bench_pow[java.lang.String[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<cern.colt.matrix.bench.BenchmarkMatrix; benchGeneric[cern.colt.matrix.bench.Double2DProcedure, java.lang.String[]]; void; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<cern.colt.matrix.bench.BenchmarkMatrix; commands[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; args[0]>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; args[0]>
<java.lang.String; indexOf[java.lang.String]; int; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; commands()>
<cern.colt.matrix.bench.BenchmarkMatrix; commands[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; indexOf[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; BenchmarkKernel>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.Version; asString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; cern.colt.Version>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; new cern.colt.Timer()>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; args[0]>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; exc>
<java.io.StreamTokenizer; eolIsSignificant[boolean]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; stream>
<java.io.StreamTokenizer; slashSlashComments[boolean]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; stream>
<java.io.StreamTokenizer; slashStarComments[boolean]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; stream>
<java.io.StreamTokenizer; nextToken[]; int; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; stream>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; handle[java.lang.String[]]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<cern.colt.matrix.impl.FormerFactory; create[java.lang.String]; cern.colt.matrix.impl.Former; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; new cern.colt.matrix.impl.FormerFactory()>
<cern.colt.matrix.impl.Former; form[double]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; formatter>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; words>
<java.io.BufferedReader; close[]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; reader>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; exc>
<java.io.BufferedReader; readLine[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; reader>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<java.io.BufferedReader; close[]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; reader>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; exc>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; minutes[]; float; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; main[java.lang.String[]]; void; null; System.out>
<cern.colt.matrix.DoubleFactory3D; make[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; DoubleFactory3D.dense>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; new cern.colt.Timer()>
<cern.colt.matrix.bench.BenchmarkMatrix; getFactory[java.lang.String]; cern.colt.matrix.DoubleFactory2D; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; this>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; factory>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; factory>
<cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; function>
<cern.colt.matrix.bench.Double2DProcedure; operations[]; double; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; function>
<cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; BenchmarkKernel>
<cern.colt.matrix.DoubleMatrix3D; set[int, int, int, double]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; timings>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; runTime>
<java.lang.Integer; toString[int]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; Integer>
<java.lang.Double; toString[double]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; Double>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<cern.colt.matrix.DoubleMatrix3D; viewDice[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; timings>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix3D, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; new cern.colt.matrix.doublealgo.Formatter("%1.3G")>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; run[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure, java.lang.String[], int[], double[]]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; make[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; DoubleFactory2D.dense>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; new cern.colt.Timer()>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; System.out>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; factory>
<cern.colt.matrix.DoubleFactory2D; sample[int, int, double, double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; factory>
<cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; function>
<cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; BenchmarkKernel>
<cern.colt.matrix.bench.Double2DProcedure; operations[]; double; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; function>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; timings.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; set[int, double]; timings>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; timings.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; set[int, double]; timings>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; timings.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; set[int, double]; timings>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; timings.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; set[int, double]; timings>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; runTime>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; System.out>
<cern.colt.matrix.doublealgo.Formatter; toTitleString[cern.colt.matrix.DoubleMatrix2D, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, java.lang.String, hep.aida.bin.BinFunction1D[]]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; new cern.colt.matrix.doublealgo.Formatter("%1.3G")>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.matrix.bench.BenchmarkMatrix; runSpecial[double, java.lang.String, cern.colt.matrix.bench.Double2DProcedure]; void; null; System.out>
<cern.colt.matrix.bench.BenchmarkMatrix; commands[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; usage[]; java.lang.String; null; this>
<java.lang.Object; toString[]; java.lang.String; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; getGenericFunction(cmd)>
<cern.colt.matrix.bench.BenchmarkMatrix; getGenericFunction[java.lang.String]; cern.colt.matrix.bench.Double2DProcedure; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; toString[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.matrix.bench.BenchmarkMatrix; usage[java.lang.String]; java.lang.String; null; cmd>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<cern.colt.matrix.bench.TimerProcedure; init[]; void; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; procedure>
<cern.colt.matrix.bench.TimerProcedure; apply[cern.colt.Timer]; void; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; procedure>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<cern.colt.matrix.bench.TimerProcedure; init[]; void; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; procedure>
<cern.colt.matrix.bench.TimerProcedure; apply[cern.colt.Timer]; void; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; procedure>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<cern.colt.matrix.bench.TimerProcedure; init[]; void; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; procedure>
<java.lang.System; currentTimeMillis[]; long; cern.colt.matrix.bench.BenchmarkKernel; run[double, cern.colt.matrix.bench.TimerProcedure]; float; null; System>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object[]]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; null; matrix.viewColumn(0)>
<cern.colt.matrix.ObjectMatrix2D; viewColumn[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; assign[java.lang.Object[]]; matrix>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; null; System>
<cern.colt.matrix.ObjectMatrix2D; set[int, int, java.lang.Object]; void; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; null; matrix>
<cern.colt.matrix.impl.AbstractFormatter; setPrintShape[boolean]; void; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; null; formatter>
<cern.colt.matrix.objectalgo.Formatter; toString[cern.colt.matrix.ObjectMatrix2D]; java.lang.String; cern.colt.matrix.bench.BenchmarkKernel; systemInfo[]; java.lang.String; null; formatter>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.bench.Double2DProcedure; operations[]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.bench.Double2DProcedure; setParameters[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; L>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Lrows[k]>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; L>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Lrows[j]>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; L>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.CholeskyDecomposition; CholeskyDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; L>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Xrows[i]>
<cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Xrows[k]>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Xrows[k]>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Xrows[i]>
<cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.CholeskyDecomposition; XXXsolveBuggy[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; L>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.CholeskyDecomposition; isSymmetricPositiveDefinite[]; boolean; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.CholeskyDecomposition; getL[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.CholeskyDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; this>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; L>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Property.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; toArray[]; double[][]; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Arg>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Arg>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Arg>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; pow[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; SingularValueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; cond[]; double; null; Math>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; getS[]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; getU[]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense.make(U)>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; getU[]; cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; DoubleFactory2D.dense>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; getU[]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; getV[]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<java.lang.Math; pow[double, double]; double; cern.colt.matrix.linalg.SingularValueDecomposition; rank[]; int; null; Math>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.SingularValueDecomposition; rank[]; int; null; Math>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; cond[]; double; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; rank[]; int; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; norm2[]; double; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; getU[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; getS[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.SingularValueDecomposition; getV[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.Property; isSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Property.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.EigenvalueDecomposition; tred2[]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.EigenvalueDecomposition; orthes[]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; EigenvalueDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; null; Math>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.EigenvalueDecomposition; getD[]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.EigenvalueDecomposition; getImagEigenvalues[]; cern.colt.matrix.DoubleMatrix1D; null; DoubleFactory1D.dense>
<cern.colt.matrix.DoubleFactory1D; make[double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.EigenvalueDecomposition; getRealEigenvalues[]; cern.colt.matrix.DoubleMatrix1D; null; DoubleFactory1D.dense>
<cern.colt.matrix.DoubleFactory2D; make[double[][]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.EigenvalueDecomposition; getV[]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<java.lang.Math; pow[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; this>
<cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; this>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; this>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<cern.colt.matrix.linalg.EigenvalueDecomposition; cdiv[double, double, double, double]; void; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; this>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.EigenvalueDecomposition; hqr2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; orthes[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; orthes[]; void; null; Math>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.EigenvalueDecomposition; getRealEigenvalues[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.EigenvalueDecomposition; getImagEigenvalues[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.EigenvalueDecomposition; getD[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.EigenvalueDecomposition; getV[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Math; pow[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Algebra>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Algebra>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tql2[]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tred2[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.EigenvalueDecomposition; tred2[]; void; null; Math>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleFunction]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.SeqBlas; dasum[cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; daxpy[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.SeqBlas; daxpy[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; daxpy[double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.SeqBlas; daxpy[double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dcopy[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; dcopy[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.SeqBlas; ddot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.jet.math.PlusMult; plusMult[double]; cern.jet.math.PlusMult; cern.colt.matrix.linalg.SeqBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; null; cern.jet.math.PlusMult>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SeqBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; null; A.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; A>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.SeqBlas; dnrm2[cern.colt.matrix.DoubleMatrix1D]; double; null; Math>
<cern.colt.matrix.linalg.Algebra; norm2[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.SeqBlas; dnrm2[cern.colt.matrix.DoubleMatrix1D]; double; null; Algebra.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix1D; checkSize[cern.colt.matrix.impl.AbstractMatrix1D]; void; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; copy[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; x>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; x>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; y>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; y>
<cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.SeqBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; F>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<cern.colt.matrix.linalg.SeqBlas; sign[double, double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; this>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; drotg[double, double, double[]]; void; null; Math>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dscal[double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.SeqBlas; dscal[double, cern.colt.matrix.DoubleMatrix1D]; void; null; F>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; dscal[double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.SeqBlas; dscal[double, cern.colt.matrix.DoubleMatrix2D]; void; null; F>
<cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.impl.AbstractMatrix2D; checkShape[cern.colt.matrix.impl.AbstractMatrix2D]; void; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; A.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; swap[cern.colt.matrix.DoubleMatrix1D]; A>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; tmp>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; b>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SeqBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.SeqBlas; idamax[cern.colt.matrix.DoubleMatrix1D]; int; null; x>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; idamax[cern.colt.matrix.DoubleMatrix1D]; int; null; Math>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.SeqBlas; idamax[cern.colt.matrix.DoubleMatrix1D]; int; null; x>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; sign[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.SeqBlas; sign[double, double]; double; null; Math>
<cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; cern.colt.matrix.linalg.SmpBlas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleFunction]; void; null; this>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleFunction]; void; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; null; seqBlas>
<cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; cern.colt.matrix.linalg.SmpBlas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; void; null; this>
<cern.colt.matrix.linalg.Blas; assign[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction]; void; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dasum[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.SmpBlas; dasum[cern.colt.matrix.DoubleMatrix1D]; double; null; seqBlas>
<cern.colt.matrix.linalg.Blas; daxpy[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; daxpy[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; daxpy[double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; daxpy[double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dcopy[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dcopy[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dcopy[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dcopy[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; ddot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.SmpBlas; ddot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; seqBlas>
<cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; C>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; toStringShort[]; java.lang.String; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; C>
<java.lang.Math; min[long, long]; long; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; C>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; C>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.FJTask; run[]; void; null; seqBlas>
<not found; invoke[]; not found; cern.colt.matrix.linalg.SmpBlas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; null; this.smp.taskGroup>
<not found; coInvoke[]; not found; cern.colt.matrix.linalg.FJTask; run[]; void; null; this>
<cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<java.lang.Math; min[long, long]; long; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; Math>
<cern.colt.matrix.linalg.Blas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; y>
<cern.colt.matrix.linalg.Blas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.FJTask; run[]; void; null; seqBlas>
<not found; invoke[]; not found; cern.colt.matrix.linalg.SmpBlas; dgemv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; this.smp.taskGroup>
<not found; coInvoke[]; not found; cern.colt.matrix.linalg.FJTask; run[]; void; null; this>
<cern.colt.matrix.linalg.Blas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dger[double, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dnrm2[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.SmpBlas; dnrm2[cern.colt.matrix.DoubleMatrix1D]; double; null; seqBlas>
<cern.colt.matrix.linalg.Blas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; cern.colt.matrix.linalg.SmpBlas; drot[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; drotg[double, double, double[]]; void; cern.colt.matrix.linalg.SmpBlas; drotg[double, double, double[]]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dscal[double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dscal[double, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dscal[double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dscal[double, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dswap[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dswap[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.SmpBlas; dswap[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dsymv[boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D, double, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.SmpBlas; dtrmv[boolean, boolean, boolean, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; void; null; seqBlas>
<cern.colt.matrix.linalg.Blas; idamax[cern.colt.matrix.DoubleMatrix1D]; int; cern.colt.matrix.linalg.SmpBlas; idamax[cern.colt.matrix.DoubleMatrix1D]; int; null; seqBlas>
<cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[][]; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; this.smp>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; A>
<cern.colt.matrix.linalg.Matrix2DMatrix2DFunction; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; fun>
<cern.colt.matrix.linalg.Smp; run[cern.colt.matrix.DoubleMatrix2D[], cern.colt.matrix.DoubleMatrix2D[], double[], cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; void; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; this.smp>
<cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; this.smp>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; A>
<cern.colt.matrix.linalg.Matrix2DMatrix2DFunction; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; fun>
<cern.colt.matrix.linalg.Smp; run[cern.colt.matrix.DoubleMatrix2D[], cern.colt.matrix.DoubleMatrix2D[], double[], cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; void; cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; null; this.smp>
<cern.colt.matrix.linalg.Smp; stats[]; void; cern.colt.matrix.linalg.SmpBlas; stats[]; void; null; this.smp>
<cern.colt.matrix.linalg.SmpBlas; run[cern.colt.matrix.DoubleMatrix2D, boolean, cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; double[]; cern.colt.matrix.linalg.SmpBlas; xsum[cern.colt.matrix.DoubleMatrix2D]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; zSum[]; double; java.lang.Object; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; null; AA>
<cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Property.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; like1D[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.Algebra; hypotFunction[]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR.viewColumn(k)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; viewPart[int, int]; QR>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Algebra>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QRcolumnsPart[k]>
<cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.jet.math.Functions>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR.viewColumn(j)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; viewPart[int, int]; QR>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QRcolumnsPart[k]>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; QR>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.QRDecomposition; QRDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; Rdiag>
<cern.colt.matrix.linalg.Algebra; trapezoidalLower[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; getH[]; cern.colt.matrix.DoubleMatrix2D; null; Algebra.DEFAULT>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; getH[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; QR.viewColumn(k)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; viewPart[int, int]; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; Q>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; Q.viewColumn(j)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; viewPart[int, int]; Q>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; QRcolk>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; Qcolj>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; null; F>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; R>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; R>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; Rdiag>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; null; R>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.QRDecomposition; hasFullRank[]; boolean; null; Rdiag>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.linalg.QRDecomposition; hasFullRank[]; boolean; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Rdiag>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; QR>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; X>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.QRDecomposition; hasFullRank[]; boolean; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.QRDecomposition; getH[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.QRDecomposition; getQ[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.QRDecomposition; getR[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; this>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; QR>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; null; buf>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.Smp; Smp[int]; void; null; Math>
<not found; interruptAll[]; not found; cern.colt.matrix.linalg.Smp; finalize[]; void; null; this.taskGroup>
<cern.colt.matrix.linalg.Matrix2DMatrix2DFunction; apply[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.FJTask; run[]; void; null; function>
<not found; invoke[]; not found; cern.colt.matrix.linalg.Smp; run[cern.colt.matrix.DoubleMatrix2D[], cern.colt.matrix.DoubleMatrix2D[], double[], cern.colt.matrix.linalg.Matrix2DMatrix2DFunction]; void; null; this.taskGroup>
<not found; coInvoke[]; not found; cern.colt.matrix.linalg.FJTask; run[]; void; null; this>
<java.lang.Math; min[long, long]; long; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; Math>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[][]; null; this>
<cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; cern.colt.matrix.linalg.Smp; splitBlockedNN[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[][]; null; this>
<java.lang.Math; min[long, long]; long; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; Math>
<cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A.viewPart(0,i,A.rows(),A.columns() - i)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; viewStrides[int, int]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewStrides[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A.viewPart(i,0,A.rows() - i,A.columns())>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; viewStrides[int, int]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Smp; splitStridedNN[cern.colt.matrix.DoubleMatrix2D, int, long]; cern.colt.matrix.DoubleMatrix2D[]; null; A>
<not found; stats[]; not found; cern.colt.matrix.linalg.Smp; stats[]; void; null; this.taskGroup>
<cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecomposition; LUDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; quick>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecomposition; LUDecomposition[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; cern.colt.matrix.linalg.LUDecomposition; det[]; double; null; quick>
<cern.colt.matrix.linalg.LUDecompositionQuick; getDoublePivot[]; double[]; cern.colt.matrix.linalg.LUDecomposition; getDoublePivot[]; double[]; null; quick>
<cern.colt.matrix.linalg.LUDecompositionQuick; getL[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecomposition; getL[]; cern.colt.matrix.DoubleMatrix2D; null; quick>
<java.lang.Object; clone[]; int[]; cern.colt.matrix.linalg.LUDecomposition; getPivot[]; int[]; null; quick.getPivot()>
<cern.colt.matrix.linalg.LUDecompositionQuick; getPivot[]; int[]; cern.colt.matrix.linalg.LUDecomposition; getPivot[]; int[]; clone[]; quick>
<cern.colt.matrix.linalg.LUDecompositionQuick; getU[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecomposition; getU[]; cern.colt.matrix.DoubleMatrix2D; null; quick>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecomposition; isNonsingular[]; boolean; null; quick>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; B>
<cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; quick>
<cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; cern.colt.matrix.linalg.LUDecomposition; toString[]; java.lang.String; null; quick>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Diagonal; inverse[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Diagonal; inverse[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Diagonal; inverse[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.Diagonal; inverse[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; Property[double]; void; null; Math>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; blanks[int]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.Property; blanks[int]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.doublealgo.Formatter>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractFormatter; shape[cern.colt.matrix.impl.AbstractMatrix2D]; java.lang.String; cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.doublealgo.Formatter>
<cern.colt.matrix.DoubleMatrix2D; cardinality[]; int; cern.colt.matrix.linalg.Property; density[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.linalg.Property; density[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, double]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, double]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, double]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, double]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; B>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; B>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; B>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; B>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; B>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; B>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; B>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; B>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; B>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; null; Math>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; A>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A.viewColumn(i)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.Property; generateNonSingular[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Property; get[cern.colt.list.ObjectArrayList, int]; java.lang.String; null; list>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A.viewColumn(i)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A.viewRow(i)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isNonNegative[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isNonNegative[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isNonNegative[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isPositive[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isPositive[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isPositive[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isSingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.linalg.Algebra; det[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Property; isSingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Algebra.DEFAULT>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isSingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isSquare[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isSquare[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; isTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; isSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Property; isSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[int]; int; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; isTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; A>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix2D, double]; boolean; cern.colt.matrix.linalg.Property; isZero[cern.colt.matrix.DoubleMatrix2D]; boolean; null; this>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; setTolerance[double]; void; null; Math>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; density[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByRow[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isDiagonallyDominantByColumn[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isIdentity[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isLowerBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isNonNegative[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isOrthogonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isPositive[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isSingular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isSkewSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isSquare[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isStrictlyLowerTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isStrictlyTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isStrictlyUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isSymmetric[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isTridiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isUnitTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isUpperBidiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isUpperTriangular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; isZero[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; lowerBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; semiBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.String; compareTo[java.lang.String]; int; java.lang.Object; compare[int, int]; int; null; get(names,a)>
<cern.colt.matrix.linalg.Property; get[cern.colt.list.ObjectArrayList, int]; java.lang.String; java.lang.Object; compare[int, int]; int; compareTo[java.lang.String]; this>
<cern.colt.matrix.linalg.Property; get[cern.colt.list.ObjectArrayList, int]; java.lang.String; java.lang.Object; compare[int, int]; int; null; this>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; cern.colt.GenericSorting>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.String; length[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; ((String)names.get(i))>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; length[]; names>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; Math>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; blanks[int]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<java.lang.String; length[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; name>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Property; upperBandwidth[cern.colt.matrix.DoubleMatrix2D]; int; null; A>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.LUDecompositionQuick; LUDecompositionQuick[]; void; null; Property.DEFAULT>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; setLU[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; like[]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU.viewColumn(0)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; like[]; LU>
<cern.jet.math.Mult; mult[double]; cern.jet.math.Mult; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.jet.math.Mult>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int, cern.colt.list.IntArrayList]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUrows[i]>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D, int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUrows[i]>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.list.AbstractIntList; binarySearch[int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<cern.colt.list.IntArrayList; beforeInsert[int, int]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<cern.colt.list.AbstractList; remove[int]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<cern.colt.list.AbstractIntList; binarySearch[int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; Math>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUcolj>
<cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LUrows[p]>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; LU.viewColumn(j).viewPart(j + 1,m - (j + 1))>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; assign[cern.colt.function.DoubleFunction]; LU.viewColumn(j)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; viewPart[int, int]; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; setLU[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.Property; isSquare[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; algebra.property()>
<cern.colt.matrix.linalg.Algebra; property[]; cern.colt.matrix.linalg.Property; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; isSquare[cern.colt.matrix.DoubleMatrix2D]; algebra>
<cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; setLU[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; this>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; setLU[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; decompose[cern.colt.matrix.DoubleMatrix2D, int]; void; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; n[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; null; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; getDoublePivot[]; double[]; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; getL[]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; getL[]; cern.colt.matrix.DoubleMatrix2D; null; LU>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; getLU[]; cern.colt.matrix.DoubleMatrix2D; null; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; getU[]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; getU[]; cern.colt.matrix.DoubleMatrix2D; null; LU>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; matrix>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; algebra.property()>
<cern.colt.matrix.linalg.Algebra; property[]; cern.colt.matrix.linalg.Property; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; tolerance[]; algebra>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; Math>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A.viewPart(0,min,rows,columns - min)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; lowerTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[double]; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; null; LU>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; n[]; int; null; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; setLU[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; algebra.property()>
<cern.colt.matrix.linalg.Algebra; property[]; cern.colt.matrix.linalg.Property; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; algebra>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; n[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; this>
<cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; algebra>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; getQuick[int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix1D]; void; null; B>
<cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; algebra.property()>
<cern.colt.matrix.linalg.Algebra; property[]; cern.colt.matrix.linalg.Property; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; algebra>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; n[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; algebra>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.jet.math.Mult; div[double]; cern.jet.math.Mult; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.jet.math.Mult>
<cern.jet.math.PlusMult; minusMult[double]; cern.jet.math.PlusMult; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.jet.math.PlusMult>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.DoubleFactory1D.dense>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Browk>
<cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Browk>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Brows[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Brows[i]>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Brows[k]>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; cern.colt.matrix.DoubleFactory1D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Browk>
<cern.colt.matrix.DoubleMatrix1D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList, int]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Browk>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; nonZeroIndexes>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction, cern.colt.list.IntArrayList]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Brows[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; null; Brows[i]>
<cern.colt.matrix.linalg.Property; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; algebra.property()>
<cern.colt.matrix.linalg.Algebra; property[]; cern.colt.matrix.linalg.Property; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; checkRectangular[cern.colt.matrix.DoubleMatrix2D]; algebra>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.linalg.LUDecompositionQuick; n[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; algebra>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; LU>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.LUDecompositionQuick; solveOld[cern.colt.matrix.DoubleMatrix2D]; void; null; B>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[boolean]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.LUDecompositionQuick; isNonsingular[]; boolean; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.LUDecompositionQuick; det[]; double; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.LUDecompositionQuick; getPivot[]; int[]; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.LUDecompositionQuick; getL[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<cern.colt.matrix.linalg.LUDecompositionQuick; getU[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; cern.colt.matrix.DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; LU>
<cern.colt.matrix.linalg.LUDecompositionQuick; solve[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; exc>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.LUDecompositionQuick; toString[]; java.lang.String; null; buf>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Math>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[double]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A.viewPart(min,0,rows - min,columns)>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.LUDecompositionQuick; upperTriangular[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[double]; A>
<cern.colt.matrix.linalg.LUDecompositionQuick; m[]; int; cern.colt.matrix.linalg.LUDecompositionQuick; xgetDoublePivot[]; double[]; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Algebra; Algebra[]; void; null; Property.DEFAULT>
<cern.colt.matrix.linalg.Algebra; setProperty[cern.colt.matrix.linalg.Property]; void; cern.colt.matrix.linalg.Algebra; Algebra[double]; void; null; this>
<cern.colt.matrix.linalg.Property; tolerance[]; double; cern.colt.matrix.linalg.Algebra; clone[]; java.lang.Object; null; property>
<cern.colt.matrix.linalg.SingularValueDecomposition; cond[]; double; cern.colt.matrix.linalg.Algebra; cond[cern.colt.matrix.DoubleMatrix2D]; double; null; svd(A)>
<cern.colt.matrix.linalg.Algebra; svd[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.SingularValueDecomposition; cern.colt.matrix.linalg.Algebra; cond[cern.colt.matrix.DoubleMatrix2D]; double; cond[]; this>
<cern.colt.matrix.linalg.LUDecomposition; det[]; double; cern.colt.matrix.linalg.Algebra; det[cern.colt.matrix.DoubleMatrix2D]; double; null; lu(A)>
<cern.colt.matrix.linalg.Algebra; lu[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.LUDecomposition; cern.colt.matrix.linalg.Algebra; det[cern.colt.matrix.DoubleMatrix2D]; double; det[]; this>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; null; Math>
<cern.colt.matrix.linalg.Algebra; hypot[double, double]; double; java.lang.Object; apply[double, double]; double; null; this>
<cern.colt.matrix.linalg.Property; isSquare[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; property>
<cern.colt.matrix.linalg.Property; isDiagonal[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; property>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.Diagonal; inverse[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; Diagonal>
<cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; zDotProduct[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; zMult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.DoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A.viewRow(row)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix1D]; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A.viewColumn(column)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix1D, cern.colt.function.DoubleDoubleFunction]; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix2D]; double; null; Math>
<cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix2D]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.Algebra; norm2[cern.colt.matrix.DoubleMatrix1D]; double; null; this>
<cern.colt.matrix.linalg.SingularValueDecomposition; norm2[]; double; cern.colt.matrix.linalg.Algebra; norm2[cern.colt.matrix.DoubleMatrix2D]; double; null; svd(A)>
<cern.colt.matrix.linalg.Algebra; svd[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.SingularValueDecomposition; cern.colt.matrix.linalg.Algebra; norm2[cern.colt.matrix.DoubleMatrix2D]; double; norm2[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; size[]; int; cern.colt.matrix.linalg.Algebra; normF[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Algebra; normF[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.linalg.Algebra; hypotFunction[]; cern.colt.function.DoubleDoubleFunction; cern.colt.matrix.linalg.Algebra; normF[cern.colt.matrix.DoubleMatrix2D]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.DoubleMatrix1D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix1D]; double; null; x>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<java.lang.Math; max[double, double]; double; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix2D]; double; null; Math>
<cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix1D]; double; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix2D]; double; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix1D; toArray[]; double[]; cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix1D; toArray[double[]]; void; cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewSelection[int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; permuteColumns[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; permuteColumns[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.Algebra; permute[cern.colt.matrix.DoubleMatrix1D, int[], double[]]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; swap[cern.colt.matrix.DoubleMatrix1D]; void; java.lang.Object; swap[int, int]; void; null; A.viewRow(a)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; swap[int, int]; void; swap[cern.colt.matrix.DoubleMatrix1D]; A>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; java.lang.Object; swap[int, int]; void; null; A>
<cern.colt.GenericPermuting; permute[int[], cern.colt.Swapper, int[], int[]]; void; cern.colt.matrix.linalg.Algebra; permuteRows[cern.colt.matrix.DoubleMatrix2D, int[], int[]]; cern.colt.matrix.DoubleMatrix2D; null; cern.colt.GenericPermuting>
<cern.colt.matrix.linalg.Property; checkSquare[cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; Property.DEFAULT>
<cern.colt.matrix.linalg.Algebra; inverse[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleFactory2D; identity[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; DoubleFactory2D.dense>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; like[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; T>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; blas>
<cern.colt.bitvector.QuickBitVector; mostSignificantBit[int]; int; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; cern.colt.bitvector.QuickBitVector>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; blas>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; blas>
<cern.colt.matrix.linalg.Blas; dgemm[boolean, boolean, double, cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, cern.colt.matrix.DoubleMatrix2D]; void; cern.colt.matrix.linalg.Algebra; pow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; blas>
<cern.colt.matrix.linalg.SingularValueDecomposition; rank[]; int; cern.colt.matrix.linalg.Algebra; rank[cern.colt.matrix.DoubleMatrix2D]; int; null; svd(A)>
<cern.colt.matrix.linalg.Algebra; svd[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.SingularValueDecomposition; cern.colt.matrix.linalg.Algebra; rank[cern.colt.matrix.DoubleMatrix2D]; int; rank[]; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.LUDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; lu(A)>
<cern.colt.matrix.linalg.Algebra; lu[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.LUDecomposition; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; solve[cern.colt.matrix.DoubleMatrix2D]; this>
<cern.colt.matrix.linalg.QRDecomposition; solve[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; qr(A)>
<cern.colt.matrix.linalg.Algebra; qr[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.linalg.QRDecomposition; cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; solve[cern.colt.matrix.DoubleMatrix2D]; this>
<cern.colt.matrix.linalg.Algebra; solve[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; solveTranspose[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.linalg.Algebra; transpose[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; solveTranspose[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.linalg.Algebra; transpose[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; solveTranspose[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; null; sub.viewRow(r)>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix1D]; sub>
<cern.colt.matrix.DoubleMatrix2D; viewRow[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int[], int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; like[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; sub.viewColumn(c)>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; assign[cern.colt.matrix.DoubleMatrix1D]; sub>
<cern.colt.matrix.DoubleMatrix2D; viewColumn[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int[]]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewPart[int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; subMatrix[cern.colt.matrix.DoubleMatrix2D, int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; cond[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; det[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; norm1[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; norm2[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; normF[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; normInfinity[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; rank[cern.colt.matrix.DoubleMatrix2D]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; String>
<cern.colt.matrix.linalg.Algebra; trace[cern.colt.matrix.DoubleMatrix2D]; double; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.String; compareTo[java.lang.String]; int; java.lang.Object; compare[int, int]; int; null; Property.get(names,a)>
<cern.colt.matrix.linalg.Property; get[cern.colt.list.ObjectArrayList, int]; java.lang.String; java.lang.Object; compare[int, int]; int; compareTo[java.lang.String]; Property>
<cern.colt.matrix.linalg.Property; get[cern.colt.list.ObjectArrayList, int]; java.lang.String; java.lang.Object; compare[int, int]; int; null; Property>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; java.lang.Object; swap[int, int]; void; null; values>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; cern.colt.GenericSorting>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.String; length[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; ((String)names.get(i))>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; length[]; names>
<java.lang.Math; max[int, int]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; Math>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; blanks[int]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; Property>
<java.lang.String; length[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; name>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; values>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; names>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Algebra; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.Property; toString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; Property.DEFAULT>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.LUDecomposition; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; lu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.QRDecomposition; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; qr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.CholeskyDecomposition; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; chol>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.EigenvalueDecomposition; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; eig>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; exc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<cern.colt.matrix.linalg.SingularValueDecomposition; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; svd>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.matrix.linalg.Algebra; toVerboseString[cern.colt.matrix.DoubleMatrix2D]; java.lang.String; null; buf>
<java.lang.Math; min[int, int]; int; cern.colt.matrix.linalg.Algebra; trace[cern.colt.matrix.DoubleMatrix2D]; double; null; Math>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; trace[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; trace[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; getQuick[int, int]; double; cern.colt.matrix.linalg.Algebra; trace[cern.colt.matrix.DoubleMatrix2D]; double; null; A>
<cern.colt.matrix.DoubleMatrix2D; viewDice[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; transpose[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; rows[]; int; cern.colt.matrix.linalg.Algebra; trapezoidalLower[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.impl.AbstractMatrix2D; columns[]; int; cern.colt.matrix.linalg.Algebra; trapezoidalLower[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix2D; setQuick[int, int, double]; void; cern.colt.matrix.linalg.Algebra; trapezoidalLower[cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.DoubleMatrix1D; like2D[int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; xmultOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; xmultOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; x>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.linalg.Algebra; xmultOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; y>
<cern.colt.matrix.linalg.Algebra; multOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; xmultOuter[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix2D; copy[]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; xpowSlow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; A>
<cern.colt.matrix.linalg.Algebra; mult[cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.linalg.Algebra; xpowSlow[cern.colt.matrix.DoubleMatrix2D, int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; B>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; matrix.viewPart(0,A.size())>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; matrix.viewPart(A.size(),B.size())>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; append[cern.colt.matrix.ObjectMatrix1D, cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; null; B>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; parts[i]>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; vector.viewPart(size,parts[i].size())>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; vector>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; parts[i]>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; make[cern.colt.matrix.ObjectMatrix1D[]]; cern.colt.matrix.ObjectMatrix1D; null; parts[i]>
<cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[int, java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; null; make(size)>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[int, java.lang.Object]; cern.colt.matrix.ObjectMatrix1D; assign[java.lang.Object]; this>
<cern.colt.list.ObjectArrayList; size[]; int; cern.colt.matrix.ObjectFactory1D; make[cern.colt.list.ObjectArrayList]; cern.colt.matrix.ObjectMatrix1D; null; values>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; make[cern.colt.list.ObjectArrayList]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; set[int, java.lang.Object]; void; cern.colt.matrix.ObjectFactory1D; make[cern.colt.list.ObjectArrayList]; cern.colt.matrix.ObjectMatrix1D; null; vector>
<cern.colt.list.ObjectArrayList; get[int]; java.lang.Object; cern.colt.matrix.ObjectFactory1D; make[cern.colt.list.ObjectArrayList]; cern.colt.matrix.ObjectMatrix1D; null; values>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; repeat[cern.colt.matrix.ObjectMatrix1D, int]; cern.colt.matrix.ObjectMatrix1D; null; A>
<cern.colt.matrix.ObjectFactory1D; make[int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; repeat[cern.colt.matrix.ObjectMatrix1D, int]; cern.colt.matrix.ObjectMatrix1D; null; this>
<cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; repeat[cern.colt.matrix.ObjectMatrix1D, int]; cern.colt.matrix.ObjectMatrix1D; null; matrix.viewPart(size * i,size)>
<cern.colt.matrix.ObjectMatrix1D; viewPart[int, int]; cern.colt.matrix.ObjectMatrix1D; cern.colt.matrix.ObjectFactory1D; repeat[cern.colt.matrix.ObjectMatrix1D, int]; cern.colt.matrix.ObjectMatrix1D; assign[cern.colt.matrix.ObjectMatrix1D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.ObjectFactory1D; toList[cern.colt.matrix.ObjectMatrix1D]; cern.colt.list.ObjectArrayList; null; values>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.ObjectFactory1D; toList[cern.colt.matrix.ObjectMatrix1D]; cern.colt.list.ObjectArrayList; null; list>
<cern.colt.list.ObjectArrayList; set[int, java.lang.Object]; void; cern.colt.matrix.ObjectFactory1D; toList[cern.colt.matrix.ObjectMatrix1D]; cern.colt.list.ObjectArrayList; null; list>
<cern.colt.matrix.ObjectMatrix1D; get[int]; java.lang.Object; cern.colt.matrix.ObjectFactory1D; toList[cern.colt.matrix.ObjectMatrix1D]; cern.colt.list.ObjectArrayList; null; values>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; B>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; matrix.viewPart(0,A.size())>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; matrix.viewPart(A.size(),B.size())>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; append[cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; null; B>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; ascending[int]; cern.colt.matrix.DoubleMatrix1D; null; descending(size)>
<cern.colt.matrix.DoubleFactory1D; descending[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; ascending[int]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory1D; ascending[int]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory1D; ascending[int]; cern.colt.matrix.DoubleMatrix1D; null; F>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; descending[int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; setQuick[int, double]; void; cern.colt.matrix.DoubleFactory1D; descending[int]; cern.colt.matrix.DoubleMatrix1D; null; matrix>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; parts[i]>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; vector.viewPart(size,parts[i].size())>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; vector>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; parts[i]>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; make[cern.colt.matrix.DoubleMatrix1D[]]; cern.colt.matrix.DoubleMatrix1D; null; parts[i]>
<cern.colt.matrix.DoubleMatrix1D; assign[double]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[int, double]; cern.colt.matrix.DoubleMatrix1D; null; make(size)>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[int, double]; cern.colt.matrix.DoubleMatrix1D; assign[double]; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.matrix.DoubleFactory1D; make[cern.colt.list.AbstractDoubleList]; cern.colt.matrix.DoubleMatrix1D; null; values>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; make[cern.colt.list.AbstractDoubleList]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.DoubleFactory1D; make[cern.colt.list.AbstractDoubleList]; cern.colt.matrix.DoubleMatrix1D; null; vector>
<cern.colt.list.AbstractDoubleList; get[int]; double; cern.colt.matrix.DoubleFactory1D; make[cern.colt.list.AbstractDoubleList]; cern.colt.matrix.DoubleMatrix1D; null; values>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; random[int]; cern.colt.matrix.DoubleMatrix1D; null; make(size)>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; random[int]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.function.DoubleFunction]; this>
<cern.jet.math.Functions; random[]; cern.colt.function.DoubleFunction; cern.colt.matrix.DoubleFactory1D; random[int]; cern.colt.matrix.DoubleMatrix1D; null; cern.jet.math.Functions>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; repeat[cern.colt.matrix.DoubleMatrix1D, int]; cern.colt.matrix.DoubleMatrix1D; null; A>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; repeat[cern.colt.matrix.DoubleMatrix1D, int]; cern.colt.matrix.DoubleMatrix1D; null; this>
<cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; repeat[cern.colt.matrix.DoubleMatrix1D, int]; cern.colt.matrix.DoubleMatrix1D; null; matrix.viewPart(size * i,size)>
<cern.colt.matrix.DoubleMatrix1D; viewPart[int, int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; repeat[cern.colt.matrix.DoubleMatrix1D, int]; cern.colt.matrix.DoubleMatrix1D; assign[cern.colt.matrix.DoubleMatrix1D]; matrix>
<cern.colt.matrix.DoubleFactory1D; make[int]; cern.colt.matrix.DoubleMatrix1D; cern.colt.matrix.DoubleFactory1D; sample[int, double, double]; cern.colt.matrix.DoubleMatrix1D; null; this>
<java.lang.Math; round[double]; long; cern.colt.matrix.DoubleFactory1D; sample[int, double, double]; cern.colt.matrix.DoubleMatrix1D; null; Math>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; cern.colt.matrix.DoubleFactory1D; sample[int, double, double]; cern.colt.matrix.DoubleMatrix1D; null; sampler>
<cern.colt.matrix.DoubleMatrix1D; set[int, double]; void; cern.colt.matrix.DoubleFactory1D; sample[int, double, double]; cern.colt.matrix.DoubleMatrix1D; null; matrix>
<cern.colt.matrix.impl.AbstractMatrix1D; size[]; int; cern.colt.matrix.DoubleFactory1D; toList[cern.colt.matrix.DoubleMatrix1D]; cern.colt.list.DoubleArrayList; null; values>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.matrix.DoubleFactory1D; toList[cern.colt.matrix.DoubleMatrix1D]; cern.colt.list.DoubleArrayList; null; list>
<cern.colt.list.DoubleArrayList; set[int, double]; void; cern.colt.matrix.DoubleFactory1D; toList[cern.colt.matrix.DoubleMatrix1D]; cern.colt.list.DoubleArrayList; null; list>
<cern.colt.matrix.DoubleMatrix1D; get[int]; double; cern.colt.matrix.DoubleFactory1D; toList[cern.colt.matrix.DoubleMatrix1D]; cern.colt.list.DoubleArrayList; null; values>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; aggr>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; f>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction]; double; null; other>
<cern.colt.matrix.impl.AbstractMatrix3D; slices[]; int; cern.colt.matrix.DoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; rows[]; int; cern.colt.matrix.DoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; columns[]; int; cern.colt.matrix.DoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; assign[double[][][]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; assign[double]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; function>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.function.DoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; haveSharedCells[cern.colt.matrix.DoubleMatrix3D]; boolean; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; other>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; null; other>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; function>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.DoubleDoubleFunction]; cern.colt.matrix.DoubleMatrix3D; null; y>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; cardinality[]; int; null; this>
<cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; null; like()>
<cern.colt.matrix.DoubleMatrix3D; like[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; copy[]; cern.colt.matrix.DoubleMatrix3D; assign[cern.colt.matrix.DoubleMatrix3D]; this>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, double]; boolean; cern.colt.matrix.DoubleMatrix3D; equals[double]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.linalg.Property; equals[cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D]; boolean; cern.colt.matrix.DoubleMatrix3D; equals[java.lang.Object]; boolean; null; cern.colt.matrix.linalg.Property.DEFAULT>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; get[int, int, int]; double; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; sliceList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; rowList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; columnList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; sliceList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; rowList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; columnList>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.matrix.DoubleMatrix3D; getNonZeros[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.matrix.DoubleMatrix3D; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix3D]; boolean; cern.colt.matrix.DoubleMatrix3D; haveSharedCells[cern.colt.matrix.DoubleMatrix3D]; boolean; null; getContent()>
<cern.colt.matrix.DoubleMatrix3D; getContent[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; haveSharedCells[cern.colt.matrix.DoubleMatrix3D]; boolean; haveSharedCellsRaw[cern.colt.matrix.DoubleMatrix3D]; this>
<cern.colt.matrix.DoubleMatrix3D; getContent[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; haveSharedCells[cern.colt.matrix.DoubleMatrix3D]; boolean; null; other>
<cern.colt.matrix.DoubleMatrix3D; like[int, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; like[]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; set[int, int, int, double]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; toArray[]; double[][][]; null; this>
<cern.colt.matrix.doublealgo.Formatter; toString[cern.colt.matrix.DoubleMatrix3D]; java.lang.String; cern.colt.matrix.DoubleMatrix3D; toString[]; java.lang.String; null; new cern.colt.matrix.doublealgo.Formatter()>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumn[int]; void; cern.colt.matrix.DoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix3D; viewColumn[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vColumnFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewColumnFlip[]; cern.colt.matrix.DoubleMatrix3D; vColumnFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vDice[int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewDice[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewDice[int, int, int]; cern.colt.matrix.DoubleMatrix3D; vDice[int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vPart[int, int, int, int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewPart[int, int, int, int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewPart[int, int, int, int, int, int]; cern.colt.matrix.DoubleMatrix3D; vPart[int, int, int, int, int, int]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRow[int]; void; cern.colt.matrix.DoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix3D; viewRow[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vRowFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewRowFlip[]; cern.colt.matrix.DoubleMatrix3D; vRowFlip[]; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSliceIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkRowIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; checkColumnIndexes[int[]]; void; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _rowRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _columnRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix3D; viewSelectionLike[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.matrix.DoubleMatrix2DProcedure; apply[cern.colt.matrix.DoubleMatrix2D]; boolean; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; condition>
<cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; matches>
<cern.colt.list.IntArrayList; trimToSize[]; void; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; matches>
<cern.colt.matrix.DoubleMatrix3D; viewSelection[int[], int[], int[]]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.matrix.DoubleMatrix3D; viewSelection[cern.colt.matrix.DoubleMatrix2DProcedure]; cern.colt.matrix.DoubleMatrix3D; null; matches>
<cern.colt.matrix.impl.AbstractMatrix3D; checkSlice[int]; void; cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceOffset[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; _sliceRank[int]; int; cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.DoubleMatrix3D; like2D[int, int, int, int, int, int]; cern.colt.matrix.DoubleMatrix2D; cern.colt.matrix.DoubleMatrix3D; viewSlice[int]; cern.colt.matrix.DoubleMatrix2D; null; this>
<cern.colt.matrix.impl.AbstractMatrix3D; vSliceFlip[]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewSliceFlip[]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewSliceFlip[]; cern.colt.matrix.DoubleMatrix3D; vSliceFlip[]; this>
<cern.colt.matrix.doublealgo.Sorting; sort[cern.colt.matrix.DoubleMatrix3D, int, int]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewSorted[int, int]; cern.colt.matrix.DoubleMatrix3D; null; cern.colt.matrix.doublealgo.Sorting.mergeSort>
<cern.colt.matrix.impl.AbstractMatrix3D; vStrides[int, int, int]; cern.colt.matrix.impl.AbstractMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewStrides[int, int, int]; cern.colt.matrix.DoubleMatrix3D; null; view()>
<cern.colt.matrix.DoubleMatrix3D; view[]; cern.colt.matrix.DoubleMatrix3D; cern.colt.matrix.DoubleMatrix3D; viewStrides[int, int, int]; cern.colt.matrix.DoubleMatrix3D; vStrides[int, int, int]; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.matrix.DoubleMatrix3D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; xforEach[cern.colt.function.DoubleProcedure]; boolean; null; this>
<cern.colt.function.IntIntIntProcedure; apply[int, int, int]; boolean; cern.colt.matrix.DoubleMatrix3D; xforEachCoordinate[cern.colt.function.IntIntIntProcedure]; boolean; null; procedure>
<cern.colt.matrix.impl.AbstractMatrix3D; checkShape[cern.colt.matrix.impl.AbstractMatrix3D]; void; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; getQuick[int, int, int]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; this>
<cern.colt.matrix.DoubleMatrix3D; setQuick[int, int, int, double]; void; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; B>
<cern.colt.function.Double27Function; apply[double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double]; double; cern.colt.matrix.DoubleMatrix3D; zAssign27Neighbors[cern.colt.matrix.DoubleMatrix3D, cern.colt.function.Double27Function]; void; null; function>
<cern.colt.matrix.impl.AbstractMatrix3D; size[]; int; cern.colt.matrix.DoubleMatrix3D; zSum[]; double; null; this>
<cern.colt.matrix.DoubleMatrix3D; aggregate[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction]; double; cern.colt.matrix.DoubleMatrix3D; zSum[]; double; null; this>
<cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectFactory3D; make[int, int, int, java.lang.Object]; cern.colt.matrix.ObjectMatrix3D; null; make(slices,rows,columns)>
<cern.colt.matrix.ObjectFactory3D; make[int, int, int]; cern.colt.matrix.ObjectMatrix3D; cern.colt.matrix.ObjectFactory3D; make[int, int, int, java.lang.Object]; cern.colt.matrix.ObjectMatrix3D; assign[java.lang.Object]; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.GenericSorting; lower_bound[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; upper_bound[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; swap[int, int]; swapper>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; swap[int, int]; swapper>
<cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; lower_bound[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; c>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; c>
<cern.colt.GenericSorting; inplace_merge[int, int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; mergeSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; med3[int, int, int, cern.colt.function.IntComparator]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; swapper>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; swap[int, int]; swapper>
<java.lang.Math; min[int, int]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; Math>
<cern.colt.GenericSorting; vecswap[cern.colt.Swapper, int, int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<java.lang.Math; min[int, int]; int; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; Math>
<cern.colt.GenericSorting; vecswap[cern.colt.Swapper, int, int, int]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.GenericSorting; quickSort1[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; null; this>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; reverse[int, int, cern.colt.Swapper]; void; null; swapper>
<cern.colt.GenericSorting; reverse[int, int, cern.colt.Swapper]; void; cern.colt.GenericSorting; rotate[int, int, int, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; reverse[int, int, cern.colt.Swapper]; void; cern.colt.GenericSorting; rotate[int, int, int, cern.colt.Swapper]; void; null; this>
<cern.colt.GenericSorting; reverse[int, int, cern.colt.Swapper]; void; cern.colt.GenericSorting; rotate[int, int, int, cern.colt.Swapper]; void; null; this>
<cern.colt.function.IntComparator; compare[int, int]; int; cern.colt.GenericSorting; upper_bound[int, int, int, cern.colt.function.IntComparator]; int; null; comp>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericSorting; vecswap[cern.colt.Swapper, int, int, int]; void; null; swapper>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.GenericPermuting; permutation[long, int]; int[]; null; gen>
<cern.jet.math.Arithmetic; longFactorial[int]; long; cern.colt.GenericPermuting; permutation[long, int]; int[]; null; cern.jet.math.Arithmetic>
<cern.jet.math.Arithmetic; longFactorial[int]; long; cern.colt.GenericPermuting; permutation[long, int]; int[]; null; cern.jet.math.Arithmetic>
<java.lang.Object; clone[]; int[]; cern.colt.GenericPermuting; permute[int[], int[]]; void; null; list>
<cern.colt.GenericPermuting; permute[int[], cern.colt.Swapper, int[], int[]]; void; cern.colt.GenericPermuting; permute[int[], cern.colt.Swapper, int[]]; void; null; this>
<cern.colt.Swapper; swap[int, int]; void; cern.colt.GenericPermuting; permute[int[], cern.colt.Swapper, int[], int[]]; void; null; swapper>
<java.lang.Object; clone[]; java.lang.Object[]; cern.colt.GenericPermuting; permute[java.lang.Object[], int[]]; void; null; list>
<cern.colt.map.OpenLongObjectHashMap; setUp[int, double, double]; void; cern.colt.map.OpenLongObjectHashMap; OpenLongObjectHashMap[int, double, double]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.map.OpenLongObjectHashMap; clear[]; void; null; new ByteArrayList(this.state)>
<cern.colt.list.ObjectArrayList; fillFromToWith[int, int, java.lang.Object]; void; cern.colt.map.OpenLongObjectHashMap; clear[]; void; null; new ObjectArrayList(values)>
<cern.colt.map.OpenLongObjectHashMap; trimToSize[]; void; cern.colt.map.OpenLongObjectHashMap; clear[]; void; null; this>
<java.lang.Object; clone[]; long[]; cern.colt.map.OpenLongObjectHashMap; clone[]; java.lang.Object; null; copy.table>
<java.lang.Object; clone[]; java.lang.Object[]; cern.colt.map.OpenLongObjectHashMap; clone[]; java.lang.Object; null; copy.values>
<java.lang.Object; clone[]; byte[]; cern.colt.map.OpenLongObjectHashMap; clone[]; java.lang.Object; null; copy.state>
<cern.colt.map.OpenLongObjectHashMap; indexOfKey[long]; int; cern.colt.map.OpenLongObjectHashMap; containsKey[long]; boolean; null; this>
<cern.colt.map.OpenLongObjectHashMap; indexOfValue[java.lang.Object]; int; cern.colt.map.OpenLongObjectHashMap; containsValue[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenLongObjectHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; cern.colt.map.OpenLongObjectHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.function.LongProcedure; apply[long]; boolean; cern.colt.map.OpenLongObjectHashMap; forEachKey[cern.colt.function.LongProcedure]; boolean; null; procedure>
<cern.colt.function.LongObjectProcedure; apply[long, java.lang.Object]; boolean; cern.colt.map.OpenLongObjectHashMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; null; procedure>
<cern.colt.map.OpenLongObjectHashMap; indexOfKey[long]; int; cern.colt.map.OpenLongObjectHashMap; get[long]; java.lang.Object; null; this>
<cern.colt.map.HashFunctions; hash[long]; int; cern.colt.map.OpenLongObjectHashMap; indexOfInsertion[long]; int; null; HashFunctions>
<cern.colt.map.HashFunctions; hash[long]; int; cern.colt.map.OpenLongObjectHashMap; indexOfKey[long]; int; null; HashFunctions>
<cern.colt.map.OpenLongObjectHashMap; indexOfValue[java.lang.Object]; int; cern.colt.map.OpenLongObjectHashMap; keyOf[java.lang.Object]; long; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenLongObjectHashMap; keys[cern.colt.list.LongArrayList]; void; null; list>
<cern.colt.list.LongArrayList; elements[]; long[]; cern.colt.map.OpenLongObjectHashMap; keys[cern.colt.list.LongArrayList]; void; null; list>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenLongObjectHashMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenLongObjectHashMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.function.LongObjectProcedure; apply[long, java.lang.Object]; boolean; cern.colt.map.OpenLongObjectHashMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; condition>
<cern.colt.list.LongArrayList; add[long]; void; cern.colt.map.OpenLongObjectHashMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.map.OpenLongObjectHashMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.OpenLongObjectHashMap; indexOfInsertion[long]; int; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; cern.colt.map.OpenLongObjectHashMap; put[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenLongObjectHashMap; indexOfInsertion[long]; int; cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenLongObjectHashMap; indexOfKey[long]; int; cern.colt.map.OpenLongObjectHashMap; removeKey[long]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; cern.colt.map.OpenLongObjectHashMap; removeKey[long]; boolean; null; this>
<cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; cern.colt.map.OpenLongObjectHashMap; removeKey[long]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenLongObjectHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenLongObjectHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenLongObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.OpenLongObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.map.OpenLongObjectHashMap; rehash[int]; void; cern.colt.map.OpenLongObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenLongObjectHashMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.map.OpenLongObjectHashMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.function.DoubleFunction]; void; null; copy()>
<cern.colt.map.AbstractIntDoubleMap; copy[]; cern.colt.map.AbstractIntDoubleMap; cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.function.DoubleFunction]; void; forEachPair[cern.colt.function.IntDoubleProcedure]; this>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[int, double]; boolean; null; function>
<cern.colt.map.AbstractMap; clear[]; void; cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.map.AbstractIntDoubleMap]; void; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; assign[cern.colt.map.AbstractIntDoubleMap]; void; null; other>
<cern.colt.map.AbstractIntDoubleMap; put[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; containsKey[int]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; containsValue[double]; boolean; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.map.AbstractIntDoubleMap; copy[]; cern.colt.map.AbstractIntDoubleMap; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntDoubleMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntDoubleMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; containsKey[int]; boolean; java.lang.Object; apply[int, double]; boolean; null; other>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; java.lang.Object; apply[int, double]; boolean; null; other>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractIntDoubleMap; containsKey[int]; boolean; java.lang.Object; apply[int, double]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; java.lang.Object; apply[int, double]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; null; this>
<cern.colt.function.IntDoubleProcedure; apply[int, double]; boolean; java.lang.Object; apply[int]; boolean; null; procedure>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; java.lang.Object; apply[int]; boolean; null; this>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; keyOf[double]; int; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntDoubleMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.map.AbstractIntDoubleMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntDoubleMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntDoubleMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractIntDoubleMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; keys[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractIntDoubleMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntDoubleMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntDoubleMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntDoubleMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntDoubleMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.function.IntDoubleProcedure; apply[int, double]; boolean; java.lang.Object; apply[int, double]; boolean; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int, double]; boolean; null; keyList>
<cern.colt.list.DoubleArrayList; add[double]; void; java.lang.Object; apply[int, double]; boolean; null; valueList>
<cern.colt.map.AbstractIntDoubleMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.DoubleArrayList; setQuick[int, double]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.IntArrayList; getQuick[int]; int; cern.colt.map.AbstractIntDoubleMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntDoubleMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.map.AbstractIntDoubleMap; values[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; cern.colt.GenericSorting>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntDoubleMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntDoubleMap; keys[]; cern.colt.list.IntArrayList; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractIntList; toString[]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toString[]; java.lang.String; null; buf>
<cern.colt.map.AbstractIntDoubleMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntDoubleMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntDoubleMap; values[]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.map.AbstractIntDoubleMap; values[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractIntDoubleMap; values[]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntDoubleMap; values[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.map.AbstractIntDoubleMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntDoubleMap; values[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntDoubleMap; get[int]; double; java.lang.Object; apply[int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; setUp[int, double, double]; void; cern.colt.map.QuickOpenIntIntHashMap; QuickOpenIntIntHashMap[int, double, double]; void; null; this>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; HashFunctions>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; HashFunctions>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntObjectHashMap; setUp[int, double, double]; void; cern.colt.map.OpenIntObjectHashMap; OpenIntObjectHashMap[int, double, double]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.map.OpenIntObjectHashMap; clear[]; void; null; new ByteArrayList(this.state)>
<cern.colt.list.ObjectArrayList; fillFromToWith[int, int, java.lang.Object]; void; cern.colt.map.OpenIntObjectHashMap; clear[]; void; null; new ObjectArrayList(values)>
<cern.colt.map.OpenIntObjectHashMap; trimToSize[]; void; cern.colt.map.OpenIntObjectHashMap; clear[]; void; null; this>
<java.lang.Object; clone[]; int[]; cern.colt.map.OpenIntObjectHashMap; clone[]; java.lang.Object; null; copy.table>
<java.lang.Object; clone[]; java.lang.Object[]; cern.colt.map.OpenIntObjectHashMap; clone[]; java.lang.Object; null; copy.values>
<java.lang.Object; clone[]; byte[]; cern.colt.map.OpenIntObjectHashMap; clone[]; java.lang.Object; null; copy.state>
<cern.colt.map.OpenIntObjectHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntObjectHashMap; containsKey[int]; boolean; null; this>
<cern.colt.map.OpenIntObjectHashMap; indexOfValue[java.lang.Object]; int; cern.colt.map.OpenIntObjectHashMap; containsValue[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntObjectHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; cern.colt.map.OpenIntObjectHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.map.OpenIntObjectHashMap; forEachKey[cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.function.IntObjectProcedure; apply[int, java.lang.Object]; boolean; cern.colt.map.OpenIntObjectHashMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; null; procedure>
<cern.colt.map.OpenIntObjectHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntObjectHashMap; get[int]; java.lang.Object; null; this>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntObjectHashMap; indexOfInsertion[int]; int; null; HashFunctions>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntObjectHashMap; indexOfKey[int]; int; null; HashFunctions>
<cern.colt.map.OpenIntObjectHashMap; indexOfValue[java.lang.Object]; int; cern.colt.map.OpenIntObjectHashMap; keyOf[java.lang.Object]; int; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntObjectHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.OpenIntObjectHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntObjectHashMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntObjectHashMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.function.IntObjectProcedure; apply[int, java.lang.Object]; boolean; cern.colt.map.OpenIntObjectHashMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.map.OpenIntObjectHashMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; cern.colt.map.OpenIntObjectHashMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.OpenIntObjectHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; cern.colt.map.OpenIntObjectHashMap; put[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntObjectHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntObjectHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntObjectHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; cern.colt.map.OpenIntObjectHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; cern.colt.map.OpenIntObjectHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntObjectHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntObjectHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.OpenIntObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.map.OpenIntObjectHashMap; rehash[int]; void; cern.colt.map.OpenIntObjectHashMap; trimToSize[]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntObjectHashMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.map.OpenIntObjectHashMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.map.OpenDoubleIntHashMap; setUp[int, double, double]; void; cern.colt.map.OpenDoubleIntHashMap; OpenDoubleIntHashMap[int, double, double]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.map.OpenDoubleIntHashMap; clear[]; void; null; new ByteArrayList(this.state)>
<cern.colt.map.OpenDoubleIntHashMap; trimToSize[]; void; cern.colt.map.OpenDoubleIntHashMap; clear[]; void; null; this>
<java.lang.Object; clone[]; double[]; cern.colt.map.OpenDoubleIntHashMap; clone[]; java.lang.Object; null; copy.table>
<java.lang.Object; clone[]; int[]; cern.colt.map.OpenDoubleIntHashMap; clone[]; java.lang.Object; null; copy.values>
<java.lang.Object; clone[]; byte[]; cern.colt.map.OpenDoubleIntHashMap; clone[]; java.lang.Object; null; copy.state>
<cern.colt.map.OpenDoubleIntHashMap; indexOfKey[double]; int; cern.colt.map.OpenDoubleIntHashMap; containsKey[double]; boolean; null; this>
<cern.colt.map.OpenDoubleIntHashMap; indexOfValue[int]; int; cern.colt.map.OpenDoubleIntHashMap; containsValue[int]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenDoubleIntHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; cern.colt.map.OpenDoubleIntHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.colt.map.OpenDoubleIntHashMap; forEachKey[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.function.DoubleIntProcedure; apply[double, int]; boolean; cern.colt.map.OpenDoubleIntHashMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; null; procedure>
<cern.colt.map.OpenDoubleIntHashMap; indexOfKey[double]; int; cern.colt.map.OpenDoubleIntHashMap; get[double]; int; null; this>
<cern.colt.map.HashFunctions; hash[double]; int; cern.colt.map.OpenDoubleIntHashMap; indexOfInsertion[double]; int; null; HashFunctions>
<cern.colt.map.HashFunctions; hash[double]; int; cern.colt.map.OpenDoubleIntHashMap; indexOfKey[double]; int; null; HashFunctions>
<cern.colt.map.OpenDoubleIntHashMap; indexOfValue[int]; int; cern.colt.map.OpenDoubleIntHashMap; keyOf[int]; double; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenDoubleIntHashMap; keys[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.map.OpenDoubleIntHashMap; keys[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenDoubleIntHashMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenDoubleIntHashMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.function.DoubleIntProcedure; apply[double, int]; boolean; cern.colt.map.OpenDoubleIntHashMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; condition>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.map.OpenDoubleIntHashMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.map.OpenDoubleIntHashMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.OpenDoubleIntHashMap; indexOfInsertion[double]; int; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; cern.colt.map.OpenDoubleIntHashMap; put[double, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenDoubleIntHashMap; indexOfInsertion[double]; int; cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenDoubleIntHashMap; indexOfKey[double]; int; cern.colt.map.OpenDoubleIntHashMap; removeKey[double]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; cern.colt.map.OpenDoubleIntHashMap; removeKey[double]; boolean; null; this>
<cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; cern.colt.map.OpenDoubleIntHashMap; removeKey[double]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenDoubleIntHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenDoubleIntHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenDoubleIntHashMap; trimToSize[]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.OpenDoubleIntHashMap; trimToSize[]; void; null; this>
<cern.colt.map.OpenDoubleIntHashMap; rehash[int]; void; cern.colt.map.OpenDoubleIntHashMap; trimToSize[]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenDoubleIntHashMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.OpenDoubleIntHashMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; null; this>
<java.lang.Math; max[int, int]; int; cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; null; Math>
<java.lang.Math; min[int, int]; int; cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; null; Math>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.AbstractMap; chooseMeanCapacity[int, double, double]; int; null; this>
<java.lang.Math; max[int, int]; int; cern.colt.map.AbstractMap; chooseMeanCapacity[int, double, double]; int; null; Math>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; null; this>
<java.lang.Math; max[int, int]; int; cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; null; Math>
<cern.colt.map.PrimeFinder; nextPrime[int]; int; cern.colt.map.AbstractMap; nextPrime[int]; int; null; PrimeFinder>
<cern.colt.map.AbstractLongObjectMap; forEachKey[cern.colt.function.LongProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; containsKey[long]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; containsValue[java.lang.Object]; boolean; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.map.AbstractLongObjectMap; copy[]; cern.colt.map.AbstractLongObjectMap; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractLongObjectMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractLongObjectMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; containsKey[long]; boolean; java.lang.Object; apply[long, java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; java.lang.Object; apply[long, java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractLongObjectMap; containsKey[long]; boolean; java.lang.Object; apply[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; java.lang.Object; apply[long, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; forEachKey[cern.colt.function.LongProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; null; this>
<cern.colt.function.LongObjectProcedure; apply[long, java.lang.Object]; boolean; java.lang.Object; apply[long]; boolean; null; procedure>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; java.lang.Object; apply[long]; boolean; null; this>
<cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; keyOf[java.lang.Object]; long; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractLongObjectMap; keys[]; cern.colt.list.LongArrayList; null; this>
<cern.colt.map.AbstractLongObjectMap; keys[cern.colt.list.LongArrayList]; void; cern.colt.map.AbstractLongObjectMap; keys[]; cern.colt.list.LongArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractLongObjectMap; keys[cern.colt.list.LongArrayList]; void; null; list>
<cern.colt.map.AbstractLongObjectMap; forEachKey[cern.colt.function.LongProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; keys[cern.colt.list.LongArrayList]; void; null; this>
<cern.colt.list.LongArrayList; add[long]; void; java.lang.Object; apply[long]; boolean; null; list>
<cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractLongObjectMap; keysSortedByValue[cern.colt.list.LongArrayList]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractLongObjectMap; keysSortedByValue[cern.colt.list.LongArrayList]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractLongObjectMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractLongObjectMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.AbstractLongObjectMap; forEachPair[cern.colt.function.LongObjectProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; pairsMatching[cern.colt.function.LongObjectProcedure, cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.function.LongObjectProcedure; apply[long, java.lang.Object]; boolean; java.lang.Object; apply[long, java.lang.Object]; boolean; null; condition>
<cern.colt.list.LongArrayList; add[long]; void; java.lang.Object; apply[long, java.lang.Object]; boolean; null; keyList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; java.lang.Object; apply[long, java.lang.Object]; boolean; null; valueList>
<cern.colt.map.AbstractLongObjectMap; keys[cern.colt.list.LongArrayList]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; setQuick[int, java.lang.Object]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.LongArrayList; getQuick[int]; long; cern.colt.map.AbstractLongObjectMap; pairsSortedByKey[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.map.AbstractLongObjectMap; keys[cern.colt.list.LongArrayList]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.map.AbstractLongObjectMap; values[cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.LongArrayList; elements[]; long[]; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; ((Comparable)v[a])>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; cern.colt.GenericSorting>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.map.AbstractLongObjectMap; pairsSortedByValue[cern.colt.list.LongArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.map.AbstractLongObjectMap; keys[]; cern.colt.list.LongArrayList; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.LongArrayList; get[int]; long; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[long]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; String>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toString[]; java.lang.String; null; buf>
<cern.colt.map.AbstractLongObjectMap; keysSortedByValue[cern.colt.list.LongArrayList]; void; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.list.AbstractLongList; size[]; int; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; theKeys>
<cern.colt.list.LongArrayList; get[int]; long; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[long]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; String>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractLongObjectMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractLongObjectMap; values[]; cern.colt.list.ObjectArrayList; null; this>
<cern.colt.map.AbstractLongObjectMap; values[cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractLongObjectMap; values[]; cern.colt.list.ObjectArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractLongObjectMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.map.AbstractLongObjectMap; forEachKey[cern.colt.function.LongProcedure]; boolean; cern.colt.map.AbstractLongObjectMap; values[cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; java.lang.Object; apply[long]; boolean; null; list>
<cern.colt.map.AbstractLongObjectMap; get[long]; java.lang.Object; java.lang.Object; apply[long]; boolean; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<java.lang.Runtime; gc[]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; gc[]; Runtime>
<java.lang.Thread; sleep[long]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; sleep[long]; Thread>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; kind>
<cern.colt.map.OpenIntIntHashMap; clear[]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer0>
<cern.colt.map.QuickOpenIntIntHashMap; put[int, int]; boolean; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer0>
<java.lang.String; equals[java.lang.Object]; boolean; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; kind>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer0>
<cern.colt.map.OpenIntIntHashMap; get[int]; int; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer0>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer1>
<cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<cern.colt.map.PrimeFinder; nextPrime[int]; int; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; PrimeFinder>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer1>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer2>
<cern.colt.map.QuickOpenIntIntHashMap; rehash[int]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; map>
<cern.colt.map.PrimeFinder; nextPrime[int]; int; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; PrimeFinder>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer2>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<cern.colt.Timer; plus[cern.colt.Timer]; cern.colt.Timer; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; timer1>
<java.io.PrintStream; print[int]; void; cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; null; System.out>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.map.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.map.Benchmark; main[java.lang.String[]]; void; null; Integer>
<cern.colt.map.Benchmark; benchmark[int, int, java.lang.String]; void; cern.colt.map.Benchmark; main[java.lang.String[]]; void; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.colt.map.Benchmark; test2[int]; void; null; uniform>
<java.lang.Object; clone[]; int[]; cern.colt.map.Benchmark; test2[int]; void; null; keys>
<cern.colt.map.AbstractIntIntMap; put[int, int]; boolean; cern.colt.map.Benchmark; test2[int]; void; null; map>
<cern.colt.map.AbstractIntIntMap; get[int]; int; cern.colt.map.Benchmark; test2[int]; void; null; map>
<java.io.PrintStream; println[java.lang.Object]; void; cern.colt.map.Benchmark; test2[int]; void; null; System.out>
<java.io.PrintStream; println[int]; void; cern.colt.map.Benchmark; test2[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.Benchmark; test2[int]; void; null; System.out>
<cern.colt.map.OpenIntIntHashMap; setUp[int, double, double]; void; cern.colt.map.OpenIntIntHashMap; OpenIntIntHashMap[int, double, double]; void; null; this>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.map.OpenIntIntHashMap; clear[]; void; null; new ByteArrayList(this.state)>
<cern.colt.map.OpenIntIntHashMap; trimToSize[]; void; cern.colt.map.OpenIntIntHashMap; clear[]; void; null; this>
<java.lang.Object; clone[]; int[]; cern.colt.map.OpenIntIntHashMap; clone[]; java.lang.Object; null; copy.table>
<java.lang.Object; clone[]; int[]; cern.colt.map.OpenIntIntHashMap; clone[]; java.lang.Object; null; copy.values>
<java.lang.Object; clone[]; byte[]; cern.colt.map.OpenIntIntHashMap; clone[]; java.lang.Object; null; copy.state>
<cern.colt.map.OpenIntIntHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntIntHashMap; containsKey[int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; indexOfValue[int]; int; cern.colt.map.OpenIntIntHashMap; containsValue[int]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntIntHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.map.OpenIntIntHashMap; rehash[int]; void; cern.colt.map.OpenIntIntHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.map.OpenIntIntHashMap; forEachKey[cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; cern.colt.map.OpenIntIntHashMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; null; procedure>
<cern.colt.map.OpenIntIntHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntIntHashMap; get[int]; int; null; this>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntIntHashMap; indexOfInsertion[int]; int; null; HashFunctions>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntIntHashMap; indexOfKey[int]; int; null; HashFunctions>
<cern.colt.map.OpenIntIntHashMap; indexOfValue[int]; int; cern.colt.map.OpenIntIntHashMap; keyOf[int]; int; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntIntHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.OpenIntIntHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntIntHashMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntIntHashMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; cern.colt.map.OpenIntIntHashMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.map.OpenIntIntHashMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.map.OpenIntIntHashMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.OpenIntIntHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; rehash[int]; void; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; rehash[int]; void; cern.colt.map.OpenIntIntHashMap; put[int, int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.OpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntIntHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntIntHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntIntHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntIntHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; cern.colt.map.OpenIntIntHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.OpenIntIntHashMap; rehash[int]; void; cern.colt.map.OpenIntIntHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntIntHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntIntHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntIntHashMap; trimToSize[]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.OpenIntIntHashMap; trimToSize[]; void; null; this>
<cern.colt.map.OpenIntIntHashMap; rehash[int]; void; cern.colt.map.OpenIntIntHashMap; trimToSize[]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntIntHashMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.OpenIntIntHashMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractIntObjectMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; containsKey[int]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; containsValue[java.lang.Object]; boolean; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.map.AbstractIntObjectMap; copy[]; cern.colt.map.AbstractIntObjectMap; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntObjectMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntObjectMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; containsKey[int]; boolean; java.lang.Object; apply[int, java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; java.lang.Object; apply[int, java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractIntObjectMap; containsKey[int]; boolean; java.lang.Object; apply[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; java.lang.Object; apply[int, java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; null; this>
<cern.colt.function.IntObjectProcedure; apply[int, java.lang.Object]; boolean; java.lang.Object; apply[int]; boolean; null; procedure>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; java.lang.Object; apply[int]; boolean; null; this>
<cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; keyOf[java.lang.Object]; int; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntObjectMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.map.AbstractIntObjectMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntObjectMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntObjectMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractIntObjectMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; keys[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractIntObjectMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntObjectMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntObjectMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntObjectMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntObjectMap; forEachPair[cern.colt.function.IntObjectProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; pairsMatching[cern.colt.function.IntObjectProcedure, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.function.IntObjectProcedure; apply[int, java.lang.Object]; boolean; java.lang.Object; apply[int, java.lang.Object]; boolean; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int, java.lang.Object]; boolean; null; keyList>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; java.lang.Object; apply[int, java.lang.Object]; boolean; null; valueList>
<cern.colt.map.AbstractIntObjectMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; setQuick[int, java.lang.Object]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.IntArrayList; getQuick[int]; int; cern.colt.map.AbstractIntObjectMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntObjectMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.map.AbstractIntObjectMap; values[cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.list.ObjectArrayList; elements[]; java.lang.Object[]; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; valueList>
<java.lang.Comparable; compareTo[java.lang.Object]; int; java.lang.Object; compare[int, int]; int; null; ((Comparable)v[a])>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; cern.colt.GenericSorting>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntObjectMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntObjectMap; keys[]; cern.colt.list.IntArrayList; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toString[]; java.lang.String; null; buf>
<cern.colt.map.AbstractIntObjectMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntObjectMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntObjectMap; values[]; cern.colt.list.ObjectArrayList; null; this>
<cern.colt.map.AbstractIntObjectMap; values[cern.colt.list.ObjectArrayList]; void; cern.colt.map.AbstractIntObjectMap; values[]; cern.colt.list.ObjectArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntObjectMap; values[cern.colt.list.ObjectArrayList]; void; null; list>
<cern.colt.map.AbstractIntObjectMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntObjectMap; values[cern.colt.list.ObjectArrayList]; void; null; this>
<cern.colt.list.ObjectArrayList; add[java.lang.Object]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntObjectMap; get[int]; java.lang.Object; java.lang.Object; apply[int]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; setUp[int, double, double]; void; cern.colt.map.OpenIntDoubleHashMap; OpenIntDoubleHashMap[int, double, double]; void; null; this>
<cern.colt.map.OpenIntDoubleHashMap; clear[]; void; cern.colt.map.OpenIntDoubleHashMap; assign[cern.colt.function.DoubleFunction]; void; null; this>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.colt.map.OpenIntDoubleHashMap; assign[cern.colt.function.DoubleFunction]; void; null; function>
<cern.colt.map.AbstractIntDoubleMap; copy[]; cern.colt.map.AbstractIntDoubleMap; cern.colt.map.OpenIntDoubleHashMap; assign[cern.colt.map.AbstractIntDoubleMap]; void; null; source>
<cern.colt.list.AbstractByteList; fillFromToWith[int, int, byte]; void; cern.colt.map.OpenIntDoubleHashMap; clear[]; void; null; new ByteArrayList(this.state)>
<cern.colt.map.OpenIntDoubleHashMap; trimToSize[]; void; cern.colt.map.OpenIntDoubleHashMap; clear[]; void; null; this>
<java.lang.Object; clone[]; int[]; cern.colt.map.OpenIntDoubleHashMap; clone[]; java.lang.Object; null; copy.table>
<java.lang.Object; clone[]; double[]; cern.colt.map.OpenIntDoubleHashMap; clone[]; java.lang.Object; null; copy.values>
<java.lang.Object; clone[]; byte[]; cern.colt.map.OpenIntDoubleHashMap; clone[]; java.lang.Object; null; copy.state>
<cern.colt.map.OpenIntDoubleHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntDoubleHashMap; containsKey[int]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; indexOfValue[double]; int; cern.colt.map.OpenIntDoubleHashMap; containsValue[double]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntDoubleHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; cern.colt.map.OpenIntDoubleHashMap; ensureCapacity[int]; void; null; this>
<cern.colt.function.IntProcedure; apply[int]; boolean; cern.colt.map.OpenIntDoubleHashMap; forEachKey[cern.colt.function.IntProcedure]; boolean; null; procedure>
<cern.colt.function.IntDoubleProcedure; apply[int, double]; boolean; cern.colt.map.OpenIntDoubleHashMap; forEachPair[cern.colt.function.IntDoubleProcedure]; boolean; null; procedure>
<cern.colt.map.OpenIntDoubleHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntDoubleHashMap; get[int]; double; null; this>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntDoubleHashMap; indexOfInsertion[int]; int; null; HashFunctions>
<cern.colt.map.HashFunctions; hash[int]; int; cern.colt.map.OpenIntDoubleHashMap; indexOfKey[int]; int; null; HashFunctions>
<cern.colt.map.OpenIntDoubleHashMap; indexOfValue[double]; int; cern.colt.map.OpenIntDoubleHashMap; keyOf[double]; int; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntDoubleHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.OpenIntDoubleHashMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntDoubleHashMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.OpenIntDoubleHashMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.function.IntDoubleProcedure; apply[int, double]; boolean; cern.colt.map.OpenIntDoubleHashMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; cern.colt.map.OpenIntDoubleHashMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; keyList>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.colt.map.OpenIntDoubleHashMap; pairsMatching[cern.colt.function.IntDoubleProcedure, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList]; void; null; valueList>
<cern.colt.map.OpenIntDoubleHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseGrowCapacity[int, double, double]; int; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; cern.colt.map.OpenIntDoubleHashMap; put[int, double]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseLowWaterMark[int, double]; int; cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntDoubleHashMap; indexOfInsertion[int]; int; cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; null; this>
<cern.colt.map.OpenIntDoubleHashMap; indexOfKey[int]; int; cern.colt.map.OpenIntDoubleHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; chooseShrinkCapacity[int, double, double]; int; cern.colt.map.OpenIntDoubleHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; cern.colt.map.OpenIntDoubleHashMap; removeKey[int]; boolean; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntDoubleHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; chooseHighWaterMark[int, double]; int; cern.colt.map.OpenIntDoubleHashMap; setUp[int, double, double]; void; null; this>
<cern.colt.map.AbstractMap; nextPrime[int]; int; cern.colt.map.OpenIntDoubleHashMap; trimToSize[]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.OpenIntDoubleHashMap; trimToSize[]; void; null; this>
<cern.colt.map.OpenIntDoubleHashMap; rehash[int]; void; cern.colt.map.OpenIntDoubleHashMap; trimToSize[]; void; null; this>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.OpenIntDoubleHashMap; values[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.map.OpenIntDoubleHashMap; values[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.map.AbstractDoubleIntMap; forEachKey[cern.colt.function.DoubleProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; containsKey[double]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; containsValue[int]; boolean; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.map.AbstractDoubleIntMap; copy[]; cern.colt.map.AbstractDoubleIntMap; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractDoubleIntMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractDoubleIntMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; containsKey[double]; boolean; java.lang.Object; apply[double, int]; boolean; null; other>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; java.lang.Object; apply[double, int]; boolean; null; other>
<cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractDoubleIntMap; containsKey[double]; boolean; java.lang.Object; apply[double, int]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; java.lang.Object; apply[double, int]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; forEachKey[cern.colt.function.DoubleProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; null; this>
<cern.colt.function.DoubleIntProcedure; apply[double, int]; boolean; java.lang.Object; apply[double]; boolean; null; procedure>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; java.lang.Object; apply[double]; boolean; null; this>
<cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; keyOf[int]; double; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractDoubleIntMap; keys[]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.map.AbstractDoubleIntMap; keys[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractDoubleIntMap; keys[]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractDoubleIntMap; keys[cern.colt.list.DoubleArrayList]; void; null; list>
<cern.colt.map.AbstractDoubleIntMap; forEachKey[cern.colt.function.DoubleProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; keys[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; java.lang.Object; apply[double]; boolean; null; list>
<cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractDoubleIntMap; keysSortedByValue[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractDoubleIntMap; keysSortedByValue[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractDoubleIntMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractDoubleIntMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.AbstractDoubleIntMap; forEachPair[cern.colt.function.DoubleIntProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; pairsMatching[cern.colt.function.DoubleIntProcedure, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.function.DoubleIntProcedure; apply[double, int]; boolean; java.lang.Object; apply[double, int]; boolean; null; condition>
<cern.colt.list.DoubleArrayList; add[double]; void; java.lang.Object; apply[double, int]; boolean; null; keyList>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[double, int]; boolean; null; valueList>
<cern.colt.map.AbstractDoubleIntMap; keys[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; setQuick[int, int]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.DoubleArrayList; getQuick[int]; double; cern.colt.map.AbstractDoubleIntMap; pairsSortedByKey[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.map.AbstractDoubleIntMap; keys[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.map.AbstractDoubleIntMap; values[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; cern.colt.GenericSorting>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.map.AbstractDoubleIntMap; pairsSortedByValue[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.map.AbstractDoubleIntMap; keys[]; cern.colt.list.DoubleArrayList; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; String>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toString[]; java.lang.String; null; buf>
<cern.colt.map.AbstractDoubleIntMap; keysSortedByValue[cern.colt.list.DoubleArrayList]; void; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; theKeys>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[double]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; String>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractDoubleIntMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractDoubleIntMap; values[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.map.AbstractDoubleIntMap; values[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractDoubleIntMap; values[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractDoubleIntMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractDoubleIntMap; forEachKey[cern.colt.function.DoubleProcedure]; boolean; cern.colt.map.AbstractDoubleIntMap; values[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[double]; boolean; null; list>
<cern.colt.map.AbstractDoubleIntMap; get[double]; int; java.lang.Object; apply[double]; boolean; null; this>
<java.util.Arrays; sort[int[]]; void; cern.colt.map.AbstractDoubleIntMap; values[cern.colt.list.IntArrayList]; void; null; java.util.Arrays>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.map.PrimeFinder; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.colt.map.PrimeFinder; main[java.lang.String[]]; void; null; Integer>
<cern.colt.map.PrimeFinder; statistics[int, int]; void; cern.colt.map.PrimeFinder; main[java.lang.String[]]; void; null; this>
<java.util.Arrays; binarySearch[int[], int]; int; cern.colt.map.PrimeFinder; nextPrime[int]; int; null; java.util.Arrays>
<cern.colt.map.PrimeFinder; nextPrime[int]; int; cern.colt.map.PrimeFinder; statistics[int, int]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.PrimeFinder; statistics[int, int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.PrimeFinder; statistics[int, int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.PrimeFinder; statistics[int, int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.colt.map.PrimeFinder; statistics[int, int]; void; null; System.out>
<cern.colt.map.AbstractIntIntMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; containsKey[int]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; containsValue[int]; boolean; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.colt.map.AbstractIntIntMap; copy[]; cern.colt.map.AbstractIntIntMap; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntIntMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntIntMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; equals[java.lang.Object]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; containsKey[int]; boolean; java.lang.Object; apply[int, int]; boolean; null; other>
<cern.colt.map.AbstractIntIntMap; get[int]; int; java.lang.Object; apply[int, int]; boolean; null; other>
<cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; equals[java.lang.Object]; boolean; null; other>
<cern.colt.map.AbstractIntIntMap; containsKey[int]; boolean; java.lang.Object; apply[int, int]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; get[int]; int; java.lang.Object; apply[int, int]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; null; this>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; java.lang.Object; apply[int]; boolean; null; procedure>
<cern.colt.map.AbstractIntIntMap; get[int]; int; java.lang.Object; apply[int]; boolean; null; this>
<cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; keyOf[int]; int; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntIntMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.map.AbstractIntIntMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; keys[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntIntMap; keys[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractIntIntMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; keys[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntIntMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntIntMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntIntMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntIntMap; forEachPair[cern.colt.function.IntIntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; pairsMatching[cern.colt.function.IntIntProcedure, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.function.IntIntProcedure; apply[int, int]; boolean; java.lang.Object; apply[int, int]; boolean; null; condition>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int, int]; boolean; null; keyList>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int, int]; boolean; null; valueList>
<cern.colt.map.AbstractIntIntMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.AbstractList; sort[]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractList; setSize[int]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; setQuick[int, int]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.map.AbstractIntIntMap; get[int]; int; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; getQuick[int]; int; cern.colt.map.AbstractIntIntMap; pairsSortedByKey[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntIntMap; keys[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.map.AbstractIntIntMap; values[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.list.IntArrayList; elements[]; int[]; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; valueList>
<cern.colt.GenericSorting; quickSort[int, int, cern.colt.function.IntComparator, cern.colt.Swapper]; void; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; cern.colt.GenericSorting>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntIntMap; pairsSortedByValue[cern.colt.list.IntArrayList, cern.colt.list.IntArrayList]; void; null; keyList>
<cern.colt.map.AbstractIntIntMap; keys[]; cern.colt.list.IntArrayList; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntIntMap; get[int]; int; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntIntMap; toString[]; java.lang.String; null; buf>
<cern.colt.map.AbstractIntIntMap; keysSortedByValue[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.list.AbstractIntList; size[]; int; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; theKeys>
<cern.colt.list.IntArrayList; get[int]; int; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; theKeys>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; String>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.String; valueOf[int]; java.lang.String; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; String>
<cern.colt.map.AbstractIntIntMap; get[int]; int; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.colt.map.AbstractIntIntMap; toStringByValue[]; java.lang.String; null; buf>
<cern.colt.map.AbstractMap; size[]; int; cern.colt.map.AbstractIntIntMap; values[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.map.AbstractIntIntMap; values[cern.colt.list.IntArrayList]; void; cern.colt.map.AbstractIntIntMap; values[]; cern.colt.list.IntArrayList; null; this>
<cern.colt.list.AbstractList; clear[]; void; cern.colt.map.AbstractIntIntMap; values[cern.colt.list.IntArrayList]; void; null; list>
<cern.colt.map.AbstractIntIntMap; forEachKey[cern.colt.function.IntProcedure]; boolean; cern.colt.map.AbstractIntIntMap; values[cern.colt.list.IntArrayList]; void; null; this>
<cern.colt.list.IntArrayList; add[int]; void; java.lang.Object; apply[int]; boolean; null; list>
<cern.colt.map.AbstractIntIntMap; get[int]; int; java.lang.Object; apply[int]; boolean; null; this>
<java.lang.Double; doubleToLongBits[double]; long; cern.colt.map.HashFunctions; hash[double]; int; null; Double>
<java.lang.Float; floatToIntBits[float]; int; cern.colt.map.HashFunctions; hash[float]; int; null; Float>
<java.lang.Object; hashCode[]; int; cern.colt.map.HashFunctions; hash[java.lang.Object]; int; null; object>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.clhep.PhysicalConstants; PhysicalConstants[]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.BreitWigner; BreitWigner[double, double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.BreitWigner; setState[double, double, double]; void; cern.jet.random.BreitWigner; BreitWigner[double, double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; cern.jet.random.BreitWigner; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; null; randomGenerator>
<java.lang.Math; tan[double]; double; cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; atan[double]; double; cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; null; randomGenerator>
<java.lang.Math; tan[double]; double; cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; null; Math>
<cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; cern.jet.random.BreitWigner; staticNextDouble[double, double, double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.BreitWigner; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.BreitWigner>; cern.jet.random.BreitWigner; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.BreitWigner; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.BreitWigner; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Binomial; Binomial[int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Binomial; setNandP[int, double]; void; cern.jet.random.Binomial; Binomial[int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; binomial[int, int, double]; double; cern.jet.random.Binomial; cdf[int]; double; null; Probability>
<cern.jet.random.Binomial; pdf[int]; double; cern.jet.random.Binomial; cdfSlow[int]; double; null; this>
<java.lang.Math; min[double, double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; min[int, int]; int; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; randomGenerator>
<java.lang.Math; abs[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<cern.jet.math.Arithmetic; stirlingCorrection[int]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; stirlingCorrection[int]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Arithmetic>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Math>
<cern.jet.math.Arithmetic; stirlingCorrection[int]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; stirlingCorrection[int]; double; cern.jet.random.Binomial; generateBinomial[int, double]; int; null; Arithmetic>
<cern.jet.random.Binomial; generateBinomial[int, double]; int; cern.jet.random.Binomial; nextInt[]; int; null; this>
<java.lang.Math; min[double, double]; double; cern.jet.random.Binomial; nextInt[int, double]; int; null; Math>
<cern.jet.random.Binomial; generateBinomial[int, double]; int; cern.jet.random.Binomial; nextInt[int, double]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Binomial; pdf[int]; double; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Binomial; pdf[int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Binomial; pdf[int]; double; null; Arithmetic>
<java.lang.Math; min[double, double]; double; cern.jet.random.Binomial; setNandP[int, double]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; setNandP[int, double]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Binomial; setNandP[int, double]; void; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Binomial; setNandP[int, double]; void; null; Arithmetic>
<cern.jet.random.Binomial; nextInt[int, double]; int; cern.jet.random.Binomial; staticNextInt[int, double]; int; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Binomial; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Binomial>; cern.jet.random.Binomial; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Binomial; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<java.lang.Math; cos[double]; double; cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<cern.jet.random.Fun; factorial[int]; long; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<cern.jet.random.Fun; factorial[int]; long; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<cern.jet.random.Fun; gamma[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<cern.jet.random.Fun; fkt2_value[double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; fkt2_value[double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; fkt2_value[double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; fkt2_value[double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; fkt2_value[double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; _fkt_value[double, double, double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<cern.jet.random.Fun; gamma[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; this>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; bessel2_fkt[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.random.Fun; bessi0[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; bessi0[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Fun; bessi0[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.random.Fun; bessi1[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; bessi1[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Fun; bessi1[double]; double; null; Math>
<cern.jet.math.Arithmetic; longFactorial[int]; long; cern.jet.random.Fun; factorial[int]; long; null; cern.jet.math.Arithmetic>
<cern.jet.random.Fun; cosh[double]; double; cern.jet.random.Fun; fkt2_value[double, double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; fkt2_value[double, double, double]; double; null; Math>
<cern.jet.random.Fun; cosh[double]; double; cern.jet.random.Fun; fkt2_value[double, double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; cosh[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; cosh[double]; double; null; Math>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.Fun; gamma[double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Fun; gamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; logGamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Fun; logGamma[double]; double; null; Math>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Fun; logGamma[double]; double; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Poisson; Poisson[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Poisson; setMean[double]; void; cern.jet.random.Poisson; Poisson[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; poisson[int, double]; double; cern.jet.random.Poisson; cdf[int]; double; null; Probability>
<java.lang.Object; clone[]; double[]; cern.jet.random.Poisson; clone[]; java.lang.Object; null; this.pp>
<java.lang.Math; exp[double]; double; cern.jet.random.Poisson; f[int, double, double]; double; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Poisson; f[int, double, double]; double; null; Arithmetic>
<cern.jet.random.Poisson; nextInt[double]; int; cern.jet.random.Poisson; nextInt[]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Poisson; nextInt[double]; int; null; gen>
<java.lang.Math; min[int, int]; int; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Arithmetic>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Poisson; nextInt[double]; int; null; gen>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Poisson; nextInt[double]; int; null; gen>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Poisson; nextInt[double]; int; null; gen>
<cern.jet.random.Poisson; f[int, double, double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Poisson; nextInt[double]; int; null; gen>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Poisson; nextInt[double]; int; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.random.Poisson; pdf[int]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Poisson; pdf[int]; double; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.Poisson; pdf[int]; double; null; Arithmetic>
<cern.jet.random.Poisson; setMean[double]; void; cern.jet.random.Poisson; staticNextInt[double]; int; null; shared>
<cern.jet.random.Poisson; nextInt[]; int; cern.jet.random.Poisson; staticNextInt[double]; int; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Poisson; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Poisson>; cern.jet.random.Poisson; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Poisson; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Poisson; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.VonMises; VonMises[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.VonMises; setState[double]; void; cern.jet.random.VonMises; VonMises[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.VonMises; nextDouble[double]; double; cern.jet.random.VonMises; nextDouble[]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; cos[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; acos[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<java.lang.Math; acos[double]; double; cern.jet.random.VonMises; nextDouble[double]; double; null; Math>
<cern.jet.random.VonMises; nextDouble[double]; double; cern.jet.random.VonMises; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.VonMises; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.VonMises>; cern.jet.random.VonMises; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.VonMises; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.AbstractDistribution; apply[double]; double; null; this>
<cern.jet.random.AbstractDistribution; nextInt[]; int; cern.jet.random.AbstractDistribution; apply[int]; int; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.jet.random.AbstractDistribution; clone[]; java.lang.Object; null; this.randomGenerator>
<cern.jet.random.engine.RandomEngine; makeDefault[]; cern.jet.random.engine.RandomEngine; cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; null; cern.jet.random.engine.RandomEngine>
<java.lang.Math; round[double]; long; cern.jet.random.AbstractDistribution; nextInt[]; int; null; Math>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.AbstractDistribution; nextInt[]; int; null; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Hyperbolic; Hyperbolic[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Hyperbolic; setState[double, double]; void; cern.jet.random.Hyperbolic; Hyperbolic[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Hyperbolic; nextDouble[double, double]; double; cern.jet.random.Hyperbolic; nextDouble[]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Hyperbolic; nextDouble[double, double]; double; null; Math>
<cern.jet.random.Hyperbolic; nextDouble[double, double]; double; cern.jet.random.Hyperbolic; staticNextDouble[double, double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Hyperbolic; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Hyperbolic>; cern.jet.random.Hyperbolic; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Hyperbolic; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Hyperbolic; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Uniform; Uniform[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Uniform; setState[double, double]; void; cern.jet.random.Uniform; Uniform[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Uniform; nextBoolean[]; boolean; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Uniform; nextDouble[]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; null; randomGenerator>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; nextFloatFromTo[float, float]; float; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.Uniform; nextInt[]; int; null; this>
<java.lang.Math; round[double]; long; cern.jet.random.Uniform; nextInt[]; int; null; Math>
<java.lang.Math; round[double]; long; cern.jet.random.Uniform; nextInt[]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Uniform; nextIntFromTo[int, int]; int; null; randomGenerator>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<java.lang.Math; round[double]; long; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; Math>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<java.lang.Math; round[double]; long; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; Math>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; nextLongFromTo[long, long]; long; null; this>
<cern.jet.random.Uniform; setState[double, double]; void; cern.jet.random.Uniform; setState[double, double]; void; null; this>
<cern.jet.random.Uniform; nextBoolean[]; boolean; cern.jet.random.Uniform; staticNextBoolean[]; boolean; null; shared>
<cern.jet.random.Uniform; nextDouble[]; double; cern.jet.random.Uniform; staticNextDouble[]; double; null; shared>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.Uniform; staticNextDoubleFromTo[double, double]; double; null; shared>
<cern.jet.random.Uniform; nextFloatFromTo[float, float]; float; cern.jet.random.Uniform; staticNextFloatFromTo[float, float]; float; null; shared>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.Uniform; staticNextIntFromTo[int, int]; int; null; shared>
<cern.jet.random.Uniform; nextLongFromTo[long, long]; long; cern.jet.random.Uniform; staticNextLongFromTo[long, long]; long; null; shared>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Uniform; staticSetRandomEngine[cern.jet.random.engine.RandomEngine]; void; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Uniform; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Uniform>; cern.jet.random.Uniform; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Uniform; toString[]; java.lang.String; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.ExponentialPower; ExponentialPower[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.ExponentialPower; setState[double]; void; cern.jet.random.ExponentialPower; ExponentialPower[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.ExponentialPower; nextDouble[double]; double; cern.jet.random.ExponentialPower; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; abs[double]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.ExponentialPower; nextDouble[double]; double; null; Math>
<cern.jet.random.ExponentialPower; nextDouble[double]; double; cern.jet.random.ExponentialPower; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.ExponentialPower; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.ExponentialPower>; cern.jet.random.ExponentialPower; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.ExponentialPower; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.AbstractContinousDistribution; AbstractContinousDistribution[]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Beta; Beta[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Beta; setState[double, double]; void; cern.jet.random.Beta; Beta[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<cern.jet.random.Beta; f[double, double, double, double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.stat.Probability; beta[double, double, double]; double; cern.jet.random.Beta; cdf[double]; double; null; Probability>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; f[double, double, double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; f[double, double, double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; f[double, double, double, double]; double; null; Math>
<cern.jet.random.Beta; nextDouble[double, double]; double; cern.jet.random.Beta; nextDouble[]; double; null; this>
<cern.jet.random.Beta; b1prs[double, double, cern.jet.random.engine.RandomEngine]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; this>
<cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.Beta; b01[double, double, cern.jet.random.engine.RandomEngine]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; this>
<cern.jet.random.Beta; b00[double, double, cern.jet.random.engine.RandomEngine]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Beta; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Beta; pdf[double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Beta; pdf[double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Beta; pdf[double]; double; null; Math>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.Beta; setState[double, double]; void; null; Fun>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.Beta; setState[double, double]; void; null; Fun>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.Beta; setState[double, double]; void; null; Fun>
<cern.jet.random.Beta; nextDouble[double, double]; double; cern.jet.random.Beta; staticNextDouble[double, double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Beta; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Beta>; cern.jet.random.Beta; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Beta; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Beta; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.PoissonSlow; PoissonSlow[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.PoissonSlow; setMean[double]; void; cern.jet.random.PoissonSlow; PoissonSlow[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.PoissonSlow; logGamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.PoissonSlow; logGamma[double]; double; null; Math>
<cern.jet.random.PoissonSlow; nextInt[double]; int; cern.jet.random.PoissonSlow; nextInt[]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; randomGenerator>
<java.lang.Math; tan[double]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; rand>
<java.lang.Math; exp[double]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; Math>
<cern.jet.random.PoissonSlow; logGamma[double]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.PoissonSlow; nextInt[double]; int; null; rand>
<java.lang.Math; exp[double]; double; cern.jet.random.PoissonSlow; nextIntSlow[]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.PoissonSlow; nextIntSlow[]; int; null; randomGenerator>
<java.lang.Math; round[double]; long; cern.jet.random.PoissonSlow; nextIntSlow[]; int; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.PoissonSlow; setMean[double]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.PoissonSlow; setMean[double]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.PoissonSlow; setMean[double]; void; null; Math>
<cern.jet.random.PoissonSlow; logGamma[double]; double; cern.jet.random.PoissonSlow; setMean[double]; void; null; this>
<cern.jet.random.PoissonSlow; setMean[double]; void; cern.jet.random.PoissonSlow; staticNextInt[double]; int; null; shared>
<cern.jet.random.PoissonSlow; nextInt[]; int; cern.jet.random.PoissonSlow; staticNextInt[double]; int; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.PoissonSlow; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.PoissonSlow>; cern.jet.random.PoissonSlow; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.PoissonSlow; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.PoissonSlow; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Logarithmic; Logarithmic[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Logarithmic; setState[double]; void; cern.jet.random.Logarithmic; Logarithmic[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Logarithmic; nextDouble[double]; double; cern.jet.random.Logarithmic; nextDouble[]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Logarithmic; nextDouble[double]; double; null; Math>
<cern.jet.random.Logarithmic; nextDouble[double]; double; cern.jet.random.Logarithmic; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Logarithmic; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Logarithmic>; cern.jet.random.Logarithmic; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Logarithmic; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Empirical; Empirical[double[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Empirical; setState[double[], int]; void; cern.jet.random.Empirical; Empirical[double[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Object; clone[]; double[]; cern.jet.random.Empirical; clone[]; java.lang.Object; null; this.cdf>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Empirical; nextDouble[]; double; null; randomGenerator>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Empirical; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Empirical>; cern.jet.random.Empirical; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Empirical; xnBins[]; int; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.HyperGeometric; HyperGeometric[int, int, int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.HyperGeometric; setState[int, int, int]; void; cern.jet.random.HyperGeometric; HyperGeometric[int, int, int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<cern.jet.math.Arithmetic; logFactorial[int]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; sqrt[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.HyperGeometric; fc_lnpk[int, int, int, int]; double; cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[]; int; null; this>
<cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[int, int, int]; int; null; this>
<cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.HyperGeometric; hmdu[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.random.HyperGeometric; hprs[int, int, int, cern.jet.random.engine.RandomEngine]; int; cern.jet.random.HyperGeometric; nextInt[int, int, int, cern.jet.random.engine.RandomEngine]; int; null; this>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.random.HyperGeometric; pdf[int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.random.HyperGeometric; pdf[int]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.random.HyperGeometric; pdf[int]; double; null; Arithmetic>
<cern.jet.random.HyperGeometric; nextInt[int, int, int]; int; cern.jet.random.HyperGeometric; staticNextInt[int, int, int]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.HyperGeometric; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.HyperGeometric>; cern.jet.random.HyperGeometric; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.HyperGeometric; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.EmpiricalWalker; EmpiricalWalker[double[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.EmpiricalWalker; setState[double[], int]; void; cern.jet.random.EmpiricalWalker; EmpiricalWalker[double[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.EmpiricalWalker; setState2[double[]]; void; cern.jet.random.EmpiricalWalker; EmpiricalWalker[double[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Object; clone[]; double[]; cern.jet.random.EmpiricalWalker; clone[]; java.lang.Object; null; this.cdf>
<java.lang.Object; clone[]; int[]; cern.jet.random.EmpiricalWalker; clone[]; java.lang.Object; null; this.A>
<java.lang.Object; clone[]; double[]; cern.jet.random.EmpiricalWalker; clone[]; java.lang.Object; null; this.F>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.EmpiricalWalker; nextInt[]; int; null; this.randomGenerator>
<cern.jet.random.Stack; push[int]; void; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Smalls>
<cern.jet.random.Stack; push[int]; void; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<cern.jet.random.Stack; size[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Smalls>
<cern.jet.random.Stack; pop[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Smalls>
<cern.jet.random.Stack; size[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<cern.jet.random.Stack; pop[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<cern.jet.random.Stack; push[int]; void; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Smalls>
<cern.jet.random.Stack; push[int]; void; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<cern.jet.random.Stack; size[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<cern.jet.random.Stack; pop[]; int; cern.jet.random.EmpiricalWalker; setState2[double[]]; void; null; Bigs>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.EmpiricalWalker; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.EmpiricalWalker>; cern.jet.random.EmpiricalWalker; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.EmpiricalWalker; toString[]; java.lang.String; null; this>
<java.lang.Math; atan[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; this.uniform>
<java.lang.Math; tan[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; max[double, double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; atan[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; atan[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<cern.jet.random.Uniform; nextDoubleFromTo[double, double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; this.uniform>
<java.lang.Math; tan[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<java.lang.Math; max[double, double]; double; cern.jet.random.BreitWignerMeanSquare; nextDouble[double, double, double]; double; null; Math>
<cern.jet.random.BreitWigner; nextDouble[double, double, double]; double; cern.jet.random.BreitWignerMeanSquare; staticNextDouble[double, double, double]; double; null; shared>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.BreitWignerMeanSquare; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Stack; size[]; int; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Exponential; Exponential[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Exponential; setState[double]; void; cern.jet.random.Exponential; Exponential[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.Exponential; cdf[double]; double; null; Math>
<cern.jet.random.Exponential; nextDouble[double]; double; cern.jet.random.Exponential; nextDouble[]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Exponential; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Exponential; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Exponential; pdf[double]; double; null; Math>
<cern.jet.random.Exponential; nextDouble[double]; double; cern.jet.random.Exponential; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Exponential; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Exponential>; cern.jet.random.Exponential; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Exponential; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Exponential; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.NegativeBinomial; NegativeBinomial[int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.NegativeBinomial; setNandP[int, double]; void; cern.jet.random.NegativeBinomial; NegativeBinomial[int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; negativeBinomial[int, int, double]; double; cern.jet.random.NegativeBinomial; cdf[int]; double; null; Probability>
<cern.jet.random.Poisson; clone[]; java.lang.Object; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; this.poisson>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; copy.poisson>
<cern.jet.random.AbstractDistribution; getRandomGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; copy>
<cern.jet.random.AbstractDistribution; clone[]; java.lang.Object; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; this.gamma>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; copy.gamma>
<cern.jet.random.AbstractDistribution; getRandomGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.NegativeBinomial; clone[]; java.lang.Object; null; copy>
<cern.jet.random.NegativeBinomial; nextInt[int, double]; int; cern.jet.random.NegativeBinomial; nextInt[]; int; null; this>
<cern.jet.random.Gamma; nextDouble[double, double]; double; cern.jet.random.NegativeBinomial; nextInt[int, double]; int; null; this.gamma>
<cern.jet.random.Poisson; nextInt[double]; int; cern.jet.random.NegativeBinomial; nextInt[int, double]; int; null; this.poisson>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.random.NegativeBinomial; pdf[int]; double; null; cern.jet.math.Arithmetic>
<java.lang.Math; pow[double, double]; double; cern.jet.random.NegativeBinomial; pdf[int]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.NegativeBinomial; pdf[int]; double; null; Math>
<cern.jet.random.NegativeBinomial; nextInt[int, double]; int; cern.jet.random.NegativeBinomial; staticNextInt[int, double]; int; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.NegativeBinomial; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.NegativeBinomial>; cern.jet.random.NegativeBinomial; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.NegativeBinomial; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.NegativeBinomial; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.StudentT; StudentT[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.StudentT; setState[double]; void; cern.jet.random.StudentT; StudentT[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; studentT[double, double]; double; cern.jet.random.StudentT; cdf[double]; double; null; Probability>
<cern.jet.random.StudentT; nextDouble[double]; double; cern.jet.random.StudentT; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.StudentT; nextDouble[double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.StudentT; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; sqrt[double]; double; cern.jet.random.StudentT; nextDouble[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.StudentT; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.StudentT; nextDouble[double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.StudentT; pdf[double]; double; null; Math>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.StudentT; setState[double]; void; null; Fun>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.StudentT; setState[double]; void; null; Fun>
<java.lang.Math; exp[double]; double; cern.jet.random.StudentT; setState[double]; void; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.StudentT; setState[double]; void; null; Math>
<cern.jet.random.StudentT; nextDouble[double]; double; cern.jet.random.StudentT; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.StudentT; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.StudentT>; cern.jet.random.StudentT; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.StudentT; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.random.Benchmark; demo1[]; void; null; numbers>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; demo1[]; void; null; dist>
<hep.aida.bin.AbstractBin1D; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.jet.random.Benchmark; demo1[]; void; null; bin>
<java.io.PrintStream; println[java.lang.Object]; void; cern.jet.random.Benchmark; demo1[]; void; null; System.out>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Boolean; booleanValue[]; boolean; cern.jet.random.Benchmark; main[java.lang.String[]]; void; null; new Boolean(args[1])>
<java.lang.Double; doubleValue[]; double; cern.jet.random.Benchmark; main[java.lang.String[]]; void; null; new Double(args[2])>
<cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; cern.jet.random.Benchmark; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; null; System.out>
<java.lang.Class; newInstance[]; ; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; null; Class.forName(generatorName)>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; newInstance[]; Class>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; null; exc>
<cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; null; this>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.jet.random.Benchmark; random[int, boolean, double, java.lang.String]; void; null; gen>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; new cern.colt.Timer()>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; dist>
<java.io.PrintStream; println[]; void; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; System.out>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; randomInstance[int, boolean, cern.jet.random.AbstractDistribution]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.random.Benchmark; test[int, cern.jet.random.AbstractDistribution]; void; null; System.out>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; test[int, cern.jet.random.AbstractDistribution]; void; null; distribution>
<java.io.PrintStream; println[]; void; cern.jet.random.Benchmark; test[int, cern.jet.random.AbstractDistribution]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; test[int, cern.jet.random.AbstractDistribution]; void; null; System.out>
<hep.aida.bin.DynamicBin1D; add[double]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution]; void; null; bin>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution]; void; null; distribution>
<java.io.PrintStream; println[java.lang.Object]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution]; void; null; System.out>
<hep.aida.bin.DynamicBin1D; add[double]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; binA>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; a>
<hep.aida.bin.DynamicBin1D; add[double]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; binB>
<cern.jet.random.AbstractDistribution; nextDouble[]; double; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; b>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; System.out>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; timer>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; timer>
<hep.aida.bin.DynamicBin1D; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; binA>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; System.out>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Benchmark; test2[int, cern.jet.random.AbstractDistribution, cern.jet.random.AbstractDistribution]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Gamma; Gamma[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Gamma; setState[double, double]; void; cern.jet.random.Gamma; Gamma[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; gamma[double, double, double]; double; cern.jet.random.Gamma; cdf[double]; double; null; Probability>
<cern.jet.random.Gamma; nextDouble[double, double]; double; cern.jet.random.Gamma; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; abs[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; abs[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Gamma; nextDouble[double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Gamma; pdf[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Gamma; pdf[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Gamma; pdf[double]; double; null; Math>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.Gamma; pdf[double]; double; null; Fun>
<cern.jet.random.Gamma; nextDouble[double, double]; double; cern.jet.random.Gamma; staticNextDouble[double, double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Gamma; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Gamma>; cern.jet.random.Gamma; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Gamma; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; geometricPdf[int, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; tan[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr1[double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; atan[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextBurr2[double, double, int, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; tan[double]; double; cern.jet.random.Distributions; nextCauchy[cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextCauchy[cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextErlang[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextErlang[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextGeometric[double, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextGeometric[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextGeometric[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextLambda[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextLambda[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextLambda[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Distributions; nextLambda[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextLambda[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextLaplace[cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextLaplace[cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextLaplace[cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextLogistic[cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextLogistic[cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; nextPowLaw[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextPowLaw[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextTriangular[cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Distributions; nextTriangular[cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Distributions; nextTriangular[cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; nextWeibull[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Distributions; nextWeibull[double, double, cern.jet.random.engine.RandomEngine]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextWeibull[double, double, cern.jet.random.engine.RandomEngine]; double; null; randomGenerator>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; randomGenerator>
<java.lang.Math; floor[double]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.random.Distributions; nextZipfInt[double, cern.jet.random.engine.RandomEngine]; int; null; Math>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.sampling.WeightedRandomSampler; WeightedRandomSampler[int, cern.jet.random.engine.RandomEngine]; void; null; cern.jet.random.AbstractDistribution>
<cern.jet.random.sampling.WeightedRandomSampler; setWeight[int]; void; cern.jet.random.sampling.WeightedRandomSampler; WeightedRandomSampler[int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; clone[]; java.lang.Object; cern.jet.random.sampling.WeightedRandomSampler; clone[]; java.lang.Object; null; this.generator>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.sampling.WeightedRandomSampler; sampleNextElement[]; boolean; null; generator>
<cern.jet.random.sampling.WeightedRandomSampler; setWeight[int]; void; cern.jet.random.sampling.WeightedRandomSampler; test[int, int]; void; null; sampler>
<cern.jet.random.sampling.WeightedRandomSampler; sampleNextElement[]; boolean; cern.jet.random.sampling.WeightedRandomSampler; test[int, int]; void; null; sampler>
<cern.colt.list.IntArrayList; add[int]; void; cern.jet.random.sampling.WeightedRandomSampler; test[int, int]; void; null; sample>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.WeightedRandomSampler; test[int, int]; void; null; System.out>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.jet.random.sampling.WeightedRandomSampler; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; acceptList>
<cern.colt.list.BooleanArrayList; elements[]; boolean[]; cern.jet.random.sampling.WeightedRandomSampler; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; acceptList>
<cern.jet.random.Uniform; nextIntFromTo[int, int]; int; cern.jet.random.sampling.WeightedRandomSampler; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; generator>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.sampling.RandomSampler; RandomSampler[long, long, long, cern.jet.random.engine.RandomEngine]; void; null; cern.jet.random.AbstractDistribution>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.jet.random.sampling.RandomSampler; clone[]; java.lang.Object; null; this.my_RandomGenerator>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; Long>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; Long>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; Long>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; Integer>
<cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; cern.jet.random.sampling.RandomSampler; main[java.lang.String[]]; void; null; this>
<cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.jet.random.sampling.RandomSampler; nextBlock[int, long[], int]; void; null; this>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; cern.jet.random.AbstractDistribution>
<cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.sampling.RandomSampler; rejectMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.jet.random.sampling.RandomSampler; sample[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodA[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; round[double]; long; cern.jet.random.sampling.RandomSampler; sampleMethodA[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodA[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; randomGenerator>
<cern.jet.random.sampling.RandomSampler; sampleMethodA[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; cern.jet.random.sampling.RandomSampler; sampleMethodD[long, long, int, long, long[], int, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; new cern.colt.Timer()>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; cern.jet.random.AbstractDistribution>
<cern.jet.random.sampling.RandomSampler; nextBlock[int, long[], int]; void; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; sampler>
<cern.jet.random.sampling.RandomSampler; nextBlock[int, long[], int]; void; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; sampler>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; System.out>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.RandomSampler; test[long, long, long, int, int]; void; null; System.out>
<java.lang.Math; min[long, long]; long; cern.jet.random.sampling.RandomSamplingAssistant; RandomSamplingAssistant[long, long, cern.jet.random.engine.RandomEngine]; void; null; Math>
<cern.jet.random.sampling.RandomSamplingAssistant; fetchNextBlock[]; void; cern.jet.random.sampling.RandomSamplingAssistant; RandomSamplingAssistant[long, long, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.sampling.RandomSampler; clone[]; java.lang.Object; cern.jet.random.sampling.RandomSamplingAssistant; clone[]; java.lang.Object; null; this.sampler>
<cern.jet.random.sampling.RandomSampler; nextBlock[int, long[], int]; void; cern.jet.random.sampling.RandomSamplingAssistant; fetchNextBlock[]; void; null; sampler>
<java.lang.Math; min[long, long]; long; cern.jet.random.sampling.RandomSamplingAssistant; fetchNextBlock[]; void; null; Math>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.sampling.RandomSamplingAssistant; main[java.lang.String[]]; void; null; Long>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.sampling.RandomSamplingAssistant; main[java.lang.String[]]; void; null; Long>
<cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; cern.jet.random.sampling.RandomSamplingAssistant; main[java.lang.String[]]; void; null; this>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; cern.jet.random.sampling.RandomSamplingAssistant; sampleArray[int, int[]]; int[]; null; assistant>
<cern.jet.random.sampling.RandomSamplingAssistant; fetchNextBlock[]; void; cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; null; this>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; new cern.colt.Timer()>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; assistant>
<cern.colt.list.LongArrayList; add[long]; void; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; sample>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.RandomSamplingAssistant; test[long, long]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; null; new cern.colt.Timer()>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleArray[int, int[]]; int[]; cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; null; this>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.sampling.RandomSamplingAssistant; testArraySampling[int, int]; void; null; System.out>
<cern.colt.list.AbstractBooleanList; size[]; int; cern.jet.random.sampling.RandomSamplingAssistant; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; acceptList>
<cern.colt.list.BooleanArrayList; elements[]; boolean[]; cern.jet.random.sampling.RandomSamplingAssistant; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; acceptList>
<cern.jet.random.sampling.RandomSamplingAssistant; fetchNextBlock[]; void; cern.jet.random.sampling.RandomSamplingAssistant; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.sampling.RandomSamplingAssistant; xsampleNextElements[cern.colt.list.BooleanArrayList]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.ChiSquare; ChiSquare[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.ChiSquare; setState[double]; void; cern.jet.random.ChiSquare; ChiSquare[double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; chiSquare[double, double]; double; cern.jet.random.ChiSquare; cdf[double]; double; null; Probability>
<cern.jet.random.ChiSquare; nextDouble[double]; double; cern.jet.random.ChiSquare; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; randomGenerator>
<java.lang.Math; log[double]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.ChiSquare; nextDouble[double]; double; null; Math>
<cern.jet.random.Fun; logGamma[double]; double; cern.jet.random.ChiSquare; pdf[double]; double; null; Fun>
<java.lang.Math; exp[double]; double; cern.jet.random.ChiSquare; pdf[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.ChiSquare; pdf[double]; double; null; Math>
<cern.jet.random.ChiSquare; nextDouble[double]; double; cern.jet.random.ChiSquare; staticNextDouble[double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.ChiSquare; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.ChiSquare>; cern.jet.random.ChiSquare; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.ChiSquare; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDiscreteDistribution; nextInt[]; int; cern.jet.random.AbstractDiscreteDistribution; nextDouble[]; double; null; this>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.AbstractDiscreteDistribution; nextInt[]; int; null; this>
<cern.jet.random.Normal; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Normal; Normal[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Normal; setState[double, double]; void; cern.jet.random.Normal; Normal[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.Probability; normal[double, double, double]; double; cern.jet.random.Normal; cdf[double]; double; null; Probability>
<cern.jet.random.Normal; nextDouble[double, double]; double; cern.jet.random.Normal; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Normal; nextDouble[double, double]; double; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Normal; nextDouble[double, double]; double; null; randomGenerator>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Normal; nextDouble[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Normal; nextDouble[double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.random.Normal; pdf[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.random.Normal; setState[double, double]; void; null; Math>
<cern.jet.random.Normal; nextDouble[double, double]; double; cern.jet.random.Normal; staticNextDouble[double, double]; double; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Normal; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Normal>; cern.jet.random.Normal; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.Normal; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Normal; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.AbstractDistribution; makeDefaultGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.random.Normal; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Zeta; Zeta[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.random.Zeta; setState[double, double]; void; cern.jet.random.Zeta; Zeta[double, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<java.lang.Math; log[double]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; randomGenerator>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; randomGenerator>
<java.lang.Math; exp[double]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; Math>
<java.lang.Math; log[double]; double; cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; null; Math>
<cern.jet.random.Zeta; generateZeta[double, double, cern.jet.random.engine.RandomEngine]; long; cern.jet.random.Zeta; nextInt[]; int; null; this>
<cern.jet.random.Zeta; setState[double, double]; void; cern.jet.random.Zeta; staticNextInt[double, double]; int; null; shared>
<cern.jet.random.Zeta; nextInt[]; int; cern.jet.random.Zeta; staticNextInt[double, double]; int; null; shared>
<java.lang.Class; getName[]; java.lang.String; cern.jet.random.Zeta; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.random.Zeta>; cern.jet.random.Zeta; toString[]; java.lang.String; getName[]; this>
<cern.jet.random.AbstractDistribution; setRandomGenerator[cern.jet.random.engine.RandomEngine]; void; cern.jet.random.Zeta; xstaticSetRandomGenerator[cern.jet.random.engine.RandomEngine]; void; null; shared>
<cern.jet.random.engine.RandomSeedTable; rows[]; int; cern.jet.random.engine.RandomSeedTable; getSeedAtRowColumn[int, int]; int; null; this>
<java.lang.Math; abs[int]; int; cern.jet.random.engine.RandomSeedTable; getSeedAtRowColumn[int, int]; int; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.random.engine.RandomSeedTable; getSeedAtRowColumn[int, int]; int; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.random.engine.RandomSeedTable; getSeedAtRowColumn[int, int]; int; null; Math>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; start[]; timer>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; display[]; timer>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; start[]; timer>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; gen>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; start[]; timer>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; gen>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; start[]; timer>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; gen>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; start[]; timer>
<java.util.Random; nextFloat[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; javaGen>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; benchmark[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<cern.colt.Timer; elapsedTime[]; float; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; benchmark[int]; void; null; System.out>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.engine.Benchmark; main[java.lang.String[]]; void; null; Long>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.random.engine.Benchmark; main[java.lang.String[]]; void; null; Long>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.engine.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.engine.Benchmark; main[java.lang.String[]]; void; null; Integer>
<cern.jet.random.engine.Benchmark; benchmark[int]; void; cern.jet.random.engine.Benchmark; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; System.out>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; randomEngine>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; System.out>
<cern.jet.random.engine.RandomEngine; nextInt[]; int; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; random>
<java.io.PrintStream; println[]; void; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; test[int, cern.jet.random.engine.RandomEngine]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; new cern.colt.Timer()>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; System.out>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; random>
<java.io.PrintStream; println[]; void; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; System.out>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.Benchmark; xtestRandomFromTo[long, long, int]; void; null; System.out>
<cern.jet.random.engine.MersenneTwister; setSeed[int]; void; cern.jet.random.engine.MersenneTwister; MersenneTwister[int]; void; null; this>
<java.util.Date; getTime[]; long; cern.jet.random.engine.MersenneTwister; MersenneTwister[java.util.Date]; void; null; d>
<java.lang.Object; clone[]; int[]; cern.jet.random.engine.MersenneTwister; clone[]; java.lang.Object; null; this.mt>
<cern.jet.random.engine.MersenneTwister; nextBlock[]; void; cern.jet.random.engine.MersenneTwister; nextInt[]; int; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.engine.RandomSeedGenerator; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.engine.RandomSeedGenerator; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.random.engine.RandomSeedGenerator; main[java.lang.String[]]; void; null; Integer>
<cern.jet.random.engine.RandomSeedGenerator; print[int]; void; cern.jet.random.engine.RandomSeedGenerator; main[java.lang.String[]]; void; null; new RandomSeedGenerator(row,column)>
<cern.jet.random.engine.RandomSeedTable; getSeedAtRowColumn[int, int]; int; cern.jet.random.engine.RandomSeedGenerator; nextSeed[]; int; null; RandomSeedTable>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.RandomSeedGenerator; print[int]; void; null; System.out>
<cern.colt.PersistentObject; clone[]; java.lang.Object; cern.jet.random.engine.RandomSeedGenerator; print[int]; void; null; this>
<cern.jet.random.engine.RandomSeedGenerator; nextSeed[]; int; cern.jet.random.engine.RandomSeedGenerator; print[int]; void; null; copy>
<java.io.PrintStream; println[int]; void; cern.jet.random.engine.RandomSeedGenerator; print[int]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.random.engine.RandomSeedGenerator; print[int]; void; null; System.out>
<cern.jet.random.engine.RandomEngine; nextDouble[]; double; cern.jet.random.engine.MersenneTwister64; raw[]; double; null; this>
<cern.jet.random.engine.DRand; setSeed[int]; void; cern.jet.random.engine.DRand; DRand[int]; void; null; this>
<java.util.Date; getTime[]; long; cern.jet.random.engine.DRand; DRand[java.util.Date]; void; null; d>
<java.lang.Math; pow[double, double]; double; cern.jet.random.engine.DRand; setSeed[int]; void; null; Math>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.RandomEngine; apply[double]; double; null; this>
<cern.jet.random.engine.RandomEngine; nextInt[]; int; cern.jet.random.engine.RandomEngine; apply[int]; int; null; this>
<java.lang.System; currentTimeMillis[]; long; cern.jet.random.engine.RandomEngine; makeDefault[]; cern.jet.random.engine.RandomEngine; null; System>
<cern.jet.random.engine.RandomEngine; nextLong[]; long; cern.jet.random.engine.RandomEngine; nextDouble[]; double; null; this>
<cern.jet.random.engine.RandomEngine; raw[]; double; cern.jet.random.engine.RandomEngine; nextFloat[]; float; null; this>
<cern.jet.random.engine.RandomEngine; nextInt[]; int; cern.jet.random.engine.RandomEngine; nextLong[]; long; null; this>
<cern.jet.random.engine.RandomEngine; nextInt[]; int; cern.jet.random.engine.RandomEngine; nextLong[]; long; null; this>
<cern.jet.random.engine.RandomEngine; nextInt[]; int; cern.jet.random.engine.RandomEngine; raw[]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; autoCorrelation[cern.colt.list.DoubleArrayList, int, double, double]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; autoCorrelation[cern.colt.list.DoubleArrayList, int, double, double]; double; null; data>
<cern.jet.stat.Descriptive; covariance[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; cern.jet.stat.Descriptive; correlation[cern.colt.list.DoubleArrayList, double, cern.colt.list.DoubleArrayList, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; covariance[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data1>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; covariance[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data2>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; covariance[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data1>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; covariance[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data2>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; covariance2[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data1>
<cern.jet.stat.Descriptive; mean[cern.colt.list.DoubleArrayList]; double; cern.jet.stat.Descriptive; covariance2[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; Descriptive>
<cern.jet.stat.Descriptive; mean[cern.colt.list.DoubleArrayList]; double; cern.jet.stat.Descriptive; covariance2[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; Descriptive>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; covariance2[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data1>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; covariance2[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data2>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; durbinWatson[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; durbinWatson[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.AbstractList; clear[]; void; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; distinctValues>
<cern.colt.list.AbstractList; clear[]; void; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; frequencies>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; sortedData>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; sortedData>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; distinctValues>
<cern.colt.list.IntArrayList; add[int]; void; cern.jet.stat.Descriptive; frequencies[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList]; void; null; frequencies>
<java.lang.Math; exp[double]; double; cern.jet.stat.Descriptive; geometricMean[int, double]; double; null; Math>
<cern.jet.stat.Descriptive; geometricMean[int, double]; double; cern.jet.stat.Descriptive; geometricMean[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; geometricMean[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.jet.stat.Descriptive; sumOfLogarithms[cern.colt.list.DoubleArrayList, int, int]; double; cern.jet.stat.Descriptive; geometricMean[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; geometricMean[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.jet.stat.Descriptive; checkRangeFromTo[int, int, int]; void; cern.jet.stat.Descriptive; incrementalUpdate[cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; incrementalUpdate[cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalUpdate[cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; data>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double, int, int]; double; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; data>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Descriptive; incrementalUpdateSumsOfPowers[cern.colt.list.DoubleArrayList, int, int, int, int, double[]]; void; null; Math>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; data>
<cern.jet.stat.Descriptive; checkRangeFromTo[int, int, int]; void; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; weights>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; weights>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; incrementalWeightedUpdate[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList, int, int, double[]]; void; null; weights>
<cern.jet.stat.Descriptive; kurtosis[double, double]; double; cern.jet.stat.Descriptive; kurtosis[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; kurtosis[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; lag1[cern.colt.list.DoubleArrayList, double]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; lag1[cern.colt.list.DoubleArrayList, double]; double; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; max[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; max[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.jet.stat.Descriptive; sum[cern.colt.list.DoubleArrayList]; double; cern.jet.stat.Descriptive; mean[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; mean[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; meanDeviation[cern.colt.list.DoubleArrayList, double]; double; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; meanDeviation[cern.colt.list.DoubleArrayList, double]; double; null; data>
<java.lang.Math; abs[double]; double; cern.jet.stat.Descriptive; meanDeviation[cern.colt.list.DoubleArrayList, double]; double; null; Math>
<cern.jet.stat.Descriptive; quantile[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.Descriptive; median[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; min[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; min[cern.colt.list.DoubleArrayList]; double; null; data>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Descriptive; moment[int, double, int, double[]]; double; null; Math>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.Descriptive; moment[int, double, int, double[]]; double; null; cern.jet.math.Arithmetic>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; null; data>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Descriptive; product[int, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.stat.Descriptive; product[int, double]; double; null; Math>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; product[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; product[cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; quantile[cern.colt.list.DoubleArrayList, double]; double; null; sortedData>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; quantile[cern.colt.list.DoubleArrayList, double]; double; null; sortedData>
<cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.Descriptive; quantileInverse[cern.colt.list.DoubleArrayList, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; quantileInverse[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; percentages>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; quantiles>
<cern.jet.stat.Descriptive; quantile[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; add[double]; this>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; percentages>
<cern.colt.list.AbstractDoubleList; binarySearch[double]; int; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; null; sortedList>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; rms[int, double]; double; null; Math>
<cern.jet.stat.Descriptive; sampleKurtosis[int, double, double]; double; cern.jet.stat.Descriptive; sampleKurtosis[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; sampleKurtosis[cern.colt.list.DoubleArrayList, double, double]; double; null; data>
<cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; sampleKurtosis[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; sampleKurtosisStandardError[int]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; sampleSkew[int, double, double]; double; null; Math>
<cern.jet.stat.Descriptive; sampleSkew[int, double, double]; double; cern.jet.stat.Descriptive; sampleSkew[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; sampleSkew[cern.colt.list.DoubleArrayList, double, double]; double; null; data>
<cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; sampleSkew[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; sampleSkewStandardError[int]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; sampleStandardDeviation[int, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; sampleStandardDeviation[int, double]; double; null; Math>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Descriptive; sampleStandardDeviation[int, double]; double; null; Gamma>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Descriptive; sampleStandardDeviation[int, double]; double; null; Gamma>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; sampleVariance[cern.colt.list.DoubleArrayList, double]; double; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; sampleVariance[cern.colt.list.DoubleArrayList, double]; double; null; data>
<cern.jet.stat.Descriptive; skew[double, double]; double; cern.jet.stat.Descriptive; skew[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.jet.stat.Descriptive; moment[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; skew[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; splitters>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; sortedList>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; splitters>
<cern.colt.list.AbstractDoubleList; binarySearch[double]; int; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; sortedList>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; bins[i]>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; sortedList>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; bins[i]>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; bins[noOfBins - 1]>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; split[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList[]; null; sortedList>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; standardDeviation[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Descriptive; standardError[int, double]; double; null; Math>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; standardize[cern.colt.list.DoubleArrayList, double, double]; void; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; standardize[cern.colt.list.DoubleArrayList, double, double]; void; null; data>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; sum[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double, int, int]; double; cern.jet.stat.Descriptive; sumOfInversions[cern.colt.list.DoubleArrayList, int, int]; double; null; this>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; sumOfLogarithms[cern.colt.list.DoubleArrayList, int, int]; double; null; data>
<java.lang.Math; log[double]; double; cern.jet.stat.Descriptive; sumOfLogarithms[cern.colt.list.DoubleArrayList, int, int]; double; null; Math>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double, int, int]; double; cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double, int, int]; double; null; data>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double, int, int]; double; null; Math>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; sumOfPowers[cern.colt.list.DoubleArrayList, int]; double; null; this>
<cern.jet.stat.Descriptive; sumOfPowerDeviations[cern.colt.list.DoubleArrayList, int, double]; double; cern.jet.stat.Descriptive; sumOfSquares[cern.colt.list.DoubleArrayList]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; trimmedMean[cern.colt.list.DoubleArrayList, double, int, int]; double; null; sortedData>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; trimmedMean[cern.colt.list.DoubleArrayList, double, int, int]; double; null; sortedData>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; weightedMean[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; weightedMean[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; weights>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; weightedMean[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; data>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; weightedMean[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; double; null; weights>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.Descriptive; winsorizedMean[cern.colt.list.DoubleArrayList, double, int, int]; double; null; sortedData>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.Descriptive; winsorizedMean[cern.colt.list.DoubleArrayList, double, int, int]; double; null; sortedData>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; beta[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; betaComplemented[double, double, double]; double; null; Gamma>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Probability; binomial[int, int, double]; double; null; Math>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; binomial[int, int, double]; double; null; Gamma>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Probability; binomialComplemented[int, int, double]; double; null; Math>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; binomialComplemented[int, int, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteGamma[double, double]; double; cern.jet.stat.Probability; chiSquare[double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; cern.jet.stat.Probability; chiSquareComplemented[double, double]; double; null; Gamma>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; errorFunction[double]; double; null; Math>
<cern.jet.stat.Probability; errorFunctionComplemented[double]; double; cern.jet.stat.Probability; errorFunction[double]; double; null; this>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; errorFunction[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; errorFunction[double]; double; null; Polynomial>
<cern.jet.stat.Probability; errorFunction[double]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; errorFunctionComplemented[double]; double; null; Polynomial>
<cern.jet.stat.Gamma; incompleteGamma[double, double]; double; cern.jet.stat.Probability; gamma[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; cern.jet.stat.Probability; gammaComplemented[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; negativeBinomial[int, int, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; negativeBinomialComplemented[int, int, double]; double; null; Gamma>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; normal[double]; double; null; Math>
<cern.jet.stat.Probability; errorFunction[double]; double; cern.jet.stat.Probability; normal[double]; double; null; this>
<cern.jet.stat.Probability; errorFunctionComplemented[double]; double; cern.jet.stat.Probability; normal[double]; double; null; this>
<cern.jet.stat.Probability; errorFunction[double]; double; cern.jet.stat.Probability; normal[double, double, double]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Probability; normal[double, double, double]; double; null; Math>
<cern.jet.stat.Probability; errorFunction[double]; double; cern.jet.stat.Probability; normal[double, double, double]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Probability; normal[double, double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Probability; normalInverse[double]; double; null; Polynomial>
<cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; cern.jet.stat.Probability; poisson[int, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteGamma[double, double]; double; cern.jet.stat.Probability; poissonComplemented[int, double]; double; null; Gamma>
<cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; cern.jet.stat.Probability; studentT[double, double]; double; null; Gamma>
<cern.jet.stat.Probability; normalInverse[double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; this>
<cern.jet.stat.Probability; studentT[double, double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; this>
<cern.jet.stat.Probability; studentT[double, double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; this>
<cern.jet.stat.Probability; studentT[double, double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; this>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Probability; studentTInverse[double, int]; double; null; Math>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; beta[double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; beta[double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; beta[double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; beta[double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; beta[double, double]; double; null; this>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Math>
<java.lang.Math; floor[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Math>
<cern.jet.stat.Gamma; stirlingFormula[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; this>
<cern.jet.stat.Gamma; stirlingFormula[double]; double; cern.jet.stat.Gamma; gamma[double]; double; null; this>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Gamma; gamma[double]; double; null; Polynomial>
<cern.jet.stat.Gamma; powerSeries[double, double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; powerSeries[double, double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.stat.Gamma; incompleteBeta[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction1[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteBetaFraction2[double, double, double]; double; null; Math>
<cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; cern.jet.stat.Gamma; incompleteGamma[double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; incompleteGamma[double, double]; double; null; Math>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; incompleteGamma[double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.stat.Gamma; incompleteGamma[double, double]; double; null; Math>
<cern.jet.stat.Gamma; incompleteGamma[double, double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; Math>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; incompleteGammaComplement[double, double]; double; null; Math>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; this>
<java.lang.Math; floor[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Polynomial>
<cern.jet.math.Polynomial; p1evl[double, double[], int]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Polynomial>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Gamma; logGamma[double]; double; null; Polynomial>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; gamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<cern.jet.stat.Gamma; logGamma[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Gamma>
<java.lang.Math; log[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.stat.Gamma; powerSeries[double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.stat.Gamma; stirlingFormula[double]; double; null; Math>
<cern.jet.math.Polynomial; polevl[double, double[], int]; double; cern.jet.stat.Gamma; stirlingFormula[double]; double; null; Polynomial>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Gamma; stirlingFormula[double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.Gamma; stirlingFormula[double]; double; null; Math>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; Integer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.err>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.err>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; e>
<java.lang.System; exit[int]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; argv[1]>
<java.lang.String; equals[java.lang.Object]; boolean; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; argv[1]>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; Long>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.err>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.err>
<java.lang.Throwable; getMessage[]; java.lang.String; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; e>
<java.lang.System; exit[int]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.out>
<cern.jet.random.Uniform; nextDouble[]; double; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; dataRand>
<hep.aida.bin.StaticBin1D; add[double]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; qAccum>
<hep.aida.bin.DynamicBin1D; add[double]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; dbin>
<java.io.PrintStream; println[]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.out>
<hep.aida.bin.QuantileBin1D; quantile[double]; double; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; qAccum>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; System.out>
<java.text.NumberFormat; format[double]; java.lang.String; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; fmt>
<hep.aida.bin.DynamicBin1D; quantile[double]; double; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; dbin>
<hep.aida.bin.DynamicBin1D; quantile[double]; double; cern.jet.stat.quantile.Quantile1Test; main[java.lang.String[]]; void; null; dbin>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.Utils; epsilonCeiling[double]; long; null; Math>
<cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Arithmetic>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; null; this>
<cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K[double, double, int]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; null; this>
<cern.jet.stat.quantile.QuantileFinderFactory; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.QuantileFinderFactory; newEquiDepthPhis[int]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K[double, double, int]; long[]; null; this>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Arithmetic>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Arithmetic>
<java.lang.Math; min[double, double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.lang.Math; max[double, double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.lang.Math; max[double, double]; double; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; Math>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderFactory; unknown_N_compute_B_and_K_raw[double, double, int]; long[]; null; System.out>
<cern.jet.stat.quantile.DoubleBuffer; allocate[]; void; cern.jet.stat.quantile.DoubleBuffer; add[double]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.DoubleBuffer; add[double]; void; null; values>
<cern.jet.stat.quantile.DoubleBuffer; allocate[]; void; cern.jet.stat.quantile.DoubleBuffer; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.jet.stat.quantile.DoubleBuffer; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; values>
<cern.colt.list.DoubleArrayList; ensureCapacity[int]; void; cern.jet.stat.quantile.DoubleBuffer; allocate[]; void; null; values>
<cern.colt.list.AbstractList; clear[]; void; cern.jet.stat.quantile.DoubleBuffer; clear[]; void; null; values>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.DoubleBuffer; clone[]; java.lang.Object; null; copy.values>
<cern.jet.stat.quantile.DoubleBuffer; sort[]; void; cern.jet.stat.quantile.DoubleBuffer; contains[double]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; contains[double]; boolean; cern.jet.stat.quantile.DoubleBuffer; contains[double]; boolean; null; values>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; null; values>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleBuffer; isFull[]; boolean; null; values>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.DoubleBuffer; memory[]; int; null; values>
<cern.jet.stat.quantile.DoubleBuffer; sort[]; void; cern.jet.stat.quantile.DoubleBuffer; rank[double]; double; null; this>
<cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.quantile.DoubleBuffer; rank[double]; double; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleBuffer; size[]; int; null; values>
<cern.colt.list.AbstractList; sort[]; void; cern.jet.stat.quantile.DoubleBuffer; sort[]; void; null; values>
<java.lang.Long; toString[long]; java.lang.String; cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; null; Long>
<cern.jet.stat.quantile.Buffer; weight[]; int; cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; null; this>
<java.lang.Integer; toString[int]; java.lang.String; cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; null; Integer>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; null; values>
<cern.jet.stat.quantile.DoubleQuantileEstimator; sampleNextElement[]; boolean; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; bufferSet>
<cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; this>
<cern.jet.stat.quantile.DoubleQuantileEstimator; newBuffer[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; this>
<cern.jet.stat.quantile.DoubleBuffer; add[double]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; currentBufferToFill>
<cern.jet.stat.quantile.DoubleBuffer; isFull[]; boolean; cern.jet.stat.quantile.DoubleQuantileEstimator; add[double]; void; null; currentBufferToFill>
<cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOf[cern.colt.list.DoubleArrayList]; void; null; values>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; values>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this.bufferSet>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; currentBufferToFill.values>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; currentBufferToFill>
<cern.jet.stat.quantile.DoubleQuantileEstimator; sampleNextElement[]; boolean; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; bufferSet>
<cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.jet.stat.quantile.DoubleQuantileEstimator; newBuffer[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this>
<cern.jet.stat.quantile.DoubleBuffer; allocate[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; currentBufferToFill>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; currentBufferToFill.values>
<cern.colt.list.AbstractList; setSize[int]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; currentBufferToFill.values>
<cern.colt.list.AbstractList; setSize[int]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; this.currentBufferToFill.values>
<cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.DoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; clear[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; clear[]; void; null; this.bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; clone[]; java.lang.Object; cern.jet.stat.quantile.DoubleQuantileEstimator; clone[]; java.lang.Object; null; copy.bufferSet>
<cern.colt.list.ObjectArrayList; indexOf[java.lang.Object, boolean]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; clone[]; java.lang.Object; null; new ObjectArrayList(this.bufferSet.buffers)>
<cern.jet.stat.quantile.DoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; null; bufferSet>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; null; toCollapse[0]>
<cern.jet.stat.quantile.Buffer; level[int]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; null; outputBuffer>
<cern.jet.stat.quantile.DoubleQuantileEstimator; postCollapse[cern.jet.stat.quantile.DoubleBuffer[]]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; collapse[]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; contains[double]; boolean; cern.jet.stat.quantile.DoubleQuantileEstimator; contains[double]; boolean; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; forEach[cern.colt.function.DoubleProcedure]; boolean; cern.jet.stat.quantile.DoubleQuantileEstimator; forEach[cern.colt.function.DoubleProcedure]; boolean; null; this.bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; memory[]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; memory[]; long; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; phi[double]; double; cern.jet.stat.quantile.DoubleQuantileEstimator; phi[double]; double; null; bufferSet>
<cern.jet.stat.quantile.DoubleQuantileEstimator; preProcessPhis[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this.bufferSet>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.Utils; epsilonCeiling[double]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Utils>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffers[]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; bufferSet>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; cern.jet.stat.quantile.DoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; bufferSet>
<cern.jet.stat.quantile.DoubleQuantileEstimator; clear[]; void; cern.jet.stat.quantile.DoubleQuantileEstimator; setUp[int, int]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.stat.quantile.DoubleQuantileEstimator>; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; getName[]; this>
<java.lang.String; substring[int]; java.lang.String; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; s>
<java.lang.String; lastIndexOf[int]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; s>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; bufferSet>
<cern.jet.stat.quantile.DoubleQuantileEstimator; memory[]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; this>
<cern.jet.stat.quantile.DoubleQuantileEstimator; size[]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; cern.jet.stat.quantile.DoubleQuantileEstimator; toString[]; java.lang.String; null; this.bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; totalMemory[]; long; totalSize[]; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.DoubleQuantileEstimator; totalMemory[]; long; null; bufferSet>
<cern.jet.stat.quantile.Buffer; isEmpty[]; boolean; cern.jet.stat.quantile.Buffer; isPartial[]; boolean; null; this>
<cern.jet.stat.quantile.Buffer; isFull[]; boolean; cern.jet.stat.quantile.Buffer; isPartial[]; boolean; null; this>
<cern.jet.math.Arithmetic; floor[double]; long; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; KnownDoubleQuantileEstimator[int, int, long, double, cern.jet.random.engine.RandomEngine]; void; null; Arithmetic>
<cern.jet.stat.quantile.DoubleQuantileEstimator; setUp[int, int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; KnownDoubleQuantileEstimator[int, int, long, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.quantile.KnownDoubleQuantileEstimator; clear[]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; KnownDoubleQuantileEstimator[int, int, long, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; addInfinities[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer.values>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; addInfinities[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer.values>
<cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.math.Arithmetic; floor[double]; long; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; clear[]; void; null; Arithmetic>
<cern.jet.random.sampling.RandomSamplingAssistant; getRandomGenerator[]; cern.jet.random.engine.RandomEngine; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; clear[]; void; null; assist>
<cern.jet.random.sampling.RandomSamplingAssistant; clone[]; java.lang.Object; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; clone[]; java.lang.Object; null; copy.samplingAssistant>
<cern.jet.stat.quantile.DoubleBufferSet; _getNumberOfEmptyBuffers[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.bufferSet>
<cern.jet.stat.quantile.Buffer; level[int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.currentBufferToFill>
<cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.bufferSet>
<cern.jet.stat.quantile.Buffer; level[int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.currentBufferToFill>
<cern.jet.stat.quantile.Buffer; weight[int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; newBuffer[]; void; null; this.currentBufferToFill>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; preProcessPhis[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; preProcessPhis[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.DoubleArrayList; set[int, double]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; preProcessPhis[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; preProcessPhis[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.DoubleBufferSet; _getPartialBuffer[]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this.bufferSet>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; bufferSet>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; partial>
<cern.jet.stat.quantile.KnownDoubleQuantileEstimator; addInfinities[int, cern.jet.stat.quantile.DoubleBuffer]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this>
<cern.jet.stat.quantile.KnownDoubleQuantileEstimator; removeInfinitiesFrom[int, cern.jet.stat.quantile.DoubleBuffer]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; removeInfinitiesFrom[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer.values>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; removeInfinitiesFrom[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; removeInfinitiesFrom[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer>
<cern.colt.list.AbstractDoubleList; removeFromTo[int, int]; void; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; removeInfinitiesFrom[int, cern.jet.stat.quantile.DoubleBuffer]; void; null; buffer.values>
<cern.jet.random.sampling.RandomSamplingAssistant; sampleNextElement[]; boolean; cern.jet.stat.quantile.KnownDoubleQuantileEstimator; sampleNextElement[]; boolean; null; samplingAssistant>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; clear[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; ExactDoubleQuantileFinder[]; void; null; this>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; add[double]; void; null; this.buffer>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; addAllOf[cern.colt.list.DoubleArrayList]; void; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.ExactDoubleQuantileFinder; addAllOf[cern.colt.list.DoubleArrayList]; void; null; values>
<cern.colt.list.AbstractDoubleList; addAllOfFromTo[cern.colt.list.AbstractDoubleList, int, int]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; addAllOfFromTo[cern.colt.list.DoubleArrayList, int, int]; void; null; buffer>
<cern.colt.list.AbstractList; clear[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; clear[]; void; null; this.buffer>
<cern.colt.list.DoubleArrayList; trimToSize[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; clear[]; void; null; this.buffer>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.ExactDoubleQuantileFinder; clone[]; java.lang.Object; null; copy.buffer>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; sort[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; contains[double]; boolean; null; this>
<cern.colt.list.AbstractDoubleList; binarySearch[double]; int; cern.jet.stat.quantile.ExactDoubleQuantileFinder; contains[double]; boolean; null; buffer>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.ExactDoubleQuantileFinder; forEach[cern.colt.function.DoubleProcedure]; boolean; null; buffer>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; size[]; long; cern.jet.stat.quantile.ExactDoubleQuantileFinder; forEach[cern.colt.function.DoubleProcedure]; boolean; null; this>
<cern.colt.function.DoubleProcedure; apply[double]; boolean; cern.jet.stat.quantile.ExactDoubleQuantileFinder; forEach[cern.colt.function.DoubleProcedure]; boolean; null; procedure>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.ExactDoubleQuantileFinder; memory[]; long; null; buffer>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; sort[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; phi[double]; double; null; this>
<cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.quantile.ExactDoubleQuantileFinder; phi[double]; double; null; cern.jet.stat.Descriptive>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; size[]; long; cern.jet.stat.quantile.ExactDoubleQuantileFinder; phi[double]; double; null; this>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; sort[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; this>
<cern.jet.stat.Descriptive; quantiles[cern.colt.list.DoubleArrayList, cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.ExactDoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; cern.jet.stat.Descriptive>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.ExactDoubleQuantileFinder; size[]; long; null; buffer>
<cern.colt.list.AbstractList; sort[]; void; cern.jet.stat.quantile.ExactDoubleQuantileFinder; sort[]; void; null; buffer>
<java.lang.Class; getName[]; java.lang.String; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends cern.jet.stat.quantile.ExactDoubleQuantileFinder>; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; getName[]; this>
<java.lang.String; substring[int]; java.lang.String; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; null; s>
<java.lang.String; lastIndexOf[int]; int; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; null; s>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; memory[]; long; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; null; this>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; size[]; long; cern.jet.stat.quantile.ExactDoubleQuantileFinder; toString[]; java.lang.String; null; this>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; memory[]; long; cern.jet.stat.quantile.ExactDoubleQuantileFinder; totalMemory[]; long; null; this>
<cern.colt.list.AbstractDoubleList; binarySearch[double]; int; cern.jet.stat.quantile.QuantileFinderTest; binaryMultiSearch[cern.colt.list.DoubleArrayList, double]; cern.colt.list.IntArrayList; null; list>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; binaryMultiSearch[cern.colt.list.DoubleArrayList, double]; cern.colt.list.IntArrayList; null; list>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.QuantileFinderTest; binaryMultiSearch[cern.colt.list.DoubleArrayList, double]; cern.colt.list.IntArrayList; null; list>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; binaryMultiSearch[cern.colt.list.DoubleArrayList, double]; cern.colt.list.IntArrayList; null; list>
<java.lang.Math; abs[double]; double; cern.jet.stat.quantile.QuantileFinderTest; epsilon[int, double, double]; double; null; Math>
<cern.jet.stat.Descriptive; rankInterpolated[cern.colt.list.DoubleArrayList, double]; double; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, double, double]; double; null; cern.jet.stat.Descriptive>
<cern.jet.stat.quantile.QuantileFinderTest; epsilon[int, double, double]; double; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, double, double]; double; null; this>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, double, double]; double; null; sortedList>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.DoubleQuantileFinder, double]; double; null; finder.quantileElements(new DoubleArrayList(new double[]{phi}))>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.DoubleQuantileFinder, double]; double; get[int]; finder>
<cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, double, double]; double; cern.jet.stat.quantile.QuantileFinderTest; epsilon[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.DoubleQuantileFinder, double]; double; null; this>
<cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; cern.jet.stat.quantile.QuantileFinderTest; main[java.lang.String[]]; void; null; this>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; size[]; long; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; exactFinder>
<cern.jet.stat.quantile.Utils; epsilonCeiling[double]; long; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; Utils>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; exactFinder.quantileElements(new DoubleArrayList(new double[]{phi}))>
<cern.jet.stat.quantile.ExactDoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; get[int]; exactFinder>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; approxFinder.quantileElements(new DoubleArrayList(new double[]{phi}))>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; get[int]; approxFinder>
<cern.jet.stat.quantile.QuantileFinderTest; binaryMultiSearch[cern.colt.list.DoubleArrayList, double]; cern.colt.list.IntArrayList; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; this>
<cern.colt.list.IntArrayList; get[int]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; approxRanks>
<cern.colt.list.IntArrayList; get[int]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; approxRanks>
<java.lang.Math; abs[int]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; null; Math>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonAtPhi[double, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder]; double; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; this>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; epsilons>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; null; System.out>
<cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; cern.jet.stat.quantile.QuantileFinderTest; test[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; new Timer()>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; QuantileFinderFactory>
<cern.jet.stat.quantile.DoubleQuantileFinder; totalMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; finder>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; Math>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testBestBandKCalculation[java.lang.String[]]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; System.out>
<java.lang.Runtime; totalMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; totalMemory[]; Runtime>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; new Timer()>
<java.io.PrintStream; println[java.lang.Object]; void; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; System.out>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; System.out>
<java.lang.Runtime; totalMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testLocalVarDeclarationSpeed[int]; void; totalMemory[]; Runtime>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; args[5]>
<java.lang.String; equals[java.lang.Object]; boolean; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; args[6]>
<java.lang.Double; doubleValue[]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; new Double(args[7])>
<java.lang.Double; doubleValue[]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; new Double(args[8])>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Integer>
<java.lang.Long; parseLong[java.lang.String]; long; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Long>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.lang.Runtime; freeMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; freeMemory[]; Runtime>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.lang.Runtime; totalMemory[]; long; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; totalMemory[]; Runtime>
<cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; QuantileFinderFactory>
<java.io.PrintStream; println[java.lang.Object]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.QuantileFinderFactory; newDoubleQuantileFinder[boolean, long, double, double, int, cern.jet.random.engine.RandomEngine]; cern.jet.stat.quantile.DoubleQuantileFinder; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; QuantileFinderFactory>
<java.io.PrintStream; println[java.lang.Object]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.list.AbstractList; setSize[int]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; list>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer2>
<cern.colt.list.DoubleArrayList; add[double]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; list>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer2>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; new Timer()>
<cern.colt.list.AbstractList; shuffle[]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; list>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer3.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; display[]; timer3>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer>
<cern.jet.stat.quantile.DoubleQuantileFinder; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; approxFinder>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer>
<cern.jet.stat.quantile.DoubleQuantileFinder; addAllOf[cern.colt.list.DoubleArrayList]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; exactFinder>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; start[]; timer>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; approxFinder>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; start[]; timer>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; exactFinder>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.QuantileFinderTest; observedEpsilonsAtPhis[cern.colt.list.DoubleArrayList, cern.jet.stat.quantile.ExactDoubleQuantileFinder, cern.jet.stat.quantile.DoubleQuantileFinder, double]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.DoubleQuantileFinder; phi[double]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; exactFinder>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.DoubleQuantileFinder; phi[double]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; approxFinder>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; exactFinder>
<cern.jet.stat.quantile.DoubleQuantileFinder; phi[double]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; exactFinder>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.DoubleQuantileFinder; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; approxFinder>
<cern.jet.stat.quantile.DoubleQuantileFinder; phi[double]; double; cern.jet.stat.quantile.QuantileFinderTest; testQuantileCalculation[java.lang.String[]]; void; null; approxFinder>
<cern.jet.stat.quantile.DoubleBufferSet; clear[int]; void; cern.jet.stat.quantile.DoubleBufferSet; DoubleBufferSet[int, int]; void; null; this>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; null; buffers[i]>
<cern.jet.stat.quantile.Buffer; isAllocated[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffers[]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffers[]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; level[]; this>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; null; buffer>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; null; buffer>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.DoubleBufferSet; _getMinLevelOfFullOrPartialBuffers[]; int; null; buffer>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getNumberOfEmptyBuffers[]; int; null; buffers[i]>
<cern.jet.stat.quantile.Buffer; isPartial[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; _getPartialBuffer[]; cern.jet.stat.quantile.DoubleBuffer; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBufferSet; clear[int]; void; cern.jet.stat.quantile.DoubleBufferSet; clear[]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.DoubleBufferSet; clear[]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.DoubleBufferSet; clear[int]; void; null; this>
<java.lang.Object; clone[]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.DoubleBufferSet; clone[]; java.lang.Object; null; copy.buffers>
<cern.jet.stat.quantile.DoubleBuffer; clone[]; java.lang.Object; cern.jet.stat.quantile.DoubleBufferSet; clone[]; java.lang.Object; null; copy.buffers[i]>
<cern.jet.stat.quantile.Buffer; weight[]; int; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBufferSet; k[]; int; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; nextTriggerPosition[int, long]; long; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; this>
<cern.jet.stat.quantile.DoubleBuffer; clear[]; void; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; buffers[b]>
<cern.colt.list.DoubleArrayList; elements[double[]]; cern.colt.list.AbstractDoubleList; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; outputBuffer.values>
<cern.jet.stat.quantile.Buffer; weight[int]; void; cern.jet.stat.quantile.DoubleBufferSet; collapse[cern.jet.stat.quantile.DoubleBuffer[]]; cern.jet.stat.quantile.DoubleBuffer; null; outputBuffer>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; contains[double]; boolean; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; contains[double]; boolean; cern.jet.stat.quantile.DoubleBufferSet; contains[double]; boolean; null; buffers[i]>
<cern.jet.stat.quantile.Buffer; weight[]; int; cern.jet.stat.quantile.DoubleBufferSet; forEach[cern.colt.function.DoubleProcedure]; boolean; null; buffers[i]>
<cern.colt.list.DoubleArrayList; forEach[cern.colt.function.DoubleProcedure]; boolean; cern.jet.stat.quantile.DoubleBufferSet; forEach[cern.colt.function.DoubleProcedure]; boolean; null; buffers[i].values>
<cern.jet.stat.quantile.DoubleBuffer; sort[]; void; cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; null; buffers[i]>
<cern.colt.list.DoubleArrayList; elements[]; double[]; cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; null; buffers[i].values>
<cern.jet.stat.quantile.Buffer; weight[]; int; cern.jet.stat.quantile.DoubleBufferSet; getValuesAtPositions[cern.jet.stat.quantile.DoubleBuffer[], long[]]; double[]; null; minBuffer>
<cern.jet.stat.quantile.DoubleBuffer; memory[]; int; cern.jet.stat.quantile.DoubleBufferSet; memory[]; long; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; phi[double]; double; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBuffer; rank[double]; double; cern.jet.stat.quantile.DoubleBufferSet; phi[double]; double; null; buffers[i]>
<cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; cern.jet.stat.quantile.DoubleBufferSet; phi[double]; double; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; this>
<cern.jet.stat.quantile.DoubleBuffer; isEmpty[]; boolean; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; buffers[b]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; buf>
<cern.jet.stat.quantile.DoubleBuffer; toString[]; java.lang.String; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; buffers[b]>
<java.lang.StringBuffer; toString[]; java.lang.String; cern.jet.stat.quantile.DoubleBufferSet; toString[]; java.lang.String; null; buf>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffers[]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; null; this>
<cern.jet.stat.quantile.DoubleBuffer; size[]; int; cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; null; fullBuffers[i]>
<cern.jet.stat.quantile.Buffer; weight[]; int; cern.jet.stat.quantile.DoubleBufferSet; totalSize[]; long; null; fullBuffers[i]>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; null; Math>
<cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_quick[long, double]; long[]; null; this>
<java.lang.Math; log[double]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K_slow[long, double, double, int, double[]]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; cern.jet.stat.quantile.QuantileCalc; main[java.lang.String[]]; void; null; this>
<java.lang.Boolean; booleanValue[]; boolean; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; new Boolean(args[0])>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<cern.jet.stat.quantile.QuantileCalc; known_N_compute_B_and_K[long, double, double, int, double[]]; long[]; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; this>
<cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; this>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; test_B_and_K_Calculation[java.lang.String[]]; void; null; System.out>
<java.lang.Math; pow[double, double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<java.lang.Math; log[double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; this>
<cern.jet.stat.quantile.QuantileCalc; binomial[long, long]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; this>
<java.lang.Math; min[double, double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<java.lang.Math; max[double, double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<cern.jet.stat.quantile.QuantileCalc; ceiling[double]; long; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; this>
<java.lang.Math; max[double, double]; double; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; Math>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.QuantileCalc; unknown_N_compute_B_and_K[double, double, int]; long[]; null; System.out>
<cern.jet.stat.quantile.DoubleQuantileEstimator; setUp[int, int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; UnknownDoubleQuantileEstimator[int, int, int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; clear[]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; UnknownDoubleQuantileEstimator[int, int, int, double, cern.jet.random.engine.RandomEngine]; void; null; this>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffers[]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; sortAscendingByLevel[cern.jet.stat.quantile.DoubleBuffer[]]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; this>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; fullBuffers[1]>
<cern.jet.stat.quantile.Buffer; level[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; fullBuffers[0]>
<cern.jet.stat.quantile.Buffer; level[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; fullBuffers[0]>
<cern.jet.stat.quantile.DoubleBufferSet; _getFullOrPartialBuffersWithLevel[int]; cern.jet.stat.quantile.DoubleBuffer[]; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; buffersToCollapse[]; cern.jet.stat.quantile.DoubleBuffer[]; null; bufferSet>
<cern.jet.random.sampling.WeightedRandomSampler; setWeight[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; clear[]; void; null; this.sampler>
<cern.jet.random.sampling.WeightedRandomSampler; clone[]; java.lang.Object; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; clone[]; java.lang.Object; null; copy.sampler>
<cern.jet.stat.quantile.DoubleBufferSet; _getFirstEmptyBuffer[]; cern.jet.stat.quantile.DoubleBuffer; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; newBuffer[]; void; null; bufferSet>
<cern.jet.stat.quantile.Buffer; level[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; newBuffer[]; void; null; currentBufferToFill>
<cern.jet.stat.quantile.Buffer; weight[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; newBuffer[]; void; null; currentBufferToFill>
<cern.jet.random.sampling.WeightedRandomSampler; getWeight[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; newBuffer[]; void; null; sampler>
<cern.jet.stat.quantile.DoubleBufferSet; b[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; postCollapse[cern.jet.stat.quantile.DoubleBuffer[]]; void; null; bufferSet>
<cern.jet.random.sampling.WeightedRandomSampler; setWeight[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; postCollapse[cern.jet.stat.quantile.DoubleBuffer[]]; void; null; sampler>
<cern.jet.random.sampling.WeightedRandomSampler; getWeight[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; postCollapse[cern.jet.stat.quantile.DoubleBuffer[]]; void; null; sampler>
<cern.jet.stat.quantile.Utils; epsilonCeiling[double]; long; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Utils>
<cern.colt.list.DoubleArrayList; copy[]; cern.colt.list.DoubleArrayList; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.AbstractDoubleList; size[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.colt.list.DoubleArrayList; get[int]; double; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<java.lang.Math; round[double]; long; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Math>
<java.lang.Math; min[int, int]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Math>
<java.lang.Math; max[int, int]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; Math>
<cern.colt.list.DoubleArrayList; set[int, double]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; quantileElements[cern.colt.list.DoubleArrayList]; cern.colt.list.DoubleArrayList; null; phis>
<cern.jet.random.sampling.WeightedRandomSampler; sampleNextElement[]; boolean; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; sampleNextElement[]; boolean; null; sampler>
<cern.colt.list.ObjectArrayList; quickSortFromTo[int, int, java.util.Comparator]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; sortAscendingByLevel[cern.jet.stat.quantile.DoubleBuffer[]]; void; null; new ObjectArrayList(fullBuffers)>
<cern.jet.stat.quantile.Buffer; level[]; int; java.lang.Object; compare[java.lang.Object, java.lang.Object]; int; null; ((DoubleBuffer)o1)>
<cern.jet.stat.quantile.Buffer; level[]; int; java.lang.Object; compare[java.lang.Object, java.lang.Object]; int; null; ((DoubleBuffer)o2)>
<java.lang.StringBuffer; setLength[int]; void; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; toString[]; java.lang.String; null; buf>
<java.lang.StringBuffer; length[]; int; cern.jet.stat.quantile.UnknownDoubleQuantileEstimator; toString[]; java.lang.String; null; buf>
<java.util.Arrays; binarySearch[float[], float]; int; cern.jet.stat.quantile.EquiDepthHistogram; binOfElement[float]; int; null; java.util.Arrays>
<cern.jet.stat.quantile.EquiDepthHistogram; phi[float]; double; cern.jet.stat.quantile.EquiDepthHistogram; percentFromTo[float, float]; double; null; this>
<cern.jet.stat.quantile.EquiDepthHistogram; phi[float]; double; cern.jet.stat.quantile.EquiDepthHistogram; percentFromTo[float, float]; double; null; this>
<java.util.Arrays; binarySearch[float[], float]; int; cern.jet.stat.quantile.EquiDepthHistogram; phi[float]; double; null; java.util.Arrays>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.stat.quantile.EquiDepthHistogram; test[float]; void; null; System.out>
<cern.jet.stat.quantile.EquiDepthHistogram; phi[float]; double; cern.jet.stat.quantile.EquiDepthHistogram; test[float]; void; null; histo>
<cern.jet.math.Arithmetic; factorial[int]; double; cern.jet.math.Arithmetic; binomial[long, long]; double; null; this>
<cern.jet.math.Arithmetic; factorial[int]; double; cern.jet.math.Arithmetic; binomial[long, long]; double; null; this>
<cern.jet.math.Arithmetic; factorial[int]; double; cern.jet.math.Arithmetic; binomial[long, long]; double; null; this>
<java.lang.Math; round[double]; long; cern.jet.math.Arithmetic; ceil[double]; long; null; Math>
<java.lang.Math; ceil[double]; double; cern.jet.math.Arithmetic; ceil[double]; long; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.math.Arithmetic; fac1[int]; long; null; Math>
<java.lang.Math; abs[int]; int; cern.jet.math.Arithmetic; fac2[int]; double; null; Math>
<java.lang.Math; round[double]; long; cern.jet.math.Arithmetic; floor[double]; long; null; Math>
<java.lang.Math; floor[double]; double; cern.jet.math.Arithmetic; floor[double]; long; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Arithmetic; log[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Arithmetic; log[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Arithmetic; log10[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Arithmetic; log2[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Arithmetic; logFactorial[int]; double; null; Math>
<java.lang.Math; round[double]; long; cern.jet.math.Arithmetic; xlongBinomial[long, long]; long; null; Math>
<cern.jet.math.Arithmetic; binomial[long, long]; double; cern.jet.math.Arithmetic; xlongBinomial[long, long]; long; null; this>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; i0[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i0[double]; double; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; i0[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i0[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; i0[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i0e[double]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i0e[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; i0e[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; i1[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i1[double]; double; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; i1[double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; i1[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i1[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; i1[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; i1e[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i1e[double]; double; null; Arithmetic>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; i1e[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; i1e[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; j0[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; j0[double]; double; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Bessel; j0[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Bessel; j0[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; j1[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; j1[double]; double; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Bessel; j1[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Bessel; j1[double]; double; null; Math>
<cern.jet.math.Bessel; j0[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; this>
<cern.jet.math.Bessel; j1[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; this>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; Math>
<cern.jet.math.Bessel; j0[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; this>
<cern.jet.math.Bessel; j1[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; this>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; jn[int, double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k0[double]; double; null; Arithmetic>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; k0[double]; double; null; Math>
<cern.jet.math.Bessel; i0[double]; double; cern.jet.math.Bessel; k0[double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; k0[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k0[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; k0[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k0e[double]; double; null; Arithmetic>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; k0e[double]; double; null; Math>
<cern.jet.math.Bessel; i0[double]; double; cern.jet.math.Bessel; k0e[double]; double; null; this>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; k0e[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k0e[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; k0e[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; k1[double]; double; null; Math>
<cern.jet.math.Bessel; i1[double]; double; cern.jet.math.Bessel; k1[double]; double; null; this>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k1[double]; double; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; k1[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k1[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; k1[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; k1e[double]; double; null; Math>
<cern.jet.math.Bessel; i1[double]; double; cern.jet.math.Bessel; k1e[double]; double; null; this>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k1e[double]; double; null; Arithmetic>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; k1e[double]; double; null; Math>
<cern.jet.math.Arithmetic; chbevl[double, double[], int]; double; cern.jet.math.Bessel; k1e[double]; double; null; Arithmetic>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; k1e[double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; abs[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; exp[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; kn[int, double]; double; null; Math>
<cern.jet.math.Bessel; j0[double]; double; cern.jet.math.Bessel; y0[double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; y0[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; y0[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Bessel; y0[double]; double; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Bessel; y0[double]; double; null; Math>
<cern.jet.math.Bessel; j1[double]; double; cern.jet.math.Bessel; y1[double]; double; null; this>
<java.lang.Math; log[double]; double; cern.jet.math.Bessel; y1[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; cern.jet.math.Bessel; y1[double]; double; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Bessel; y1[double]; double; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Bessel; y1[double]; double; null; Math>
<cern.jet.math.Bessel; y0[double]; double; cern.jet.math.Bessel; yn[int, double]; double; null; this>
<cern.jet.math.Bessel; y1[double]; double; cern.jet.math.Bessel; yn[int, double]; double; null; this>
<cern.jet.math.Bessel; y1[double]; double; cern.jet.math.Bessel; yn[int, double]; double; null; this>
<cern.jet.math.Bessel; y0[double]; double; cern.jet.math.Bessel; yn[int, double]; double; null; this>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; acos[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; asin[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; atan[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; ceil[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; cos[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; exp[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; floor[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; rint[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; sin[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; tan[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; atan2[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; IEEEremainder[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; max[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; min[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Exponential; Exponential[]; void; null; this>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Exponential; Exponential[]; void; null; this>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; java.lang.Object; apply[double]; double; null; function>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; java.lang.Object; apply[double]; double; null; function>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; java.lang.Object; apply[double, double]; double; null; f>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[double, double]; double; null; g>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[double, double]; double; null; h>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[double, double]; double; null; g>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; java.lang.Object; apply[double, double]; double; null; h>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[double]; double; null; g>
<cern.colt.function.DoubleFunction; apply[double]; double; java.lang.Object; apply[double]; double; null; h>
<java.lang.Math; sin[double]; double; cern.jet.math.Functions; demo1[]; void; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.math.Functions; demo1[]; void; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Functions; demo1[]; void; null; Math>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo1[]; void; null; System.out>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Functions; demo1[]; void; null; F>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; demo1[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo1[]; void; null; System.out>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo1[]; void; null; f>
<java.lang.Math; sin[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo1[]; void; null; System.out>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo1[]; void; null; g>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; demo1[]; void; null; F>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; demo1[]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo1[]; void; null; System.out>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.jet.math.Functions; demo1[]; void; null; m>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo1[]; void; null; System.out>
<cern.colt.function.DoubleFunction; apply[double]; double; cern.jet.math.Functions; demo1[]; void; null; n>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<java.lang.Math; abs[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleDoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Functions; demo2[int]; void; null; F>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Functions; demo2[int]; void; null; F>
<cern.jet.math.Functions; chain[cern.colt.function.DoubleFunction, cern.colt.function.DoubleFunction]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; demo2[int]; void; null; F>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; f>
<java.lang.Math; abs[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; sin[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; java.lang.Object; apply[double, double]; double; null; Math>
<java.io.PrintStream; println[double]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; g>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; new cern.colt.Timer()>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; emptyLoop.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; display[]; emptyLoop>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; new cern.colt.Timer()>
<java.lang.Math; abs[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; sin[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; pow[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<java.lang.Math; cos[double]; double; cern.jet.math.Functions; demo2[int]; void; null; Math>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.jet.math.Functions; demo2[int]; void; null; timer.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; seconds[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; start[]; timer>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; f>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.jet.math.Functions; demo2[int]; void; null; timer.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; seconds[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; start[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; timer.reset()>
<cern.colt.Timer; reset[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; start[]; timer>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; cern.jet.math.Functions; demo2[int]; void; null; g>
<cern.colt.Timer; display[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; null; timer.stop()>
<cern.colt.Timer; stop[]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; display[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.colt.Timer; seconds[]; float; cern.jet.math.Functions; demo2[int]; void; null; timer.minus(emptyLoop)>
<cern.colt.Timer; minus[cern.colt.Timer]; cern.colt.Timer; cern.jet.math.Functions; demo2[int]; void; seconds[]; timer>
<java.io.PrintStream; println[java.lang.String]; void; cern.jet.math.Functions; demo2[int]; void; null; System.out>
<cern.jet.math.Functions; mult[double]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; div[double]; cern.colt.function.DoubleFunction; null; this>
<java.lang.Math; IEEEremainder[double, double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; log[double]; double; cern.jet.math.Functions; lg[double]; cern.colt.function.DoubleFunction; null; Math>
<java.lang.Math; log[double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Integer; parseInt[java.lang.String]; int; cern.jet.math.Functions; main[java.lang.String[]]; void; null; Integer>
<cern.jet.math.Functions; demo2[int]; void; cern.jet.math.Functions; main[java.lang.String[]]; void; null; this>
<java.lang.Math; max[double, double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; min[double, double]; double; java.lang.Object; apply[double]; double; null; Math>
<cern.jet.math.Functions; plus[double]; cern.colt.function.DoubleFunction; cern.jet.math.Functions; minus[double]; cern.colt.function.DoubleFunction; null; this>
<cern.jet.math.Functions; plusMult[double]; cern.colt.function.DoubleDoubleFunction; cern.jet.math.Functions; minusMult[double]; cern.colt.function.DoubleDoubleFunction; null; this>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[double]; double; null; Math>
<java.lang.Math; rint[double]; double; java.lang.Object; apply[double]; double; null; Math>
<cern.colt.function.DoubleDoubleFunction; apply[double, double]; double; java.lang.Object; apply[double, double]; double; null; function>
<cern.jet.math.Mult; mult[double]; cern.jet.math.Mult; cern.jet.math.Mult; div[double]; cern.jet.math.Mult; null; this>
<cern.jet.math.Arithmetic; factorial[int]; double; java.lang.Object; apply[int]; int; null; Arithmetic>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[int, int]; int; null; Math>
<cern.colt.function.IntIntFunction; apply[int, int]; int; java.lang.Object; apply[int]; int; null; function>
<cern.colt.function.IntIntFunction; apply[int, int]; int; java.lang.Object; apply[int]; int; null; function>
<cern.colt.function.IntFunction; apply[int]; int; java.lang.Object; apply[int]; int; null; g>
<cern.colt.function.IntFunction; apply[int]; int; java.lang.Object; apply[int]; int; null; h>
<cern.colt.function.IntFunction; apply[int]; int; java.lang.Object; apply[int, int]; int; null; g>
<cern.colt.function.IntIntFunction; apply[int, int]; int; java.lang.Object; apply[int, int]; int; null; h>
<cern.colt.function.IntIntFunction; apply[int, int]; int; java.lang.Object; apply[int, int]; int; null; f>
<cern.colt.function.IntFunction; apply[int]; int; java.lang.Object; apply[int, int]; int; null; g>
<cern.colt.function.IntFunction; apply[int]; int; java.lang.Object; apply[int, int]; int; null; h>
<java.lang.Math; pow[double, double]; double; java.lang.Object; apply[int]; int; null; Math>
<cern.colt.function.IntIntFunction; apply[int, int]; int; java.lang.Object; apply[int, int]; int; null; function>


Calls That Belongs To JCF (29)

<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractBooleanList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractBooleanList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractByteList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractByteList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractShortList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractShortList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractIntList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractIntList; toList[]; java.util.ArrayList; null; list>
<java.util.AbstractCollection; toString[]; java.lang.String; cern.colt.list.AbstractCollection; toString[]; java.lang.String; null; toList()>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractFloatList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractFloatList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.ObjectArrayList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.ObjectArrayList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractCharList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractCharList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractDoubleList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractDoubleList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; iterator[]; java.util.Iterator; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.Collection; size[]; int; cern.colt.list.AbstractLongList; replaceFromWith[int, java.util.Collection]; void; null; other>
<java.util.ArrayList; add[java.lang.Object]; boolean; cern.colt.list.AbstractLongList; toList[]; java.util.ArrayList; null; list>
<java.util.Collection; size[]; int; cern.colt.list.AbstractList; beforeInsertAllOf[int, java.util.Collection]; void; null; collection>


Calls That Are Candidatas (0)



Calls That Broken Confinement (0)

