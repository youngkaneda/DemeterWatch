All Method Calls (14894)

<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; setName[java.lang.String]; void; null; this>
<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; addProperty[java.lang.String, java.lang.String]; void; null; this>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleReference; addProperty[java.lang.String, java.lang.String]; void; null; this.properties>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; null; properties>
<net.sourceforge.pmd.RuleReference; addProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; null; this>
<java.util.Map$Entry; getKey[]; java.lang.Object; net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; null; entry>
<java.util.Map$Entry; getValue[]; java.lang.Object; net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; null; entry>
<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; setMessage[java.lang.String]; void; null; this>
<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; setDescription[java.lang.String]; void; null; this>
<net.sourceforge.pmd.RuleReference; contains[java.util.Collection<java.lang.String>, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; null; this>
<java.util.List; clear[]; void; net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; null; this.examples>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; null; this.examples>
<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; setExternalInfoUrl[java.lang.String]; void; null; this>
<net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; null; StringUtil>
<net.sourceforge.pmd.RuleReference; isSame[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; contains[java.util.Collection<java.lang.String>, java.lang.String]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_5; createParser[java.io.InputStream]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_5; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.ExternalRuleID; ExternalRuleID[java.lang.String]; void; null; id>
<java.lang.String; length[]; int; net.sourceforge.pmd.ExternalRuleID; ExternalRuleID[java.lang.String]; void; null; id>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.ExternalRuleID; ExternalRuleID[java.lang.String]; void; null; id>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.ExternalRuleID; ExternalRuleID[java.lang.String]; void; null; id>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; ((JavaNode)children[i])>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; getArgumentCount[]; int; null; ((ASTArguments)this.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; getArgumentCount[]; int; getArgumentCount[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; isThis[]; boolean; null; thisOrSuper>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; isSuper[]; boolean; null; thisOrSuper>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTThrowStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.ast.ASTThrowStatement; getFirstClassOrInterfaceTypeImage[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTThrowStatement; getFirstClassOrInterfaceTypeImage[]; java.lang.String; null; t>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTEnumConstant, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTEnumConstant; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTEnumConstant; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTEnumConstant; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTEnumConstant; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTEnumConstant; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; a>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isEnumChild[]; boolean; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isEnumChild[]; boolean; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTReferenceType, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTReferenceType; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMemberValuePairs, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMemberValuePairs; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTReferenceType, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; getLabel[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; getLabel[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTPrimaryPrefix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPrimaryPrefix; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; javaParserVistor>
<java.util.List; get[int]; net.sourceforge.pmd.ast.CompilationUnit; net.sourceforge.pmd.ast.JavaRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.ast.JavaRuleChainVisitor; visit[net.sourceforge.pmd.Rule, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.RuleContext]; void; null; ((XPathRule)rule)>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaRuleChainVisitor; visit[net.sourceforge.pmd.Rule, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.RuleContext]; void; null; ((SimpleJavaNode)node)>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; null; nodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; rootNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; add[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.ast.JJTJavaParserState; pushNode[net.sourceforge.pmd.ast.Node]; void; null; nodes>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; marks>
<java.util.List; remove[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; get[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; peekNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; peekNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; null; this>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<java.util.List; add[java.lang.Integer]; boolean; net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<net.sourceforge.pmd.ast.Node; jjtOpen[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; null; n>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; marks>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; this>
<net.sourceforge.pmd.ast.Node; jjtSetParent[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; c>
<net.sourceforge.pmd.ast.Node; jjtAddChild[net.sourceforge.pmd.ast.Node, int]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; n>
<net.sourceforge.pmd.ast.Node; jjtClose[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; n>
<net.sourceforge.pmd.ast.JJTJavaParserState; pushNode[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; this>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; this>
<net.sourceforge.pmd.ast.Node; jjtSetParent[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; c>
<net.sourceforge.pmd.ast.Node; jjtAddChild[net.sourceforge.pmd.ast.Node, int]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; n>
<net.sourceforge.pmd.ast.Node; jjtClose[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; n>
<net.sourceforge.pmd.ast.JJTJavaParserState; pushNode[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; this>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPublic[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPublic[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPublic[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isProtected[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setProtected[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setProtected[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setProtected[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPrivate[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPrivate[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setPrivate[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setAbstract[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setAbstract[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setAbstract[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStatic[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStatic[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStatic[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setFinal[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setFinal[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setFinal[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setSynchronized[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setSynchronized[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setSynchronized[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setNative[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setNative[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setNative[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isTransient[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setTransient[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setTransient[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setTransient[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isVolatile[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setVolatile[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setVolatile[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setVolatile[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isModifier[int]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStrictfp[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStrictfp[boolean]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStrictfp[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifier[boolean, int]; void; net.sourceforge.pmd.ast.SimpleJavaAccessNode; setStrictfp[boolean]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPackagePrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPackagePrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isProtected[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPackagePrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPackagePrivate[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isProtected[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStrictfp[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isTransient[]; boolean; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; this>
<java.util.Arrays; asList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; Arrays>
<java.util.Arrays; asList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; null; Arrays>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; rule>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; n>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; annName.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; equals[java.lang.Object]; annName>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; element>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; element>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; element>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; element>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; serialRules>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; rule>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; element>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; unusedRules>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; rule>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAnnotation, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAnnotation; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTVariableDeclarator; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAnnotation, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.ASTCompilationUnit; getPackageDeclaration[]; net.sourceforge.pmd.ast.ASTPackageDeclaration; net.sourceforge.pmd.ast.ASTCompilationUnit; declarationsAreInDefaultPackage[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPackageDeclaration>]; net.sourceforge.pmd.ast.ASTPackageDeclaration; net.sourceforge.pmd.ast.ASTCompilationUnit; getPackageDeclaration[]; net.sourceforge.pmd.ast.ASTPackageDeclaration; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTConditionalAndExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTConditionalAndExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; expected.append(tokenImage[expectedTokenSequences[i][j]])>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; append[char]; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; expected.append(eol)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; append[java.lang.String]; expected>
<net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; null; System>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAssertStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAssertStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTryStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAssertStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTTryStatement; hasFinally[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTTryStatement; hasFinally[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTTryStatement; getFinally[]; net.sourceforge.pmd.ast.ASTFinallyStatement; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTTryStatement; getFinally[]; net.sourceforge.pmd.ast.ASTFinallyStatement; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTTryStatement; getFinally[]; net.sourceforge.pmd.ast.ASTFinallyStatement; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTFormalParameter, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTFormalParameter; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFormalParameter; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFormalParameter; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.ast.ASTFormalParameter; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; a>
<net.sourceforge.pmd.ast.ASTFormalParameter; checkType[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; checkDecl[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; isArray[]; boolean; net.sourceforge.pmd.ast.ASTFormalParameter; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; checkType[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; checkDecl[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; checkType[]; int; null; getTypeNode()>
<net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.ast.ASTFormalParameter; checkType[]; int; getArrayDepth[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFormalParameter; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTFormalParameter; checkDecl[]; int; null; getDecl()>
<net.sourceforge.pmd.ast.ASTFormalParameter; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.ast.ASTFormalParameter; checkDecl[]; int; getArrayDepth[]; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTFormalParameter; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTFormalParameter; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTFormalParameter; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; null; ((ASTName)jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; getImage[]; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; null; importName>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; null; importName>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; null; importName>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isStatic[]; boolean; net.sourceforge.pmd.ast.ASTImportDeclaration; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTImportDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTImportDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTImportDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTImportDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPreIncrementExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPreIncrementExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeBound, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeBound; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPreIncrementExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTLiteral; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeBound, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; null; image>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; null; image>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; null; SINGLE_CHAR_ESCAPE_PATTERN.matcher(image)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; matches[]; SINGLE_CHAR_ESCAPE_PATTERN>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; null; Pattern>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTArgumentList, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTArgumentList; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<java.lang.String; valueOf[char]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; String>
<net.sourceforge.pmd.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; net.sourceforge.pmd.ast.TokenMgrError; TokenMgrError[boolean, int, int, int, java.lang.String, char, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMultiplicativeExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMultiplicativeExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTMultiplicativeExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTArrayDimsAndInits, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTArrayDimsAndInits; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMemberValuePair, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMemberValuePair; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTArrayDimsAndInits, java.lang.Object]; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTMemberValuePair; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTMemberValuePair; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTMemberValuePair; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTCatchStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTNormalAnnotation, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTNormalAnnotation; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTNormalAnnotation, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPackageDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPackageDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPackageDeclaration; getPackageNameImage[]; java.lang.String; null; ((ASTName)jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTPackageDeclaration; getPackageNameImage[]; java.lang.String; getImage[]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTEqualityExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; visitor>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; null; getScope().getVariableDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; get[java.lang.Object]; getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; getVariableDeclarations[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; isExceptionBlockParameter[]; boolean; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; isExceptionBlockParameter[]; boolean; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; findTypeNameNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; findTypeNameNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; ((ASTFormalParameter)jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; getTypeNode[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTType>]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; findTypeNameNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.SimpleNode; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; findTypeNameNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.SimpleNode; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; findTypeNameNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.SimpleNode; null; typeNode>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTEnumBody, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTEnumBody; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeParameters, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeParameters; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTEnumBody, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTStatementExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeParameters, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; ((SimpleNode)parent)>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; null; ((SimpleNode)parent)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; null; image>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; null; ((SimpleNode)children[0])>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; null; result>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<T>]; T; null; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<T>]; T; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<T>]; T; null; parentNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<T>]; java.util.List<T>; null; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<T>]; java.util.List<T>; null; parentNode>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<T>]; java.util.List<T>; null; parents>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<T>]; java.util.List<T>; null; parentNode>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<T>, java.util.List<T>]; void; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<T>]; java.util.List<T>; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<T>, java.util.List<T>]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<T>, java.util.List<T>, boolean]; void; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; equals[java.lang.Object]; node>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; results>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; ((ASTClassOrInterfaceDeclaration)node)>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; ((ASTClassOrInterfaceBodyDeclaration)node)>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; child>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; equals[java.lang.Object]; child>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; results>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.SimpleNode; jjtAddChild[net.sourceforge.pmd.ast.Node, int]; void; null; System>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; null; this>
<javax.xml.parsers.DocumentBuilderFactory; newInstance[]; javax.xml.parsers.DocumentBuilderFactory; net.sourceforge.pmd.ast.SimpleNode; asXml[]; org.w3c.dom.Document; null; DocumentBuilderFactory>
<javax.xml.parsers.DocumentBuilderFactory; newDocumentBuilder[]; javax.xml.parsers.DocumentBuilder; net.sourceforge.pmd.ast.SimpleNode; asXml[]; org.w3c.dom.Document; null; dbf>
<javax.xml.parsers.DocumentBuilder; newDocument[]; org.w3c.dom.Document; net.sourceforge.pmd.ast.SimpleNode; asXml[]; org.w3c.dom.Document; null; db>
<net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; net.sourceforge.pmd.ast.SimpleNode; asXml[]; org.w3c.dom.Document; null; this>
<org.w3c.dom.Node; getOwnerDocument[]; org.w3c.dom.Document; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; parentNode>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getElementName[java.lang.Object]; java.lang.String; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; docNav>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; ownerDocument>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; parentNode>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getAttributeAxisIterator[java.lang.Object]; java.util.Iterator<net.sourceforge.pmd.jaxen.Attribute>; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; docNav>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; iter>
<java.util.Iterator; next[]; net.sourceforge.pmd.jaxen.Attribute; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; iter>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; element>
<net.sourceforge.pmd.jaxen.Attribute; getName[]; java.lang.String; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; attr>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; attr>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getChildAxisIterator[java.lang.Object]; java.util.Iterator<net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; docNav>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; iter>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; iter>
<net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; net.sourceforge.pmd.ast.SimpleNode; appendElement[org.w3c.dom.Node]; void; null; child>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.SimpleNode; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.SimpleNode; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.SimpleNode; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dump[java.lang.String]; void; net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>]; T; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; equals[java.lang.Object]; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.ast.SimpleNode; containsChildOfType[java.lang.Class<T>]; boolean; null; findChildrenOfType(type)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<T>]; java.util.List<T>; net.sourceforge.pmd.ast.SimpleNode; containsChildOfType[java.lang.Class<T>]; boolean; isEmpty[]; this>
<not found; selectNodes[]; not found; net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; null; new BaseXPath(xpathString,new DocumentNavigator())>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTFinallyStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTShiftExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTShiftExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTClassOrInterfaceBody; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTShiftExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTConditionalExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTTypeDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTTypeDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTTypeDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.ast.ASTTypeDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; a>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTEmptyStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTEmptyStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTEmptyStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMemberValue, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMemberValue; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTBlock; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTMemberValue, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTName; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTType, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTType; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimitiveType>]; net.sourceforge.pmd.ast.ASTPrimitiveType; net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; null; prim>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; null; getFirstChildOfType(ASTClassOrInterfaceType.class)>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; getImage[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.Dimensionable; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; null; ((Dimensionable)jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; getArrayDepth[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTType; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeArgument, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeArgument; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAndExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAndExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeArgument, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTSynchronizedStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTSynchronizedStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAndExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPrimaryExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTSynchronizedStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAllocationExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.ast.ASTResultType; returnsArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTType; isArray[]; boolean; net.sourceforge.pmd.ast.ASTResultType; returnsArray[]; boolean; null; ((ASTType)jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTResultType; returnsArray[]; boolean; isArray[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTResultType; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTDoStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTBooleanLiteral, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTBooleanLiteral; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTBooleanLiteral; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTBooleanLiteral; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTBooleanLiteral; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTUnaryExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTForUpdate; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; null; a>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkType[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkDecl[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkType[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkDecl[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; null; this>
<net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkType[]; int; null; getTypeNode()>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkType[]; int; getArrayDepth[]; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; jjtGetChild(jjtGetNumChildren() - 1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; jjtGetChild[int]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkDecl[]; int; null; getDecl()>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getDecl[]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; checkDecl[]; int; getArrayDepth[]; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; isArray[]; boolean; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getVariableName[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getVariableName[]; java.lang.String; null; decl>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTConditionalOrExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTConditionalOrExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTFieldDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTConditionalOrExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isPublic[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isFinal[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isPrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isPackagePrivate[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isProtected[]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; null; jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; jjtGetParent[]; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; null; n>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; isArray[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isArray[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; getArrayDepth[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; null; this>
<net.sourceforge.pmd.ast.ASTType; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; null; ((ASTType)jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkType[]; int; getArrayDepth[]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; null; ((ASTVariableDeclaratorId)(jjtGetChild(1).jjtGetChild(0)))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; getArrayDepth[]; jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTFieldDeclaration; checkDecl[]; int; jjtGetChild[int]; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTFieldDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isArray[]; boolean; net.sourceforge.pmd.ast.ASTFieldDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; getArrayDepth[]; int; net.sourceforge.pmd.ast.ASTFieldDeclaration; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTFieldDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTFieldDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; null; decl>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTArrayInitializer, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTArrayInitializer; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAnnotationMethodDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAnnotationMethodDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTArrayInitializer, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAnnotationMethodDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTIfStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration, java.lang.Object]; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTIfStatement; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTIfStatement; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTIfStatement; dump[java.lang.String]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.JavaParser; checkForBadAssertUsage[java.lang.String, java.lang.String]; void; null; in>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.JavaParser; checkForBadEnumUsage[java.lang.String, java.lang.String]; void; null; in>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; null; getToken(1).image>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; equals[java.lang.Object]; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; null; getToken(2).image>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; token_source>
<net.sourceforge.pmd.ast.JavaParserTokenManager; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; null; token_source>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_1[int]; boolean; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.ast.ASTCompilationUnit; setComments[java.util.List<net.sourceforge.pmd.ast.Comment>]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PackageDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadStaticImportUsage[]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; setStatic[]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; setImportOnDemand[]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ImportDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_2[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; setInterface[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ExtendsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; t.image>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; ImplementsList[]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_3[int]; boolean; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; EnumBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; EnumConstant[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadGenericsUsage[]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeBound[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_8[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_4[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_5[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_6[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_7[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBodyDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; bumpArrayDepth[]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAssertUsage[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadEnumUsage[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_9[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; NameList[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAssertUsage[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadEnumUsage[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MethodDeclarator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setFinal[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadVariableArgumentsUsage[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameter; setVarargs[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclaratorId[]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; TypeParameters[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FormalParameters[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; NameList[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_10[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_11[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; isPrecededByComment[net.sourceforge.pmd.ast.Token]; boolean; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; setContainsComment[]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ConstructorDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_13[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; setIsThis[]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_12[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ExplicitConstructorInvocation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; this>
<net.sourceforge.pmd.ast.ASTInitializer; setStatic[]; void; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Initializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_14[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Type[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.ASTReferenceType; bumpArrayDepth[]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_2_15[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_16[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.ASTReferenceType; bumpArrayDepth[]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; s>
<net.sourceforge.pmd.ast.JavaParser; jj_2_17[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_18[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; s.append('.')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; append[java.lang.String]; s>
<net.sourceforge.pmd.ast.JavaParser; jj_2_19[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtn000>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; s>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadGenericsUsage[]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TypeArgument[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ReferenceType[]; void; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; WildcardBounds[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; testingOnly__setBeginLine[int]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.SimpleNode; testingOnly__setBeginColumn[int]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtn000>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; s>
<net.sourceforge.pmd.ast.JavaParser; jj_2_20[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; s.append('.')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ast.JavaParser; Name[]; void; append[java.lang.String]; s>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtn000>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; s>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Name[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; NameList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Expression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; setCompound[]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.ASTConditionalExpression; setTernary[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; ConditionalOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; ConditionalAndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; InclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; ExclusiveOrExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; AndExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; EqualityExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; InstanceOfExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; RelationalExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_21[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_2_22[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_23[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; ShiftExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; AdditiveExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; MultiplicativeExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_24[int]; boolean; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_2_25[int]; boolean; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_26[int]; boolean; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Literal[]; void; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastLookahead[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_27[int]; boolean; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; UnaryExpressionNotPlusMinus[]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; nodeArity[]; int; net.sourceforge.pmd.ast.JavaParser; CastExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_28[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Literal[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; setUsesThisModifier[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; setUsesSuperModifier[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_29[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ResultType[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimaryPrefix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_30[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_31[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_32[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_33[int]; boolean; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberSelector[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; setIsArrayDereference[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; setIsArguments[]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; PrimarySuffix[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTLiteral; setIntLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTLiteral; setFloatLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; checkForBadHexFloatingPointLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTLiteral; setFloatLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTLiteral; setCharLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.ASTLiteral; setStringLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; NullLiteral[]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Literal[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; jjtree>
<net.sourceforge.pmd.ast.ASTBooleanLiteral; setTrue[]; void; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; BooleanLiteral[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; NullLiteral[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; NullLiteral[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; NullLiteral[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ArgumentList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_34[int]; boolean; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimitiveType[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceType[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TypeArguments[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Arguments[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceBody[]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AllocationExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_37[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_35[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_36[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ArrayInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ArrayDimsAndInits[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_38[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EmptyStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Statement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; LabeledStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_39[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; isPrecededByComment[net.sourceforge.pmd.ast.Token]; boolean; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; this>
<net.sourceforge.pmd.ast.ASTBlock; setContainsComment[]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Block[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_40[int]; boolean; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_41[int]; boolean; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_42[int]; boolean; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setFinal[]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; VariableDeclarator[]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; EmptyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; EmptyStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; EmptyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; PreIncrementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PreDecrementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_43[int]; boolean; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PostfixExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; PrimaryExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AssignmentOperator[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_44[int]; boolean; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; BlockStatement[]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; SwitchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.ASTSwitchLabel; setDefault[]; void; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; SwitchLabel[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.ASTIfStatement; setHasElse[]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; IfStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; WhileStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; DoStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_45[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadJDK15ForLoopSyntaxArgumentsUsage[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Statement[]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ForStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_46[int]; boolean; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; LocalVariableDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ForInit[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; StatementExpression[]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; StatementExpressionList[]; void; net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ForUpdate[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; BreakStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ContinueStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ReturnStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; ThrowStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; SynchronizedStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; TryStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FormalParameter[]; void; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; CatchStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Block[]; void; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; FinallyStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Expression[]; void; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AssertStatement[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; RUNSIGNEDSHIFT[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; RSIGNEDSHIFT[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_2_47[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_48[int]; boolean; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAnnotationUsage[]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; NormalAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAnnotationUsage[]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MarkerAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; Name[]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAnnotationUsage[]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; SingleMemberAnnotation[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePairs[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberValuePair[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Annotation[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ConditionalExpression[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_49[int]; boolean; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; MemberValueArrayInitializer[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; checkForBadAnnotationUsage[]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeBody[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; Modifiers[]; int; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_50[int]; boolean; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; ClassOrInterfaceDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_2_51[int]; boolean; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; EnumDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; AnnotationTypeDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; FieldDeclaration[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationTypeMemberDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; setModifiers[int]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JavaParser; Type[]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtn000>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; AnnotationMethodDeclaration[int]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; MemberValue[]; void; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; this>
<net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; net.sourceforge.pmd.ast.JavaParser; DefaultValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParser; jj_3_1[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_1[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_1[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_2[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_2[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_3[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_3[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_4[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_4[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_4[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_5[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_5[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_5[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_6[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_6[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_6[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_7[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_7[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_8[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_8[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_8[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_9[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_9[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_9[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_10[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_10[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_10[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_11[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_11[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_11[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_12[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_12[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_13[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_13[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_13[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_14[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_14[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_14[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_15[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_15[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_16[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_16[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_16[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_17[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_17[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_17[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_18[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_18[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_19[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_19[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_19[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_20[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_20[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_20[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_21[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_21[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_22[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_22[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_22[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_23[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_23[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_23[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_24[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_24[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_24[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_25[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_25[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_25[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_26[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_26[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_26[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_27[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_27[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_27[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_28[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_28[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_28[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_29[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_29[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_29[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_30[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_30[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_30[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_31[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_31[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_31[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_32[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_32[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_32[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_33[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_33[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_33[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_34[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_34[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_35[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_35[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_36[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_36[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_36[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_37[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_37[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_38[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_38[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_38[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_39[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_39[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_39[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_40[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_40[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_40[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_41[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_41[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_41[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_42[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_42[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_42[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_43[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_43[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_43[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_44[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_44[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_44[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_45[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_45[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_46[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_46[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_46[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_47[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_47[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_48[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_48[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_48[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_49[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_49[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_49[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_50[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_50[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_50[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_51[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_2_51[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_save[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_2_51[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_223[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_262[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_223[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_223[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_206[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_259[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_206[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_206[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_183[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_241[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_183[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_183[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_139[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_231[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_139[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_253[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_252[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_251[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_250[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_249[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_248[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_247[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_246[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_245[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_244[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_243[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_242[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_243[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_244[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_245[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_246[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_247[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_248[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_249[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_250[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_251[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_252[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_253[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_242[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_222[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_222[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_139[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_222[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_332[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_332[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_317[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_332[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_317[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_19[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_20[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_20[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_257[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_121[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_257[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_20[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_137[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_85[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_137[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_85[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_133[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_132[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_131[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_130[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_129[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_128[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_127[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_126[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_126[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_127[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_128[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_129[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_130[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_131[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_132[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_133[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_276[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_276[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_270[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_266[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_275[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_270[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_276[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_270[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_275[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_275[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_16[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_16[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_181[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_266[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_181[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_180[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_121[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_181[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_121[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_180[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_121[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_257[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_19[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_17[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_17[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_120[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_16[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_120[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_119[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_119[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_119[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_119[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_120[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_297[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_317[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_297[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_109[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_77[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_14[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_14[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_109[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_355[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_378[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_370[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_288[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_13[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_13[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_13[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_288[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_279[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_279[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_73[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_10[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_112[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_112[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_112[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_112[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_73[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_113[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_73[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_331[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_331[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_11[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_73[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_298[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_295[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_295[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_296[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_297[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_298[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_11[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_378[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_378[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_320[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_320[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_303[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_317[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_303[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_344[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_354[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_354[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_343[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_355[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_343[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_343[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_344[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_318[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_370[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_316[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_331[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_316[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_9[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_72[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_9[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_296[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_316[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_296[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_296[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_358[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_357[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_51[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_356[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_98[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_50[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_302[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_296[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_302[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_320[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_302[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_94[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_50[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_356[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_51[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_357[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_358[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_345[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_334[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_334[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_334[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_321[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_304[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_301[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_49[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_49[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_301[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_85[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_302[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_303[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_304[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_72[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_264[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_9[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_264[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_305[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_321[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_305[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_305[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_319[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_72[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_319[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_264[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_300[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_300[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_305[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_71[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_71[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_111[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_110[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_110[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_72[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_111[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_72[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_258[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_49[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_258[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_258[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_198[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_258[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_198[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_198[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_239[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_238[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_239[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_342[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_333[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_333[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_139[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_158[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_318[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_333[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_318[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_166[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_165[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_166[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_212[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_202[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_198[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_157[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_156[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_157[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_158[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_156[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_228[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_228[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_318[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_319[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_69[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_71[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_238[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_238[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_238[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_69[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_6[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_6[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_6[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_300[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_65[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_341[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_101[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_238[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_227[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_239[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_227[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_227[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_211[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_292[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_283[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_96[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_96[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_8[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_8[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_291[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_282[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_290[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_281[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_289[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_280[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_5[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_97[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_4[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_94[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_4[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_5[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_280[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_281[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_282[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_283[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_273[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_269[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_274[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_269[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_269[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_279[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_273[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_201[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_201[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_269[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_265[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_65[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_66[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_48[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_48[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_48[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_211[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_96[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_265[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_201[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_161[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_212[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_212[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_228[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_212[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_200[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_160[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_162[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_162[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_159[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_160[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_161[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_199[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_159[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_162[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_100[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_100[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_165[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_202[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_165[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_352[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_352[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_165[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_166[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_269[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_329[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_122[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_66[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_341[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_66[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_342[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_66[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_315[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_329[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_315[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_328[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_328[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_314[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_66[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_314[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_314[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_123[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_314[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_315[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_164[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_106[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_352[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_377[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_377[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_106[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_107[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_68[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_327[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_327[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_330[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_164[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_164[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_327[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_164[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_377[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_369[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_376[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_368[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_326[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_326[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_163[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_163[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_326[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_163[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_197[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_197[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_368[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_197[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_369[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_197[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_164[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_104[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_163[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_103[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_108[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_102[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_367[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_366[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_100[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_101[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_102[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_103[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_104[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_195[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_195[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_195[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_389[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_389[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_194[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_367[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_194[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_194[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_365[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_193[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_366[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_193[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_193[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_192[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_365[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_192[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_192[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_388[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_383[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_46[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_46[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_46[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_388[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_389[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_388[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_64[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_63[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_62[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_362[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_362[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_61[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_60[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_388[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_387[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_59[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_58[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_57[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_386[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_386[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_382[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_387[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_382[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_56[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_94[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_55[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_54[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_53[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_383[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_375[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_374[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_53[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_54[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_55[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_56[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_57[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_58[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_59[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_60[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_61[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_62[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_63[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_64[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_382[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_373[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_94[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_373[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_374[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_375[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_94[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_363[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_364[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_52[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_52[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_1[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_1[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_44[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_170[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_362[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_381[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_381[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_380[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_380[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_380[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_380[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_372[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_381[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_372[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_372[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_361[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_44[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_361[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_214[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_43[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_43[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_43[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_361[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_232[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_371[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_371[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_93[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_93[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_210[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_371[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_210[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_226[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_209[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_225[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_208[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_207[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_208[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_209[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_210[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_224[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_207[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_185[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_92[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_353[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_353[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_99[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_140[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_92[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_42[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_93[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_42[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_42[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_213[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_203[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_214[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_203[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_213[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_203[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_299[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_353[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_90[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_140[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_90[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_170[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_116[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_67[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_116[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_90[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_40[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_40[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_40[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_41[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_169[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_115[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_115[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_114[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_114[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_115[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_41[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_116[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_74[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_39[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_39[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_36[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_36[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_89[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_89[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_89[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_197[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_155[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_196[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_154[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_195[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_153[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_194[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_152[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_193[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_151[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_192[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_150[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_191[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_149[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_190[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_148[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_189[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_147[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_188[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_146[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_187[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_145[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_186[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_144[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_144[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_185[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_143[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_184[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_142[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_235[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_89[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_38[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_168[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_141[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; isNextTokenAnAssert[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_141[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_38[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_142[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_143[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_144[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_145[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_146[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_147[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_148[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_149[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_150[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_151[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_152[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_153[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_154[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_155[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_91[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_105[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_256[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_261[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_261[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_261[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_255[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_261[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_255[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_167[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_255[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_36[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_234[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_255[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_234[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_237[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_256[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_237[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_205[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_205[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_234[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_236[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_179[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_235[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_236[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_237[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_86[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_138[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_86[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_234[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_178[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_118[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_178[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_205[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_178[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_118[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_182[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_230[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_240[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_229[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_229[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_240[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_230[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_221[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_385[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_229[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_220[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_219[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_218[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_217[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_216[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_215[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_216[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_217[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_218[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_219[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_220[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_221[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_215[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_76[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_136[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_135[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_135[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_85[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_29[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_29[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_29[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_134[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_134[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_134[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_87[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_33[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_348[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_32[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_86[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_32[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_30[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_31[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_32[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_33[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_134[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_135[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_136[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_31[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_31[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_30[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_30[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_95[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_177[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_85[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_176[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_176[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_176[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_84[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_28[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_86[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_175[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_174[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_174[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_174[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_173[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_173[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_173[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_172[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_171[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_172[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_173[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_174[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_175[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_176[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_177[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_204[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_171[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_384[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_384[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_379[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_385[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_379[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_87[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_78[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_87[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_87[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_27[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_27[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_350[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_117[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_28[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_337[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_347[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_360[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_360[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_360[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_325[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_360[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_359[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_351[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_360[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_351[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_359[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_359[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_359[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_359[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_26[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_26[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_26[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_226[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_379[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_226[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_182[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_82[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_24[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_324[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_124[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_124[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_124[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_124[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_25[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_82[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_124[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_82[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_125[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_82[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_25[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_83[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_25[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_226[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_340[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_349[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_351[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_339[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_349[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_338[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_350[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_338[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_338[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_338[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_325[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_339[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_325[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_340[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_325[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_336[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_336[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_322[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_337[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_322[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_287[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_322[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_346[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_225[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_225[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_346[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_335[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_347[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_335[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_348[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_335[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_335[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_286[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_224[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_75[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_224[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_325[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_313[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_225[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_312[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_224[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_311[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_323[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_323[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_310[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_324[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_310[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_310[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_310[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_311[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_312[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_313[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_294[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_287[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_335[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_287[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_287[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_278[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_322[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_278[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_81[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_23[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_80[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_22[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_284[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_70[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_284[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_79[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_79[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_22[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_23[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_278[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_285[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_285[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_277[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_286[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_277[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_263[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_277[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_278[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_272[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_272[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_309[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_308[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_307[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_306[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_271[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_260[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_271[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_306[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_307[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_308[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_309[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_272[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_272[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_268[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_293[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_268[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_262[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_262[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_267[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_254[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_267[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_268[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_263[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_284[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_263[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_259[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_223[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_259[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_263[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_260[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_277[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_260[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_241[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_206[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_241[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_260[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_254[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_271[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_254[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_231[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_88[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_231[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_231[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_139[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_231[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_254[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3R_267[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_la1_init_0[]; void; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_la1_init_1[]; void; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_la1_init_2[]; void; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_la1_init_3[]; void; net.sourceforge.pmd.ast.JavaParser; jj_3R_233[]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; JavaParser[net.sourceforge.pmd.ast.CharStream]; void; null; token_source>
<net.sourceforge.pmd.ast.JavaParserTokenManager; ReInit[net.sourceforge.pmd.ast.CharStream]; void; net.sourceforge.pmd.ast.JavaParser; ReInit[net.sourceforge.pmd.ast.CharStream]; void; null; token_source>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReInit[net.sourceforge.pmd.ast.CharStream]; void; null; token_source>
<net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; net.sourceforge.pmd.ast.JavaParser; ReInit[net.sourceforge.pmd.ast.CharStream]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; JavaParser[net.sourceforge.pmd.ast.JavaParserTokenManager]; void; null; token_source>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; ReInit[net.sourceforge.pmd.ast.JavaParserTokenManager]; void; null; token_source>
<net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; net.sourceforge.pmd.ast.JavaParser; ReInit[net.sourceforge.pmd.ast.JavaParserTokenManager]; void; null; jjtree>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; null; token_source>
<net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; net.sourceforge.pmd.ast.JavaParser; jj_consume_token[int]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; null; token_source>
<net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; net.sourceforge.pmd.ast.JavaParser; jj_scan_token[int]; boolean; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; getNextToken[]; net.sourceforge.pmd.ast.Token; null; token_source>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParser; getToken[int]; net.sourceforge.pmd.ast.Token; null; token_source>
<java.util.List; iterator[]; java.util.Iterator<int[]>; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; it>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; it>
<java.util.List; add[int[]]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; add[int[]]; boolean; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; get[int]; int[]; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<net.sourceforge.pmd.ast.JavaParser; jj_3_1[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_2[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_3[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_4[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_5[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_6[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_7[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_8[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_9[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_10[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_11[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_12[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_13[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_14[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_15[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_16[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_17[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_18[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_19[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_20[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_21[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_22[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_23[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_24[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_25[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_26[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_27[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_28[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_29[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_30[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_31[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_32[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_33[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_34[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_35[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_36[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_37[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_38[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_39[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_40[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_41[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_42[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_43[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_44[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_45[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_46[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_47[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_48[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_49[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_50[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.JavaParser; jj_3_51[]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.ast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.Token; newToken[int]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTImplementsList; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTFormalParameters; getParameterCount[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTFormalParameters, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTFormalParameters; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTForStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTFormalParameters, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTVariableInitializer, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTVariableInitializer; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTReturnStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTVariableInitializer, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMarkerAnnotation, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMarkerAnnotation; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTSwitchStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTMarkerAnnotation, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTInclusiveOrExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTInclusiveOrExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTStatementExpressionList, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTStatementExpressionList; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTInclusiveOrExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTNullLiteral; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTStatementExpressionList, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTDefaultValue, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTDefaultValue; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.ast.ASTPrimarySuffix; getArgumentCount[]; int; null; this>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.ast.ASTPrimarySuffix; getArgumentCount[]; int; null; this.getFirstChildOfType(ASTArguments.class)>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArguments>]; net.sourceforge.pmd.ast.ASTArguments; net.sourceforge.pmd.ast.ASTPrimarySuffix; getArgumentCount[]; int; getArgumentCount[]; this>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArrayDereference[]; boolean; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; out>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTPrimarySuffix; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPrimarySuffix; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTEnumDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTRelationalExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTRelationalExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTLabeledStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTRelationalExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTExclusiveOrExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTExclusiveOrExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPreDecrementExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPreDecrementExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTExclusiveOrExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTRUNSIGNEDSHIFT, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTRUNSIGNEDSHIFT; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPreDecrementExpression, java.lang.Object]; visitor>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTPrimitiveType; isBoolean[]; boolean; null; getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTPrimitiveType; isBoolean[]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPrimitiveType; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeParameter, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeParameter; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTBreakStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeParameter, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTBlockStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTBlockStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; visitor>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.ast.ASTBlockStatement; isAllocation[]; boolean; null; findChildrenOfType(ASTAllocationExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAllocationExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTAllocationExpression>; net.sourceforge.pmd.ast.ASTBlockStatement; isAllocation[]; boolean; isEmpty[]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTContinueStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; null; this.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; jjtGetNumChildren[]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMethodDeclarator; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTExtendsList, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTExtendsList; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTForInit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTExtendsList, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeBody, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAnnotationTypeBody; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTTypeArguments, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTTypeArguments; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeBody, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTSingleMemberAnnotation, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTSingleMemberAnnotation; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTTypeArguments, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTExtendsList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeParameters, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMemberSelector, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeParameter, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeBound, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTEnumBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTEnumConstant, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTReferenceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeArguments, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeArgument, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTWildcardBounds, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTNormalAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMarkerAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTSingleMemberAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMemberValuePairs, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMemberValuePair, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMemberValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAnnotationMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTDefaultValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTRUNSIGNEDSHIFT, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAssertStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPackageDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTVariableInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTArrayInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTFormalParameters, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTFormalParameter, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTNameList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAssignmentOperator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTConditionalOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTConditionalAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTInclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTExclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTInstanceOfExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTRelationalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTShiftExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTMultiplicativeExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPreIncrementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPreDecrementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPostfixExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTCastExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTBooleanLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTArguments, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTArgumentList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTArrayDimsAndInits, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTBlockStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTEmptyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTStatementExpressionList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTSynchronizedStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTNameList, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTNameList; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMethodDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTNameList, java.lang.Object]; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTMethodDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTMethodDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTMethodDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclarator>]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; null; md>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTMethodDeclaration; isPublic[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.ast.ASTMethodDeclaration; isInterfaceMember[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.ast.ASTMethodDeclaration; isInterfaceMember[]; boolean; null; clz>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.ast.ASTMethodDeclaration; isVoid[]; boolean; null; getFirstChildOfType(ASTResultType.class)>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTResultType>]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.ast.ASTMethodDeclaration; isVoid[]; boolean; isVoid[]; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTResultType>]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTWhileStatement; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; null; this.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; jjtGetNumChildren[]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTArguments, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTArguments; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTArguments, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTInstanceOfExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTInstanceOfExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAssignmentOperator, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAssignmentOperator; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTInstanceOfExpression, java.lang.Object]; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTAssignmentOperator; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTAssignmentOperator; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.ast.ASTAssignmentOperator; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTAssignmentOperator; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTMemberSelector, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTMemberSelector; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameters[]; net.sourceforge.pmd.ast.ASTFormalParameters; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameters[]; net.sourceforge.pmd.ast.ASTFormalParameters; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameters[]; net.sourceforge.pmd.ast.ASTFormalParameters; null; this>
<net.sourceforge.pmd.ast.ASTFormalParameters; getParameterCount[]; int; net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; null; getParameters()>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameters[]; net.sourceforge.pmd.ast.ASTFormalParameters; net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; getParameterCount[]; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTConstructorDeclaration; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTConstructorDeclaration; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; collectDumpedModifiers[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTConstructorDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTConstructorDeclaration; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTInitializer, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTInitializer; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.ast.ASTInitializer; dump[java.lang.String]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; toString[java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.ASTInitializer; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; dumpChildren[java.lang.String]; void; net.sourceforge.pmd.ast.ASTInitializer; dump[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTSwitchLabel; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTPostfixExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTPostfixExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTAdditiveExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTPostfixExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTCastExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTCastExpression; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa5_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa6_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa7_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa10_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopStringLiteralDfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfa_0[int, long, long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa11_0[long, long]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_1[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_0[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_0[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_2[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_0[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCanMove_0[int, int, int, long, long]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveNfa_0[int, int]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_1[long]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_1[long]; int; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa1_1[long]; int; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; JavaParserTokenManager[net.sourceforge.pmd.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; ReInit[net.sourceforge.pmd.ast.CharStream]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; ReInit[net.sourceforge.pmd.ast.CharStream]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; ReInit[net.sourceforge.pmd.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; ReInit[net.sourceforge.pmd.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getBeginLine[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getBeginColumn[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getEndLine[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getEndColumn[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; null; Token>
<net.sourceforge.pmd.ast.CharStream; BeginToken[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<java.lang.AbstractStringBuilder; setLength[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; image>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjFillToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; MoreLexicalActions[]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; this>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getEndLine[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; getEndColumn[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; null; input_stream>
<java.lang.StringBuilder; append[char[]]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; image>
<net.sourceforge.pmd.ast.CharStream; GetSuffix[int]; char[]; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; input_stream>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; matchedToken.image>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; excludeMap>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; matchedToken.image>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; excludeMarker>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.lang.StringBuilder; append[char[]]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; image>
<net.sourceforge.pmd.ast.CharStream; GetSuffix[int]; char[]; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; input_stream>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.lang.StringBuilder; append[char[]]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; image>
<net.sourceforge.pmd.ast.CharStream; GetSuffix[int]; char[]; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; input_stream>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.lang.StringBuilder; append[char[]]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; MoreLexicalActions[]; void; null; image>
<net.sourceforge.pmd.ast.CharStream; GetSuffix[int]; char[]; net.sourceforge.pmd.ast.JavaParserTokenManager; MoreLexicalActions[]; void; null; input_stream>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; MoreLexicalActions[]; void; null; input_stream>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; image>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; jjstrLiteralImages[120]>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; input_stream>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; image>
<java.lang.String; length[]; int; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; jjstrLiteralImages[121]>
<net.sourceforge.pmd.ast.CharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; TokenLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; input_stream>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.ast.JavaParserTokenManager; jjCheckNAddStates[int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitor; visit[net.sourceforge.pmd.ast.ASTWildcardBounds, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.ast.ASTWildcardBounds; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; null; t>
<java.io.Reader; read[char[], int, int]; int; net.sourceforge.pmd.ast.JavaCharStream; FillBuff[]; void; null; inputStream>
<java.io.Reader; close[]; void; net.sourceforge.pmd.ast.JavaCharStream; FillBuff[]; void; null; inputStream>
<net.sourceforge.pmd.ast.JavaCharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaCharStream; FillBuff[]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; FillBuff[]; void; net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; net.sourceforge.pmd.ast.JavaCharStream; BeginToken[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; net.sourceforge.pmd.ast.JavaCharStream; AdjustBuffSize[]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ExpandBuff[boolean]; void; net.sourceforge.pmd.ast.JavaCharStream; AdjustBuffSize[]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; AdjustBuffSize[]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; UpdateLineColumn[char]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; AdjustBuffSize[]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; UpdateLineColumn[char]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; UpdateLineColumn[char]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; hexval[char]; int; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; hexval[char]; int; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; hexval[char]; int; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; hexval[char]; int; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReadByte[]; char; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; backup[int]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; UpdateLineColumn[char]; void; net.sourceforge.pmd.ast.JavaCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader, int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, int, int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, java.lang.String, int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, int, int]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream, int, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; ReInit[java.io.InputStream]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; GetSuffix[int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; GetSuffix[int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.ast.JavaCharStream; GetSuffix[int]; char[]; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; equals[java.lang.Object]; r1>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; compareTo[java.lang.String]; r1>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1.getDescription()>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; equals[java.lang.Object]; r1>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1.getDescription()>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; compareTo[java.lang.String]; r1>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r1>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation.RuleViolationComparator; compare[net.sourceforge.pmd.IRuleViolation, net.sourceforge.pmd.IRuleViolation]; int; null; r2>
<net.sourceforge.pmd.Rule; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode]; void; null; rule>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; ctx>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClassName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; node>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClassName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parent.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClassName[]; parent.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; parent>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parent.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClassName[]; parent.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; parent>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; "net.sourceforge.pmd.symboltable.SourceFileScope">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.symboltable.Scope>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClass[]; node>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getClassName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; node>
<net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingMethodScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingMethodScope[]; net.sourceforge.pmd.symboltable.MethodScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingMethodScope[]; node>
<net.sourceforge.pmd.symboltable.SourceFileScope; getPackageName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingSourceFileScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getPackageName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingSourceFileScope[]; node>
<net.sourceforge.pmd.symboltable.SourceFileScope; getPackageName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node.getScope().getEnclosingSourceFileScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getPackageName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingSourceFileScope[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getEndLine[]; int; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getEndColumn[]; int; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTypeDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTTypeDeclaration>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameter>]; java.util.List<net.sourceforge.pmd.ast.ASTFormalParameter>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<net.sourceforge.pmd.ast.CanSuppressWarnings; hasSuppressWarningsAnnotationFor[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; t>
<net.sourceforge.pmd.RuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((ASTFieldDeclaration)node)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; "">
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getVariableName[]; java.lang.String; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((ASTLocalVariableDeclaration)node)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; "">
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.RuleViolation; setVariableNameIfExists[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.RuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleViolation; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.RuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.RuleViolation; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.RuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleViolation; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.RuleViolation; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; null; point>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; null; dataPoints>
<net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[net.sourceforge.pmd.PropertyDescriptor]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; getMean[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[net.sourceforge.pmd.PropertyDescriptor]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; applyMinimumValue[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, double]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; newPoints>
<net.sourceforge.pmd.stat.StatisticalRule; applyTopScore[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, int]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints.first()>
<java.util.SortedSet; first[]; net.sourceforge.pmd.stat.DataPoint; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; getScore[]; dataPoints>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints.last()>
<java.util.SortedSet; last[]; net.sourceforge.pmd.stat.DataPoint; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; getScore[]; dataPoints>
<net.sourceforge.pmd.Report; addMetric[net.sourceforge.pmd.stat.Metric]; void; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; addMetric[net.sourceforge.pmd.stat.Metric]; ctx>
<net.sourceforge.pmd.CommonAbstractRule; getName[]; java.lang.String; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; getMean[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.Set; clear[]; void; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; dataPoints>
<net.sourceforge.pmd.stat.StatisticalRule; getMean[]; double; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; this>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; point>
<java.lang.Math; sqrt[double]; double; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; Math>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; dataPoints>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.StatisticalRule; applyMinimumValue[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, double]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; point>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; applyMinimumValue[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, double]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; RC>
<java.util.Set; toArray[net.sourceforge.pmd.stat.DataPoint[]]; net.sourceforge.pmd.stat.DataPoint[]; net.sourceforge.pmd.stat.StatisticalRule; applyTopScore[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, int]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; points>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; applyTopScore[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, int]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; s>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.stat.StatisticalRule; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; this>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.stat.StatisticalRule; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.stat.DataPoint; getMessage[]; java.lang.String; net.sourceforge.pmd.stat.StatisticalRule; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<java.util.Random; nextInt[int]; int; net.sourceforge.pmd.stat.DataPoint; DataPoint[]; void; null; rand>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.stat.DataPoint; compareTo[net.sourceforge.pmd.stat.DataPoint]; int; null; rhs>
<java.lang.Double; doubleValue[]; double; net.sourceforge.pmd.stat.DataPoint; compareTo[net.sourceforge.pmd.stat.DataPoint]; int; null; lhsScore>
<java.lang.Double; doubleValue[]; double; net.sourceforge.pmd.stat.DataPoint; compareTo[net.sourceforge.pmd.stat.DataPoint]; int; null; rhsScore>
<java.lang.Double; compareTo[java.lang.Double]; int; net.sourceforge.pmd.stat.DataPoint; compareTo[net.sourceforge.pmd.stat.DataPoint]; int; null; lhsScore>
<net.sourceforge.pmd.cpd.SourceCode; getCode[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; code>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; code>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currentLine>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currentLine>
<java.lang.Character; isWhitespace[char]; boolean; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; Character>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<java.lang.String; valueOf[char]; java.lang.String; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; String>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<net.sourceforge.pmd.cpd.Tokens; getTokens[]; java.util.List<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchAlgorithm; MatchAlgorithm[java.util.Map<java.lang.String,net.sourceforge.pmd.cpd.SourceCode>, net.sourceforge.pmd.cpd.Tokens, int, net.sourceforge.pmd.cpd.CPDListener]; void; null; tokens>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchAlgorithm; matches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; null; matches>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; null; code>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; null; m>
<net.sourceforge.pmd.cpd.CPDListener; phaseUpdate[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; cpdListener>
<net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; this>
<net.sourceforge.pmd.cpd.CPDListener; phaseUpdate[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; cpdListener>
<java.util.Collection; iterator[]; java.util.Iterator<java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; markGroups.values()>
<java.util.Map; values[]; java.util.Collection<java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; iterator[]; markGroups>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; i>
<java.util.Collections; reverse[java.util.List<?>]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; Collections>
<net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; matchCollector>
<java.util.Iterator; remove[]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; i>
<net.sourceforge.pmd.cpd.CPDListener; phaseUpdate[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; cpdListener>
<net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; matchCollector>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; occurrences>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; occurrences>
<net.sourceforge.pmd.cpd.Match; setLineCount[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; match>
<net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; tokens>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; occurrences>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; mark>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; match>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.cpd.SourceCode; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; source>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; mark>
<net.sourceforge.pmd.cpd.Match; setSourceCodeSlice[java.lang.String]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; match>
<net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; sourceCode>
<net.sourceforge.pmd.cpd.CPDListener; phaseUpdate[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; cpdListener>
<net.sourceforge.pmd.cpd.Tokens; size[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; tokens>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<net.sourceforge.pmd.cpd.TokenEntry; getIdentifier[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; tokenAt(min,token)>
<net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; getIdentifier[]; this>
<net.sourceforge.pmd.cpd.TokenEntry; getIdentifier[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; token>
<net.sourceforge.pmd.cpd.TokenEntry; setHashCode[int]; void; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; token>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.Map; put[net.sourceforge.pmd.cpd.TokenEntry, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.util.Map; put[net.sourceforge.pmd.cpd.TokenEntry, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.lang.Math; max[int, int]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; Math>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<net.sourceforge.pmd.cpd.TokenEntry; getIdentifier[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; token>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; mb>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; ma>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; mb>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; ma>
<net.sourceforge.pmd.cpd.Match; getLabel[]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; ma>
<net.sourceforge.pmd.cpd.Match; getLabel[]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; mb>
<java.lang.String; compareTo[java.lang.String]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; mb.getLabel()>
<net.sourceforge.pmd.cpd.Match; getLabel[]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; compareTo[java.lang.String]; mb>
<net.sourceforge.pmd.cpd.Match; getLabel[]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; ma>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; mb>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; java.lang.Object; compare[net.sourceforge.pmd.cpd.Match, net.sourceforge.pmd.cpd.Match]; int; null; ma>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Match.MatchCode; MatchCode[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; m1>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Match.MatchCode; MatchCode[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; m2>
<java.util.Set; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Match; Match[int, net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; markSet>
<java.util.Set; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Match; Match[int, net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; markSet>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; null; markSet>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; null; markSet>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; null; other>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; null; this>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; null; other.getFirstMark()>
<net.sourceforge.pmd.cpd.Match; getFirstMark[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; getIndex[]; other>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; null; getFirstMark()>
<net.sourceforge.pmd.cpd.Match; getFirstMark[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Match; compareTo[net.sourceforge.pmd.cpd.Match]; int; getIndex[]; this>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.Match; toString[]; java.lang.String; null; markSet>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Match; getEndIndex[]; int; null; marks[1]>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.Match; getEndIndex[]; int; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.FileReporter; FileReporter[java.io.File]; void; null; System>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.cpd.FileReporter; report[java.lang.String]; void; null; writer>
<java.io.Writer; close[]; void; net.sourceforge.pmd.cpd.FileReporter; report[java.lang.String]; void; null; writer>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.XMLRenderer; XMLRenderer[]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("\"?>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("<pmd-cpd>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; iterator>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; iterator>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("\"/>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<net.sourceforge.pmd.cpd.Match; getSourceCodeSlice[]; java.lang.String; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("<codefragment>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("<![CDATA[")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append(StringUtil.replaceString(codeFragment,"]]>","]]&gt;"))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; StringUtil>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer.append("</duplication>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; buffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; java.lang.Object; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; new SimpleRenderer()>
<net.sourceforge.pmd.cpd.XMLRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; java.lang.Object; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; new XMLRenderer()>
<net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; java.lang.Object; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; new CSVRenderer(',')>
<net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; java.lang.Object; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; new CSVRenderer('\t')>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; java.lang.Object; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; lf>
<javax.swing.KeyStroke; getKeyStroke[int, int, boolean]; javax.swing.KeyStroke; net.sourceforge.pmd.cpd.GUI.LanguageConfig; extensions[]; java.lang.String[]; null; KeyStroke>
<javax.swing.KeyStroke; getKeyStroke[int, int]; javax.swing.KeyStroke; net.sourceforge.pmd.cpd.GUI.LanguageConfig; extensions[]; java.lang.String[]; null; KeyStroke>
<java.util.Map; put[java.lang.Object, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.GUI.ColumnSpec; sorter[]; java.util.Comparator<net.sourceforge.pmd.cpd.Match>; null; langConfigsByLabel>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; languageConfigFor[java.lang.String]; net.sourceforge.pmd.cpd.GUI.LanguageConfig; null; langConfigsByLabel>
<java.lang.System; exit[int]; void; net.sourceforge.pmd.cpd.GUI.CancelListener; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<java.lang.Thread; start[]; void; net.sourceforge.pmd.cpd.GUI.GoListener; actionPerformed[java.awt.event.ActionEvent]; void; null; new Thread(new Runnable(){
  public void run(){
    tokenizingFilesBar.setValue(0);
    tokenizingFilesBar.setString("");
    resultsTextArea.setText("");
    phaseLabel.setText("");
    timeField.setText("");
    go();
  }
}
)>
<javax.swing.JProgressBar; setValue[int]; void; java.lang.Object; run[]; void; start[]; tokenizingFilesBar>
<javax.swing.JProgressBar; setString[java.lang.String]; void; java.lang.Object; run[]; void; null; tokenizingFilesBar>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; java.lang.Object; run[]; void; null; resultsTextArea>
<javax.swing.JLabel; setText[java.lang.String]; void; java.lang.Object; run[]; void; null; phaseLabel>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; java.lang.Object; run[]; void; null; timeField>
<net.sourceforge.pmd.cpd.GUI; go[]; void; java.lang.Object; run[]; void; null; this>
<javax.swing.JFileChooser; showSaveDialog[java.awt.Component]; int; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fcSave>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fcSave>
<java.io.File; canWrite[]; boolean; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; f>
<java.io.PrintWriter; write[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pw>
<net.sourceforge.pmd.cpd.GUI$Renderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; renderer>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; matches>
<java.io.PrintWriter; flush[]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pw>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; JOptionPane>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; matches>
<net.sourceforge.pmd.cpd.GUI$SaveListener; error[java.lang.String, java.lang.Exception]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; f>
<java.io.PrintWriter; close[]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pw>
<net.sourceforge.pmd.cpd.GUI$SaveListener; error[java.lang.String, java.lang.Exception]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; f>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; error[java.lang.String, java.lang.Exception]; void; null; e>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI.SaveListener; error[java.lang.String, java.lang.Exception]; void; null; JOptionPane>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; rootDirectoryField>
<javax.swing.JFileChooser; setFileSelectionMode[int]; void; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<javax.swing.JFileChooser; showDialog[java.awt.Component, java.lang.String]; int; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; rootDirectoryField>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; null; fc.getSelectedFile()>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; net.sourceforge.pmd.cpd.GUI.BrowseListener; actionPerformed[java.awt.event.ActionEvent]; void; getAbsolutePath[]; fc>
<javax.swing.JLabel; setHorizontalAlignment[int]; void; net.sourceforge.pmd.cpd.GUI.AlignmentRenderer; getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int]; java.awt.Component; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.GUI.AlignmentRenderer; getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int]; java.awt.Component; null; System>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.cpd.GUI.AlignmentRenderer; getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int]; java.awt.Component; null; Integer>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.GUI.AlignmentRenderer; getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int]; java.awt.Component; null; System>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; addSaveOptionsTo[javax.swing.JMenu]; void; null; saveItem>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.cpd.GUI; addSaveOptionsTo[javax.swing.JMenu]; void; null; menu>
<javax.swing.text.JTextComponent; setEditable[boolean]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; timeField>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; fileMenu>
<net.sourceforge.pmd.cpd.GUI; addSaveOptionsTo[javax.swing.JMenu]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; exitItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; exitItem>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; addItemListener[java.awt.event.ItemListener]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; trimItem>
<java.awt.event.ItemEvent; getItem[]; java.lang.Object; java.lang.Object; itemStateChanged[java.awt.event.ItemEvent]; void; null; e>
<javax.swing.AbstractButton; isSelected[]; boolean; java.lang.Object; itemStateChanged[java.awt.event.ItemEvent]; void; null; button>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; viewMenu>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; menuBar>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; menuBar>
<javax.swing.JFrame; setJMenuBar[javax.swing.JMenuBar]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; browseButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; browseButton>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; goButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; goButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; cancelButton>
<net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame.getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.cpd.GUI; GUI[]; void; setLayout[java.awt.LayoutManager]; frame>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; topPanel>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; topPanel>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; topPanel>
<net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame.getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.cpd.GUI; GUI[]; void; add[java.awt.Component, java.lang.Object]; frame>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame.getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.cpd.GUI; GUI[]; void; add[java.awt.Component, java.lang.Object]; frame>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame>
<java.awt.Window; pack[]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame>
<java.awt.Window; setVisible[boolean]; void; net.sourceforge.pmd.cpd.GUI; GUI[]; void; null; frame>
<javax.swing.AbstractButton; setEnabled[boolean]; void; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; ignoreLiteralsCheckbox>
<net.sourceforge.pmd.cpd.GUI$LanguageConfig; ignoreLiteralsByDefault[]; boolean; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; current>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; extensionField>
<net.sourceforge.pmd.cpd.GUI$LanguageConfig; extensions[]; java.lang.String[]; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; current>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; current.extensions()[0]>
<net.sourceforge.pmd.cpd.GUI$LanguageConfig; extensions[]; java.lang.String[]; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; length[]; current>
<javax.swing.JComponent; setEnabled[boolean]; void; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; extensionField>
<javax.swing.JComponent; setEnabled[boolean]; void; net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; null; extensionLabel>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component, int]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<javax.swing.JTextField; setColumns[int]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; minimumLengthField>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<javax.swing.JComboBox; addItem[java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; languageBox>
<javax.swing.JComboBox; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; languageBox>
<net.sourceforge.pmd.cpd.GUI; adjustLanguageControlsFor[net.sourceforge.pmd.cpd.GUI.LanguageConfig]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.cpd.GUI; languageConfigFor[java.lang.String]; net.sourceforge.pmd.cpd.GUI.LanguageConfig; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JComboBox; getSelectedItem[]; java.lang.Object; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; languageBox>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<javax.swing.JTextField; setColumns[int]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; encodingField>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeSettingsPanel[javax.swing.JButton, javax.swing.JButton, javax.swing.JButton]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component, int]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<net.sourceforge.pmd.cpd.GridBagHelper; nextRow[]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; helper>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; progressPanel>
<javax.swing.BorderFactory; createTitledBorder[java.lang.String]; javax.swing.border.TitledBorder; net.sourceforge.pmd.cpd.GUI; makeProgressPanel[]; javax.swing.JPanel; null; BorderFactory>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; resultsPanel>
<javax.swing.text.JTextComponent; setEditable[boolean]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; resultsTextArea>
<javax.swing.JScrollPane; setVerticalScrollBarPolicy[int]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; areaScrollPane>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; areaScrollPane>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; resultsPanel>
<net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; makeResultsPanel[]; javax.swing.JPanel; null; resultsPanel>
<javax.swing.JTable; getSelectedRows[]; int[]; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; resultsTable>
<javax.swing.JTable; getModel[]; javax.swing.table.TableModel; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; resultsTable>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; selections>
<javax.swing.table.TableModel; getValueAt[int, int]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; model>
<net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; new SimpleRenderer(trimLeadingWhitespace)>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; selections>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; resultsTextArea>
<javax.swing.text.JTextComponent; setCaretPosition[int]; void; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; resultsTextArea>
<javax.swing.JTable; getSelectedRows[]; int[]; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; resultsTable>
<javax.swing.JTable; getColumnCount[]; int; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; resultsTable>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; sb>
<javax.swing.JTable; getValueAt[int, int]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; resultsTable>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; sb>
<javax.swing.JTable; getValueAt[int, int]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; resultsTable>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; sb>
<java.awt.datatransfer.Clipboard; setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner]; void; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; null; Toolkit.getDefaultToolkit().getSystemClipboard()>
<java.awt.Toolkit; getSystemClipboard[]; java.awt.datatransfer.Clipboard; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner]; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; getSystemClipboard[]; Toolkit>
<javax.swing.JTable; getSelectedRows[]; int[]; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; null; resultsTable>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; null; matches>
<javax.swing.ListSelectionModel; clearSelection[]; void; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; null; resultsTable.getSelectionModel()>
<javax.swing.JTable; getSelectionModel[]; javax.swing.ListSelectionModel; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; clearSelection[]; resultsTable>
<javax.swing.JTable; addNotify[]; void; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; null; resultsTable>
<javax.swing.ListSelectionModel; addListSelectionListener[javax.swing.event.ListSelectionListener]; void; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; resultsTable.getSelectionModel()>
<javax.swing.JTable; getSelectionModel[]; javax.swing.ListSelectionModel; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; addListSelectionListener[javax.swing.event.ListSelectionListener]; resultsTable>
<net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; java.lang.Object; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; this>
<javax.swing.JComponent; registerKeyboardAction[java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int]; void; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; resultsTable>
<net.sourceforge.pmd.cpd.GUI; copyMatchListSelectionsToClipboard[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JComponent; registerKeyboardAction[java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int]; void; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; resultsTable>
<net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.cpd.GUI$ColumnSpec; alignment[]; int; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; matchColumns[i]>
<javax.swing.JTable; setDefaultRenderer[java.lang.Class<?>, javax.swing.table.TableCellRenderer]; void; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; resultsTable>
<javax.swing.JTable; getTableHeader[]; javax.swing.table.JTableHeader; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; resultsTable>
<java.awt.Component; addMouseListener[java.awt.event.MouseListener]; void; net.sourceforge.pmd.cpd.GUI; makeMatchList[]; javax.swing.JComponent; null; header>
<net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; java.awt.event.MouseAdapter; mouseClicked[java.awt.event.MouseEvent]; void; null; this>
<javax.swing.table.JTableHeader; columnAtPoint[java.awt.Point]; int; java.awt.event.MouseAdapter; mouseClicked[java.awt.event.MouseEvent]; void; null; header>
<java.awt.event.MouseEvent; getX[]; int; java.awt.event.MouseAdapter; mouseClicked[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getY[]; int; java.awt.event.MouseAdapter; mouseClicked[java.awt.event.MouseEvent]; void; null; e>
<net.sourceforge.pmd.cpd.GUI$LanguageConfig; extensions[]; java.lang.String[]; net.sourceforge.pmd.cpd.GUI; isLegalPath[java.lang.String, net.sourceforge.pmd.cpd.GUI.LanguageConfig]; boolean; null; config>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.cpd.GUI; isLegalPath[java.lang.String, net.sourceforge.pmd.cpd.GUI.LanguageConfig]; boolean; null; path>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.GUI; isLegalPath[java.lang.String, net.sourceforge.pmd.cpd.GUI.LanguageConfig]; boolean; null; extensions[i]>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; match>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; occurrences>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; occurrences.next()>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; getTokenSrcID[]; occurrences>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<java.util.Iterator; next[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs.iterator()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; next[]; sourceIDs>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceId>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceId>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<net.sourceforge.pmd.cpd.Match; setLabel[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; match>
<javax.swing.JComponent; setVisible[boolean]; void; net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; null; progressPanel>
<javax.swing.AbstractButton; setEnabled[boolean]; void; net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; null; goButton>
<javax.swing.AbstractButton; setEnabled[boolean]; void; net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; null; cancelButton>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; rootDirectoryField>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; (new File(dirPath))>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; JOptionPane>
<net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; go[]; void; null; p>
<java.lang.String; valueOf[boolean]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; String>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; ignoreLiteralsCheckbox>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; go[]; void; null; p>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; extensionField>
<net.sourceforge.pmd.cpd.GUI; languageConfigFor[java.lang.String]; net.sourceforge.pmd.cpd.GUI.LanguageConfig; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<javax.swing.JComboBox; getSelectedItem[]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; go[]; void; null; languageBox>
<net.sourceforge.pmd.cpd.GUI$LanguageConfig; languageFor[net.sourceforge.pmd.cpd.LanguageFactory, java.util.Properties]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.GUI; go[]; void; null; conf>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.cpd.GUI; go[]; void; null; Integer>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; minimumLengthField>
<net.sourceforge.pmd.cpd.CPD; setEncoding[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; encodingField>
<net.sourceforge.pmd.cpd.CPD; setCpdListener[net.sourceforge.pmd.cpd.CPDListener]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<javax.swing.JProgressBar; setMinimum[int]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; tokenizingFilesBar>
<javax.swing.JLabel; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; phaseLabel>
<net.sourceforge.pmd.cpd.GUI; isLegalPath[java.lang.String, net.sourceforge.pmd.cpd.GUI.LanguageConfig]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; add[java.io.File]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; recurseCheckbox>
<net.sourceforge.pmd.cpd.CPD; addRecursively[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<net.sourceforge.pmd.cpd.CPD; addAllInDirectory[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.cpd.GUI; go[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<java.lang.Math; floor[double]; double; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; Math>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; timeField>
<net.sourceforge.pmd.cpd.GUI$18; munge[java.lang.String]; java.lang.String; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.String; valueOf[long]; java.lang.String; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; String>
<net.sourceforge.pmd.cpd.GUI$18; munge[java.lang.String]; java.lang.String; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.String; valueOf[long]; java.lang.String; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; String>
<java.lang.String; length[]; int; java.lang.Object; munge[java.lang.String]; java.lang.String; null; in>
<javax.swing.Timer; start[]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<net.sourceforge.pmd.cpd.CPD; go[]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<javax.swing.Timer; stop[]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.GUI; go[]; void; null; i>
<net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; matches>
<net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; new SimpleRenderer()>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.GUI; go[]; void; null; report>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; JOptionPane>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; minimumLengthField>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; resultsTextArea>
<net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; go[]; void; null; cpd>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; JOptionPane>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.io.IOException>; net.sourceforge.pmd.cpd.GUI; go[]; void; getName[]; t>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; JOptionPane>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.RuntimeException>; net.sourceforge.pmd.cpd.GUI; go[]; void; getName[]; t>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.cpd.GUI; go[]; void; null; t>
<net.sourceforge.pmd.cpd.GUI; setProgressControls[boolean]; void; net.sourceforge.pmd.cpd.GUI; go[]; void; null; this>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; items>
<net.sourceforge.pmd.cpd.Match; getLabel[]; java.lang.String; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; match>
<java.lang.Integer; toString[int]; java.lang.String; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; match>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; match>
<java.lang.Integer; toString[int]; java.lang.String; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; match>
<java.util.List; size[]; int; java.lang.Object; getRowCount[]; int; null; items>
<net.sourceforge.pmd.cpd.GUI$ColumnSpec; label[]; java.lang.String; java.lang.Object; getColumnName[int]; java.lang.String; null; matchColumns[i]>
<java.util.Collections; sort[java.util.List<net.sourceforge.pmd.cpd.Match>, java.util.Comparator<? super net.sourceforge.pmd.cpd.Match>]; void; java.lang.Object; sort[java.util.Comparator<net.sourceforge.pmd.cpd.Match>]; void; null; Collections>
<java.util.Collections; reverse[java.util.List<?>]; void; java.lang.Object; sort[java.util.Comparator<net.sourceforge.pmd.cpd.Match>]; void; null; Collections>
<net.sourceforge.pmd.cpd.GUI$ColumnSpec; sorter[]; java.util.Comparator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; matchColumns[columnIndex]>
<javax.swing.JTable; getModel[]; javax.swing.table.TableModel; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; resultsTable>
<net.sourceforge.pmd.cpd.GUI$SortingTableModel; sortColumn[]; int; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; model>
<net.sourceforge.pmd.cpd.GUI$SortingTableModel; sortDescending[boolean]; void; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; model>
<net.sourceforge.pmd.cpd.GUI$SortingTableModel; sortDescending[]; boolean; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; model>
<net.sourceforge.pmd.cpd.GUI$SortingTableModel; sortColumn[int]; void; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; model>
<net.sourceforge.pmd.cpd.GUI$SortingTableModel; sort[java.util.Comparator<net.sourceforge.pmd.cpd.Match>]; void; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; model>
<javax.swing.ListSelectionModel; clearSelection[]; void; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; resultsTable.getSelectionModel()>
<javax.swing.JTable; getSelectionModel[]; javax.swing.ListSelectionModel; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; clearSelection[]; resultsTable>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.cpd.GUI; sortOnColumn[int]; void; null; resultsTable>
<javax.swing.JTable; setModel[javax.swing.table.TableModel]; void; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; resultsTable>
<net.sourceforge.pmd.cpd.GUI; tableModelFrom[java.util.List<net.sourceforge.pmd.cpd.Match>]; javax.swing.table.TableModel; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; this>
<javax.swing.JTable; getColumnModel[]; javax.swing.table.TableColumnModel; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; resultsTable>
<net.sourceforge.pmd.cpd.GUI$ColumnSpec; width[]; int; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; matchColumns[i]>
<javax.swing.table.TableColumnModel; getColumn[int]; javax.swing.table.TableColumn; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; colModel>
<net.sourceforge.pmd.cpd.GUI$ColumnSpec; width[]; int; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; matchColumns[i]>
<javax.swing.table.TableColumn; setPreferredWidth[int]; void; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; column>
<javax.swing.table.TableColumn; setMinWidth[int]; void; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; column>
<javax.swing.table.TableColumn; setMaxWidth[int]; void; net.sourceforge.pmd.cpd.GUI; setListDataFrom[java.util.Iterator]; void; null; column>
<javax.swing.JLabel; setText[java.lang.String]; void; net.sourceforge.pmd.cpd.GUI; phaseUpdate[int]; void; null; phaseLabel>
<net.sourceforge.pmd.cpd.GUI; getPhaseText[int]; java.lang.String; net.sourceforge.pmd.cpd.GUI; phaseUpdate[int]; void; null; this>
<javax.swing.JProgressBar; setMaximum[int]; void; net.sourceforge.pmd.cpd.GUI; addedFile[int, java.io.File]; void; null; tokenizingFilesBar>
<javax.swing.JProgressBar; setValue[int]; void; net.sourceforge.pmd.cpd.GUI; addedFile[int, java.io.File]; void; null; tokenizingFilesBar>
<javax.swing.JProgressBar; getValue[]; int; net.sourceforge.pmd.cpd.GUI; addedFile[int, java.io.File]; void; null; tokenizingFilesBar>
<net.sourceforge.pmd.cpd.AbstractLanguage; getTokenizer[]; net.sourceforge.pmd.cpd.Tokenizer; net.sourceforge.pmd.cpd.JavaLanguage; JavaLanguage[java.util.Properties]; void; null; this>
<net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; net.sourceforge.pmd.cpd.JavaLanguage; JavaLanguage[java.util.Properties]; void; null; tokenizer>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; iterator>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; iterator>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.VSRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; buffer>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.lang.ref.SoftReference; get[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; getCode[]; java.util.List<java.lang.String>; null; code>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; load[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; getCode[]; java.util.List<java.lang.String>; null; this>
<java.lang.ref.SoftReference; get[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; getCode[]; java.util.List<java.lang.String>; null; code>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getReader[]; java.io.Reader; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; this>
<java.io.LineNumberReader; readLine[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; lnr>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; lines>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; e>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; e>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; lnr>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; e>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode.FileCodeLoader; getFileName[]; java.lang.String; null; this.file>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getCode[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode; getCode[]; java.util.List<java.lang.String>; null; cl>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getCode[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; null; cl>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; null; sb>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getCode[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; cl>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; lines>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; sb>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; lines>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; sb>
<net.sourceforge.pmd.cpd.SourceCode$CodeLoader; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; null; cl>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; mark1>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; mark2>
<net.sourceforge.pmd.cpd.MatchAlgorithm; getMinimumTileSize[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; ma>
<net.sourceforge.pmd.cpd.MatchCollector; hasPreviousDupe[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; this>
<net.sourceforge.pmd.cpd.MatchCollector; countDuplicateTokens[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; this>
<net.sourceforge.pmd.cpd.MatchAlgorithm; getMinimumTileSize[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; ma>
<net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; this>
<java.util.Map; values[]; java.util.Collection<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; startMap>
<java.util.Collections; sort[java.util.List<net.sourceforge.pmd.cpd.Match>]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; Collections>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1.getMarkSet().iterator()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; next[]; match1.getMarkSet()>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; iterator[]; match1>
<java.util.Set; clear[]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.Set; add[net.sourceforge.pmd.cpd.Match.MatchCode]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<net.sourceforge.pmd.cpd.Match; getMatchCode[]; net.sourceforge.pmd.cpd.Match.MatchCode; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2.getMarkSet()>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; iterator[]; match2>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; iter>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; iter>
<net.sourceforge.pmd.cpd.MatchCollector; countDuplicateTokens[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; this>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1>
<java.util.Set; add[net.sourceforge.pmd.cpd.Match.MatchCode]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<net.sourceforge.pmd.cpd.Match; getMatchCode[]; net.sourceforge.pmd.cpd.Match.MatchCode; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2>
<java.util.Set; addAll[java.util.Collection<? extends net.sourceforge.pmd.cpd.TokenEntry>]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1.getMarkSet()>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; addAll[java.util.Collection<? extends net.sourceforge.pmd.cpd.TokenEntry>]; match1>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1>
<net.sourceforge.pmd.cpd.Match; getMarkSet[]; java.util.Set<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1>
<java.util.Collections; sort[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; Collections>
<java.util.ArrayList; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<net.sourceforge.pmd.cpd.Match$MatchCode; setFirst[int]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchCode>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; cmark1>
<net.sourceforge.pmd.cpd.Match$MatchCode; setSecond[int]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchCode>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; cmark2>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; mark1>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; mark2>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; fileMap>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.cpd.Match>]; java.util.List<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; fileMap>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other.getFirstMark()>
<net.sourceforge.pmd.cpd.Match; getFirstMark[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; getIndex[]; other>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; mark1>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other.getSecondMark()>
<net.sourceforge.pmd.cpd.Match; getSecondMark[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; getIndex[]; other>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; mark2>
<net.sourceforge.pmd.cpd.Match; getEndIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; mark2>
<net.sourceforge.pmd.cpd.Match; getEndIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; match>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other.getSecondMark()>
<net.sourceforge.pmd.cpd.Match; getSecondMark[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; getIndex[]; other>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; match>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.Map; remove[java.lang.Object]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; startMap>
<net.sourceforge.pmd.cpd.Match; getMatchCode[]; net.sourceforge.pmd.cpd.Match.MatchCode; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; other>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.Map; put[net.sourceforge.pmd.cpd.Match.MatchCode, net.sourceforge.pmd.cpd.Match]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; startMap>
<net.sourceforge.pmd.cpd.Match; getMatchCode[]; net.sourceforge.pmd.cpd.Match.MatchCode; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; match>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.MatchCollector; hasPreviousDupe[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; mark1>
<net.sourceforge.pmd.cpd.MatchCollector; matchEnded[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchCollector; hasPreviousDupe[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; this>
<net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; hasPreviousDupe[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; ma>
<net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; hasPreviousDupe[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; ma>
<net.sourceforge.pmd.cpd.MatchCollector; matchEnded[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchCollector; countDuplicateTokens[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; int; null; this>
<net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; countDuplicateTokens[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; int; null; ma>
<net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; countDuplicateTokens[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; int; null; ma>
<net.sourceforge.pmd.cpd.TokenEntry; getIdentifier[]; int; net.sourceforge.pmd.cpd.MatchCollector; matchEnded[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; token1>
<net.sourceforge.pmd.cpd.TokenEntry; getIdentifier[]; int; net.sourceforge.pmd.cpd.MatchCollector; matchEnded[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; boolean; null; token2>
<net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<java.lang.String; toCharArray[]; char[]; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sb.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; toCharArray[]; sb>
<java.io.BufferedReader; readLine[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; reader>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenizer>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenizer>
<java.io.BufferedReader; readLine[]; java.lang.String; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; reader>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; ex>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; reader>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.AnyTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<java.lang.Boolean; parseBoolean[java.lang.String]; boolean; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; Boolean>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; properties>
<java.lang.Boolean; parseBoolean[java.lang.String]; boolean; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; Boolean>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; properties>
<net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<net.sourceforge.pmd.TargetJDK1_4; createJavaParserTokenManager[java.io.Reader]; net.sourceforge.pmd.ast.JavaParserTokenManager; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; new TargetJDK1_4()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; buffer>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currentToken.image>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; String>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; String>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<net.sourceforge.pmd.ast.JavaParserTokenManager; getNextToken[]; net.sourceforge.pmd.ast.Token; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.JavaTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; expected.append(tokenImage[expectedTokenSequences[i][j]])>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; append[char]; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; expected.append(eol)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; append[java.lang.String]; expected>
<net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; getMessage[]; java.lang.String; null; System>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; CPPParserTokenManager>
<net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<java.lang.String; valueOf[char]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; String>
<net.sourceforge.pmd.cpd.cppast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<net.sourceforge.pmd.cpd.cppast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; net.sourceforge.pmd.cpd.cppast.TokenMgrError; TokenMgrError[boolean, int, int, int, java.lang.String, char, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; System>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; null; t>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ExpandBuff[boolean]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; null; this>
<java.io.Reader; read[char[], int, int]; int; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; null; inputStream>
<java.io.Reader; close[]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; null; inputStream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; backup[int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; BeginToken[]; char; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; FillBuff[]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; UpdateLineColumn[char]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader, int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, int, int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, java.lang.String]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, java.lang.String, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, java.lang.String, int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, int, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.InputStream, int, int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetSuffix[int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetSuffix[int]; char[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetSuffix[int]; char[]; null; System>
<net.sourceforge.pmd.cpd.cppast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.cppast.Token; newToken[int]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_0[long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa3_0[long, long, long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa4_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa5_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa6_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa7_0[long, long, long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa8_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopStringLiteralDfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfa_0[int, long, long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa9_0[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStartNfaWithStates_0[int, int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveNfa_0[int, int]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_3[long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_3[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_3[long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_3[long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa1_2[long]; int; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; CPPParserTokenManager[net.sourceforge.pmd.cpd.cppast.SimpleCharStream, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInit[net.sourceforge.pmd.cpd.cppast.SimpleCharStream]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInit[net.sourceforge.pmd.cpd.cppast.SimpleCharStream]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInit[net.sourceforge.pmd.cpd.cppast.SimpleCharStream, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInit[net.sourceforge.pmd.cpd.cppast.SimpleCharStream, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getBeginLine[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getBeginColumn[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getEndLine[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getEndColumn[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; Token>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; BeginToken[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; backup[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; BeginToken[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_3[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; backup[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjFillToken[]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; this>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getEndLine[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; getEndColumn[]; int; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; readChar[]; char; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; backup[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; backup[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; null; input_stream>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; jjCheckNAddStates[int, int]; void; null; this>
<net.sourceforge.pmd.cpd.SourceCode; getCode[]; java.util.List<java.lang.String>; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this.code>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this.code>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currentLine>
<net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<net.sourceforge.pmd.cpd.AbstractTokenizer; isIgnorableString[java.lang.String]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<java.lang.String; toLowerCase[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; toLowerCase[]; token>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; token>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this.currentLine>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this.currentLine>
<java.lang.Character; isWhitespace[char]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; Character>
<net.sourceforge.pmd.cpd.AbstractTokenizer; ignoreCharacter[char]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this>
<net.sourceforge.pmd.cpd.AbstractTokenizer; isComment[char]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; token>
<net.sourceforge.pmd.cpd.AbstractTokenizer; getCommentToken[java.lang.StringBuffer, int]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this>
<net.sourceforge.pmd.cpd.AbstractTokenizer; isString[char]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; token>
<net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; this>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; token>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getTokenFromLine[java.lang.StringBuffer, int]; int; null; token>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; currentLine>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; currentLine>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; token>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; token>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; currentLine>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; this.code>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; this.code>
<net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; this>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; ignoreCharacter[char]; boolean; null; this.ignorableCharacter>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; isString[char]; boolean; null; this.stringToken>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; getCommentToken[java.lang.StringBuffer, int]; int; null; this.currentLine>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.AbstractTokenizer; getCommentToken[java.lang.StringBuffer, int]; int; null; token>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.AbstractTokenizer; getCommentToken[java.lang.StringBuffer, int]; int; null; this.currentLine>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; isIgnorableString[java.lang.String]; boolean; null; this.ignorableStmt>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPDListener; phaseUpdate[int]; void; null; System>
<net.sourceforge.pmd.cpd.CPDTask; validateFields[]; void; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; setEncoding[java.lang.String]; void; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; cpd>
<net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<net.sourceforge.pmd.cpd.CPDTask; analyzeCode[net.sourceforge.pmd.cpd.CPD]; long; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<java.lang.Throwable; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; ioe>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; re>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; this>
<java.lang.Throwable; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; execute[]; void; null; re>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; null; p>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; null; p>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; null; new LanguageFactory()>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; cpd.getMatches()>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; hasNext[]; cpd>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; this>
<net.sourceforge.pmd.cpd.CPDTask; createRenderer[]; net.sourceforge.pmd.cpd.Renderer; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; this>
<java.io.File; isAbsolute[]; boolean; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; outputFile>
<not found; getBaseDir[]; not found; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; getProject()>
<not found; getProject[]; not found; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; getBaseDir[]; this>
<java.io.File; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; outputFile>
<net.sourceforge.pmd.cpd.FileReporter; report[java.lang.String]; void; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; reporter>
<net.sourceforge.pmd.cpd.Renderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; renderer>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.CPDTask; report[net.sourceforge.pmd.cpd.CPD]; void; null; cpd>
<not found; getDirectoryScanner[]; not found; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; fileSet>
<not found; getProject[]; not found; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; this>
<not found; getIncludedFiles[]; not found; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; directoryScanner>
<not found; getBasedir[]; not found; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; directoryScanner>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; System>
<not found; log[]; not found; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; this>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; file>
<net.sourceforge.pmd.cpd.CPD; add[java.io.File]; void; net.sourceforge.pmd.cpd.CPDTask; tokenizeFiles[net.sourceforge.pmd.cpd.CPD]; void; null; cpd>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.cpd.CPDTask; analyzeCode[net.sourceforge.pmd.cpd.CPD]; long; null; System>
<net.sourceforge.pmd.cpd.CPD; go[]; void; net.sourceforge.pmd.cpd.CPDTask; analyzeCode[net.sourceforge.pmd.cpd.CPD]; long; null; cpd>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.cpd.CPDTask; analyzeCode[net.sourceforge.pmd.cpd.CPD]; long; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPDTask; createRenderer[]; net.sourceforge.pmd.cpd.Renderer; null; format>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPDTask; createRenderer[]; net.sourceforge.pmd.cpd.Renderer; null; format>
<not found; isEmpty[]; not found; net.sourceforge.pmd.cpd.CPDTask; validateFields[]; void; null; filesets>
<not found; add[]; not found; net.sourceforge.pmd.cpd.CPDTask; addFileset[net.sourceforge.pmd.cpd.FileSet]; void; null; filesets>
<not found; getValue[]; not found; net.sourceforge.pmd.cpd.CPDTask; setFormat[net.sourceforge.pmd.cpd.CPDTask.FormatAttribute]; void; null; formatAttribute>
<not found; getValue[]; not found; net.sourceforge.pmd.cpd.CPDTask; setLanguage[net.sourceforge.pmd.cpd.CPDTask.LanguageAttribute]; void; null; languageAttribute>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; rpt.append("Found a ").append(match.getLineCount()).append(" line (").append(match.getTokenCount()).append(" tokens) duplication in the following files: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Found a ").append(match.getLineCount()).append(" line (").append(match.getTokenCount())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Found a ").append(match.getLineCount()).append(" line (")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[int]; rpt.append("Found a ").append(match.getLineCount())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Found a ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[int]; rpt>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; match>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; match>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; occurrences>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; occurrences>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; rpt.append("Starting at line ").append(mark.getBeginLine()).append(" of ").append(mark.getTokenSrcID())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Starting at line ").append(mark.getBeginLine()).append(" of ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Starting at line ").append(mark.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt.append("Starting at line ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[int]; rpt>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; mark>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; rpt>
<net.sourceforge.pmd.cpd.Match; getSourceCodeSlice[]; java.lang.String; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; match>
<java.lang.String; split[java.lang.String]; java.lang.String[]; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; source>
<net.sourceforge.pmd.util.StringUtil; maxCommonLeadingWhitespaceForAll[java.lang.String[]]; int; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; StringUtil>
<net.sourceforge.pmd.util.StringUtil; trimStartOn[java.lang.String[], int]; java.lang.String[]; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; StringUtil>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; rpt.append(lines[i])>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; null; rpt.append(source)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; append[java.lang.String]; rpt>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; this>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append(separator)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[java.lang.String]; rpt>
<net.sourceforge.pmd.cpd.SimpleRenderer; renderOn[java.lang.StringBuffer, net.sourceforge.pmd.cpd.Match]; void; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.SimpleRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<net.sourceforge.pmd.util.filter.Filters; toFilenameFilter[net.sourceforge.pmd.util.filter.Filter<java.io.File>]; java.io.FilenameFilter; net.sourceforge.pmd.cpd.AbstractLanguage; AbstractLanguage[net.sourceforge.pmd.cpd.Tokenizer, java.lang.String[]]; void; null; Filters>
<net.sourceforge.pmd.util.filter.Filters; getFileExtensionOrDirectoryFilter[java.lang.String[]]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; net.sourceforge.pmd.cpd.AbstractLanguage; AbstractLanguage[net.sourceforge.pmd.cpd.Tokenizer, java.lang.String[]]; void; null; Filters>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.AnyLanguage; AnyLanguage[java.lang.String]; void; null; System>
<net.sourceforge.pmd.cpd.TokenEntry; clearImages[]; void; net.sourceforge.pmd.cpd.CPD; go[]; void; null; TokenEntry>
<net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; net.sourceforge.pmd.cpd.CPD; go[]; void; null; matchAlgorithm>
<net.sourceforge.pmd.cpd.MatchAlgorithm; matches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; null; matchAlgorithm>
<net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; net.sourceforge.pmd.cpd.CPD; add[java.io.File]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; net.sourceforge.pmd.cpd.CPD; addAllInDirectory[java.lang.String]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; net.sourceforge.pmd.cpd.CPD; addRecursively[java.lang.String]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; net.sourceforge.pmd.cpd.CPD; add[java.util.List<java.io.File>]; void; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.CPD; add[java.util.List<java.io.File>]; void; null; files>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; null; (new File(dir))>
<net.sourceforge.pmd.cpd.CPD; add[java.util.List<java.io.File>]; void; net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; null; this>
<net.sourceforge.pmd.util.FileFinder; findFilesFrom[java.lang.String, java.io.FilenameFilter, boolean]; java.util.List<java.io.File>; net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; null; finder>
<net.sourceforge.pmd.cpd.Language; getFileFilter[]; java.io.FilenameFilter; net.sourceforge.pmd.cpd.CPD; addDirectory[java.lang.String, boolean]; void; null; language>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; file>
<java.io.File; length[]; long; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; file>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; current>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; System.err>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; file>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; current>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; file.getCanonicalPath()>
<java.io.File; getCanonicalPath[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; equals[java.lang.Object]; file>
<java.io.File; getCanonicalPath[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; new File(file.getAbsolutePath())>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; getCanonicalPath[]; file>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; System.err>
<net.sourceforge.pmd.cpd.CPDListener; addedFile[int, java.io.File]; void; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; listener>
<net.sourceforge.pmd.cpd.Tokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; language.getTokenizer()>
<net.sourceforge.pmd.cpd.Language; getTokenizer[]; net.sourceforge.pmd.cpd.Tokenizer; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; language>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.cpd.SourceCode]; net.sourceforge.pmd.cpd.SourceCode; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; source>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; sourceCode>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; "xml">
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; "csv">
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; "vs">
<java.lang.Class; newInstance[]; ; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; Class.forName(name)>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; newInstance[]; Class>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; findBooleanSwitch[java.lang.String[], java.lang.String]; boolean; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; findRequiredStringValue[java.lang.String[], java.lang.String]; java.lang.String; null; args[i]>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; findRequiredStringValue[java.lang.String[], java.lang.String]; java.lang.String; null; System.out>
<net.sourceforge.pmd.cpd.CPD; usage[]; void; net.sourceforge.pmd.cpd.CPD; findRequiredStringValue[java.lang.String[], java.lang.String]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; null; args[i]>
<net.sourceforge.pmd.cpd.CPD; usage[]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; findBooleanSwitch[java.lang.String[], java.lang.String]; boolean; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; System>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; Integer>
<net.sourceforge.pmd.cpd.CPD; findRequiredStringValue[java.lang.String[], java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; f>
<net.sourceforge.pmd.cpd.CPD; getRendererFromString[java.lang.String, java.lang.String]; net.sourceforge.pmd.cpd.Renderer; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; CPD>
<net.sourceforge.pmd.cpd.CPD; setEncoding[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; cpd>
<net.sourceforge.pmd.cpd.CPD; skipDuplicates[]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; cpd>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; args[position]>
<net.sourceforge.pmd.cpd.CPD; addRecursively[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; cpd>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.cpd.CPD; usage[]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.cpd.CPD; go[]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; cpd>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.cpd.Renderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; renderer>
<net.sourceforge.pmd.cpd.CPD; getMatches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; cpd>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.CPD; main[java.lang.String[]]; void; null; e>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPD; usage[]; void; null; System.out>
<net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sb>
<net.sourceforge.pmd.cpd.cppast.SimpleCharStream; ReInit[java.io.Reader]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; charStream>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sb>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; ReInit[net.sourceforge.pmd.cpd.cppast.SimpleCharStream]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; CPPParserTokenManager>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; setFileName[java.lang.String]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; CPPParserTokenManager>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; CPPParserTokenManager>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currToken.image>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<net.sourceforge.pmd.cpd.cppast.CPPParserTokenManager; getNextToken[]; net.sourceforge.pmd.cpd.cppast.Token; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; CPPParserTokenManager>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; System.err>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; err>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; System.err>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; sourceCode>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.CPPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String]; net.sourceforge.pmd.cpd.Language; null; this>
<net.sourceforge.pmd.cpd.LanguageFactory; languageAliases[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; this>
<net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; this>
<net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; this>
<net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; this>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; language>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.cpd.LanguageFactory; createLanguage[java.lang.String, java.util.Properties]; net.sourceforge.pmd.cpd.Language; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.LanguageFactory; languageAliases[java.lang.String]; java.lang.String; null; "c">
<java.lang.Class; newInstance[]; ; net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; null; this.getClass().getClassLoader().loadClass(PACKAGE + language + SUFFIX)>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; newInstance[]; this.getClass().getClassLoader()>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; loadClass[java.lang.String]; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.cpd.LanguageFactory>; net.sourceforge.pmd.cpd.LanguageFactory; dynamicLanguageImplementationLoad[java.lang.String]; net.sourceforge.pmd.cpd.Language; getClassLoader[]; this>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; null; (language.charAt(0) + "")>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; toUpperCase[]; language>
<java.lang.String; toLowerCase[]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; null; language.substring(1,language.length())>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; toLowerCase[]; language>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; null; language>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.LanguageFactory; languageConventionSyntax[java.lang.String]; java.lang.String; null; System>
<net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; net.sourceforge.pmd.cpd.SourceFileOrDirectoryFilter; accept[java.io.File, java.lang.String]; boolean; null; fileSelector>
<java.io.File; isDirectory[]; boolean; net.sourceforge.pmd.cpd.SourceFileOrDirectoryFilter; accept[java.io.File, java.lang.String]; boolean; null; new File(dir.getAbsolutePath() + fileSeparator + filename)>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.cpd.SourceFileOrDirectoryFilter; accept[java.io.File, java.lang.String]; boolean; isDirectory[]; dir>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.SourceFileOrDirectoryFilter; accept[java.io.File, java.lang.String]; boolean; null; filename>
<net.sourceforge.pmd.cpd.SourceCode; getCodeBuffer[]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; buffer>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<java.lang.String; length[]; int; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; currentToken.image>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; String>
<net.sourceforge.pmd.cpd.SourceCode; getFileName[]; java.lang.String; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokens>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenMgr>
<net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; tokenEntries>
<net.sourceforge.pmd.cpd.TokenEntry; getEOF[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.JSPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; TokenEntry>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.util.Map; size[]; int; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; i>
<java.util.Map; clear[]; void; net.sourceforge.pmd.cpd.TokenEntry; clearImages[]; void; null; Tokens>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.TokenEntry; compareTo[net.sourceforge.pmd.cpd.TokenEntry]; int; null; this>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.TokenEntry; compareTo[net.sourceforge.pmd.cpd.TokenEntry]; int; null; other>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; null; this.tokens>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.Tokens; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; null; tokens>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Tokens; get[int]; net.sourceforge.pmd.cpd.TokenEntry; null; tokens>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.Tokens; size[]; int; null; tokens>
<net.sourceforge.pmd.cpd.Tokens; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; this>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; mark>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; match>
<net.sourceforge.pmd.cpd.Tokens; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; this>
<net.sourceforge.pmd.cpd.TokenEntry; getIndex[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; mark>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; match>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; endTok>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.Tokens; getLineCount[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.Match]; int; null; mark>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; System>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.cpd.GridBagHelper; GridBagHelper[java.awt.Container, double[]]; void; null; container>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component, int]; void; net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component, int]; void; null; gridbag>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component, int]; void; null; container>
<net.sourceforge.pmd.cpd.GridBagHelper; add[java.awt.Component]; void; net.sourceforge.pmd.cpd.GridBagHelper; addLabel[java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append("lines")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append("tokens")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; matches>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append(match.getLineCount())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<net.sourceforge.pmd.cpd.Match; getLineCount[]; int; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append(match.getTokenCount())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<net.sourceforge.pmd.cpd.Match; getTokenCount[]; int; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append(match.getMarkCount())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; match>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; marks>
<java.util.Iterator; next[]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; marks>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt.append(mark.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; append[char]; rpt>
<net.sourceforge.pmd.cpd.TokenEntry; getBeginLine[]; int; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<net.sourceforge.pmd.cpd.TokenEntry; getTokenSrcID[]; java.lang.String; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; mark>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; marks>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; rpt>
<net.sourceforge.pmd.util.CollectionUtil; mapFrom[net.sourceforge.pmd.SourceType[], net.sourceforge.pmd.Language[]]; java.util.Map<net.sourceforge.pmd.SourceType,net.sourceforge.pmd.Language>; net.sourceforge.pmd.cpd.CSVRenderer; render[java.util.Iterator<net.sourceforge.pmd.cpd.Match>]; java.lang.String; null; CollectionUtil>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.Language; net.sourceforge.pmd.SourceTypeToRuleLanguageMapper; getMappedLanguage[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.Language; null; mapSourceTypeOnRuleLanguage>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; r>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; r>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; t>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; t>
<net.sourceforge.pmd.ast.ASTPrimitiveType; isBoolean[]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTPrimitiveType)t)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(2)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(2)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; returnStatement1.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement1>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; returnStatement2.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement2>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEqualWithUnaryExpression[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; returnStatement1.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement1.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement1>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; returnStatement2.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement2.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; returnStatement2>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; getDescendant[net.sourceforge.pmd.ast.SimpleNode, int]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; getDescendant[net.sourceforge.pmd.ast.SimpleNode, int]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(2)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEqualWithUnaryExpression[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SimplifyBooleanReturns; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; hasOneBlockStmt[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; getDescendant[net.sourceforge.pmd.ast.SimpleNode, int]; net.sourceforge.pmd.ast.SimpleNode; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; getDescendant[net.sourceforge.pmd.ast.SimpleNode, int]; net.sourceforge.pmd.ast.SimpleNode; null; n>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; getLastChild[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.SimplifyBooleanReturns; terminatesInBooleanLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; eachNodeHasOneChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; getLastChild[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.ast.SimpleNode; null; node>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; getLastChild[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.SimplifyBooleanReturns; getLastChild[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; getLastChild[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.ast.SimpleNode; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEqualWithUnaryExpression[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n1>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEqualWithUnaryExpression[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n2>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEqualWithUnaryExpression[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n1>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n2>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n1.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; equals[java.lang.Object]; n1>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n2>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n1.toString()>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; equals[java.lang.Object]; n1>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n2>
<net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n1>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isNodesEquals[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.SimplifyBooleanReturns; isSimpleReturn[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; closeTargets>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; st>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; closeTargets>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; st>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; types>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; st>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; types>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; st>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ref>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ref>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; types>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; clazz>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; var.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; var>
<java.util.List; add[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ids>
<net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; x.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; x>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; id>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; n>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>, java.util.List<net.sourceforge.pmd.ast.ASTTryStatement>, boolean]; void; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; top>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; t>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; id>
<net.sourceforge.pmd.ast.ASTTryStatement; hasFinally[]; boolean; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; t>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; t.getFinally()>
<net.sourceforge.pmd.ast.ASTTryStatement; getFinally[]; net.sourceforge.pmd.ast.ASTFinallyStatement; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; jjtGetChild[int]; t>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>, java.util.List<net.sourceforge.pmd.ast.ASTName>, boolean]; void; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; f>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; oName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; name>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; closeTargets>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; var>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; type>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; ref>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; clazz>
<net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression.jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetNumChildren[]; primaryExpression>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression.jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetChild[int]; primaryExpression>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetNumChildren[]; primaryExpression.jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetChild[int]; primaryExpression>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; primaryExpression.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetChild[int]; primaryExpression.jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetChild[int]; primaryExpression>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; Pattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators; checkUnaryDescendent[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; Pattern>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; p.matcher(img)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; matches[]; p>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Pattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Pattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Pattern>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.Character; isDigit[char]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Character>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; IPv4_PATTERM.matcher(image)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; matches[]; IPv4_PATTERM>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; IPv6_PATTERM.matcher(image)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; matches[]; IPv6_PATTERM>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; IPv4_MAPPED_IPv6_PATTERM.matcher(image)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; matches[]; IPv4_MAPPED_IPv6_PATTERM>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; InetAddress>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.SourceType; compareTo[net.sourceforge.pmd.SourceType]; int; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; ((RuleContext)data).getSourceType()>
<net.sourceforge.pmd.RuleContext; getSourceType[]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; compareTo[net.sourceforge.pmd.SourceType]; ((RuleContext)data)>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArrayDimsAndInits>]; net.sourceforge.pmd.ast.ASTArrayDimsAndInits; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArguments>]; net.sourceforge.pmd.ast.ASTArguments; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; args>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; literal.jjtGetParent().jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal.jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; literal>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; "0">
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; "1">
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; "10">
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.BigIntegerInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BrokenNullCheck; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalAndExpression>]; net.sourceforge.pmd.ast.ASTConditionalAndExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; expression>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalOrExpression>]; net.sourceforge.pmd.ast.ASTConditionalOrExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; expression>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; getFirstDirectChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTEqualityExpression>, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTEqualityExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; "==">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; equalityExpression>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; "!=">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; equalityExpression>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTNullLiteral>]; net.sourceforge.pmd.ast.ASTNullLiteral; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; equalityExpression>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; net.sourceforge.pmd.ast.ASTAssignmentOperator; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; conditionalExpression>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; findNullCompareExpression[net.sourceforge.pmd.ast.ASTEqualityExpression]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; conditionalExpression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; conditionalExpression>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTEqualityExpression>]; net.sourceforge.pmd.ast.ASTEqualityExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; nullLiteral>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; conditionalSubnode>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; conditionalSubnode>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; checkForViolations[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object, net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; this>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; nullCompareNames>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; expressionUsageNames>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; nullCompareNames>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; expressionUsageNames>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; nullCompareExpressionName>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; expressionUsageName>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; nullCompareVariable>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; nullCompareVariable>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; equals[java.lang.Object]; child>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; ((ASTName)child)>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; equals[java.lang.Object]; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; ((ASTLiteral)child)>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; equals[java.lang.Object]; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; ((ASTPrimarySuffix)child)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; name>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; equals[java.lang.Object]; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; ((ASTClassOrInterfaceType)child)>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; child>
<net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findNullCompareExpression[net.sourceforge.pmd.ast.ASTEqualityExpression]; net.sourceforge.pmd.ast.ASTPrimaryExpression; null; equalityExpression>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryPrefix>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findNullCompareExpression[net.sourceforge.pmd.ast.ASTEqualityExpression]; net.sourceforge.pmd.ast.ASTPrimaryExpression; null; primaryExpression>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findNullCompareExpression[net.sourceforge.pmd.ast.ASTEqualityExpression]; net.sourceforge.pmd.ast.ASTPrimaryExpression; null; primaryPrefix>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; getFirstDirectChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BrokenNullCheck; getFirstDirectChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; getFirstDirectChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; null; simpleNode.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleJavaNode>; net.sourceforge.pmd.rules.basic.BrokenNullCheck; getFirstDirectChildOfType[java.lang.Class<T>, net.sourceforge.pmd.ast.Node]; T; equals[java.lang.Object]; simpleNode>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; decl.getImportedName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; endsWith[java.lang.String]; decl>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; decl.getImportedName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; decl>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTArrayDimsAndInits.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArrayDimsAndInits>]; java.util.List<net.sourceforge.pmd.ast.ASTArrayDimsAndInits>; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; size[]; node>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getClass[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "Boolean.valueOf">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; ((ASTName)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "java.lang.Boolean.valueOf">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; ((ASTName)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getImage[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBooleanLiteral>]; net.sourceforge.pmd.ast.ASTBooleanLiteral; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; prefix>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; prefix>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "\"true\"">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; literal>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "\"false\"">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; literal>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getResultType()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; isVoid[]; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getClass[]; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().jjtGetParent().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getClass[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().jjtGetParent().jjtGetParent().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getClass[]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().jjtGetParent().jjtGetParent().jjtGetParent().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetParent().jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getClass[]; node.jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.basic.UnnecessaryReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; cu>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; tNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; reftypeNode>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; nameNode>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFormalParameter, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; tp>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CouplingBetweenObjects; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; nd>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; null; sNode>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CouplingBetweenObjects; handleASTTypeChildren[net.sourceforge.pmd.ast.SimpleNode]; void; null; nameNode>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; nameNode.getParentsOfType(ASTClassOrInterfaceDeclaration.class)>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; isEmpty[]; nameNode>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; nameNode.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; getEnclosingClassScope[]; nameNode>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; clzScope.getClassName()>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; equals[java.lang.Object]; clzScope>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; filterTypes[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this.typesFoundSoFar>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; typesFoundSoFar>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterTypes[java.lang.String]; boolean; null; variableType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterTypes[java.lang.String]; boolean; null; variableType>
<net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterTypes[java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; filterPrimitivesAndWrappers[java.lang.String]; boolean; null; variableType>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; getDeclaringType[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.AvoidNonConstructorMethodsWithClassName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getClass[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; ((ASTName)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.SourceType; compareTo[net.sourceforge.pmd.SourceType]; int; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; ((RuleContext)data).getSourceType()>
<net.sourceforge.pmd.RuleContext; getSourceType[]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; compareTo[net.sourceforge.pmd.SourceType]; ((RuleContext)data)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; prefixSet>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "Boolean.valueOf">
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; suffix>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; suffixSet>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "booleanValue">
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; scope>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; decls>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; entry>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; var>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; node>
<net.sourceforge.pmd.rules.optimization.AbstractOptimizationRule; assigned[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; entry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; var>
<net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; constructor>
<net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; insideLoop[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotThrow[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotReturn[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotThrow[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; null; node.jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotThrow[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotThrow[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotThrow[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotReturn[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; null; node.jjtGetParent().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotReturn[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotReturn[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; fourthParentNotReturn[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; insideLoop[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; insideLoop[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops; insideLoop[net.sourceforge.pmd.ast.ASTAllocationExpression]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; s>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; decls>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.rules.optimization.AbstractOptimizationRule; assigned[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.optimization.AbstractOptimizationRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.optimization.AbstractOptimizationRule; assigned[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; net.sourceforge.pmd.rules.optimization.AbstractOptimizationRule; assigned[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; isArray[]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; parent.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; parent>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; net.sourceforge.pmd.ast.ASTArgumentList; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; argList>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; statement>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; statement.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; statement.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getClass[]; statement>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; ((SimpleNode)statement.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; statement>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; astName>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; net.sourceforge.pmd.ast.ASTAssignmentOperator; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; statement>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; isCompound[]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; assignmentOperator>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; astName.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; astName>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; net.sourceforge.pmd.ast.ASTAssignmentOperator; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; statement>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; isCompound[]; boolean; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; assignmentOperator>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.optimization.UseStringBufferForStringAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isSyntacticallyPublic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isSyntacticallyAbstract[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isSyntacticallyPublic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isSyntacticallyStatic[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isSyntacticallyFinal[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.UnusedModifier; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; fieldOrMethod.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetParent[]; fieldOrMethod.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetParent[]; fieldOrMethod>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; ((ASTClassOrInterfaceDeclaration)parent)>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; CollectionUtil>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; sn.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; sn>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpression.jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; getClass[]; primaryExpression>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; parentClass>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; sn.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; substring[int]; sn>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; variableName>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; mapClasses.get(nodeType.getTypeImage())>
<java.util.Map; get[java.lang.Object]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; contains[java.lang.Object]; mapClasses>
<net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; nodeType>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; mapClasses.keySet()>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; contains[java.lang.Object]; mapClasses>
<net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; type>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; node.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; method>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; null; n>
<net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; containsAssert[net.sourceforge.pmd.ast.Node, boolean]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; expression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; expression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; expression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; pe>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; pe>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; pe>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; ((ASTName)pp.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; getImage[]; pp>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.JUnitTestsShouldContainAsserts; isAssertOrFailStatement[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; img>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; m>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; it>
<java.util.Iterator; next[]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; it>
<net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; isInInnerClassOrInterface[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; isInInnerClassOrInterface[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; md>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; isInInnerClassOrInterface[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; p>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; visit[net.sourceforge.pmd.ast.ASTArguments, java.lang.Object]; java.lang.Object; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; this>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; primary>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; primary.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; jjtGetNumChildren[]; primary>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; primary.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; jjtGetChild[int]; primary>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; primary.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; jjtGetChild[int]; primary>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; name>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; this>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; Class>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; check[java.lang.Object, net.sourceforge.pmd.ast.ASTArguments, int, java.lang.String]; void; null; Class>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit4Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isPublic[]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; method>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; method>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; method>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; method>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; this>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit4Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; null; this>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit4Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit4Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; method>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; method>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; method>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; ((ASTResultType)node)>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; method.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Method[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; startsWith[java.lang.String]; method>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; node>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExtendsList>]; net.sourceforge.pmd.ast.ASTExtendsList; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; cid>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; ((ASTClassOrInterfaceType)extendsList.jjtGetChild(0)).getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; endsWith[java.lang.String]; ((ASTClassOrInterfaceType)extendsList.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; getImage[]; extendsList>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; cid>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit3Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; className>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnit4Class[net.sourceforge.pmd.ast.ASTCompilationUnit]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMarkerAnnotation>]; java.util.List<net.sourceforge.pmd.ast.ASTMarkerAnnotation>; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; annotation>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; annotation>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "Test">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; name>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; annotation.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.junit.AbstractJUnitRule; doesNodeContainJUnitAnnotation[net.sourceforge.pmd.ast.SimpleNode]; boolean; equals[java.lang.Object]; annotation>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getImportedName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; indexOf[java.lang.String]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; methodDeclaration>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; methodDeclaration>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; startsWith[java.lang.String]; methodDeclaration>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; exceptionList>
<net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; constructorDeclaration>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; exceptionList>
<net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; null; exception>
<net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; null; exception.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; jjtGetParent[]; exception>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTType.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTType>]; java.util.List<net.sourceforge.pmd.ast.ASTType>; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; get[int]; node>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; get[int]; type>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Character; isLowerCase[char]; boolean; net.sourceforge.pmd.rules.ClassNamingConventions; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.ClassNamingConventions; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ClassNamingConventions; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; charAt[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.ClassNamingConventions; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.ClassNamingConventions; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; UselessOverridingMethod[]; void; null; exceptions>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; clz>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; null; type>
<not found; printStackTrace[]; not found; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; null; e>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; null; results>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTNameList>]; net.sourceforge.pmd.ast.ASTNameList; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodThrowingType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.util.List<java.lang.String>]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodThrowingType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.util.List<java.lang.String>]; boolean; null; thrownsExceptions>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodThrowingType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.util.List<java.lang.String>]; boolean; null; exceptedException>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodThrowingType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.util.List<java.lang.String>]; boolean; null; name>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.UselessOverridingMethod; hasArguments[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; hasArguments[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; parameters>
<not found; printStackTrace[]; not found; net.sourceforge.pmd.rules.UselessOverridingMethod; hasArguments[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; e>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; CLONE>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isPublic[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.UselessOverridingMethod; hasArguments[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodThrowingType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.util.List<java.lang.String>]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getBlock[]; net.sourceforge.pmd.ast.ASTBlock; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block.findChildrenOfType(ASTStatement.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTStatement>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; size[]; block>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; block>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; statement.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; statement>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; statement.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; statement>
<net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(primaryExpression,ASTPrimaryPrefix.class)>
<net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryPrefix>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; get[int]; this>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesSuperModifier[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryPrefix>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(node,ASTMethodDeclarator.class)>
<net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclarator>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclarator>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; get[int]; this>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryPrefix>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclarator>
<net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primarySuffixList>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primarySuffixList>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primarySuffix>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclarator>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; formalParameters>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; arguments>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; n>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; "Override">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTName)n.jjtGetChild(0).jjtGetChild(0))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getImage[]; n.jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; arguments>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; arguments>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentList>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentList.jjtGetChild(i)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; argumentList>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ExpressionChild>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentPrimaryExpression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentPrimaryPrefix>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentPrimaryPrefix>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; formalParameters>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; formalParameters>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(formalParameter,ASTVariableDeclaratorId.class)>
<net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; java.util.List<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; get[int]; this>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; argumentName>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; variableId>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; net.sourceforge.pmd.rules.UselessOverridingMethod; findFirstDegreeChildrenOfType[net.sourceforge.pmd.ast.SimpleNode, java.lang.Class<T>]; java.util.List<T>; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; equals[java.lang.Object]; node>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; results>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; ((ASTClassOrInterfaceDeclaration)node)>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; ((ASTClassOrInterfaceBodyDeclaration)node)>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; equals[java.lang.Object]; child>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; results>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; ASTAnnotation.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; child>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)child)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; "Test">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; annotationName>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; ASTMethodDeclaration.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; child>
<net.sourceforge.pmd.rules.junit.AbstractJUnitRule; isJUnitMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; found>
<net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTTryStatement>; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; catches>
<net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; cStatement>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)trySt.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; trySt>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; st>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; st>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; "fail">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; name>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; found>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTThrowStatement>]; net.sourceforge.pmd.ast.ASTThrowStatement; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; st>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; st>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; th>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; found>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; n>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.migration.UnnecessaryCast; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.migration.UnnecessaryCast; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; implClassNames>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; cit>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; cit>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; name.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; jjtGetParent[]; name.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; jjtGetParent[]; name>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; ASTCastExpression.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; getDeclaringType[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; cl>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; fieldDeclaringType>
<net.sourceforge.pmd.AbstractJavaRule; getDeclaringType[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; m>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<java.lang.String; toLowerCase[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AvoidFieldNameMatchingMethodName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Character; isUpperCase[char]; boolean; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; methodName>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; methodName>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.MethodNamingConventions; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; checked>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; endsWith[java.lang.String]; name>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingMethodScope[]; net.sourceforge.pmd.symboltable.MethodScope; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; getEnclosingMethodScope[]; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; meth.getName()>
<net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; meth>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodScope]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; checked>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; pp>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; pp.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; endsWith[java.lang.String]; pp>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingMethodScope[]; net.sourceforge.pmd.symboltable.MethodScope; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; pp.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getEnclosingMethodScope[]; pp>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; meth.getName()>
<net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; meth>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodScope]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; checked>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AssignmentInOperand; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; containsChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; boolean; net.sourceforge.pmd.rules.AssignmentInOperand; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AssignmentInOperand; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.rules.AssignmentInOperand; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; Class>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.rules.AssignmentInOperand; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; Class>
<net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Stack; push[java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; stack>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<java.util.Stack; pop[]; java.lang.Integer; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; stack>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTType>]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTType>]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; type>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; reftypeNode>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; ((ASTClassOrInterfaceType)classOrIntType)>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; clazzType>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; clazzType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; "Logger">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; classOrIntType>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.MoreThanOneLogger; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.rules.AvoidDeeplyNestedIfStmtsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.rules.AvoidDeeplyNestedIfStmtsRule; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AvoidDeeplyNestedIfStmtsRule; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; list>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; "">
<java.util.List; add[java.util.regex.Pattern]; boolean; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; patterns>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; Pattern>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; null; "">
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; null; pattern>
<java.util.regex.Matcher; find[]; boolean; net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; null; matcher>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; params>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; entry>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; entry>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; occ>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; decl>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; occ.getLocation().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; jjtGetNumChildren[]; occ.getLocation().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; jjtGetParent[]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; jjtGetParent[]; occ>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; decl>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; decl>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; net.sourceforge.pmd.rules.AvoidReassigningParameters; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isPrivate[]; decl>
<net.sourceforge.pmd.rules.UnusedPrivateFieldRule; isOK[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.rules.UnusedPrivateFieldRule; actuallyUsed[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceBody>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceBody; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; outerClass>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration>, java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration>, boolean]; void; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; classOrInterfaceBody>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; classOrInterfaceBodyDeclaration>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; classOrInterfaceBodyDeclaration>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; classOrInterfaceBodyDeclaration>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; decl.getImage()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; equals[java.lang.Object]; decl>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; primarySuffix>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryPrefix>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; classOrInterfaceBodyDeclaration>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; primaryPrefix>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; name.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; endsWith[java.lang.String]; name>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; usedInOuterClass[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; decl>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; actuallyUsed[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; nameOccurrence>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; isOK[java.lang.String]; boolean; null; image>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; isOK[java.lang.String]; boolean; null; image>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; isOK[java.lang.String]; boolean; null; image>
<net.sourceforge.pmd.rules.ExcessivePublicCount; getTallyOnAccessType[net.sourceforge.pmd.ast.AccessNode]; java.lang.Integer; net.sourceforge.pmd.rules.ExcessivePublicCount; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ExcessivePublicCount; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isFinal[]; boolean; net.sourceforge.pmd.rules.ExcessivePublicCount; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.ExcessivePublicCount; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.ExcessivePublicCount; getTallyOnAccessType[net.sourceforge.pmd.ast.AccessNode]; java.lang.Integer; net.sourceforge.pmd.rules.ExcessivePublicCount; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPublic[]; boolean; net.sourceforge.pmd.rules.ExcessivePublicCount; getTallyOnAccessType[net.sourceforge.pmd.ast.AccessNode]; java.lang.Integer; null; node>
<java.lang.Math; rint[double]; double; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; getComplexityAverage[]; int; null; Math>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[]; entryStack>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; entryStack>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTSwitchLabel; isDefault[]; boolean; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; sl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<net.sourceforge.pmd.ast.ASTConditionalExpression; isTernary[]; boolean; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; NpathComplexity>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; entryStack.peek()>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; getComplexityAverage[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classEntry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; getComplexityAverage[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classEntry>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; bumpDecisionPoints[int]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; classEntry>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclarator>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; String>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; getComplexityAverage[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; classEntry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.CyclomaticComplexity$Entry; getComplexityAverage[]; int; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; classEntry>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; classEntry.node>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; String>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.StringConcatenationRule; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ClassScope; getMethodDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ((ClassScope)node.getScope())>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getMethodDeclarations[]; node>
<net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; occs>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; mnd>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; methods>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterCount[]; int; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; mnd>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; sigs>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; unique>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; sigs>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; occ>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; occNode>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTInitializer>]; net.sourceforge.pmd.ast.ASTInitializer; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; occNode>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; occNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; mnd.getNode().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; equals[java.lang.Object]; mnd.getNode()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; calledFromOutsideItself[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; jjtGetParent[]; mnd>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; mnd>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; ((AccessNode)node.jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; isPrivate[]; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; privateAndNotExcluded[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; lastNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; lastNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; lastNode>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; args>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child2>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; ps>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; ((ASTPrimarySuffix)child)>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; st>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; packagesAndClasses>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; st>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; st>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; st>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; child>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getQualifierNames[]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; isSuper[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getReferenceNames[]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getName[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; show[]; void; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArguments>, java.util.List<net.sourceforge.pmd.ast.ASTArguments>]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; eci>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; l>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTArguments; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; l>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; aa>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; eci>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; initCI[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; getCalledConstructor[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; initCI[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; getASTExplicitConstructorInvocation[]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorInvocation; getASTExplicitConstructorInvocation[]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; getASTExplicitConstructorInvocation[]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; null; m_Ci>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation>, java.util.List<net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation>]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; initCI[]; void; null; m_Cd>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; initCI[]; void; null; expressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; initCI[]; void; null; expressions>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; n1>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; n2>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; n1>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; n2>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder]; int; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder]; int; null; o1>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder]; int; null; o2>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; compareNodes[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder]; int; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getASTConstructorDeclaration[]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder]; int; null; o1>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getASTConstructorDeclaration[]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolderComparator; compare[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder]; int; null; o2>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.NullEvalPackage; NullEvalPackage[]; void; null; Collections>
<java.util.Collections; emptyMap[]; java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.NullEvalPackage; NullEvalPackage[]; void; null; Collections>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.NullEvalPackage; NullEvalPackage[]; void; null; Collections>
<java.util.Collections; emptyMap[]; java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.NullEvalPackage; NullEvalPackage[]; void; null; Collections>
<java.util.List; get[int]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; null; evalPackages>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; null; evalPackages>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; putEvalPackage[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; void; null; evalPackages>
<java.util.List; remove[int]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; null; evalPackages>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; null; evalPackages>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; clearEvalPackages[]; void; null; evalPackages>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; putEvalPackage[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; putEvalPackage[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; keySet[]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; keySet[]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; h>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; h.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getImage[]; h>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; h.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getParameterCount[]; h>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methName>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getName[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getASTPrimaryExpression[]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getCalled[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; h>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; keySet[]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ch>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ch.getASTConstructorDeclaration()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getASTConstructorDeclaration[]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getParameterCount[]; ch>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorInvocation; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ci>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorInvocation; getASTExplicitConstructorInvocation[]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ci>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classMethodMap>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; entry>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; entry>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; calledMeths>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; calledMethsIter>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h>
<java.util.Iterator; next[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; calledMethsIter>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classMethodMap>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h3>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h3.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; getImage[]; h3>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h3.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; getParameterCount[]; h3>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; matchMethodName>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getName[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; setDangerous[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; setCalledMethod[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; classConstructorMap>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; entry>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; ch>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; entry>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; calledMeths>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; calledMethsIter>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; ch>
<java.util.Iterator; next[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; calledMethsIter>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getName[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; h>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; h.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; getImage[]; h>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; h.getASTMethodDeclarator()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; getASTMethodDeclarator[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; getParameterCount[]; h>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; methName>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; setDangerous[boolean]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; ch>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classConstructorMap>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getCalledConstructor[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; ch>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; ch>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorInvocation; getArgumentCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; calledC>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classConstructorMap.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; iterator[]; classConstructorMap>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; innerConstIter>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; ch>
<java.util.Iterator; next[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; innerConstIter>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; isDangerous[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h2>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; h2.getASTConstructorDeclaration()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getASTConstructorDeclaration[]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; getParameterCount[]; h2>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; setDangerous[boolean]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; ch>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; clearEvalPackages[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; putEvalPackage[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.AccessNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledMethods>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; addAll[java.util.Collection<? extends net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getASTExplicitConstructorInvocation[]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; ch>
<net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; isThis[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; eci>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledConstructors>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$ConstructorHolder; getCalledConstructor[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; ch>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; setDangerous[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; h>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodHolder; setCalledMethod[java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; h>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.SimpleNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, boolean]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.AccessNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNodeImpl[java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.AccessNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.SimpleNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNodeImpl[java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNode[net.sourceforge.pmd.ast.SimpleNode, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; this>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNodeImpl[java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; this>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNodeImpl[java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; calledMethods>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; jjtGetChild[int]; node>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; MethodInvocation>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; meth.getReferenceNames()>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getReferenceNames[]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; size[]; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; isSuper[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; meth>
<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod$MethodInvocation; getQualifierNames[]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; meth>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; packClass>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; name>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getNameFromPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; ((ASTName)nnode)>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.ImportWrapper; equals[java.lang.Object]; boolean; null; i>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ImportWrapper; equals[java.lang.Object]; boolean; null; i.getFullName()>
<net.sourceforge.pmd.rules.ImportWrapper; getFullName[]; java.lang.String; net.sourceforge.pmd.rules.ImportWrapper; equals[java.lang.Object]; boolean; equals[java.lang.Object]; i>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.ImportWrapper; equals[java.lang.Object]; boolean; null; i.getName()>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.ImportWrapper; equals[java.lang.Object]; boolean; equals[java.lang.Object]; i>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.rules.ImportWrapper; hashCode[]; int; null; fullname>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.rules.ImportWrapper; hashCode[]; int; null; name>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; decls>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; InefficientStringBuffering>
<net.sourceforge.pmd.symboltable.NameOccurrence; isPartOfQualifiedName[]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; s>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; s>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; sn>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; currentBlock>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; net.sourceforge.pmd.ast.ASTArgumentList; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; ((SimpleNode)parent.jjtGetChild(1))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; parent>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; list>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; this>
<net.sourceforge.pmd.ast.ASTLiteral; isStringLiteral[]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; literal>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkConstructor[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; net.sourceforge.pmd.ast.ASTAdditiveExpression; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; sn>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; additive>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; additive>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; additive>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; childNode>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; childNode.findChildrenOfType(ASTName.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; size[]; childNode>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTAdditiveExpression>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; expr.getParentsOfType(ASTArgumentList.class)>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; java.util.List<net.sourceforge.pmd.ast.ASTArgumentList>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; size[]; expr>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; blockParents>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; equals[java.lang.Object]; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; equals[java.lang.Object]; parentNode>
<net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; equals[java.lang.Object]; n>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; n>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; null; String>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; checkForViolation[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object, int]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; equals[java.lang.Object]; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAppendingStringLiteral[net.sourceforge.pmd.ast.SimpleNode]; boolean; equals[java.lang.Object]; n>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; node.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; nn>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isStringBuffer[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; null; nn>
<net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; net.sourceforge.pmd.rules.strings.UseIndexOfChar; isViolationArgument[net.sourceforge.pmd.ast.Node]; boolean; null; ((ASTLiteral)arg)>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.strings.UseIndexOfChar; isViolationArgument[net.sourceforge.pmd.ast.Node]; boolean; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; in>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; currentToken>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; in>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; in>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; in>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; result>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; currentToken>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; currentToken>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; in>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; currentToken>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; result>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; currentToken>
<java.util.Map; clear[]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; getStringProperty(SEPARATOR_PROPERTY)>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; charAt[int]; this>
<net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule$ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; p>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.io.LineNumberReader; readLine[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; reader>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; exceptions>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; ioe>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; reader>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; ioe>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; Integer>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences.get(0)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getBeginLine[]; occurrences>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; indexOf[int]; node>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; length[]; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; exceptions>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; substring[int, int]; node>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; length[]; node>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAnnotation>]; net.sourceforge.pmd.ast.ASTAnnotation; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.ASTLiteral]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.List; add[net.sourceforge.pmd.ast.ASTLiteral]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; add[java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; blockParents>
<java.util.Set; add[java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; blockParents>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; usage>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; usage>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; InefficientStringBuffering>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; InefficientStringBuffering>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; String>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; String>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; s>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; s>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; sn>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; String>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; String>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; block>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; ASTIfStatement.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; block.jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; getClass[]; block>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; ((SimpleNode)statement)>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; possibleStatement.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; equals[java.lang.Object]; possibleStatement>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; ((SimpleNode)possibleStatement)>
<java.util.Map; get[java.lang.Object]; java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; blocks>
<java.util.Map; put[net.sourceforge.pmd.ast.Node, java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>]; java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; blocks>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; thisBranch>
<java.util.Map; put[net.sourceforge.pmd.ast.Node, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; thisBranch>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; blocks>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.ast.Node,java.lang.Integer>>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; entry.getValue()>
<java.util.Map$Entry; getValue[]; java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; entrySet[]; entry>
<java.util.Map$Entry; getValue[]; java.lang.Integer; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; entry2>
<java.lang.Math; max[int, int]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; Math>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; value>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; net.sourceforge.pmd.ast.ASTAdditiveExpression; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; sn>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; additive>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; additive>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; childNode>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; literal>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; null; literal.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processAdditive[net.sourceforge.pmd.ast.SimpleNode]; int; length[]; literal>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isLiteral[java.lang.String]; boolean; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isLiteral[java.lang.String]; boolean; null; str>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; sn>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; xn>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; xn.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; equals[java.lang.Object]; xn.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; getClass[]; xn>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; ((SimpleNode)xn.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; getImage[]; xn>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isLiteral[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; str>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; str>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processNode[net.sourceforge.pmd.ast.SimpleNode]; int; null; str>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFieldDeclaration>]; net.sourceforge.pmd.ast.ASTFieldDeclaration; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameter>]; net.sourceforge.pmd.ast.ASTFormalParameter; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; net.sourceforge.pmd.ast.ASTAdditiveExpression; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; block>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMultiplicativeExpression>]; net.sourceforge.pmd.ast.ASTMultiplicativeExpression; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; block>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; block>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; literal>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; block>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; name>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; literal>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; literal.get(0)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; getImage[]; literal>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isLiteral[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; str>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFieldDeclaration>]; net.sourceforge.pmd.ast.ASTFieldDeclaration; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameter>]; net.sourceforge.pmd.ast.ASTFormalParameter; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; block>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; literal>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; literal.get(0)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; getImage[]; literal>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isLiteral[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; str>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n.findChildrenOfType(ASTAdditiveExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTAdditiveExpression>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; size[]; n>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; blockParents>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; ASTIfStatement.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; equals[java.lang.Object]; parentNode>
<net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; equals[java.lang.Object]; n>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getSwitchParent[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTExpression>; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArrayDimsAndInits>]; net.sourceforge.pmd.ast.ASTArrayDimsAndInits; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; net.sourceforge.pmd.ast.ASTAdditiveExpression; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; exp>
<net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; exp>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; methodCall>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; getArgumentCount[]; int; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; methodCall>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; exp>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; child>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; child>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; child>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; name>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; ((ASTPrimarySuffix)child)>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; image>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadPrefixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; int; null; image>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UnnecessaryCaseChange; getBadSuffixOrNull[net.sourceforge.pmd.ast.ASTPrimaryExpression, int]; java.lang.String; null; suffix>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; alreadySeen>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; decl.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; endsWith[java.lang.String]; decl>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; decl>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; alreadySeen>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; TypeHelper>
<java.util.Set; add[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; alreadySeen>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; decl.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; jjtGetParent[]; decl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "equals">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; achild>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; parent>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; literals>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "\"\"">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; ((SimpleNode)literals.get(0))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; getImage[]; literals>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "length">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; achild>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; literal.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; literal>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; literal>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; vnd.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; isFinal[]; vnd>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; vnd.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; isStatic[]; vnd>
<net.sourceforge.pmd.ast.ASTBlockStatement; isAllocation[]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; bs>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; nameNodes>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; iterator>
<java.util.Iterator; next[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; iterator>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; name.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; endsWith[java.lang.String]; name>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; iterator>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isAllocatedStringBuffer[net.sourceforge.pmd.ast.ASTAdditiveExpression]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; xParentIsStatementExpression[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; s>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; n.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; indexOf[java.lang.String]; n>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; net.sourceforge.pmd.ast.ASTArgumentList; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; s>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; argList>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; TypeHelper>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; xParentIsStatementExpression[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; xParentIsStatementExpression[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; curr>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAllocationExpression>]; net.sourceforge.pmd.ast.ASTAllocationExpression; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isAllocatedStringBuffer[net.sourceforge.pmd.ast.ASTAdditiveExpression]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isAllocatedStringBuffer[net.sourceforge.pmd.ast.ASTAdditiveExpression]; boolean; null; ao>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isAllocatedStringBuffer[net.sourceforge.pmd.ast.ASTAdditiveExpression]; boolean; null; TypeHelper>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isAllocatedStringBuffer[net.sourceforge.pmd.ast.ASTAdditiveExpression]; boolean; null; TypeHelper>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.strings.AppendCharacterWithChar; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTLiteral; isSingleCharacterStringLiteral[]; boolean; net.sourceforge.pmd.rules.strings.AppendCharacterWithChar; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.strings.InefficientStringBuffering; isInStringBufferOperation[net.sourceforge.pmd.ast.SimpleNode, int, java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AppendCharacterWithChar; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; InefficientStringBuffering>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.AppendCharacterWithChar; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occ>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occ.getNameForWhichThisIsAQualifier().getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; indexOf[java.lang.String]; occ.getNameForWhichThisIsAQualifier()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; getImage[]; occ>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occ.getLocation().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; jjtGetParent[]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; jjtGetParent[]; occ>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; pExpression>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; "length">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; ((SimpleNode)pExpression.jjtGetChild(2))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; getImage[]; pExpression>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InefficientEmptyStringCheck; appliesToClassName[java.lang.String]; boolean; null; "String">
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; ((ASTName)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "String.valueOf">
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; parent>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; "+">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; gp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; gp>
<net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; gp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; gp>
<net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; gp>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; parent>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; parent>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; child>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; child>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; name>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; name>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isPrimitiveType[]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; nd>
<net.sourceforge.pmd.ast.ASTLiteral; isStringLiteral[]; boolean; net.sourceforge.pmd.rules.strings.UselessStringValueOf; isPrimitive[net.sourceforge.pmd.ast.Node]; boolean; null; ((ASTLiteral)gc)>
<net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; TypeHelper>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; isArray[]; boolean; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; qualifier.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; indexOf[java.lang.String]; qualifier>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; qualifier>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; ASTName.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; qualifier.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getClass[]; qualifier>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; qualifier.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; qualifier>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.strings.StringToStringRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; (node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; primitiveWrappers>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; getImage[]; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; isCompound[]; boolean; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; ((ASTAssignmentOperator)(node.jjtGetChild(1)))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; isCompound[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node.jjtGetChild(2).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(2)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(2).jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(2).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node.jjtGetChild(2)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; lhs.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; lhs>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; lhs.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; lhs>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArrayDereference[]; boolean; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; ((ASTPrimarySuffix)n)>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; rhs.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; rhs>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; rhs.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; jjtGetParent[]; rhs>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; ((ASTPrimarySuffix)n)>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArrayDereference[]; boolean; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; ((ASTPrimarySuffix)n)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs.findChildrenOfType(ASTPrimarySuffix.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; size[]; lhs>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs.findChildrenOfType(ASTPrimarySuffix.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; size[]; rhs>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; ((SimpleNode)catchStmt.jjtGetChild(0).jjtGetChild(1))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; getImage[]; catchStmt.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; catchStmt>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTThrowStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTThrowStatement>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; catchStmt>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; throwStatement.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; jjtGetChild[int]; throwStatement>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; n.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; expr>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; expr.jjtGetChild(1).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; expr.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; getClass[]; expr>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.PreserveStackTrace; isThrownExceptionOfType[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.String]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; net.sourceforge.pmd.ast.ASTArgumentList; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; throwStatement>
<net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; throwStatement>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; child>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; child>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; target>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; ((ASTName)child).getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; ((ASTName)child)>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; vars>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; net.sourceforge.pmd.ast.ASTArgumentList; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; ((SimpleNode)decl.getNode().jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTArgumentList>]; decl.getNode()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; jjtGetParent[]; decl>
<net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; child.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; child>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; nodes>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; getImage[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTCatchStatement>]; net.sourceforge.pmd.ast.ASTCatchStatement; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; catchStmt>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; violations>
<net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; get[int]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; violations>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTCatchStatement>]; net.sourceforge.pmd.ast.ASTCatchStatement; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; catchStmt>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; null; catchStmt>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; null; nodes>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.design.PreserveStackTrace; isThrownExceptionOfType[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.String]; boolean; null; throwStatement>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; isThrownExceptionOfType[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.String]; boolean; null; results>
<not found; printStackTrace[]; not found; net.sourceforge.pmd.rules.design.PreserveStackTrace; isThrownExceptionOfType[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.String]; boolean; null; e>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; nameNodes>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>, java.util.List<net.sourceforge.pmd.ast.ASTName>]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; args>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; target>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; nameNode>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; ((SimpleJavaNode)node.jjtGetChild(i))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; node>
<java.lang.Class; isInstance[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; nodeClass>
<net.sourceforge.pmd.stat.DataPoint; setNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setScore[double]; void; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setMessage[java.lang.String]; void; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.design.ExcessiveNodeCountRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFieldDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTFieldDeclaration>; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isFinal[]; boolean; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; fd>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; fd>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; fd>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; clazz>
<net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; stats>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; stats>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; nodes>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; clazz>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; nodes>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; Integer>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.lang.Class; isInstance[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; nodeClass>
<net.sourceforge.pmd.stat.DataPoint; setNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setScore[double]; void; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.ast.SimpleNode; getEndLine[]; int; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.stat.DataPoint; setMessage[java.lang.String]; void; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.ExcessiveLengthRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isPrivate[]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; java.util.List<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; list>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; declaration>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; no>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressionParent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressionParent>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; no.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; no>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages.get(ix + 1)>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; getLocation[]; usages>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTStatementExpression>; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; secondUsageLocation>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; statementExpression>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; clazz>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressionParent>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTInitializer>]; net.sourceforge.pmd.ast.ASTInitializer; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; declaration>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>, java.util.List<net.sourceforge.pmd.ast.ASTAssignmentOperator>, boolean]; void; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; null; statement>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; null; assignments>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; null; "=">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; null; assignments.get(0)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTAssignmentOperator; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; getImage[]; assignments>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.stat.DataPoint; setNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setScore[double]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.rules.design.SwitchDensityRule$SwitchDensity; getDensity[]; double; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; density>
<net.sourceforge.pmd.stat.DataPoint; setMessage[java.lang.String]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.SwitchDensityRule$SwitchDensity; addStatements[int]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; ((SwitchDensity)data)>
<net.sourceforge.pmd.rules.design.SwitchDensityRule$SwitchDensity; getStatementCount[]; int; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; density>
<net.sourceforge.pmd.rules.design.SwitchDensityRule$SwitchDensity; addStatement[]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; ((SwitchDensity)data)>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; statement>
<net.sourceforge.pmd.rules.design.SwitchDensityRule$SwitchDensity; addSwitchLabel[]; void; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; ((SwitchDensity)data)>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.SwitchDensityRule; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; switchLabel>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; complexityMultipleOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NpathComplexity; complexityMultipleOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; complexityMultipleOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; simpleNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; complexitySumOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NpathComplexity; complexitySumOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; complexitySumOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; null; simpleNode>
<net.sourceforge.pmd.rules.design.NpathComplexity; complexityMultipleOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.DataPoint; setNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setScore[double]; void; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setMessage[java.lang.String]; void; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; complexityMultipleOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(i)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; getClass[]; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleJavaNode]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; element>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; ((SimpleJavaNode)node.getFirstChildOfType(ASTStatement.class))>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatement>]; net.sourceforge.pmd.ast.ASTStatement; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; node>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; ((SimpleJavaNode)node.getFirstChildOfType(ASTStatement.class))>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatement>]; net.sourceforge.pmd.ast.ASTStatement; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; node>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; ((SimpleJavaNode)node.getFirstChildOfType(ASTStatement.class))>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatement>]; net.sourceforge.pmd.ast.ASTStatement; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; node>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalAndExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTConditionalAndExpression>; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; expr>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalOrExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTConditionalOrExpression>; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; expr>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; andNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; orNodes>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; net.sourceforge.pmd.ast.ASTExpression; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; simpleNode>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.design.NpathComplexity; complexitySumOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.ASTConditionalExpression; isTernary[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.NpathComplexity; complexitySumOf[net.sourceforge.pmd.ast.SimpleJavaNode, int, java.lang.Object]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalAndExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTConditionalAndExpression>; net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; null; expr>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConditionalOrExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTConditionalOrExpression>; net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; null; expr>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; null; element>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; sumExpressionComplexity[net.sourceforge.pmd.ast.ASTExpression]; int; null; element>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; this>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; ((ASTMethodDeclaration)point.getNode())>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; getMethodName[]; point>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; String>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.rules.design.NpathComplexity; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; exprName>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; getVariableName[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PositionalIteratorRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getVariableName[java.lang.String]; java.lang.String; null; exprName>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getVariableName[java.lang.String]; java.lang.String; null; exprName>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; child>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; target>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; getVariableName[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; child>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; names>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; child>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; hasNameAsChild[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; ((ASTName)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; getImage[]; node>
<net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.PositionalIteratorRule; getName[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; node>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isStatic[]; decl>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isFinal[]; decl>
<net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>]; net.sourceforge.pmd.ast.ASTTryStatement; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>]; net.sourceforge.pmd.ast.ASTTryStatement; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>]; net.sourceforge.pmd.ast.ASTTryStatement; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTCatchStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTCatchStatement>; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; catchStmt>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; fp.findChildrenOfType(ASTType.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTType>]; java.util.List<net.sourceforge.pmd.ast.ASTType>; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; get[int]; fp>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; java.util.List<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; get[int]; type>
<net.sourceforge.pmd.ast.ASTThrowStatement; getFirstClassOrInterfaceTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; node.getFirstClassOrInterfaceTypeImage()>
<net.sourceforge.pmd.ast.ASTThrowStatement; getFirstClassOrInterfaceTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTReturnStatement>, java.util.List<net.sourceforge.pmd.ast.ASTReturnStatement>, boolean]; void; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; returnNodes>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTReturnStatement>; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; returnNodes>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.ast.ASTReturnStatement; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; i>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; i>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; hasName[net.sourceforge.pmd.ast.Node]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; hasName[net.sourceforge.pmd.ast.Node]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; null; n>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; null; n.jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; jjtGetNumChildren[]; n>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; isAllocation[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; hasName[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; hasName[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; c0>
<net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; c1>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; node.getParentsOfType(ASTInitializer.class)>
<net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTInitializer>]; java.util.List<net.sourceforge.pmd.ast.ASTInitializer>; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; isEmpty[]; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; c0>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; c1>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; n0>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; n1>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; n0>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; n1>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; nd0>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; nd1>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isReferenceType[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; nd0>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isReferenceType[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; nd1>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; inode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; inode>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.ConfusingTernary; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isUnaryNot[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isNotEquals[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isConditionalWithAllMatches[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isUnaryNot[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "!">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ConfusingTernary; isUnaryNot[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isNotEquals[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; "!=">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ConfusingTernary; isNotEquals[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; isConditionalWithAllMatches[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; isConditionalWithAllMatches[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isConditionalWithAllMatches[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; inode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; inode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; jnode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; jnode>
<net.sourceforge.pmd.rules.design.ConfusingTernary; isMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ConfusingTernary; isParenthesisAroundMatch[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; p>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; p>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; p>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; ((ASTFieldDeclaration)n)>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; ((ASTConstructorDeclaration)n)>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; m>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; m>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; m.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; m>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; m>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; res>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; c>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.UseSingleton; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.NullAssignmentRule; isBadTernary[net.sourceforge.pmd.ast.ASTConditionalExpression]; boolean; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.NullAssignmentRule; isBadTernary[net.sourceforge.pmd.ast.ASTConditionalExpression]; boolean; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.NullAssignmentRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; n>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; name>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; null; ((VariableNameDeclaration)name.getNameDeclaration()).getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; isFinal[]; ((VariableNameDeclaration)name.getNameDeclaration())>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.rules.design.NullAssignmentRule; isAssignmentToFinalField[net.sourceforge.pmd.ast.ASTStatementExpression]; boolean; getAccessNodeParent[]; name>
<net.sourceforge.pmd.ast.ASTConditionalExpression; isTernary[]; boolean; net.sourceforge.pmd.rules.design.NullAssignmentRule; isBadTernary[net.sourceforge.pmd.ast.ASTConditionalExpression]; boolean; null; n>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NullAssignmentRule; isBadTernary[net.sourceforge.pmd.ast.ASTConditionalExpression]; boolean; null; n>
<net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.String, boolean]; boolean; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; appliesToClassName[java.lang.String]; boolean; null; CollectionUtil>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occ>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occ.getLocation().getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; endsWith[java.lang.String]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; getImage[]; occ>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.design.UseCollectionIsEmpty; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; this>
<java.util.Map; clear[]; void; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; fieldDecls>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ast.ASTFieldDeclaration]; net.sourceforge.pmd.ast.ASTFieldDeclaration; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTIfStatement>; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTSynchronizedStatement>]; net.sourceforge.pmd.ast.ASTSynchronizedStatement; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ifStatement>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTNullLiteral>]; net.sourceforge.pmd.ast.ASTNullLiteral; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ifStatement>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ifStatement>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; Name>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; java.util.List<net.sourceforge.pmd.ast.ASTAssignmentOperator>; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ifStatement>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; assigmnents>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; assigmnents>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; oper.jjtGetParent().getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; oper.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getClass[]; oper>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; oper>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; expr.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; expr.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getClass[]; expr>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTPrimaryExpression)expr.jjtGetChild(0)).jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; ((ASTPrimaryExpression)expr.jjtGetChild(0)).jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getClass[]; ((ASTPrimaryExpression)expr.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; expr>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTPrimaryExpression)expr.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; expr>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesThisModifier[]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; expr>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; priSuf>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; astName>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.String, boolean]; boolean; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.design.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isStatic[]; field>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isPrivate[]; field>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isFinal[]; field>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isVolatile[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isVolatile[]; field>
<net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entry>
<net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; field>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; field.getAccessNodeParent().findChildrenOfType(ASTVariableInitializer.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableInitializer>]; java.util.List<net.sourceforge.pmd.ast.ASTVariableInitializer>; net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; isEmpty[]; field.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableInitializer>]; field>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; occ>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; occ>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; node>
<net.sourceforge.pmd.rules.design.ImmutableField; inLoopOrTry[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; node>
<net.sourceforge.pmd.rules.design.ImmutableField; inAnonymousInnerClass[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; this>
<java.util.Set; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; consSet>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; node>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; usages>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; consSet>
<java.util.Set; removeAll[java.util.Collection<?>]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; allConstructors>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; allConstructors>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTryStatement>]; net.sourceforge.pmd.ast.ASTTryStatement; net.sourceforge.pmd.rules.design.ImmutableField; inLoopOrTry[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTForStatement>]; net.sourceforge.pmd.ast.ASTForStatement; net.sourceforge.pmd.rules.design.ImmutableField; inLoopOrTry[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTWhileStatement>]; net.sourceforge.pmd.ast.ASTWhileStatement; net.sourceforge.pmd.rules.design.ImmutableField; inLoopOrTry[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTDoStatement>]; net.sourceforge.pmd.ast.ASTDoStatement; net.sourceforge.pmd.rules.design.ImmutableField; inLoopOrTry[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; net.sourceforge.pmd.rules.design.ImmutableField; inAnonymousInnerClass[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; inAnonymousInnerClass[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>, java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>, boolean]; void; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; node>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; targets>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; cit>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTSynchronizedStatement>]; net.sourceforge.pmd.ast.ASTSynchronizedStatement; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; n>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; method>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; arrayAsList[java.lang.String[]]; java.util.List<java.lang.String>; null; list>
<java.lang.Class; getSimpleName[]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.rules.design.GenericClassCounterRule>; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; getSimpleName[]; this>
<net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; RegexHelper>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; arrayAsList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; RegexHelper>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; arrayAsList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; this>
<java.lang.Integer; valueOf[java.lang.String]; java.lang.Integer; net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; null; Integer>
<net.sourceforge.pmd.RuleContext; setAttribute[java.lang.String, java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; start[net.sourceforge.pmd.RuleContext]; void; null; ctx>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; init[]; void; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; RegexHelper>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; simpleClassname>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; searchForAMatch[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; RegexHelper>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; classType>
<net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.RuleContext; getAttribute[java.lang.String]; java.lang.Object; net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; ctx>
<java.util.concurrent.atomic.AtomicLong; incrementAndGet[]; long; net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; total>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this.matches>
<net.sourceforge.pmd.ast.SimpleNode; findChildNodesWithXPath[java.lang.String]; java.util.List; net.sourceforge.pmd.rules.design.GenericClassCounterRule; searchForAMatch[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.GenericClassCounterRule; searchForAMatch[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; list>
<not found; printStackTrace[]; not found; net.sourceforge.pmd.rules.design.GenericClassCounterRule; searchForAMatch[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; e>
<net.sourceforge.pmd.RuleContext; getAttribute[java.lang.String]; java.lang.Object; net.sourceforge.pmd.rules.design.GenericClassCounterRule; end[net.sourceforge.pmd.RuleContext]; void; null; ctx>
<java.util.concurrent.atomic.AtomicLong; get[]; long; net.sourceforge.pmd.rules.design.GenericClassCounterRule; end[net.sourceforge.pmd.RuleContext]; void; null; total>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.design.GenericClassCounterRule; end[net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.RuleContext; removeAttribute[java.lang.String]; java.lang.Object; net.sourceforge.pmd.rules.design.GenericClassCounterRule; end[net.sourceforge.pmd.RuleContext]; void; null; ctx>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isVoid[]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; isAbstract[]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; meth>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTExpression>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; size[]; rtn>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTPrimaryExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; size[]; rtn>
<net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; isMethodCall[net.sourceforge.pmd.ast.ASTReturnStatement]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; name.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; name>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; entry>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; entry>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; occ>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; key.getNode()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; getBeginLine[]; key>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; var>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; var>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; var>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; isMethodCall[net.sourceforge.pmd.ast.ASTReturnStatement]; boolean; null; rtn>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; isMethodCall[net.sourceforge.pmd.ast.ASTReturnStatement]; boolean; null; element>
<net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.UnusedFormalParameterRule; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.rules.UnusedFormalParameterRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; ((ASTClassOrInterfaceDeclaration)parent)>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; getVariableDeclarations[]; node>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; vars>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; entry>
<net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; entry>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; nameDecl>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; nameDecl>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ.getLocation().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; jjtGetNumChildren[]; occ.getLocation().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; jjtGetParent[]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UnusedFormalParameterRule; actuallyUsed[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; jjtGetParent[]; occ>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; indexOf[int, int]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; s>
<java.lang.String; indexOf[int, int]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; s>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; s>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isOctal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isOctal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isOctal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; escapeSequence>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isDecimal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isDecimal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.SuspiciousOctalEscape; isDecimal[char]; boolean; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.SuspiciousOctalEscape; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; get[int]; ; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getDataFlowNode().getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; get[int]; node.getDataFlowNode()>
<net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getFlow[]; node>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; run[]; void; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; a>
<net.sourceforge.pmd.dfa.IDataFlowNode; getLine[]; int; net.sourceforge.pmd.rules.UselessAssignment.Usage; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; path>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; i>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; size[]; inode>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; get[int]; inode>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.rules.UselessAssignment.Usage; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isDefinition[]; boolean; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; accessTypeMatches[int]; boolean; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; u.node>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getAccessType[]; int; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.rules.UselessAssignment.Usage]; net.sourceforge.pmd.rules.UselessAssignment.Usage; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; this>
<not found; get[]; not found; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; nodeNameToXPaths>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; compilationUnit>
<not found; get[]; not found; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; nodeNameToXPaths>
<not found; selectNodes[]; not found; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; xpath>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; results>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; j>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; j>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; n>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; net.sourceforge.pmd.rules.XPathRule; getRuleChainVisits[]; java.util.List<java.lang.String>; null; this>
<net.sourceforge.pmd.jaxen.MatchesFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; MatchesFunction>
<net.sourceforge.pmd.jaxen.TypeOfFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; TypeOfFunction>
<net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<not found; push[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; pending>
<not found; getRootExpr[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; originalXPath>
<not found; isEmpty[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; pending>
<not found; pop[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; pending>
<not found; isAbsolute[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; locationPath>
<not found; getSteps[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; locationPath>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<not found; getAxis[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; ((AllNodeStep)step1)>
<not found; getAxis[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; ((NameStep)step2)>
<not found; createRelativeLocationPath[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; xpathFactory>
<not found; createAllNodeStep[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; xpathFactory>
<not found; iterator[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; step2.getPredicates()>
<not found; getPredicates[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; iterator[]; step2>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; i>
<not found; addPredicate[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; allNodeStep>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; i>
<not found; addStep[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; relativeLocationPath>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<not found; addStep[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; relativeLocationPath>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<not found; getText[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; relativeLocationPath>
<net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<not found; getLocalName[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; ((NameStep)step2)>
<not found; push[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; pending>
<not found; getLHS[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; unionExpr>
<not found; push[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; pending>
<not found; getRHS[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; unionExpr>
<not found; keySet[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; nodeNameToXPaths>
<net.sourceforge.pmd.CommonAbstractRule; addRuleChainVisit[java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<not found; clear[]; not found; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; nodeNameToXPaths>
<net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; this>
<not found; get[]; not found; net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; null; nodeNameToXPaths>
<not found; put[]; not found; net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; null; nodeNameToXPaths>
<not found; add[]; not found; net.sourceforge.pmd.rules.XPathRule; indexXPath[net.sourceforge.pmd.rules.XPath, java.lang.String]; void; null; xpaths>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; xpathQueryString>
<java.util.Hashtable; size[]; int; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; size[]; this>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; entrySet[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; "xpath">
<java.util.Map$Entry; getKey[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; e>
<not found; setVariableValue[]; not found; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; vc>
<java.util.Map$Entry; getKey[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; e>
<java.util.Map$Entry; getValue[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; e>
<not found; setVariableContext[]; not found; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; xpath>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.rules.XPathRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.XPathRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.rules.XPathRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; imports>
<net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ImportWrapper; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; wrapper>
<net.sourceforge.pmd.rules.ImportWrapper; getFullName[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; wrapper>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; Pattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; Pattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; Pattern>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<net.sourceforge.pmd.ast.ASTCompilationUnit; getComments[]; java.util.List<net.sourceforge.pmd.ast.Comment>; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; p>
<net.sourceforge.pmd.ast.Comment; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; comment>
<java.util.regex.Matcher; find[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; m>
<java.util.regex.Matcher; group[int]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; m>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isImportOnDemand[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; lastIndexOf[int]; importedType>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; substring[int]; importedType>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; imports>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; null; node>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; substring[int, int]; node>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; indexOf[int]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Arrays; asList[java.lang.Package[]]; java.util.List<java.lang.Package>; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<java.lang.Package; getPackage[java.lang.String]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportSun; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; Package>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackage[]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getPackage()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackage[]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; skipPackages>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackage[]; java.lang.Package; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; img>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.SourceFileScope; getPackageName[]; java.lang.String; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importDecl.getScope().getEnclosingSourceFileScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getPackageName[]; importDecl.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getEnclosingSourceFileScope[]; importDecl>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; packageName>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importDecl>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importDecl.getPackageName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; importDecl>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.imports.ImportFromSamePackageRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; thisSingleTypeImport>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; singleTypeFullName>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; singleTypeFullName>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; singleTypeFullName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; thisImportOnDemand.getName()>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; thisImportOnDemand>
<net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.ImportWrapper; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; thisSingleTypeImport>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; null; thisImportOnDemand.getName()>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; equals[java.lang.Object]; thisImportOnDemand>
<net.sourceforge.pmd.rules.ImportWrapper; getName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; null; thisImportOnDemand>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; classNameExists[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; null; node.getClassTypeResolver()>
<net.sourceforge.pmd.ast.ASTCompilationUnit; getClassTypeResolver[]; net.sourceforge.pmd.typeresolution.ClassTypeResolver; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; classNameExists[java.lang.String]; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; classNameExists[java.lang.String]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; null; node.getClassTypeResolver()>
<net.sourceforge.pmd.ast.ASTCompilationUnit; getClassTypeResolver[]; net.sourceforge.pmd.typeresolution.ClassTypeResolver; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; isDisambiguationImport[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String, java.lang.String]; boolean; classNameExists[java.lang.String]; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isImportOnDemand[]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getImportedNameNode()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getImportedNameNode()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedNameNode[]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getImage[]; node>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclarator>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclarator>; net.sourceforge.pmd.rules.MethodWithSameNameAsEnclosingClass; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.MethodWithSameNameAsEnclosingClass; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; m>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.MethodWithSameNameAsEnclosingClass; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.MethodWithSameNameAsEnclosingClass; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; this>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; String>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; ((ASTConstructorDeclaration)point.getNode())>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; getParameterCount[]; point>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; String>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.rules.codesize.NcssConstructorCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; simpleNode>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; treeSize>
<java.lang.Class; isInstance[java.lang.Object]; boolean; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this.nodeClass>
<net.sourceforge.pmd.stat.DataPoint; setNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setScore[double]; void; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.stat.DataPoint; setMessage[java.lang.String]; void; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; point>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; null; node>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; null; ((SimpleJavaNode)node.jjtGetChild(i))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; node>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; null; nodeCount>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTSynchronizedStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.AbstractNcssCount; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isNested[]; boolean; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; nodeCount>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.codesize.AbstractNcssCount; countNodeChildren[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.codesize.NcssTypeCount; visit[net.sourceforge.pmd.ast.ASTInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.codesize.NcssTypeCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; this>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.codesize.NcssTypeCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.codesize.NcssTypeCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; String>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.rules.codesize.NcssTypeCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; this>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; ((ASTMethodDeclaration)point.getNode())>
<net.sourceforge.pmd.stat.DataPoint; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; getMethodName[]; point>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; String>
<net.sourceforge.pmd.stat.DataPoint; getScore[]; double; net.sourceforge.pmd.rules.codesize.NcssMethodCount; makeViolations[net.sourceforge.pmd.RuleContext, java.util.Set<net.sourceforge.pmd.stat.DataPoint>]; void; null; point>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; indexOf[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; indexOf[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; indexOf[int]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.naming.AvoidDollarSigns; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTResultType>]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclarator>]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; decl.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; decl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; "int">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; t>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.naming.SuspiciousHashcodeMethodName; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; init[]; void; null; stringPattern>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; init[]; void; null; Pattern>
<net.sourceforge.pmd.rules.GenericLiteralCheckerRule; init[]; void; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.rules.regex.RegexHelper; isMatch[java.util.regex.Pattern, java.lang.String]; boolean; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; RegexHelper>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.GenericLiteralCheckerRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node.getVariableName()>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; getVariableName[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; equalsIgnoreCase[java.lang.String]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; cl>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AvoidFieldNameMatchingTypeName; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.symboltable.SourceFileScope; getPackageName[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; node.getScope().getEnclosingSourceFileScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getPackageName[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getEnclosingSourceFileScope[]; node>
<java.util.List; add[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addInstantiation[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; void; null; m_Instantiations>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData>; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; getInstantiationIterator[]; java.util.Iterator<net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData>; null; m_Instantiations>
<java.util.List; add[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addConstructor[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; void; null; m_PrivateConstructors>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; getPrivateConstructorIterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; m_PrivateConstructors>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addClassQualifyingName[java.lang.String]; void; null; m_ClassQualifyingNames>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; aa>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; getClass[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node>
<net.sourceforge.pmd.rules.AccessorClassGeneration; stripString[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; an>
<java.util.List; listIterator[int]; java.util.ListIterator<java.lang.String>; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; classQualifyingNames>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; classQualifyingNames>
<java.util.ListIterator; hasPrevious[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; li>
<java.util.ListIterator; previous[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; li>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; m_Name>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; m_Name>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; findName>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; addClassQualifyingName[java.lang.String]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; newClassData>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getClassName[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; formerClassData>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; addClassQualifyingName[java.lang.String]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; newClassData>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getClassName[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; formerClassData>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getClassID[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; setClassID[int]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; addConstructor[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentClassData()>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; addConstructor[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getClassQualifyingNamesList[]; java.util.List<java.lang.String>; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; getCurrentClassData()>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; getClassQualifyingNamesList[]; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration$AllocData; isArray[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; ad>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; addInstantiation[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; getCurrentClassData()>
<net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; addInstantiation[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getPrivateConstructorIterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; outerDataSet>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; constructors>
<java.util.Iterator; next[]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; constructors>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getInstantiationIterator[]; java.util.Iterator<net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData>; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; innerDataSet>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; allocations>
<java.util.Iterator; next[]; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; allocations>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; outerDataSet.getClassName()>
<net.sourceforge.pmd.rules.AccessorClassGeneration$ClassData; getClassName[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; equals[java.lang.Object]; outerDataSet>
<net.sourceforge.pmd.rules.AccessorClassGeneration$AllocData; getName[]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; ad>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameterCount[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; cd>
<net.sourceforge.pmd.rules.AccessorClassGeneration$AllocData; getArgumentCount[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; ad>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; this>
<net.sourceforge.pmd.rules.AccessorClassGeneration$AllocData; getASTAllocationExpression[]; net.sourceforge.pmd.ast.ASTAllocationExpression; net.sourceforge.pmd.rules.AccessorClassGeneration; processRule[java.lang.Object]; void; null; ad>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; null; classDataList>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; stripString[java.lang.String, java.lang.String]; java.lang.String; null; value>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; stripString[java.lang.String, java.lang.String]; java.lang.String; null; value>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.AccessorClassGeneration; stripString[java.lang.String, java.lang.String]; java.lang.String; null; value>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; stripString[java.lang.String, java.lang.String]; java.lang.String; null; remove>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(ix).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetChild(ix)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; getClass[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; cit>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(ix))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; hasImageEqualTo[java.lang.String]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; sn.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; sn>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameter>]; java.util.List<net.sourceforge.pmd.ast.ASTFormalParameter>; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; ((ASTFormalParameters)sn)>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; formalParam>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; param>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; "Object">
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; "java.lang.Object">
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; null; simpleNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; null; simpleNodes>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; null; simpleNodes.get(i)>
<java.util.List; get[int]; ; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; getImage[]; simpleNodes>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ClassScope; getMethodDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getMethodDeclarations[]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getEnclosingClassScope[]; node>
<java.util.Map; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getMethodNameDeclaratorNode[]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; d>
<net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; add[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getSetMethList>
<net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Arrays; sort[java.lang.Object[]]; void; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getVariableDeclarations[]; node>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars.get(decl)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isEmpty[]; vars>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isTransient[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isTransient[]; decl>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isStatic[]; decl>
<net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; trimIfPrefix[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; varName.substring(0,1)>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; toUpperCase[]; varName>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<java.util.Arrays; binarySearch[java.lang.Object[], java.lang.Object]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<java.util.Arrays; binarySearch[java.lang.Object[], java.lang.Object]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<java.util.Arrays; binarySearch[java.lang.Object[], java.lang.Object]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; trimIfPrefix[java.lang.String]; java.lang.String; null; img>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; trimIfPrefix[java.lang.String]; java.lang.String; null; img>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; trimIfPrefix[java.lang.String]; java.lang.String; null; prefixProperty>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; meth>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; methodName>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; methodName>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; methodName>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; ((ASTMethodDeclaration)meth.jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; getResultType[]; meth>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimitiveType>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimitiveType>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; ret>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; primitives>
<net.sourceforge.pmd.ast.ASTPrimitiveType; isBoolean[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; ((ASTPrimitiveType)primitives.get(0))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; isBoolean[]; primitives>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTVariableDeclaratorId.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; java.util.List<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; get[int]; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; declaration>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; no>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; declaration>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; location>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNameNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; appliesToClassName[java.lang.String]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getTypeImage[]; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; isTargetMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ.getLocation().jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; occ.getLocation().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; occ>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; ">">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; expr>
<net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; isCompareZero[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; isCompareZero[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; isCompareZero[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; equality.jjtGetChild(i)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; jjtGetChild[int]; equality>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; target>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; target>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; "0">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AbstractInefficientZeroCheck; checkComparison[net.sourceforge.pmd.ast.SimpleNode, int]; boolean; null; target>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.rules.AbstractPoorMethodCall; isNotedMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; occurrence>
<net.sourceforge.pmd.rules.AbstractPoorMethodCall; methodNames[]; java.lang.String[]; net.sourceforge.pmd.rules.AbstractPoorMethodCall; isNotedMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; this>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.rules.AbstractPoorMethodCall; isNotedMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; methodCall>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration().getTypeImage()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getTypeImage[]; node>
<net.sourceforge.pmd.rules.AbstractPoorMethodCall; targetTypename[]; java.lang.String; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.AbstractPoorMethodCall; isNotedMethod[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getNameForWhichThisIsAQualifier[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ.getLocation().jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; jjtGetParent[]; occ>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAdditiveExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTAdditiveExpression>; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; parent>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; additives>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; parent>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; literals>
<net.sourceforge.pmd.rules.AbstractPoorMethodCall; isViolationArgument[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; occ>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTResultType; isVoid[]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getResultType()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; isVoid[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getResultType()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; typeNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; typeNode>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTReturnStatement>, java.util.List<net.sourceforge.pmd.ast.ASTReturnStatement>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; rsl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTReturnStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; rsl>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; rs>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pel>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ape>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ape>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>, java.util.List<net.sourceforge.pmd.ast.ASTIfStatement>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTSynchronizedStatement>, java.util.List<net.sourceforge.pmd.ast.ASTSynchronizedStatement>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; is>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ssl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTSynchronizedStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ssl>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTIfStatement>, java.util.List<net.sourceforge.pmd.ast.ASTIfStatement>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ss>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>, java.util.List<net.sourceforge.pmd.ast.ASTStatementExpression>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; is2>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; sel>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; sel>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; se>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; se>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; se>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; se>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, boolean]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; is>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; this>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; apeRight>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; apeRight>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; apeRight>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; pp2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; pp2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; pp2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; lit>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; lit>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; null; ape>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; null; ape>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; null; ape>
<net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.DoubleCheckedLocking; matchName[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; boolean; null; name2>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; null; ((ASTName)pp.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.DoubleCheckedLocking; getNameFromPrimaryPrefix[net.sourceforge.pmd.ast.ASTPrimaryPrefix]; java.lang.String; getImage[]; pp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; decl.jjtGetChild(i)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; decl>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; isArray[]; node>
<net.sourceforge.pmd.rules.UnusedLocalVariableRule; actuallyUsed[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.rules.UnusedLocalVariableRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; getImage[]; node>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.rules.UnusedLocalVariableRule; actuallyUsed[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; occ>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.rules.UnusedLocalVariableRule; actuallyUsed[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; boolean; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; init[]; void; net.sourceforge.pmd.rules.VariableNamingConventions; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.VariableNamingConventions; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.VariableNamingConventions; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.VariableNamingConventions; init[]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; net.sourceforge.pmd.rules.VariableNamingConventions; init[]; void; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.rules.VariableNamingConventions; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; childNodeType>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; childNodeType>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; refType>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTClassOrInterfaceType)refType.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; getImage[]; refType>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; childNodeType>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTPrimitiveType)childNodeType.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; getImage[]; childNodeType>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varType>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; childNodeName>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; childNodeId>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isFinal[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isInterfaceMember[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isFinal[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; ((ASTClassOrInterfaceDeclaration)node.jjtGetParent().jjtGetParent().jjtGetParent())>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; isInterface[]; node.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; jjtGetParent[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTFieldDeclaration; isStatic[]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.VariableNamingConventions; normalizeStaticVariableName[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; normalizeMemberVariableName[java.lang.String]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; strippedVarName>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Character; isUpperCase[char]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; varName>
<net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.VariableNamingConventions; checkNames[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; normalizeMemberVariableName[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; stripPrefix[java.lang.String, java.lang.String[]]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; normalizeMemberVariableName[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; normalizeStaticVariableName[java.lang.String]; java.lang.String; null; this>
<net.sourceforge.pmd.rules.VariableNamingConventions; stripPrefix[java.lang.String, java.lang.String[]]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; normalizeStaticVariableName[java.lang.String]; java.lang.String; null; this>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; null; varName>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; null; varName>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; null; varName>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.VariableNamingConventions; stripSuffix[java.lang.String, java.lang.String[]]; java.lang.String; null; suffix[i]>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.rules.VariableNamingConventions; stripPrefix[java.lang.String, java.lang.String[]]; java.lang.String; null; varName>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.rules.VariableNamingConventions; stripPrefix[java.lang.String, java.lang.String[]]; java.lang.String; null; varName>
<java.lang.String; length[]; int; net.sourceforge.pmd.rules.VariableNamingConventions; stripPrefix[java.lang.String, java.lang.String[]]; java.lang.String; null; prefix[i]>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTResultType; returnsArray[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; method.getResultType()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getResultType[]; net.sourceforge.pmd.ast.ASTResultType; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; returnsArray[]; method>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTReturnStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTReturnStatement>; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; method>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTTypeDeclaration>]; net.sourceforge.pmd.ast.ASTTypeDeclaration; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; method>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getReturnedVariableName[net.sourceforge.pmd.ast.ASTReturnStatement]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isField[java.lang.String, net.sourceforge.pmd.ast.ASTTypeDeclaration]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTPrimarySuffix.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; java.util.List<net.sourceforge.pmd.ast.ASTPrimarySuffix>; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; size[]; ret>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTAllocationExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAllocationExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTAllocationExpression>; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; isEmpty[]; ret>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesThisModifier[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pp>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ps>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; isInterface[]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTConstructorDeclaration; getParameters[]; net.sourceforge.pmd.ast.ASTFormalParameters; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkAll[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter[], java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; void; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameters>]; net.sourceforge.pmd.ast.ASTFormalParameters; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkAll[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter[], java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; void; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkAll[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter[], java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; parameter>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; vid>
<net.sourceforge.pmd.ast.SimpleNode; containsChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTAssignmentOperator>]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; b>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTStatementExpression>]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; b>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getFirstNameImage[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; pe>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; pe>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; e.findChildrenOfType(ASTEqualityExpression.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTEqualityExpression>]; java.util.List<net.sourceforge.pmd.ast.ASTEqualityExpression>; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; size[]; e>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getFirstNameImage[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; foo>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; se>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArrayDereference[]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; foo>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; val>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; parameter>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; net.sourceforge.pmd.ast.ASTConstructorDeclaration; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; pe>
<net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFormalParameter>]; java.util.List<net.sourceforge.pmd.ast.ASTFormalParameter>; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; params>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l>
<net.sourceforge.pmd.ast.ASTFormalParameter; isArray[]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; fp>
<java.util.List; add[net.sourceforge.pmd.ast.ASTFormalParameter]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<java.util.List; toArray[net.sourceforge.pmd.ast.ASTFormalParameter[]]; net.sourceforge.pmd.ast.ASTFormalParameter[]; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTFieldDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTFieldDeclaration>; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isField[java.lang.String, net.sourceforge.pmd.ast.ASTTypeDeclaration]; boolean; null; typeDeclaration>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isField[java.lang.String, net.sourceforge.pmd.ast.ASTTypeDeclaration]; boolean; null; fd>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isField[java.lang.String, net.sourceforge.pmd.ast.ASTTypeDeclaration]; boolean; null; vid>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getReturnedVariableName[net.sourceforge.pmd.ast.ASTReturnStatement]; java.lang.String; null; ret>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getReturnedVariableName[net.sourceforge.pmd.ast.ASTReturnStatement]; java.lang.String; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimarySuffix>]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getReturnedVariableName[net.sourceforge.pmd.ast.ASTReturnStatement]; java.lang.String; null; ret>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getReturnedVariableName[net.sourceforge.pmd.ast.ASTReturnStatement]; java.lang.String; null; ps>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTLocalVariableDeclaration>; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableDeclaratorId>]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lvd>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; isLocalVariable[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; vid>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; net.sourceforge.pmd.ast.ASTName; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getFirstNameImage[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.rules.sunsecure.AbstractSunSecureRule; getFirstNameImage[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; name>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTCData, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTCData; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTCData, java.lang.Object]; visitor>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; expected.append(tokenImage[expectedTokenSequences[i][j]])>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; append[char]; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; expected.append(eol)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; append[java.lang.String]; expected>
<net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; expected>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; getMessage[]; java.lang.String; null; System>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.ParseException; add_escapes[java.lang.String]; java.lang.String; null; retval>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTElExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTElExpression; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspDocument; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTElExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpressionInAttribute, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspExpressionInAttribute; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; visitor>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; str>
<java.lang.Integer; toString[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; s>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; null; retval>
<net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<java.lang.String; valueOf[char]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; String>
<net.sourceforge.pmd.jsp.ast.TokenMgrError; addEscapes[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.TokenMgrError; LexicalError[boolean, int, int, int, java.lang.String, char]; java.lang.String; net.sourceforge.pmd.jsp.ast.TokenMgrError; TokenMgrError[boolean, int, int, int, java.lang.String, char, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTAttributeValue, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTAttributeValue; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTUnparsedText, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTUnparsedText; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTAttributeValue, java.lang.Object]; visitor>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; null; quote>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; null; quote>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; null; expression.substring(2,expression.length() - 1)>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; trim[]; expression>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; null; expression>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_2_1[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_2_2[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Prolog[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ContentElementPossiblyWithText[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTJspDirective; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirective[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute; setValue[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDirectiveAttribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspScriptlet[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpression[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspComment[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtn000>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Text[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedText[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpression[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; expressionContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; jjtn000>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CData[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTElement; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTElement; setEmpty[boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Content[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; tagName>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.ASTElement; setEmpty[boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Element[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTAttribute; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoDoubleQuotes[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; content>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; UnparsedTextNoSingleQuotes[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; content>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; t.image>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtn000>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; AttributeValue[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; ElExpressionInAttribute[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; ValueBindingInAttribute[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; QuoteIndependentAttributeValueContent[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; t.image.substring(3,t.image.length() - 2)>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; trim[]; t.image>
<java.lang.String; length[]; int; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; t.image>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; JspExpressionInAttribute[]; java.lang.String; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; content>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; jjtree>
<net.sourceforge.pmd.ast.SimpleNode; setImage[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; jjtn000>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; content.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; trim[]; content>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; CommentTag[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTDeclaration; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; Attribute[]; void; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; Declaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration; setName[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeDeclaration[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId; setUri[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId; setPublicId[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId; setUri[java.lang.String]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtn000>
<net.sourceforge.pmd.jsp.ast.JspParser; quoteContent[java.lang.String]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; net.sourceforge.pmd.jsp.ast.JspParser; DoctypeExternalId[]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3_1[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_2_1[int]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_save[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_2_1[int]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3_2[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_2_2[int]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_save[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_2_2[int]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_30[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_32[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_30[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_30[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_33[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_30[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_47[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_30[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_27[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_31[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_27[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_28[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_25[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_29[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_25[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_28[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_28[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_28[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_25[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_21[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_21[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_40[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_21[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_24[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_24[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_27[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_24[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_23[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_20[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_42[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_24[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_18[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_13[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_13[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_18[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_13[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_13[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_23[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_17[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_26[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_22[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_19[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_19[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_14[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_20[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_14[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_22[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_26[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_22[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_22[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_14[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_15[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3_2[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_16[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_12[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_17[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_12[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_22[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_16[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_48[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_48[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_45[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_12[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3_1[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_13[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3_1[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_47[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_44[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_46[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_43[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_41[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_39[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_35[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_42[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_38[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_33[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_43[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_41[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_44[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_41[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_45[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_41[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_38[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_34[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_39[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_34[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_41[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_37[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_40[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_36[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_23[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_23[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_23[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_36[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_32[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_37[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_32[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_31[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_34[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_31[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_31[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_35[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_31[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_46[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_la1_init_0[]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_46[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_la1_init_1[]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_46[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_la1_init_2[]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_3R_46[]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInit[net.sourceforge.pmd.jsp.ast.CharStream]; void; net.sourceforge.pmd.jsp.ast.JspParser; ReInit[net.sourceforge.pmd.jsp.ast.CharStream]; void; null; token_source>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ReInit[net.sourceforge.pmd.jsp.ast.CharStream]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; net.sourceforge.pmd.jsp.ast.JspParser; ReInit[net.sourceforge.pmd.jsp.ast.JspParserTokenManager]; void; null; jjtree>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; null; token_source>
<net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; net.sourceforge.pmd.jsp.ast.JspParser; jj_consume_token[int]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; null; token_source>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParser; jj_scan_token[int]; boolean; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; token_source>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; getToken[int]; net.sourceforge.pmd.jsp.ast.Token; null; token_source>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParser; jj_ntk[]; int; null; token_source>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; it>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; it>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_rescan_token[]; void; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3_1[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParser; jj_3_2[]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_rescan_token[]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_9[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_9[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_9[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_9[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_9[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_9[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_9[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_9[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_9[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_9[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_9[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_9[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_9[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_4[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_4[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_6[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_6[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_3[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_3[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_0[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_2[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_2[int, long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_2[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_2[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_7[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_7[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_7[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_7[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_7[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_7[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_7[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_7[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_7[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_7[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_13[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_13[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_13[int, long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_13[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_13[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_13[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_13[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_13[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_13[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_13[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_16[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_16[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_16[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_16[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_16[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_16[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_16[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_16[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_16[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_12[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_12[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_12[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa6_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa7_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_12[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa8_12[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_12[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_8[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_8[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_8[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_8[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_8[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_8[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_8[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_8[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_8[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_8[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_8[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_8[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_8[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_11[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_11[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_11[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_11[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_11[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_11[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_11[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_11[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_11[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_11[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_11[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_11[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_11[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_11[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_11[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_15[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_15[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_1[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_1[int, long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_1[int, long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_1[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_5[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_5[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_5[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_5[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_5[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa2_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa3_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa4_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_5[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa5_5[long, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_5[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_10[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_10[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_10[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_10[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_10[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_10[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_10[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_10[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_10[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_10[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_10[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_10[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_10[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_14[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_14[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_14[int, long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_14[long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_14[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_14[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_14[]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_14[long]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopStringLiteralDfa_14[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_14[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStopAtPos[int, int]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_14[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjStartNfa_14[int, long]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa1_14[long]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjAddStates[int, int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveNfa_14[int, int]; int; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; JspParserTokenManager[net.sourceforge.pmd.jsp.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInitRounds[]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInit[net.sourceforge.pmd.jsp.ast.CharStream]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInit[net.sourceforge.pmd.jsp.ast.CharStream]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInit[net.sourceforge.pmd.jsp.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; SwitchTo[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; ReInit[net.sourceforge.pmd.jsp.ast.CharStream, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; getBeginLine[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; getBeginColumn[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; getEndLine[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; getEndColumn[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; null; Token>
<net.sourceforge.pmd.jsp.ast.CharStream; BeginToken[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_0[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_1[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_2[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_3[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_4[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_5[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_6[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_7[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_8[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_9[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_10[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_11[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_12[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_13[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_14[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_15[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjMoveStringLiteralDfa0_16[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; backup[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjFillToken[]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.CharStream; getEndLine[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; getEndColumn[]; int; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; readChar[]; char; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; backup[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; backup[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.CharStream; GetImage[]; java.lang.String; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; getNextToken[]; net.sourceforge.pmd.jsp.ast.Token; null; input_stream>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddTwoStates[int, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAdd[int]; void; net.sourceforge.pmd.jsp.ast.JspParserTokenManager; jjCheckNAddStates[int, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTCommentTag, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTCommentTag; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspDeclaration; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTCommentTag, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.SimpleNode; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTJspDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.Node; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.SimpleNode; childrenAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; ((Node)children[i])>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTValueBinding, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTValueBinding; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTDeclaration, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTDeclaration; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTValueBinding, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpression, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspExpression; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTDeclaration, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspComment, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspComment; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpression, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspScriptlet, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspScriptlet; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTJspComment, java.lang.Object]; visitor>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; null; nodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; null; marks>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; rootNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JJTJspParserState; pushNode[net.sourceforge.pmd.jsp.ast.Node]; void; null; nodes>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; ((Integer)marks.remove(marks.size() - 1))>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; marks>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; peekNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; peekNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; this>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; ((Integer)marks.remove(marks.size() - 1))>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; marks>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; marks>
<net.sourceforge.pmd.ast.Node; jjtOpen[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; n>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; ((Integer)marks.remove(marks.size() - 1))>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; marks>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; this>
<net.sourceforge.pmd.ast.Node; jjtSetParent[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; c>
<net.sourceforge.pmd.ast.Node; jjtAddChild[net.sourceforge.pmd.ast.Node, int]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; n>
<net.sourceforge.pmd.ast.Node; jjtClose[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; n>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; pushNode[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; this>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; nodeArity[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; this>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; ((Integer)marks.remove(marks.size() - 1))>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; marks>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; this>
<net.sourceforge.pmd.ast.Node; jjtSetParent[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; c>
<net.sourceforge.pmd.ast.Node; jjtAddChild[net.sourceforge.pmd.ast.Node, int]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; n>
<net.sourceforge.pmd.ast.Node; jjtClose[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; n>
<net.sourceforge.pmd.jsp.ast.JJTJspParserState; pushNode[net.sourceforge.pmd.jsp.ast.Node]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; this>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; ((Integer)marks.remove(marks.size() - 1))>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; marks>
<net.sourceforge.pmd.jsp.ast.Token; newToken[int, java.lang.String]; net.sourceforge.pmd.jsp.ast.Token; net.sourceforge.pmd.jsp.ast.Token; newToken[int]; net.sourceforge.pmd.jsp.ast.Token; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspDeclarations; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTText, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTText; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; visitor>
<net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; jspParserVisitor>
<java.util.List; get[int]; net.sourceforge.pmd.ast.CompilationUnit; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<net.sourceforge.pmd.jsp.ast.SimpleNode; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; visit[net.sourceforge.pmd.Rule, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.RuleContext]; void; null; ((SimpleNode)node)>
<net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; visit[net.sourceforge.pmd.Rule, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.RuleContext]; void; null; ((XPathRule)rule)>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTElement; isHasNamespacePrefix[]; boolean; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTElement; getNamespacePrefix[]; java.lang.String; null; name>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ASTElement; getNamespacePrefix[]; java.lang.String; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTElement; getLocalName[]; java.lang.String; null; name>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ASTElement; getLocalName[]; java.lang.String; null; name>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTElement; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirective, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTJspDirective; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; visitor>
<net.sourceforge.pmd.jsp.ast.SimpleNode; childrenAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTContent, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirective, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspScriptlet, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspComment, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTText, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTUnparsedText, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTElExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTValueBinding, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTCData, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTAttributeValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpressionInAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTCommentTag, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParserVisitorAdapter; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTAttribute; isHasNamespacePrefix[]; boolean; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTAttribute; getNamespacePrefix[]; java.lang.String; null; name>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ASTAttribute; getNamespacePrefix[]; java.lang.String; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.jsp.ast.ASTAttribute; getLocalName[]; java.lang.String; null; name>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jsp.ast.ASTAttribute; getLocalName[]; java.lang.String; null; name>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTAttribute; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.jsp.ast.JspParserVisitor; visit[net.sourceforge.pmd.jsp.ast.ASTContent, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.ast.ASTContent; jjtAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; visitor>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; null; MessageFormat>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; MessageFormat>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.jsp.rules.AbstractJspRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; acus>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.jsp.ast.SimpleNode; childrenAccept[net.sourceforge.pmd.jsp.ast.JspParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTContent, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirective, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspScriptlet, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspComment, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTText, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTUnparsedText, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTElExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTValueBinding, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTCData, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTAttributeValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTJspExpressionInAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTCommentTag, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visit[net.sourceforge.pmd.jsp.ast.ASTDoctypeExternalId, java.lang.Object]; java.lang.Object; null; this>
<java.util.Set; clear[]; void; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; imports>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; "import">
<net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute; getName[]; java.lang.String; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute; getValue[]; java.lang.String; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; node>
<java.util.StringTokenizer; countTokens[]; int; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; st>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; imports>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; imports>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; asSet[java.lang.String[]]; java.util.Set<java.lang.String>; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode]; void; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; visit[net.sourceforge.pmd.jsp.ast.ASTAttribute, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleElement[net.sourceforge.pmd.jsp.ast.ASTElement]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jsp.rules.AbstractJspRule; addViolation[java.lang.Object, net.sourceforge.pmd.jsp.ast.SimpleNode]; void; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; visit[net.sourceforge.pmd.jsp.ast.ASTElement, java.lang.Object]; java.lang.Object; null; this>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleElement[net.sourceforge.pmd.jsp.ast.ASTElement]; boolean; null; STYLE_ELEMENT_NAMES>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleElement[net.sourceforge.pmd.jsp.ast.ASTElement]; boolean; null; elementNode.getName()>
<net.sourceforge.pmd.jsp.ast.ASTElement; getName[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleElement[net.sourceforge.pmd.jsp.ast.ASTElement]; boolean; toUpperCase[]; elementNode>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; STYLE_ATTRIBUTES>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; attributeNode.getName()>
<net.sourceforge.pmd.jsp.ast.ASTAttribute; getName[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; toUpperCase[]; attributeNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; attributeNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; attributeNode>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; ELEMENT_NAMES_THAT_CAN_HAVE_STYLE_ATTRIBUTES>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; parent.getName()>
<net.sourceforge.pmd.jsp.ast.ASTElement; getName[]; java.lang.String; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; toUpperCase[]; parent>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_6; createParser[java.io.InputStream]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_6; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.CommonAbstractRule; setPriority[int]; void; net.sourceforge.pmd.MockRule; MockRule[java.lang.String, java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; setName[java.lang.String]; void; net.sourceforge.pmd.MockRule; MockRule[java.lang.String, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; setDescription[java.lang.String]; void; net.sourceforge.pmd.MockRule; MockRule[java.lang.String, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; setMessage[java.lang.String]; void; net.sourceforge.pmd.MockRule; MockRule[java.lang.String, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; setRuleSetName[java.lang.String]; void; net.sourceforge.pmd.MockRule; MockRule[java.lang.String, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetReference; addExclude[java.lang.String]; void; null; this.excludes>
<java.util.logging.Logger; getLogger[java.lang.String]; java.util.logging.Logger; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; Logger>
<java.util.logging.Logger; getHandlers[]; java.util.logging.Handler[]; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; logger>
<java.util.logging.Logger; getLevel[]; java.util.logging.Level; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; logger>
<java.util.logging.Logger; setLevel[java.util.logging.Level]; void; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; logger>
<java.util.logging.Logger; removeHandler[java.util.logging.Handler]; void; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; logger>
<java.util.logging.Logger; addHandler[java.util.logging.Handler]; void; net.sourceforge.pmd.ScopedLogHandlersManager; ScopedLogHandlersManager[java.util.logging.Level, java.util.logging.Handler[]]; void; null; logger>
<java.util.logging.Logger; removeHandler[java.util.logging.Handler]; void; net.sourceforge.pmd.ScopedLogHandlersManager; close[]; void; null; logger>
<java.util.logging.Logger; addHandler[java.util.logging.Handler]; void; net.sourceforge.pmd.ScopedLogHandlersManager; close[]; void; null; logger>
<java.util.logging.Logger; setLevel[java.util.logging.Level]; void; net.sourceforge.pmd.ScopedLogHandlersManager; close[]; void; null; logger>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.SourceType; getSourceTypeForId[java.lang.String]; net.sourceforge.pmd.SourceType; null; sourceType.getId()>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; getSourceTypeForId[java.lang.String]; net.sourceforge.pmd.SourceType; equalsIgnoreCase[java.lang.String]; sourceType>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; null; ((SourceType)other).getId()>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; equals[java.lang.Object]; ((SourceType)other)>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; null; this>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.SourceType; hashCode[]; int; null; getId()>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; hashCode[]; int; hashCode[]; this>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.SourceType; compareTo[net.sourceforge.pmd.SourceType]; int; null; getId()>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; compareTo[net.sourceforge.pmd.SourceType]; int; compareTo[java.lang.String]; this>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; compareTo[net.sourceforge.pmd.SourceType]; int; null; other>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.SourceType; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.JavaParser; setJDK13[]; void; net.sourceforge.pmd.TargetJDK1_3; createParser[java.io.InputStream]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.ast.JavaParser; setJDK13[]; void; net.sourceforge.pmd.TargetJDK1_3; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.util.Benchmark.Result; compareTo[net.sourceforge.pmd.util.Benchmark.Result]; int; null; rule.getName()>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark.Result; compareTo[net.sourceforge.pmd.util.Benchmark.Result]; int; compareTo[java.lang.String]; rule>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark.Result; compareTo[net.sourceforge.pmd.util.Benchmark.Result]; int; null; other.rule>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; findBooleanSwitch[java.lang.String[], java.lang.String]; boolean; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; null; args[i]>
<net.sourceforge.pmd.util.Benchmark; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.FileFinder; findFilesFrom[java.lang.String, java.io.FilenameFilter, boolean]; java.util.List<java.io.File>; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; new FileFinder()>
<net.sourceforge.pmd.util.Benchmark; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; targetjdk>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; targetjdk>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; targetjdk>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; targetjdk>
<net.sourceforge.pmd.util.Benchmark; findBooleanSwitch[java.lang.String[], java.lang.String]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.Benchmark; findBooleanSwitch[java.lang.String[], java.lang.String]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.SourceType; getId[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; jdk>
<net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.Benchmark; findOptionalStringValue[java.lang.String[], java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; ruleset>
<net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; factory>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; getRuleSets[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; mapper>
<net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; factory>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; i>
<net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; this>
<java.util.Iterator; next[]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; i>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; result.rule>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; out>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; out>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; System>
<net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; t>
<net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; t>
<net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; t>
<net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; t>
<net.sourceforge.pmd.TargetJDKVersion; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; jdk>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; parser>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; parseStress[net.sourceforge.pmd.SourceType, java.util.List<java.io.File>]; void; null; System.out>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; ruleSet>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; System.out>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; rule>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; working>
<net.sourceforge.pmd.PMD; setJavaVersion[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; p>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; System>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; ctx>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; file>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; p>
<java.io.InputStreamReader; close[]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; reader>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; System>
<java.util.Set; add[net.sourceforge.pmd.util.Benchmark.Result]; boolean; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; results>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; System.out>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; rule>
<net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; null; this>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.util.Benchmark.BenchmarkResult; net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; null; nameToBenchmarkResult>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; net.sourceforge.pmd.util.Benchmark.BenchmarkResult; net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; null; nameToBenchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; update[long, long]; void; net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; null; benchmarkResult>
<java.util.Map; clear[]; void; net.sourceforge.pmd.util.Benchmark; reset[]; void; null; nameToBenchmarkResult>
<java.util.Map; values[]; java.util.Collection<net.sourceforge.pmd.util.Benchmark.BenchmarkResult>; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; nameToBenchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getType[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getTime[]; long; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getType[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getCount[]; long; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getType[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getTime[]; long; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.Collections; sort[java.util.List<net.sourceforge.pmd.util.Benchmark.BenchmarkResult>]; void; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; Collections>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getName[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; StringUtil>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; MessageFormat>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getTime[]; long; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getType[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; StringUtil>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; MessageFormat>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getCount[]; long; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<net.sourceforge.pmd.util.Benchmark$BenchmarkResult; getType[]; int; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; benchmarkResult>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf2>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; buf>
<java.util.logging.LogRecord; getLevel[]; java.util.logging.Level; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; null; logRecord>
<not found; log[]; not found; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; getLevel[]; antTask>
<java.util.logging.Formatter; format[java.util.logging.LogRecord]; java.lang.String; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; null; FORMATTER>
<java.util.logging.LogRecord; getThrown[]; java.lang.Throwable; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; null; logRecord>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; null; logRecord.getThrown()>
<java.util.logging.LogRecord; getThrown[]; java.lang.Throwable; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; printStackTrace[java.io.PrintWriter]; logRecord>
<not found; log[]; not found; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; getThrown[]; antTask>
<java.io.StringWriter; toString[]; java.lang.String; net.sourceforge.pmd.util.AntLogHandler; publish[java.util.logging.LogRecord]; void; null; stringWriter>
<java.util.logging.Logger; getLogger[java.lang.String]; java.util.logging.Logger; net.sourceforge.pmd.util.AntLogHandler; flush[]; void; null; Logger>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.util.AntLogHandler; flush[]; void; null; ClasspathClassLoader.class>
<net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; net.sourceforge.pmd.util.ClasspathClassLoader; ClasspathClassLoader[java.lang.String, java.lang.ClassLoader]; void; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; classpath>
<net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; this>
<net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; this>
<java.util.List; toArray[java.net.URL[]]; java.net.URL[]; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; urls>
<java.util.List; size[]; int; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; urls>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; toker>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; toker>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; LOG>
<java.util.List; add[java.net.URL]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; urls>
<net.sourceforge.pmd.util.ClasspathClassLoader; createURLFromPath[java.lang.String]; java.net.URL; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; this>
<java.net.URL; openStream[]; java.io.InputStream; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; fileURL>
<java.io.BufferedReader; readLine[]; java.lang.String; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; in>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; LOG>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; line>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; line>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; LOG>
<java.util.List; add[java.net.URL]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; urls>
<net.sourceforge.pmd.util.ClasspathClassLoader; createURLFromPath[java.lang.String]; java.net.URL; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; this>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; in>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; in>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; LOG>
<java.net.URI; toURL[]; java.net.URL; net.sourceforge.pmd.util.ClasspathClassLoader; createURLFromPath[java.lang.String]; java.net.URL; null; file.getAbsoluteFile().toURI()>
<java.io.File; toURI[]; java.net.URI; net.sourceforge.pmd.util.ClasspathClassLoader; createURLFromPath[java.lang.String]; java.net.URL; toURL[]; file.getAbsoluteFile()>
<java.io.File; getAbsoluteFile[]; java.io.File; net.sourceforge.pmd.util.ClasspathClassLoader; createURLFromPath[java.lang.String]; java.net.URL; toURI[]; file>
<net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.CollectionUtil; getCollectionTypeFor[java.lang.String]; java.lang.Class; null; collectionClassesByNames>
<net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.CollectionUtil; getCollectionTypeFor[java.lang.String]; java.lang.Class; null; collectionInterfacesByNames>
<net.sourceforge.pmd.util.TypeMap; contains[java.lang.String]; boolean; net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.String, boolean]; boolean; null; collectionClassesByNames>
<net.sourceforge.pmd.util.TypeMap; contains[java.lang.String]; boolean; net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.String, boolean]; boolean; null; collectionInterfacesByNames>
<net.sourceforge.pmd.util.TypeMap; contains[java.lang.Class]; boolean; net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.Class, boolean]; boolean; null; collectionClassesByNames>
<net.sourceforge.pmd.util.TypeMap; contains[java.lang.Class]; boolean; net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.Class, boolean]; boolean; null; collectionInterfacesByNames>
<java.util.Set; add[T]; boolean; net.sourceforge.pmd.util.CollectionUtil; asSet[T[]]; java.util.Set<T>; null; set>
<java.util.Map; put[K, V]; V; net.sourceforge.pmd.util.CollectionUtil; mapFrom[K[], V[]]; java.util.Map<K,V>; null; map>
<java.util.Map; size[]; int; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; source>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<K,V>>; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; source>
<java.util.Map; put[V, K]; K; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; map>
<java.util.Map$Entry; getValue[]; V; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; entry>
<java.util.Map$Entry; getKey[]; K; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; entry>
<net.sourceforge.pmd.util.CollectionUtil; valuesAreTransitivelyEqual[java.lang.Object[], java.lang.Object[]]; boolean; net.sourceforge.pmd.util.CollectionUtil; arraysAreEqual[java.lang.Object, java.lang.Object]; boolean; null; this>
<net.sourceforge.pmd.util.CollectionUtil; areEqual[java.lang.Object, java.lang.Object]; boolean; net.sourceforge.pmd.util.CollectionUtil; valuesAreTransitivelyEqual[java.lang.Object[], java.lang.Object[]]; boolean; null; this>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; net.sourceforge.pmd.util.CollectionUtil; areEqual[java.lang.Object, java.lang.Object]; boolean; null; value.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.util.CollectionUtil; areEqual[java.lang.Object, java.lang.Object]; boolean; getComponentType[]; value>
<net.sourceforge.pmd.util.CollectionUtil; arraysAreEqual[java.lang.Object, java.lang.Object]; boolean; net.sourceforge.pmd.util.CollectionUtil; areEqual[java.lang.Object, java.lang.Object]; boolean; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.CollectionUtil; areEqual[java.lang.Object, java.lang.Object]; boolean; null; value>
<java.util.logging.Formatter; formatMessage[java.util.logging.LogRecord]; java.lang.String; net.sourceforge.pmd.util.PmdLogFormatter; format[java.util.logging.LogRecord]; java.lang.String; null; this>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandlerBroker; getVisitorsFactoryForSourceType[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; SourceTypeHandlerBroker>
<net.sourceforge.pmd.util.designer.Designer; getSourceType[]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; this>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getParser[]; net.sourceforge.pmd.parsers.Parser; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; handler>
<net.sourceforge.pmd.parsers.Parser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; parser>
<net.sourceforge.pmd.parsers.Parser; parse[java.io.Reader]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; setExcludeMarker[java.lang.String]; parser>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; codeEditorPane>
<net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; start[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; handler.getSymbolFacade()>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getSymbolFacade[]; net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; start[java.lang.Object]; handler>
<net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; start[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; null; handler.getTypeResolutionFacade(null)>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getTypeResolutionFacade[java.lang.ClassLoader]; net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; start[java.lang.Object]; handler>
<net.sourceforge.pmd.util.designer.Designer; selectedSourceTypeIndex[]; int; net.sourceforge.pmd.util.designer.Designer; getSourceType[]; net.sourceforge.pmd.SourceType; null; this>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.util.designer.Designer; selectedSourceTypeIndex[]; int; null; sourceTypeMenuItems[i]>
<net.sourceforge.pmd.util.designer.Designer$ExceptionNode; createKids[]; void; net.sourceforge.pmd.util.designer.Designer.ExceptionNode; ExceptionNode[java.lang.Object]; void; null; this>
<net.sourceforge.pmd.ast.ParseException; getMessage[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ExceptionNode; createKids[]; void; null; ((ParseException)item)>
<net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; net.sourceforge.pmd.util.designer.Designer.ExceptionNode; createKids[]; void; null; StringUtil>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ExceptionNode; label[]; java.lang.String; null; item>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; ASTTreeNode[net.sourceforge.pmd.ast.Node]; void; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getChildCount[]; int; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; isLeaf[]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; null; ((SimpleNode)node)>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; getChildCount[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; children[]; java.util.Enumeration; null; this>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; getChildAt[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; children[]; java.util.Enumeration; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getChildAt[int]; javax.swing.tree.TreeNode; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getChildAt[int]; javax.swing.tree.TreeNode; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getLabel[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; sn>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getLabel[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; sn>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; sn>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; node>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; sn>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; label[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; sn>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; sn>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; "">
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isAbstract[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStatic[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isNative[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isPrivate[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isSynchronized[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isTransient[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isVolatile[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isStrictfp[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTTreeNode; getToolTipText[]; java.lang.String; null; accessNode>
<javax.swing.tree.DefaultTreeCellRenderer; setLeafIcon[javax.swing.Icon]; void; net.sourceforge.pmd.util.designer.Designer; createNoImageTreeCellRenderer[]; javax.swing.tree.TreeCellRenderer; null; treeCellRenderer>
<javax.swing.tree.DefaultTreeCellRenderer; setOpenIcon[javax.swing.Icon]; void; net.sourceforge.pmd.util.designer.Designer; createNoImageTreeCellRenderer[]; javax.swing.tree.TreeCellRenderer; null; treeCellRenderer>
<javax.swing.tree.DefaultTreeCellRenderer; setClosedIcon[javax.swing.Icon]; void; net.sourceforge.pmd.util.designer.Designer; createNoImageTreeCellRenderer[]; javax.swing.tree.TreeCellRenderer; null; treeCellRenderer>
<javax.swing.JComponent; setToolTipText[java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer.TreeWidget; TreeWidget[java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; label[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.TreeWidget; convertValueToText[java.lang.Object, boolean, boolean, boolean, int, boolean]; java.lang.String; null; ((ASTTreeNode)value)>
<net.sourceforge.pmd.util.designer.Designer$ExceptionNode; label[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.TreeWidget; convertValueToText[java.lang.Object, boolean, boolean, boolean, int, boolean]; java.lang.String; null; ((ExceptionNode)value)>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.TreeWidget; convertValueToText[java.lang.Object, boolean, boolean, boolean, int, boolean]; java.lang.String; null; value>
<javax.swing.JTree; getRowForLocation[int, int]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; this>
<java.awt.event.MouseEvent; getX[]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; e>
<java.awt.event.MouseEvent; getY[]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; e>
<javax.swing.JTree; getPathForLocation[int, int]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; this>
<java.awt.event.MouseEvent; getX[]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; e>
<java.awt.event.MouseEvent; getY[]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; e>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; curPath>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; getToolTipText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; null; ((ASTTreeNode)curPath.getLastPathComponent())>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.TreeWidget; getToolTipText[java.awt.event.MouseEvent]; java.lang.String; getToolTipText[]; curPath>
<javax.swing.tree.TreeModel; getRoot[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[boolean]; void; null; getModel()>
<javax.swing.JTree; getModel[]; javax.swing.tree.TreeModel; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[boolean]; void; getRoot[]; this>
<net.sourceforge.pmd.util.designer.Designer$TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[boolean]; void; null; this>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; parent>
<javax.swing.tree.TreeNode; getChildCount[]; int; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; node>
<javax.swing.tree.TreeNode; children[]; java.util.Enumeration; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; node>
<java.util.Enumeration; hasMoreElements[]; boolean; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; e>
<javax.swing.tree.TreePath; pathByAddingChild[java.lang.Object]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; parent>
<net.sourceforge.pmd.util.designer.Designer$TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; this>
<javax.swing.JTree; expandPath[javax.swing.tree.TreePath]; void; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; this>
<javax.swing.JTree; collapsePath[javax.swing.tree.TreePath]; void; net.sourceforge.pmd.util.designer.Designer.TreeWidget; expandAll[javax.swing.tree.TreePath, boolean]; void; null; this>
<javax.swing.JTree; setModel[javax.swing.tree.TreeModel]; void; net.sourceforge.pmd.util.designer.Designer; loadASTTreeData[javax.swing.tree.TreeNode]; void; null; astTreeWidget>
<net.sourceforge.pmd.util.designer.Designer$TreeWidget; expandAll[boolean]; void; net.sourceforge.pmd.util.designer.Designer; loadASTTreeData[javax.swing.tree.TreeNode]; void; null; astTreeWidget>
<javax.swing.JTree; setModel[javax.swing.tree.TreeModel]; void; net.sourceforge.pmd.util.designer.Designer; loadSymbolTableTreeData[javax.swing.tree.TreeNode]; void; null; symbolTableTreeWidget>
<net.sourceforge.pmd.util.designer.Designer$TreeWidget; expandAll[boolean]; void; net.sourceforge.pmd.util.designer.Designer; loadSymbolTableTreeData[javax.swing.tree.TreeNode]; void; null; symbolTableTreeWidget>
<javax.swing.JTree; setModel[javax.swing.tree.TreeModel]; void; net.sourceforge.pmd.util.designer.Designer; loadSymbolTableTreeData[javax.swing.tree.TreeNode]; void; null; symbolTableTreeWidget>
<java.lang.System; setOut[java.io.PrintStream]; void; net.sourceforge.pmd.util.designer.Designer.ShowListener; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.util.designer.Designer.ShowListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; loadASTTreeData[javax.swing.tree.TreeNode]; void; net.sourceforge.pmd.util.designer.Designer.ShowListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; loadSymbolTableTreeData[javax.swing.tree.TreeNode]; void; net.sourceforge.pmd.util.designer.Designer.ShowListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; getSourceType[]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.SourceType; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; sourceType>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; rs>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; ctx>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; codeEditorPane>
<net.sourceforge.pmd.PMD; setJavaVersion[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pmd>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pmd>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; e>
<net.sourceforge.pmd.util.designer.DFAGraphRule; getMethods[]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; dfaGraphRule>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; methods>
<net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; dfaPanel>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; dfaPanel>
<javax.swing.DefaultListModel; clear[]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea.getText()>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; length[]; xpathQueryArea>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResultList>
<javax.swing.JComponent; requestFocus[]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; codeEditorPane>
<net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea>
<not found; iterator[]; not found; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpath.selectNodes(c)>
<not found; selectNodes[]; not found; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; iterator[]; xpath>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; iter>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; iter>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; System.out>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<javax.swing.DefaultListModel; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; pe.fillInStackTrace()>
<java.lang.Throwable; fillInStackTrace[]; java.lang.Throwable; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; getMessage[]; pe>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResults>
<not found; getMessage[]; not found; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; je.fillInStackTrace()>
<not found; fillInStackTrace[]; not found; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; getMessage[]; je>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathResultList>
<javax.swing.JComponent; requestFocus[]; void; net.sourceforge.pmd.util.designer.Designer.XPathListener; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea>
<javax.swing.event.TreeSelectionEvent; getNewLeadSelectionPath[]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; e>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; e.getNewLeadSelectionPath()>
<javax.swing.event.TreeSelectionEvent; getNewLeadSelectionPath[]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; getLastPathComponent[]; e>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; label[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; astTreeNode>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; symbolTableTreeNode>
<net.sourceforge.pmd.util.designer.Designer$ASTTreeNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; astTreeNode>
<java.util.List; add[net.sourceforge.pmd.symboltable.Scope]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<net.sourceforge.pmd.symboltable.Scope; getParent[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope>
<java.util.Collections; reverse[java.util.List<?>]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; Collections>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<java.lang.Class; getSimpleName[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.symboltable.Scope>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; getSimpleName[]; scope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; selectedAstTreeNode>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getClassDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.ClassNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; isEmpty[]; scope>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getClassDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.ClassNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; keySet[]; scope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopeTreeNode>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getClassDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.ClassNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; get[java.lang.Object]; scope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classNameDeclarationTreeNode>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<net.sourceforge.pmd.symboltable.ClassScope; getMethodDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; isEmpty[]; classScope>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<net.sourceforge.pmd.symboltable.ClassScope; getMethodDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; keySet[]; classScope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopeTreeNode>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<net.sourceforge.pmd.symboltable.ClassScope; getMethodDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; get[java.lang.Object]; classScope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; methodNameDeclarationTreeNode>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; isEmpty[]; scope>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; keySet[]; scope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopeTreeNode>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; get[java.lang.Object]; scope>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; variableNameDeclarationTreeNode>
<net.sourceforge.pmd.util.designer.Designer; loadSymbolTableTreeData[javax.swing.tree.TreeNode]; void; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; this>
<javax.swing.event.TreeSelectionEvent; getNewLeadSelectionPath[]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.CodeHighlightListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; e>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.CodeHighlightListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; e.getNewLeadSelectionPath()>
<javax.swing.event.TreeSelectionEvent; getNewLeadSelectionPath[]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.designer.Designer.CodeHighlightListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; getLastPathComponent[]; e>
<net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.util.designer.Designer.CodeHighlightListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; codeEditorPane>
<javax.swing.JComponent; setBackground[java.awt.Color]; void; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; this>
<javax.swing.JList; getSelectionBackground[]; java.awt.Color; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; list>
<javax.swing.JComponent; setForeground[java.awt.Color]; void; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; this>
<javax.swing.JList; getSelectionForeground[]; java.awt.Color; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; list>
<javax.swing.JComponent; setBackground[java.awt.Color]; void; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; this>
<java.awt.Component; getBackground[]; java.awt.Color; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; list>
<javax.swing.JComponent; setForeground[java.awt.Color]; void; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; this>
<java.awt.Component; getForeground[]; java.awt.Color; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; list>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; node.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; substring[int]; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; getName[]; node>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; node.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; lastIndexOf[int]; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; getName[]; node>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; sb.append(name).append(" at line ").append(node.getBeginLine()).append(" column ").append(node.getBeginColumn())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; append[java.lang.String]; sb.append(name).append(" at line ").append(node.getBeginLine()).append(" column ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; append[int]; sb.append(name).append(" at line ").append(node.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; append[java.lang.String]; sb.append(name).append(" at line ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; append[int]; sb.append(name)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; append[java.lang.String]; sb>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; node>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; sb>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; value>
<javax.swing.JLabel; setText[java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer.ASTListCellRenderer; getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean]; java.awt.Component; null; this>
<java.util.EventObject; getSource[]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.ASTSelectionListener; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; e>
<javax.swing.ListSelectionModel; isSelectionEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.ASTSelectionListener; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; lsm>
<javax.swing.DefaultListModel; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer.ASTSelectionListener; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; xpathResults>
<javax.swing.ListSelectionModel; getMinSelectionIndex[]; int; net.sourceforge.pmd.util.designer.Designer.ASTSelectionListener; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; lsm>
<net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.util.designer.Designer.ASTSelectionListener; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; codeEditorPane>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; args[0]>
<net.sourceforge.pmd.jaxen.MatchesFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; MatchesFunction>
<net.sourceforge.pmd.jaxen.TypeOfFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; TypeOfFunction>
<javax.swing.JTextArea; setFont[java.awt.Font]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; xpathQueryArea>
<net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; createSymbolTableResultPanel[]; javax.swing.JComponent; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<javax.swing.JTabbedPane; addTab[java.lang.String, java.awt.Component]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; tabbed>
<javax.swing.JTabbedPane; addTab[java.lang.String, java.awt.Component]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; tabbed>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; JTabbedPane.class>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; setMnemonicAt>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; setMnemonicAt>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; e>
<javax.swing.JSplitPane; setContinuousLayout[boolean]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; containerSplitPane>
<net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; this>
<javax.swing.JFrame; setJMenuBar[javax.swing.JMenuBar]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame.getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; add[java.awt.Component]; frame>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; getScreenSize[]; Toolkit>
<java.awt.Window; pack[]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Window; setSize[int, int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Window; setLocation[int, int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Component; getWidth[]; int; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Component; getHeight[]; int; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<java.awt.Window; setVisible[boolean]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; frame>
<javax.swing.JSplitPane; getMaximumDividerLocation[]; int; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; controlSplitPane>
<javax.swing.JSplitPane; setDividerLocation[int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; controlSplitPane>
<javax.swing.JSplitPane; setDividerLocation[int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; containerSplitPane>
<javax.swing.JSplitPane; getMaximumDividerLocation[]; int; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; containerSplitPane>
<javax.swing.JSplitPane; setDividerLocation[int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; astAndSymbolTablePane>
<javax.swing.JSplitPane; getMaximumDividerLocation[]; int; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; astAndSymbolTablePane>
<javax.swing.JSplitPane; setDividerLocation[int]; void; net.sourceforge.pmd.util.designer.Designer; Designer[java.lang.String[]]; void; null; resultsSplitPane>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; sourceTypeSets[i][0]>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; menu>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; sourceTypeMenuItems[defaultSourceTypeSelectionIndex]>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; menuBar>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; copyXMLItem>
<net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; actionsMenu>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; createRuleXMLItem>
<net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; actionsMenu>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; net.sourceforge.pmd.util.designer.Designer; createMenuBar[]; javax.swing.JMenuBar; null; menuBar>
<javax.swing.JFrame; setContentPane[java.awt.Container]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Window; setSize[java.awt.Dimension]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Component; addComponentListener[java.awt.event.ComponentListener]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.util.EventObject; getSource[]; java.lang.Object; java.awt.event.ComponentAdapter; componentResized[java.awt.event.ComponentEvent]; void; null; e>
<java.awt.Component; getWidth[]; int; java.awt.event.ComponentAdapter; componentResized[java.awt.event.ComponentEvent]; void; null; tmp>
<java.awt.Component; getHeight[]; int; java.awt.event.ComponentAdapter; componentResized[java.awt.event.ComponentEvent]; void; null; tmp>
<java.awt.Window; setSize[int, int]; void; java.awt.event.ComponentAdapter; componentResized[java.awt.event.ComponentEvent]; void; null; tmp>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; getScreenSize[]; Toolkit>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; getScreenSize[]; Toolkit>
<java.awt.Window; pack[]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Window; setLocation[int, int]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Component; getWidth[]; int; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Component; getHeight[]; int; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Window; setVisible[boolean]; void; net.sourceforge.pmd.util.designer.Designer; createRuleXML[]; void; null; xmlframe>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; p>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; codeEditorPane>
<javax.swing.BorderFactory; createLineBorder[java.awt.Color]; javax.swing.border.Border; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; BorderFactory>
<net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; p>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createCodeEditorPanel[]; javax.swing.JComponent; null; p>
<javax.swing.JTree; setCellRenderer[javax.swing.tree.TreeCellRenderer]; void; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; astTreeWidget>
<net.sourceforge.pmd.util.designer.Designer; createNoImageTreeCellRenderer[]; javax.swing.tree.TreeCellRenderer; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; this>
<javax.swing.JTree; getSelectionModel[]; javax.swing.tree.TreeSelectionModel; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; astTreeWidget>
<javax.swing.tree.TreeSelectionModel; setSelectionMode[int]; void; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; model>
<javax.swing.tree.TreeSelectionModel; addTreeSelectionListener[javax.swing.event.TreeSelectionListener]; void; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; model>
<javax.swing.tree.TreeSelectionModel; addTreeSelectionListener[javax.swing.event.TreeSelectionListener]; void; net.sourceforge.pmd.util.designer.Designer; createASTPanel[]; javax.swing.JComponent; null; model>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResults>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResultList>
<javax.swing.BorderFactory; createLineBorder[java.awt.Color]; javax.swing.border.Border; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; BorderFactory>
<javax.swing.JList; setFixedCellWidth[int]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResultList>
<javax.swing.JList; setCellRenderer[javax.swing.ListCellRenderer]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResultList>
<javax.swing.JList; setSelectionMode[int]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResultList>
<javax.swing.ListSelectionModel; addListSelectionListener[javax.swing.event.ListSelectionListener]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; xpathResultList.getSelectionModel()>
<javax.swing.JList; getSelectionModel[]; javax.swing.ListSelectionModel; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; addListSelectionListener[javax.swing.event.ListSelectionListener]; xpathResultList>
<javax.swing.JViewport; setView[java.awt.Component]; void; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; null; scrollPane.getViewport()>
<javax.swing.JScrollPane; getViewport[]; javax.swing.JViewport; net.sourceforge.pmd.util.designer.Designer; createXPathResultPanel[]; javax.swing.JComponent; setView[java.awt.Component]; scrollPane>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; p>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; xpathQueryArea>
<javax.swing.BorderFactory; createLineBorder[java.awt.Color]; javax.swing.border.Border; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; BorderFactory>
<net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; this>
<javax.swing.JScrollPane; setHorizontalScrollBarPolicy[int]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; scrollPane>
<javax.swing.JScrollPane; setVerticalScrollBarPolicy[int]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; scrollPane>
<net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; p>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; p>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; createXPathQueryPanel[]; javax.swing.JPanel; null; p>
<javax.swing.JTree; setCellRenderer[javax.swing.tree.TreeCellRenderer]; void; net.sourceforge.pmd.util.designer.Designer; createSymbolTableResultPanel[]; javax.swing.JComponent; null; symbolTableTreeWidget>
<net.sourceforge.pmd.util.designer.Designer; createNoImageTreeCellRenderer[]; javax.swing.tree.TreeCellRenderer; net.sourceforge.pmd.util.designer.Designer; createSymbolTableResultPanel[]; javax.swing.JComponent; null; this>
<javax.swing.AbstractButton; setMnemonic[char]; void; net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; null; b>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; null; b>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; null; b>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; null; b>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.Designer; createGoButton[]; javax.swing.JButton; null; b>
<javax.swing.text.Document; addUndoableEditListener[javax.swing.event.UndoableEditListener]; void; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; textConponent.getDocument()>
<javax.swing.text.JTextComponent; getDocument[]; javax.swing.text.Document; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; addUndoableEditListener[javax.swing.event.UndoableEditListener]; textConponent>
<javax.swing.undo.UndoManager; addEdit[javax.swing.undo.UndoableEdit]; boolean; java.lang.Object; undoableEditHappened[javax.swing.event.UndoableEditEvent]; void; null; undoManager>
<javax.swing.event.UndoableEditEvent; getEdit[]; javax.swing.undo.UndoableEdit; java.lang.Object; undoableEditHappened[javax.swing.event.UndoableEditEvent]; void; null; evt>
<javax.swing.JComponent; getActionMap[]; javax.swing.ActionMap; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; textConponent>
<javax.swing.JComponent; getInputMap[]; javax.swing.InputMap; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; textConponent>
<javax.swing.ActionMap; put[java.lang.Object, javax.swing.Action]; void; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; actionMap>
<javax.swing.undo.UndoManager; canUndo[]; boolean; javax.swing.AbstractAction; actionPerformed[java.awt.event.ActionEvent]; void; null; undoManager>
<javax.swing.undo.UndoManager; undo[]; void; javax.swing.AbstractAction; actionPerformed[java.awt.event.ActionEvent]; void; canUndo[]; undoManager>
<javax.swing.InputMap; put[javax.swing.KeyStroke, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; inputMap>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; KeyStroke>
<javax.swing.ActionMap; put[java.lang.Object, javax.swing.Action]; void; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; actionMap>
<javax.swing.undo.UndoManager; canRedo[]; boolean; javax.swing.AbstractAction; actionPerformed[java.awt.event.ActionEvent]; void; null; undoManager>
<javax.swing.undo.UndoManager; redo[]; void; javax.swing.AbstractAction; actionPerformed[java.awt.event.ActionEvent]; void; null; undoManager>
<javax.swing.InputMap; put[javax.swing.KeyStroke, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; inputMap>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; net.sourceforge.pmd.util.designer.Designer; makeTextComponentUndoable[javax.swing.text.JTextComponent]; void; null; KeyStroke>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; codeEditorPane>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; codeEditorPane.getText().trim()>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; length[]; codeEditorPane.getText()>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; trim[]; codeEditorPane>
<net.sourceforge.pmd.util.designer.Designer; getCompilationUnit[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; this>
<net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; this>
<javax.xml.transform.TransformerException; printStackTrace[]; void; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; e>
<java.awt.datatransfer.Clipboard; setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner]; void; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; null; Toolkit.getDefaultToolkit().getSystemClipboard()>
<java.awt.Toolkit; getSystemClipboard[]; java.awt.datatransfer.Clipboard; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner]; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; net.sourceforge.pmd.util.designer.Designer; copyXmlToClipboard[]; void; getSystemClipboard[]; Toolkit>
<net.sourceforge.pmd.ast.SimpleNode; asXml[]; org.w3c.dom.Document; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; node>
<javax.xml.transform.TransformerFactory; newInstance[]; javax.xml.transform.TransformerFactory; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; TransformerFactory>
<javax.xml.transform.TransformerFactory; setAttribute[java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; transformerFactory>
<javax.xml.transform.TransformerFactory; newTransformer[]; javax.xml.transform.Transformer; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; transformerFactory>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; xformer>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; xformer>
<javax.xml.transform.Transformer; transform[javax.xml.transform.Source, javax.xml.transform.Result]; void; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; xformer>
<java.io.StringWriter; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.Designer; getXmlString[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; writer>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; createRuleBtn>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.GridBagLayout; setConstraints[java.awt.Component, java.awt.GridBagConstraints]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; gbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; CreateXMLRulePanel[javax.swing.JTextArea, net.sourceforge.pmd.util.designer.CodeEditorTextPane]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; null; sb.append(text)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; append[java.lang.String]; sb>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; rulenameField>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; rulemsgField>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea.getText()>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; length[]; xpathQueryArea>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; ruledescField>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea.getText()>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; length[]; xpathQueryArea>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; xpathQueryArea>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; codeEditorPane>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.designer.CreateXMLRulePanel; appendLn[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; ruleXMLArea>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; buffer>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.CreateXMLRulePanel; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isDefinition[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; va>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; sb>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isReference[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; va>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; sb>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isUndefinition[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; va>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; sb>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; sb.append(va.getVariableName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; append[char]; sb>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; null; va>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; node>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; kids>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; sb>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; ((IDataFlowNode)kids.get(0))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; getIndex[]; kids>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; size[]; node>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; sb>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; ((IDataFlowNode)kids.get(j))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; getIndex[]; kids>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; sb>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; flow>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; flow>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; ((IDataFlowNode)flow.get(i))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; getVariableAccess[]; flow>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; this>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; exp>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; addAccessLabel[java.lang.StringBuffer, net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; this>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; exp>
<java.lang.Math; max[int, int]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; maxWidthOf[java.lang.String[], java.awt.FontMetrics]; int; null; Math>
<javax.swing.SwingUtilities; computeStringWidth[java.awt.FontMetrics, java.lang.String]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; maxWidthOf[java.lang.String[], java.awt.FontMetrics]; int; null; SwingUtilities>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; node.getDataFlowNode()>
<net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; getFlow[]; node>
<java.awt.Graphics; getFontMetrics[]; java.awt.FontMetrics; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.FontMetrics; getAscent[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; fm>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; this>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; maxWidthOf[java.lang.String[], java.awt.FontMetrics]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; flow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; flow>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; computeDrawPos[int]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode>
<java.awt.Graphics; drawArc[int, int, int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawString[java.lang.String, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<net.sourceforge.pmd.util.LineGetter; getLine[int]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; lines>
<net.sourceforge.pmd.dfa.IDataFlowNode; getLine[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; String>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode>
<javax.swing.SwingUtilities; computeStringWidth[java.awt.FontMetrics, java.lang.String]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; SwingUtilities>
<java.awt.Graphics; drawString[java.lang.String, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawString[java.lang.String, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; size[]; inode>
<java.util.List; get[int]; ; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; get[int]; inode>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; n>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; this>
<java.awt.Graphics; drawString[java.lang.String, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; null; g>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; computeDrawPos[int]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; computeDrawPos[int]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<java.awt.Graphics; drawLine[int, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; g>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; drawArrow[java.awt.Graphics, int, int, int]; void; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; drawMyLine[int, int, java.awt.Graphics]; void; null; this>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel.ElementWrapper; toString[]; java.lang.String; null; node>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; this>
<javax.swing.JList; setSelectionMode[int]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; nodeList>
<javax.swing.JList; setFixedCellWidth[int]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; nodeList>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; nodeList>
<javax.swing.BorderFactory; createLineBorder[java.awt.Color]; javax.swing.border.Border; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; BorderFactory>
<javax.swing.JList; addListSelectionListener[javax.swing.event.ListSelectionListener]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; nodeList>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; leftPanel>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; this>
<javax.swing.JComponent; setBackground[java.awt.Color]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; dfaCanvas>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; dfaCanvas>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.designer.DFAPanel; DFAPanel[]; void; null; this>
<javax.swing.DefaultListModel; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodes>
<javax.swing.DefaultListModel; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodes>
<javax.swing.DefaultListModel; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodes>
<javax.swing.JList; getSelectedValue[]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodeList>
<javax.swing.DefaultListModel; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodes>
<javax.swing.JList; getSelectedValue[]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; nodeList>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; setMethod[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; dfaCanvas>
<net.sourceforge.pmd.util.designer.DFAPanel$ElementWrapper; getNode[]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; wrapper>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.DFAPanel; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; dfaCanvas>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; setCode[net.sourceforge.pmd.util.LineGetter]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; dfaCanvas>
<javax.swing.DefaultListModel; clear[]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; nodes>
<javax.swing.DefaultListModel; addElement[java.lang.Object]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; nodes>
<javax.swing.JList; setSelectedIndex[int]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; nodeList>
<net.sourceforge.pmd.util.designer.DFAPanel$DFACanvas; setMethod[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; dfaCanvas>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; newNodes>
<java.awt.Component; repaint[]; void; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.MyPrintStream; println[java.lang.String]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.MyPrintStream; println[java.lang.String]; void; null; buf>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.MyPrintStream; getString[]; java.lang.String; null; buf>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.designer.MyPrintStream; getString[]; java.lang.String; null; System>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.designer.MyPrintStream; getString[]; java.lang.String; null; System>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.designer.MyPrintStream; getString[]; java.lang.String; null; System>
<javax.swing.JEditorPane; setText[java.lang.String]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; CodeEditorTextPane[]; void; null; this>
<net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; CodeEditorTextPane[]; void; null; this>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; getLine[int]; java.lang.String; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.util.designer.CodeEditorTextPane; getLine[int]; java.lang.String; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; getLine[int]; java.lang.String; null; st>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.util.designer.CodeEditorTextPane; getPosition[java.lang.String[], int, int]; int; null; tok>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; getPosition[java.lang.String[], int, int]; int; null; tok>
<java.lang.String; split[java.lang.String]; java.lang.String[]; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; getText()>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; split[java.lang.String]; this>
<javax.swing.text.JTextComponent; setSelectionStart[int]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.util.designer.CodeEditorTextPane; getPosition[java.lang.String[], int, int]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<javax.swing.text.JTextComponent; setSelectionEnd[int]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.util.designer.CodeEditorTextPane; getPosition[java.lang.String[], int, int]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getEndLine[]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getEndColumn[]; int; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<javax.swing.JComponent; requestFocus[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; select[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; actionPerformed[java.awt.event.ActionEvent]; void; null; fw>
<javax.swing.JEditorPane; getText[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.io.OutputStreamWriter; close[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; actionPerformed[java.awt.event.ActionEvent]; void; null; fw>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; actionPerformed[java.awt.event.ActionEvent]; void; null; ioe>
<java.io.BufferedReader; readLine[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; br>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; text.append(hold)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; append[java.lang.String]; text>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; text>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; e>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; br>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.util.designer.CodeEditorTextPane; loadCode[]; java.lang.String; null; e>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.util.designer.DFAGraphRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; acu>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.util.designer.DFAGraphRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; acu>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<E>, java.util.Iterator<? extends E>]; void; null; i>
<net.sourceforge.pmd.util.UnaryFunction; applyTo[E]; void; net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<E>, java.util.Iterator<? extends E>]; void; null; f>
<java.util.Iterator; next[]; ; net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<E>, java.util.Iterator<? extends E>]; void; null; i>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<E>, java.util.Iterator<? extends E>]; void; null; System>
<net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; net.sourceforge.pmd.util.FileFinder; findFilesFrom[java.lang.String, java.io.FilenameFilter, boolean]; java.util.List<java.io.File>; null; this>
<java.io.File; list[java.io.FilenameFilter]; java.lang.String[]; net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; null; dir>
<java.io.File; isDirectory[]; boolean; net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; null; tmp>
<net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; null; this>
<java.util.List; add[java.io.File]; boolean; net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; null; list>
<net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.ClassUtil; getPrimitiveTypeFor[java.lang.String]; java.lang.Class; null; primitiveTypesByName>
<net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.ClassUtil; getTypeFor[java.lang.String]; java.lang.Class; null; typesByNames>
<net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.ClassUtil; getTypeFor[java.lang.String]; java.lang.Class; null; primitiveTypesByName>
<net.sourceforge.pmd.util.CollectionUtil; getCollectionTypeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.util.ClassUtil; getTypeFor[java.lang.String]; java.lang.Class; null; CollectionUtil>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.util.ClassUtil; withoutPackageName[java.lang.String]; java.lang.String; null; fullTypeName>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.ClassUtil; withoutPackageName[java.lang.String]; java.lang.String; null; fullTypeName>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.util.SymbolTableViewer; spaces[]; java.lang.String; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; node>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.util.SymbolTableViewer; spaces[]; java.lang.String; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.SymbolTableViewer; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.SymbolTableViewer; spaces[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.SymbolTableViewer; spaces[]; java.lang.String; null; sb>
<net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String]; java.io.InputStream; null; ResourceLoader>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String]; java.io.InputStream; null; ResourceLoader.class>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; null; file>
<java.net.URLConnection; getInputStream[]; java.io.InputStream; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; null; new URL(name).openConnection()>
<java.net.URL; openConnection[]; java.net.URLConnection; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; getInputStream[]; new URL(name)>
<java.lang.ClassLoader; getResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; null; loader>
<net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; XPathPanel[net.sourceforge.pmd.util.viewer.model.ViewerModel]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; model>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; this>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String]; javax.swing.border.TitledBorder; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[]; javax.swing.border.Border; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; BorderFactory>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; NLS>
<javax.swing.JTabbedPane; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; NLS>
<javax.swing.JTabbedPane; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; NLS>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; init[]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.XPathPanel; getXPathExpression[]; java.lang.String; null; xPathArea>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getReason[]; int; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getSource[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<javax.swing.JTextArea; append[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; xPathArea>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getParameter[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<javax.swing.JTabbedPane; setSelectedIndex[int]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; this>
<javax.swing.JTabbedPane; setSelectedIndex[int]; void; net.sourceforge.pmd.util.viewer.gui.XPathPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; ParseExceptionHandler[javax.swing.JFrame, java.lang.Exception]; void; null; NLS>
<net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; ParseExceptionHandler[javax.swing.JFrame, java.lang.Exception]; void; null; this>
<javax.swing.text.JTextComponent; setEditable[boolean]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; errorArea>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; errorArea>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; exc>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; getContentPane()>
<javax.swing.JDialog; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; setLayout[java.awt.LayoutManager]; this>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; messagePanel>
<javax.swing.BorderFactory; createCompoundBorder[javax.swing.border.Border, javax.swing.border.Border]; javax.swing.border.CompoundBorder; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createRaisedBevelBorder[]; javax.swing.border.Border; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String]; javax.swing.border.TitledBorder; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[]; javax.swing.border.Border; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; BorderFactory>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; NLS>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; messagePanel>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; getContentPane()>
<javax.swing.JDialog; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; add[java.awt.Component, java.lang.Object]; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; NLS>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; okBtn>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; btnPane>
<javax.swing.JRootPane; setDefaultButton[javax.swing.JButton]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; getRootPane()>
<javax.swing.JDialog; getRootPane[]; javax.swing.JRootPane; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; setDefaultButton[javax.swing.JButton]; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; getContentPane()>
<javax.swing.JDialog; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; add[java.awt.Component, java.lang.Object]; this>
<java.awt.Window; pack[]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; this>
<java.awt.Window; setLocationRelativeTo[java.awt.Component]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; this>
<java.awt.Component; getParent[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; this>
<java.awt.Dialog; setVisible[boolean]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; init[]; void; null; this>
<java.util.EventObject; getSource[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; actionPerformed[java.awt.event.ActionEvent]; void; null; e>
<java.awt.Window; dispose[]; void; net.sourceforge.pmd.util.viewer.gui.ParseExceptionHandler; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; SourceCodePanel[net.sourceforge.pmd.util.viewer.model.ViewerModel]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; model>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; this>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String]; javax.swing.border.TitledBorder; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[]; javax.swing.border.Border; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; BorderFactory>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; NLS>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; init[]; void; null; this>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; getSourceCode[]; java.lang.String; null; sourceCodeArea>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getReason[]; int; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getParameter[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<javax.swing.SwingUtilities; invokeLater[java.lang.Runnable]; void; net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; SwingUtilities>
<javax.swing.text.Highlighter; removeAllHighlights[]; void; java.lang.Object; run[]; void; null; sourceCodeArea.getHighlighter()>
<javax.swing.text.JTextComponent; getHighlighter[]; javax.swing.text.Highlighter; java.lang.Object; run[]; void; removeAllHighlights[]; sourceCodeArea>
<javax.swing.JTextArea; getLineStartOffset[int]; int; java.lang.Object; run[]; void; null; sourceCodeArea>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; java.lang.Object; run[]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginColumn[]; int; java.lang.Object; run[]; void; null; node>
<javax.swing.JTextArea; getLineStartOffset[int]; int; java.lang.Object; run[]; void; null; sourceCodeArea>
<net.sourceforge.pmd.ast.SimpleNode; getEndLine[]; int; java.lang.Object; run[]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getEndColumn[]; int; java.lang.Object; run[]; void; null; node>
<javax.swing.text.Highlighter; addHighlight[int, int, javax.swing.text.Highlighter.HighlightPainter]; java.lang.Object; java.lang.Object; run[]; void; null; sourceCodeArea.getHighlighter()>
<javax.swing.text.JTextComponent; getHighlighter[]; javax.swing.text.Highlighter; java.lang.Object; run[]; void; addHighlight[int, int, javax.swing.text.Highlighter.HighlightPainter]; sourceCodeArea>
<javax.swing.text.JTextComponent; moveCaretPosition[int]; void; java.lang.Object; run[]; void; null; sourceCodeArea>
<java.lang.Throwable; getMessage[]; java.lang.String; java.lang.Object; run[]; void; null; exc>
<net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; init[]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; EvaluationResultsPanel[net.sourceforge.pmd.util.viewer.model.ViewerModel]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; init[]; void; null; model>
<javax.swing.JList; setSelectionMode[int]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; init[]; void; null; list>
<javax.swing.JList; addListSelectionListener[javax.swing.event.ListSelectionListener]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; init[]; void; null; list>
<javax.swing.JList; getSelectedValue[]; java.lang.Object; java.lang.Object; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; list>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; selectNode[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; java.lang.Object; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; model>
<javax.swing.JList; getSelectedValue[]; java.lang.Object; java.lang.Object; valueChanged[javax.swing.event.ListSelectionEvent]; void; null; list>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getReason[]; int; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getSource[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<javax.swing.JList; setListData[java.util.Vector]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; getLastEvaluationResults[]; java.util.List; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; model>
<javax.swing.JList; setListData[java.util.Vector]; void; net.sourceforge.pmd.util.viewer.gui.EvaluationResultsPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; ASTPanel[net.sourceforge.pmd.util.viewer.model.ViewerModel]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; model>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; this>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String]; javax.swing.border.TitledBorder; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[]; javax.swing.border.Border; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; BorderFactory>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; NLS>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; this>
<javax.swing.JTree; addTreeSelectionListener[javax.swing.event.TreeSelectionListener]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; tree>
<java.awt.Component; addMouseListener[java.awt.event.MouseListener]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; tree>
<java.awt.event.MouseEvent; isPopupTrigger[]; boolean; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; e>
<javax.swing.JTree; getClosestPathForLocation[int, int]; javax.swing.tree.TreePath; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; tree>
<java.awt.event.MouseEvent; getX[]; int; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getY[]; int; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; e>
<javax.swing.JTree; setSelectionPath[javax.swing.tree.TreePath]; void; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; tree>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; path>
<javax.swing.JPopupMenu; show[java.awt.Component, int, int]; void; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; menu>
<java.awt.event.MouseEvent; getX[]; int; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getY[]; int; java.awt.event.MouseAdapter; mouseReleased[java.awt.event.MouseEvent]; void; null; e>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getReason[]; int; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<javax.swing.JTree; setModel[javax.swing.tree.TreeModel]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; tree>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; getRootNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; model>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getSource[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<net.sourceforge.pmd.util.viewer.model.ViewerModelEvent; getParameter[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; e>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; n>
<java.util.LinkedList; addFirst[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<java.util.LinkedList; toArray[]; java.lang.Object[]; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<javax.swing.JTree; setSelectionPath[javax.swing.tree.TreePath]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; tree>
<javax.swing.JTree; scrollPathToVisible[javax.swing.tree.TreePath]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; tree>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; selectNode[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; model>
<javax.swing.tree.TreePath; getLastPathComponent[]; java.lang.Object; net.sourceforge.pmd.util.viewer.gui.ASTPanel; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; e.getNewLeadSelectionPath()>
<javax.swing.event.TreeSelectionEvent; getNewLeadSelectionPath[]; javax.swing.tree.TreePath; net.sourceforge.pmd.util.viewer.gui.ASTPanel; valueChanged[javax.swing.event.TreeSelectionEvent]; void; getLastPathComponent[]; e>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; MainFrame[]; void; null; NLS>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; MainFrame[]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; model>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; setLayout[java.awt.LayoutManager]; this>
<javax.swing.JSplitPane; setResizeWeight[double]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; editingPane>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; interactionsPane>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; interactionsPane>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; add[java.awt.Component, java.lang.Object]; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; NLS>
<javax.swing.AbstractButton; setActionCommand[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; compileBtn>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; compileBtn>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; NLS>
<javax.swing.AbstractButton; setActionCommand[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; evalBtn>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; evalBtn>
<javax.swing.AbstractButton; setEnabled[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; evalBtn>
<javax.swing.JLabel; setHorizontalAlignment[int]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; statusLbl>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; btnPane>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; btnPane>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; btnPane>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; add[java.awt.Component, java.lang.Object]; this>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; jdk13MenuItem>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menu>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; jdk14MenuItem>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menu>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; jdk15MenuItem>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menu>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; jdk16MenuItem>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menu>
<javax.swing.AbstractButton; setSelected[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; jdk17MenuItem>
<javax.swing.ButtonGroup; add[javax.swing.AbstractButton]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; group>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menu>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; menuBar>
<javax.swing.JFrame; setJMenuBar[javax.swing.JMenuBar]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; this>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; this>
<java.awt.Window; pack[]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; this>
<java.awt.Window; setSize[int, int]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; this>
<java.awt.Window; setVisible[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; init[]; void; null; this>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; createJDKVersion[]; net.sourceforge.pmd.TargetJDKVersion; null; jdk14MenuItem>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; createJDKVersion[]; net.sourceforge.pmd.TargetJDKVersion; null; jdk13MenuItem>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; createJDKVersion[]; net.sourceforge.pmd.TargetJDKVersion; null; jdk16MenuItem>
<javax.swing.AbstractButton; isSelected[]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; createJDKVersion[]; net.sourceforge.pmd.TargetJDKVersion; null; jdk17MenuItem>
<java.awt.event.ActionEvent; getActionCommand[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; command>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; commitSource[java.lang.String, net.sourceforge.pmd.TargetJDKVersion]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; model>
<net.sourceforge.pmd.util.viewer.gui.SourceCodePanel; getSourceCode[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; sourcePanel>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; createJDKVersion[]; net.sourceforge.pmd.TargetJDKVersion; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; setStatus[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; NLS>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; setStatus[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; NLS>
<java.lang.Throwable; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; exc>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; command>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; evaluateXPathExpression[java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; model>
<net.sourceforge.pmd.util.viewer.gui.XPathPanel; getXPathExpression[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; xPathPanel>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; System>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; setStatus[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; NLS>
<net.sourceforge.pmd.util.viewer.gui.MainFrame; setStatus[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; NLS>
<java.lang.Throwable; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.MainFrame; actionPerformed[java.awt.event.ActionEvent]; void; null; exc>
<javax.swing.JLabel; setText[java.lang.String]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; setStatus[java.lang.String]; void; null; statusLbl>
<javax.swing.AbstractButton; setEnabled[boolean]; void; net.sourceforge.pmd.util.viewer.gui.MainFrame; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; evalBtn>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; hasCompiledTree[]; boolean; net.sourceforge.pmd.util.viewer.gui.MainFrame; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; model>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; AttributesSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; MessageFormat>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; AttributesSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; NLS>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; AttributesSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; AttributesSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator; hasNext[]; boolean; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; i>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator; next[]; net.sourceforge.pmd.jaxen.Attribute; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; i>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; this>
<net.sourceforge.pmd.jaxen.Attribute; getName[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; attribute>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; attribute>
<net.sourceforge.pmd.util.viewer.model.AttributeToolkit; constructPredicate[net.sourceforge.pmd.jaxen.Attribute]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.AttributesSubMenu; init[]; void; null; AttributeToolkit>
<net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu; init[]; void; net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu; ASTNodePopupMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<javax.swing.JPopupMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu; init[]; void; null; this>
<javax.swing.JPopupMenu; addSeparator[]; void; net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu; init[]; void; null; this>
<javax.swing.JPopupMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.menu.ASTNodePopupMenu; init[]; void; null; this>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; SimpleNodeSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; MessageFormat>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; SimpleNodeSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; NLS>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; SimpleNodeSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; SimpleNodeSubMenu[net.sourceforge.pmd.util.viewer.model.ViewerModel, net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; temp>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; buf>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; temp>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; NLS>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; buf>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; this>
<net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; NLS>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.gui.menu.SimpleNodeSubMenu; init[]; void; null; node>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; net.sourceforge.pmd.util.viewer.gui.menu.XPathFragmentAddingItem; XPathFragmentAddingItem[java.lang.String, net.sourceforge.pmd.util.viewer.model.ViewerModel, java.lang.String]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; appendToXPathExpression[java.lang.String, java.lang.Object]; void; net.sourceforge.pmd.util.viewer.gui.menu.XPathFragmentAddingItem; actionPerformed[java.awt.event.ActionEvent]; void; null; model>
<net.sourceforge.pmd.jaxen.MatchesFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.util.viewer.Viewer; main[java.lang.String[]]; void; null; MatchesFunction>
<net.sourceforge.pmd.jaxen.TypeOfFunction; registerSelfInSimpleContext[]; void; net.sourceforge.pmd.util.viewer.Viewer; main[java.lang.String[]]; void; null; TypeOfFunction>
<java.util.ResourceBundle; getBundle[java.lang.String]; java.util.ResourceBundle; net.sourceforge.pmd.util.viewer.Viewer; main[java.lang.String[]]; void; null; ResourceBundle>
<java.util.ResourceBundle; getString[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.viewer.util.NLS; nls[java.lang.String]; java.lang.String; null; bundle>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.util.viewer.model.AttributeToolkit; formatValueForXPath[net.sourceforge.pmd.jaxen.Attribute]; java.lang.String; null; attribute>
<net.sourceforge.pmd.jaxen.Attribute; getName[]; java.lang.String; net.sourceforge.pmd.util.viewer.model.AttributeToolkit; constructPredicate[net.sourceforge.pmd.jaxen.Attribute]; java.lang.String; null; attribute>
<net.sourceforge.pmd.util.viewer.model.AttributeToolkit; formatValueForXPath[net.sourceforge.pmd.jaxen.Attribute]; java.lang.String; net.sourceforge.pmd.util.viewer.model.AttributeToolkit; constructPredicate[net.sourceforge.pmd.jaxen.Attribute]; java.lang.String; null; this>
<net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildAt[int]; javax.swing.tree.TreeNode; null; this>
<java.util.List; get[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildAt[int]; javax.swing.tree.TreeNode; null; children>
<net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildCount[]; int; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildCount[]; int; null; children>
<net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getIndex[javax.swing.tree.TreeNode]; int; null; this>
<java.util.List; indexOf[java.lang.Object]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getIndex[javax.swing.tree.TreeNode]; int; null; children>
<net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; isLeaf[]; boolean; null; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; isLeaf[]; boolean; null; children>
<java.util.Collections; enumeration[java.util.Collection<javax.swing.tree.TreeNode>]; java.util.Enumeration<javax.swing.tree.TreeNode>; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; children[]; java.util.Enumeration<javax.swing.tree.TreeNode>; null; Collections>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; null; node>
<java.util.List; add[javax.swing.tree.TreeNode]; boolean; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; null; children>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; null; node>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.util.viewer.model.ViewerModel; commitSource[java.lang.String, net.sourceforge.pmd.TargetJDKVersion]; void; null; jdk.createParser(new StringReader(source))>
<net.sourceforge.pmd.TargetJDKVersion; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; net.sourceforge.pmd.util.viewer.model.ViewerModel; commitSource[java.lang.String, net.sourceforge.pmd.TargetJDKVersion]; void; CompilationUnit[]; jdk>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ViewerModel; commitSource[java.lang.String, net.sourceforge.pmd.TargetJDKVersion]; void; null; this>
<not found; selectNodes[]; not found; net.sourceforge.pmd.util.viewer.model.ViewerModel; evaluateXPathExpression[java.lang.String, java.lang.Object]; void; null; xpath>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ViewerModel; evaluateXPathExpression[java.lang.String, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ViewerModel; selectNode[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ViewerModel; appendToXPathExpression[java.lang.String, java.lang.Object]; void; null; this>
<java.util.List; add[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; boolean; net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; null; listeners>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.model.ViewerModel; removeViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; null; listeners>
<java.util.List; size[]; int; net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; listeners>
<net.sourceforge.pmd.util.viewer.model.ViewerModelListener; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; listeners.get(i)>
<java.util.List; get[int]; net.sourceforge.pmd.util.viewer.model.ViewerModelListener; net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; listeners>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.viewer.model.ASTModel; getChild[java.lang.Object, int]; java.lang.Object; null; ((SimpleNode)parent)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.viewer.model.ASTModel; getChildCount[java.lang.Object]; int; null; ((SimpleNode)parent)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.viewer.model.ASTModel; getIndexOfChild[java.lang.Object, java.lang.Object]; int; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.model.ASTModel; getIndexOfChild[java.lang.Object, java.lang.Object]; int; null; node.jjtGetChild(i)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.util.viewer.model.ASTModel; getIndexOfChild[java.lang.Object, java.lang.Object]; int; equals[java.lang.Object]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.util.viewer.model.ASTModel; isLeaf[java.lang.Object]; boolean; null; ((SimpleNode)node)>
<java.util.List; add[javax.swing.event.TreeModelListener]; boolean; net.sourceforge.pmd.util.viewer.model.ASTModel; addTreeModelListener[javax.swing.event.TreeModelListener]; void; null; listeners>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.model.ASTModel; removeTreeModelListener[javax.swing.event.TreeModelListener]; void; null; listeners>
<javax.swing.event.TreeModelListener; treeNodesChanged[javax.swing.event.TreeModelEvent]; void; net.sourceforge.pmd.util.viewer.model.ASTModel; fireTreeModelEvent[javax.swing.event.TreeModelEvent]; void; null; listener>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; System.out>
<java.util.logging.Formatter; format[java.util.logging.LogRecord]; java.lang.String; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; FORMATTER>
<java.util.logging.LogRecord; getThrown[]; java.lang.Throwable; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; logRecord>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; logRecord.getThrown()>
<java.util.logging.LogRecord; getThrown[]; java.lang.Throwable; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; printStackTrace[java.io.PrintWriter]; logRecord>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; System.out>
<java.io.StringWriter; toString[]; java.lang.String; net.sourceforge.pmd.util.ConsoleLogHandler; publish[java.util.logging.LogRecord]; void; null; stringWriter>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.ConsoleLogHandler; flush[]; void; null; System.getProperty("net.sourceforge.pmd.supportUTF8","no")>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.ConsoleLogHandler; flush[]; void; equals[java.lang.Object]; System>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; indexOf[int, int]; int; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; oldString>
<java.lang.String; indexOf[java.lang.String, int]; int; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; desc>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; original>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, java.lang.String, java.lang.String]; java.lang.String; null; desc>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; null; this>
<net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.StringUtil; htmlEncode[java.lang.String]; java.lang.String; null; StringUtil>
<net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.StringUtil; htmlEncode[java.lang.String]; java.lang.String; null; StringUtil>
<net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.StringUtil; htmlEncode[java.lang.String]; java.lang.String; null; StringUtil>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; src>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; src>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf.append("&u").append(Integer.toHexString(c))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; append[char]; buf.append("&u")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; append[java.lang.String]; buf>
<java.lang.Integer; toHexString[int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; Integer>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String, boolean]; void; null; buf>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; null; source>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; null; source>
<java.lang.String; toCharArray[]; char[]; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; null; source>
<java.lang.String; indexOf[int, int]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; null; source>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; null; source>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; str>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; str>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; separator>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; str>
<java.lang.String; indexOf[java.lang.String, int]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; str>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; str>
<java.util.List; toArray[java.lang.String[]]; java.lang.String[]; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; iter>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; sb>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; iter>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; iter>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; sb>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.util.StringUtil; asStringOn[java.lang.StringBuffer, java.util.Iterator, java.lang.String]; void; null; iter>
<java.lang.Math; min[int, int]; int; net.sourceforge.pmd.util.StringUtil; lengthOfShortestIn[java.lang.String[]]; int; null; Math>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; lengthOfShortestIn[java.lang.String[]]; int; null; strings[i]>
<net.sourceforge.pmd.util.StringUtil; lengthOfShortestIn[java.lang.String[]]; int; net.sourceforge.pmd.util.StringUtil; maxCommonLeadingWhitespaceForAll[java.lang.String[]]; int; null; this>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.util.StringUtil; maxCommonLeadingWhitespaceForAll[java.lang.String[]]; int; null; strings[0]>
<java.lang.Character; isWhitespace[char]; boolean; net.sourceforge.pmd.util.StringUtil; maxCommonLeadingWhitespaceForAll[java.lang.String[]]; int; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.util.StringUtil; maxCommonLeadingWhitespaceForAll[java.lang.String[]]; int; null; str>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.util.StringUtil; trimStartOn[java.lang.String[], int]; java.lang.String[]; null; strings[i]>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; null; s>
<java.lang.String; length[]; int; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; null; s>
<java.util.Arrays; fill[char[], char]; void; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; null; java.util.Arrays>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; null; new StringBuffer(length).append(arr).append(s)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; toString[]; new StringBuffer(length).append(arr)>
<java.lang.StringBuffer; append[char[]]; java.lang.StringBuffer; net.sourceforge.pmd.util.StringUtil; lpad[java.lang.String, int]; java.lang.String; append[java.lang.String]; new StringBuffer(length)>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s1>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s2>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s1>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s2>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.StringUtil; isSame[java.lang.String, java.lang.String, boolean, boolean, boolean]; boolean; null; s1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; args[0]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; args[0]>
<net.sourceforge.pmd.Rule; addProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rule>
<net.sourceforge.pmd.Rule; setMessage[java.lang.String]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rule>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; ruleSet>
<net.sourceforge.pmd.RuleContext; setReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; ctx>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; pmd>
<net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; report>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; i>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getBeginColumn[]; int; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv.getPackageName()>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getMethodName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv.getMethodName()>
<net.sourceforge.pmd.IRuleViolation; getMethodName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getMethodName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv.getVariableName()>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; rv>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.util.XPathTest; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.util.filter.Filter; filter[T]; boolean; net.sourceforge.pmd.util.filter.AndFilter; filter[T]; boolean; null; filter>
<java.io.File; isDirectory[]; boolean; net.sourceforge.pmd.util.filter.DirectoryFilter; filter[java.io.File]; boolean; null; file>
<net.sourceforge.pmd.util.filter.Filter; filter[T]; boolean; net.sourceforge.pmd.util.filter.Filters; filter[net.sourceforge.pmd.util.filter.Filter<T>, java.util.Collection<T>]; java.util.List<T>; null; filter>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.util.filter.Filters; filter[net.sourceforge.pmd.util.filter.Filter<T>, java.util.Collection<T>]; java.util.List<T>; null; list>
<net.sourceforge.pmd.util.filter.Filters; getFileExtensionFilter[java.lang.String[]]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; net.sourceforge.pmd.util.filter.Filters; getFileExtensionOrDirectoryFilter[java.lang.String[]]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; null; this>
<net.sourceforge.pmd.util.filter.Filters; getDirectoryFilter[]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; net.sourceforge.pmd.util.filter.Filters; getFileExtensionOrDirectoryFilter[java.lang.String[]]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; null; this>
<java.io.File; getPath[]; java.lang.String; java.lang.Object; filter[java.io.File]; boolean; null; file>
<java.lang.String; replace[char, char]; java.lang.String; java.lang.Object; filter[java.io.File]; boolean; null; path>
<net.sourceforge.pmd.util.filter.Filter; filter[java.lang.String]; boolean; java.lang.Object; filter[java.io.File]; boolean; null; filter>
<java.lang.Object; toString[]; java.lang.String; java.lang.Object; toString[]; java.lang.String; null; filter>
<net.sourceforge.pmd.util.filter.Filter; filter[java.lang.String]; boolean; java.lang.Object; filter[T]; boolean; toString[]; filter>
<java.lang.Object; toString[]; java.lang.String; java.lang.Object; filter[T]; boolean; null; obj>
<java.lang.Object; toString[]; java.lang.String; java.lang.Object; toString[]; java.lang.String; null; filter>
<net.sourceforge.pmd.util.filter.Filter; filter[java.io.File]; boolean; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; toString[]; filter>
<java.lang.Object; toString[]; java.lang.String; java.lang.Object; toString[]; java.lang.String; null; filter>
<java.io.FilenameFilter; accept[java.io.File, java.lang.String]; boolean; java.lang.Object; filter[java.io.File]; boolean; null; filter>
<java.io.File; getParentFile[]; java.io.File; java.lang.Object; filter[java.io.File]; boolean; null; file>
<java.io.File; getName[]; java.lang.String; java.lang.Object; filter[java.io.File]; boolean; null; file>
<java.lang.Object; toString[]; java.lang.String; java.lang.Object; toString[]; java.lang.String; null; filter>
<java.util.List; size[]; int; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; includeRegexes>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; void; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; includeFilter>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; void; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; includeFilter>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; void; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; excludeFilter>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; void; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterIncludeOverExclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; includeFilter>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; void; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterIncludeOverExclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; excludeFilter>
<net.sourceforge.pmd.util.filter.Filter; filter[T]; boolean; net.sourceforge.pmd.util.filter.NotFilter; filter[T]; boolean; null; filter>
<net.sourceforge.pmd.util.filter.Filter; filter[T]; boolean; net.sourceforge.pmd.util.filter.OrFilter; filter[T]; boolean; filter[T]; filter>
<java.util.List; add[net.sourceforge.pmd.util.filter.Filter<T>]; boolean; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; AbstractCompoundFilter[net.sourceforge.pmd.util.filter.Filter<T>[]]; void; null; this.filters>
<java.util.List; add[net.sourceforge.pmd.util.filter.Filter<T>]; boolean; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<T>]; void; null; filters>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<java.util.List; size[]; int; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; filters>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<net.sourceforge.pmd.util.filter.AbstractCompoundFilter; getOperator[]; java.lang.String; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; this>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.Object]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<java.util.List; get[int]; net.sourceforge.pmd.util.filter.Filter<T>; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; filters>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<java.lang.StringBuilder; toString[]; java.lang.String; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; builder>
<net.sourceforge.pmd.util.filter.Filter; filter[T]; boolean; net.sourceforge.pmd.util.filter.AbstractDelegateFilter; filter[T]; boolean; null; filter>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.util.filter.AbstractDelegateFilter; toString[]; java.lang.String; null; filter>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.util.filter.FileExtensionFilter; FileExtensionFilter[boolean, java.lang.String[]]; void; null; this.extensions[i]>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.util.filter.FileExtensionFilter; filter[java.io.File]; boolean; null; file>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.util.filter.FileExtensionFilter; filter[java.io.File]; boolean; null; name.toUpperCase()>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.util.filter.FileExtensionFilter; filter[java.io.File]; boolean; endsWith[java.lang.String]; name>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.util.filter.FileExtensionFilter; filter[java.io.File]; boolean; null; name>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.util.filter.RegexStringFilter; filter[java.lang.String]; boolean; null; Pattern>
<java.util.regex.Matcher; matches[]; boolean; net.sourceforge.pmd.util.filter.RegexStringFilter; filter[java.lang.String]; boolean; null; pattern.matcher(obj)>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.util.filter.RegexStringFilter; filter[java.lang.String]; boolean; matches[]; pattern>
<net.sourceforge.pmd.util.TypeMap; add[java.lang.Class[]]; void; net.sourceforge.pmd.util.TypeMap; TypeMap[java.lang.Class[]]; void; null; this>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; typesByName>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; type>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; typesByName>
<net.sourceforge.pmd.util.ClassUtil; withoutPackageName[java.lang.String]; java.lang.String; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; ClassUtil>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; type>
<java.util.Map; containsValue[java.lang.Object]; boolean; net.sourceforge.pmd.util.TypeMap; contains[java.lang.Class]; boolean; null; typesByName>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.util.TypeMap; contains[java.lang.String]; boolean; null; typesByName>
<java.util.Map; get[java.lang.Object]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; null; typesByName>
<net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class[]]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTImplementsList>]; net.sourceforge.pmd.ast.ASTImplementsList; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; impl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; "Cloneable">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; type.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; type>
<java.util.Arrays; asList[java.lang.Class[]]; java.util.List<java.lang.Class>; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; type.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getInterfaces[]; type>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; implementors>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getClass[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; clazz>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Object.class>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays.asList(clazz.getInterfaces())>
<java.util.Arrays; asList[java.lang.Class[]]; java.util.List<java.lang.Class>; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; contains[java.lang.Object]; Arrays>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; clazz>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; clazz>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaAccessNode; isFinal[]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; classOrInterface>
<java.util.List; size[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTBlock.class)>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlock>]; java.util.List<net.sourceforge.pmd.ast.ASTBlock>; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; size[]; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTBlockStatement>]; java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.List; size[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceType>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type.getNthParent(9)>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; type>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; "CloneNotSupportedException">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; "clone">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; ((ASTFormalParameters)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; jjtGetNumChildren[]; node>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isImportOnDemand[]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; imports>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<net.sourceforge.pmd.rules.imports.UnusedImportsRule; getImportWrapper[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.rules.ImportWrapper; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; TypeNode.class>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((TypeNode)node)>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((TypeNode)node)>
<java.lang.Class; getPackage[]; java.lang.Package; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; c>
<java.lang.Package; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; c.getPackage()>
<java.lang.Class; getPackage[]; java.lang.Package; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; getName[]; c>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTImplementsList>]; net.sourceforge.pmd.ast.ASTImplementsList; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; impl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; impl>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node.jjtGetChild(0).getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; node.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getClass[]; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; jjtGetChild[int]; node>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; "junit.framework.Test">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; type>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[java.lang.Class<?>]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; Object.class>
<java.lang.Class; getInterfaces[]; java.lang.Class<?>[]; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; clazz>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[java.lang.Class<?>]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class<? super >; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[net.sourceforge.pmd.ast.ASTClassOrInterfaceType]; boolean; null; clazz>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[java.lang.Class<?>]; boolean; null; clazz.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isJUnitTest[java.lang.Class<?>]; boolean; equals[java.lang.Object]; clazz>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getImportedName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; indexOf[java.lang.String]; node>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; methodDeclaration.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; equals[java.lang.Object]; methodDeclaration>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; methodDeclaration.getMethodName()>
<net.sourceforge.pmd.ast.ASTMethodDeclaration; getMethodName[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isAllowedMethod[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; equals[java.lang.Object]; methodDeclaration>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTName>]; java.util.List<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; method>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; exceptionList>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; evaluateExceptions[java.util.List<net.sourceforge.pmd.ast.ASTName>, java.lang.Object]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; hasImageEqualTo[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; null; exception>
<net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; hasDeclaredExceptionInSignature[net.sourceforge.pmd.ast.ASTName]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; null; exception.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; isParentSignatureDeclaration[net.sourceforge.pmd.ast.ASTName]; boolean; jjtGetParent[]; exception>
<net.sourceforge.pmd.ast.SimpleNode; getNthParent[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.rules.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.rules.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.util.CollectionUtil; isCollectionType[java.lang.Class, boolean]; boolean; net.sourceforge.pmd.typeresolution.rules.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; CollectionUtil>
<net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.rules.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.rules.LooseCoupling; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTCompilationUnit; setClassTypeResolver[net.sourceforge.pmd.typeresolution.ClassTypeResolver]; void; net.sourceforge.pmd.typeresolution.TypeResolutionFacade; initializeWith[java.lang.ClassLoader, net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<net.sourceforge.pmd.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.typeresolution.TypeResolutionFacade; initializeWith[java.lang.ClassLoader, net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; name>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; name>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; name>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; className>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; className>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; className>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String[]]; void; null; this>
<not found; accept[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; extractSignature[java.lang.String]; void; null; new SignatureReader(sig)>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String[]]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; extractSignature[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; this>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; extractSignature[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.typeresolution.visitors.FieldVisitor; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.typeresolution.visitors.FieldVisitor; null; this>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.typeresolution.visitors.FieldVisitor; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.typeresolution.visitors.FieldVisitor; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; extractSignature[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.typeresolution.visitors.MethodVisitor; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addMethodDesc[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.typeresolution.visitors.MethodVisitor; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String[]]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.typeresolution.visitors.MethodVisitor; null; this>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; innerClasses>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; name>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; innerClasses>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; name>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; packages>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; name>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addTypes[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addMethodDesc[java.lang.String]; void; null; this>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addMethodDesc[java.lang.String]; void; null; this>
<not found; getReturnType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addMethodDesc[java.lang.String]; void; null; Type>
<not found; getArgumentTypes[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addTypes[java.lang.String]; void; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addTypes[java.lang.String]; void; null; this>
<not found; getSort[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; null; t>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; null; this>
<not found; getElementType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; null; t>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; null; this>
<not found; replace[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; null; t.getClassName()>
<not found; getClassName[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; replace[]; t>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDFieldVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDFieldVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDAnnotationVisitor; visitAnnotation[java.lang.String, java.lang.String]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDAnnotationVisitor; visitAnnotation[java.lang.String, java.lang.String]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDAnnotationVisitor; visitEnum[java.lang.String, java.lang.String, java.lang.String]; void; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDAnnotationVisitor; visitEnum[java.lang.String, java.lang.String, java.lang.String]; void; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDAnnotationVisitor; visit[java.lang.String, java.lang.Object]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDSignatureVisitor; visitClassType[java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDSignatureVisitor; visitInnerClassType[java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitAnnotation[java.lang.String, java.lang.String]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitAnnotation[java.lang.String, java.lang.String]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; desc>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addMethodDesc[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitLdcInsn[java.lang.Object]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitLdcInsn[java.lang.Object]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitMultiANewArrayInsn[java.lang.String, int]; void; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitMultiANewArrayInsn[java.lang.String, int]; void; null; Type>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; extractSignature[java.lang.String]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.typeresolution.visitors.Label, net.sourceforge.pmd.typeresolution.visitors.Label, int]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.typeresolution.visitors.Label, net.sourceforge.pmd.typeresolution.visitors.Label, net.sourceforge.pmd.typeresolution.visitors.Label, java.lang.String]; void; null; parent>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; addType[net.sourceforge.pmd.typeresolution.visitors.Type]; void; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; parent>
<not found; getType[]; not found; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor.PMDMethodVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.typeresolution.visitors.AnnotationVisitor; null; Type>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; dontBother>
<java.lang.ClassLoader; getResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; this>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; name>
<not found; accept[]; not found; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; reader>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; getInnerClasses[]; java.util.List<java.lang.String>; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; asmVisitor>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; inner>
<java.lang.ClassLoader; getResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; this>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; str>
<not found; accept[]; not found; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; reader>
<net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; getPackages[]; java.util.Map<java.lang.String,java.lang.String>; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; asmVisitor>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; dontBother>
<net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; this>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; vnd>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; clazz.getSimpleName()>
<java.lang.Class; getSimpleName[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; equals[java.lang.Object]; clazz>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; vnd>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; clazz.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; equals[java.lang.Object]; clazz>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; isA[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.lang.Class]; boolean; null; vnd>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; n>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; clazz.getSimpleName()>
<java.lang.Class; getSimpleName[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; equals[java.lang.Object]; clazz>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; ((SimpleNode)n)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; clazz.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; equals[java.lang.Object]; clazz>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; ((SimpleNode)n)>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; type>
<java.util.Arrays; asList[java.lang.Class[]]; java.util.List<java.lang.Class>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; Arrays>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; type>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; implementors>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; superC>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; superC>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; superC>
<java.util.logging.Logger; getLogger[java.lang.String]; java.util.logging.Logger; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; Logger>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; ClassTypeResolver.class>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Collections; unmodifiableMap[java.util.Map<? extends java.lang.String,? extends java.lang.Class<?>>]; java.util.Map<java.lang.String,java.lang.Class<?>>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; Collections>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Collections; unmodifiableMap[java.util.Map<? extends java.lang.String,? extends java.lang.String>]; java.util.Map<java.lang.String,java.lang.String>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; Collections>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.typeresolution.ClassTypeResolver; ClassTypeResolver[]; void; null; ClassTypeResolver.class>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateClassName[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; LOG>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.ClassNotFoundException>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getName[]; e>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; LOG>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.NoClassDefFoundError>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getName[]; e>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; LOG>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.ClassFormatError>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getName[]; e>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; e>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; setType[java.lang.Class]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importedType>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; setPackage[java.lang.Package]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.lang.Class; getPackage[]; java.lang.Package; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; node.getType()>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; getType[]; java.lang.Class; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; getPackage[]; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.NameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; getNode[]; node>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; setType[java.lang.Class]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; ((TypeNode)node.getNameDeclaration().getNode())>
<net.sourceforge.pmd.symboltable.NameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; getType[]; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTName; getNameDeclaration[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; getNode[]; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getNameDeclaration()>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getNameDeclaration[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; getTypeImage[]; node>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; name>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTReferenceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTConditionalExpression; isTernary[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTConditionalOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTConditionalAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTInclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTExclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTInstanceOfExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTRelationalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTShiftExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTMultiplicativeExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPreIncrementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPreDecrementExpression, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; "!">
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPostfixExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTCastExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTBooleanLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTLiteral; isIntLiteral[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Integer; decode[java.lang.String]; java.lang.Integer; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTLiteral; isFloatLiteral[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; image>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<java.lang.Double; parseDouble[java.lang.String]; double; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; Double>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTLiteral; isCharLiteral[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTLiteral; isStringLiteral[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.TypeNode; setType[java.lang.Class<?>]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; null; typeNode>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnary[net.sourceforge.pmd.ast.TypeNode]; void; null; ((TypeNode)child)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; ((TypeNode)child)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "byte">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "short">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "char">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<net.sourceforge.pmd.ast.TypeNode; setType[java.lang.Class<?>]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; typeNode>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeUnaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; ((TypeNode)child)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; simpleNode>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; ((TypeNode)child1)>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; ((TypeNode)child2)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "java.lang.String">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "java.lang.String">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "boolean">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "boolean">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "double">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "double">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "float">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "float">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "long">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "long">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "java.lang.String">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type1>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; "java.lang.String">
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; type2>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; rollupTypeBinaryNumericPromotion[net.sourceforge.pmd.ast.TypeNode]; void; null; this>
<java.util.Map; get[java.lang.Object]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; myPrimitiveTypes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.util.Map; containsValue[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; pmdClassLoader>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; processOnDemand[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; processOnDemand[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.typeresolution.ClassTypeResolver; processOnDemand[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.ast.TypeNode; setType[java.lang.Class<?>]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; node>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; classNameExists[java.lang.String]; boolean; null; pmdClassLoader>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; processOnDemand[java.lang.String]; java.lang.Class<?>; null; pmdClassLoader>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.ASTCompilationUnit; declarationsAreInDefaultPackage[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; classDecl>
<net.sourceforge.pmd.ast.ASTCompilationUnit; getPackageDeclaration[]; net.sourceforge.pmd.ast.ASTPackageDeclaration; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; node>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; importedOnDemand>
<net.sourceforge.pmd.ast.ASTPackageDeclaration; getPackageNameImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; pkgDecl>
<net.sourceforge.pmd.ast.ASTPackageDeclaration; getPackageNameImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; pkgDecl>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; classDecl>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTImportDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTImportDeclaration>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; anImportDeclaration>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isImportOnDemand[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; anImportDeclaration>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedOnDemand>
<net.sourceforge.pmd.ast.ASTImportDeclaration; isImportOnDemand[]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; anImportDeclaration>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getImportedName[]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; anImportDeclaration>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; strName>
<java.lang.String; length[]; int; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; strPackage>
<java.util.Map; putAll[java.util.Map<? extends java.lang.String,? extends java.lang.String>]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<net.sourceforge.pmd.ast.SimpleJavaTypeNode; setType[java.lang.Class]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateClassName[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; void; null; node>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateClassName[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; void; null; pmdClassLoader>
<net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateClassName[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; void; null; pmdClassLoader>
<net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; net.sourceforge.pmd.SourceTypeDiscoverer; SourceTypeDiscoverer[]; void; null; this>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.io.File]; net.sourceforge.pmd.SourceType; null; sourceFile>
<net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.io.File]; net.sourceforge.pmd.SourceType; null; this>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; fileName>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; fileName.substring(extensionIndex)>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; toUpperCase[]; fileName>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; setSourceTypeOfJavaFiles[net.sourceforge.pmd.SourceType]; void; null; mapExtensionOnSourceType>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfJavaFiles[]; net.sourceforge.pmd.SourceType; null; mapExtensionOnSourceType>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getName[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setName[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setName[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getSince[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getSince[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setSince[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setSince[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getRuleClass[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getRuleClass[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setRuleClass[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setRuleClass[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getRuleSetName[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getRuleSetName[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setRuleSetName[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setRuleSetName[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getMessage[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getMessage[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setMessage[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setMessage[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getDescription[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getDescription[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setDescription[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setDescription[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getExamples[]; java.util.List<java.lang.String>; net.sourceforge.pmd.AbstractDelegateRule; getExamples[]; java.util.List<java.lang.String>; null; rule>
<net.sourceforge.pmd.Rule; getExample[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getExample[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; addExample[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; addExample[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getExternalInfoUrl[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; setExternalInfoUrl[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; setExternalInfoUrl[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.AbstractDelegateRule; getPriority[]; int; null; rule>
<net.sourceforge.pmd.Rule; setPriority[int]; void; net.sourceforge.pmd.AbstractDelegateRule; setPriority[int]; void; null; rule>
<net.sourceforge.pmd.Rule; getPriorityName[]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getPriorityName[]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; include[]; boolean; net.sourceforge.pmd.AbstractDelegateRule; include[]; boolean; null; rule>
<net.sourceforge.pmd.Rule; setInclude[boolean]; void; net.sourceforge.pmd.AbstractDelegateRule; setInclude[boolean]; void; null; rule>
<net.sourceforge.pmd.Rule; getProperties[]; java.util.Properties; net.sourceforge.pmd.AbstractDelegateRule; getProperties[]; java.util.Properties; null; rule>
<net.sourceforge.pmd.Rule; addProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; addProperty[java.lang.String, java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; addProperties[java.util.Properties]; void; net.sourceforge.pmd.AbstractDelegateRule; addProperties[java.util.Properties]; void; null; rule>
<net.sourceforge.pmd.Rule; hasProperty[java.lang.String]; boolean; net.sourceforge.pmd.AbstractDelegateRule; hasProperty[java.lang.String]; boolean; null; rule>
<net.sourceforge.pmd.Rule; getBooleanProperty[java.lang.String]; boolean; net.sourceforge.pmd.AbstractDelegateRule; getBooleanProperty[java.lang.String]; boolean; null; rule>
<net.sourceforge.pmd.Rule; getIntProperty[java.lang.String]; int; net.sourceforge.pmd.AbstractDelegateRule; getIntProperty[java.lang.String]; int; null; rule>
<net.sourceforge.pmd.Rule; getDoubleProperty[java.lang.String]; double; net.sourceforge.pmd.AbstractDelegateRule; getDoubleProperty[java.lang.String]; double; null; rule>
<net.sourceforge.pmd.Rule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.AbstractDelegateRule; getStringProperty[java.lang.String]; java.lang.String; null; rule>
<net.sourceforge.pmd.Rule; propertyDescriptorFor[java.lang.String]; net.sourceforge.pmd.PropertyDescriptor; net.sourceforge.pmd.AbstractDelegateRule; propertyDescriptorFor[java.lang.String]; net.sourceforge.pmd.PropertyDescriptor; null; rule>
<net.sourceforge.pmd.Rule; setUsesDFA[]; void; net.sourceforge.pmd.AbstractDelegateRule; setUsesDFA[]; void; null; rule>
<net.sourceforge.pmd.Rule; usesDFA[]; boolean; net.sourceforge.pmd.AbstractDelegateRule; usesDFA[]; boolean; null; rule>
<net.sourceforge.pmd.Rule; setUsesTypeResolution[]; void; net.sourceforge.pmd.AbstractDelegateRule; setUsesTypeResolution[]; void; null; rule>
<net.sourceforge.pmd.Rule; usesTypeResolution[]; boolean; net.sourceforge.pmd.AbstractDelegateRule; usesTypeResolution[]; boolean; null; rule>
<net.sourceforge.pmd.Rule; usesRuleChain[]; boolean; net.sourceforge.pmd.AbstractDelegateRule; usesRuleChain[]; boolean; null; rule>
<net.sourceforge.pmd.Rule; getRuleChainVisits[]; java.util.List<java.lang.String>; net.sourceforge.pmd.AbstractDelegateRule; getRuleChainVisits[]; java.util.List<java.lang.String>; null; rule>
<net.sourceforge.pmd.Rule; addRuleChainVisit[java.lang.String]; void; net.sourceforge.pmd.AbstractDelegateRule; addRuleChainVisit[java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; start[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractDelegateRule; start[net.sourceforge.pmd.RuleContext]; void; null; rule>
<net.sourceforge.pmd.Rule; apply[java.util.List<?>, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractDelegateRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; rule>
<net.sourceforge.pmd.Rule; end[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractDelegateRule; end[net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; null; res.append(hours)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; append[java.lang.String]; res>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; null; res.append(minutes)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; append[java.lang.String]; res>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; null; res.append(seconds)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; append[char]; res>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.Report.ReadableDuration; getTime[]; java.lang.String; null; res>
<net.sourceforge.pmd.dfa.report.ReportTree; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; violationTree>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; iter>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; iter>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; rv>
<java.lang.String; length[]; int; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; rv.getPackageName()>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; length[]; rv>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; rv>
<net.sourceforge.pmd.IRuleViolation; getClassName[]; java.lang.String; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; rv>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; getName[]; rv>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.List; add[net.sourceforge.pmd.ReportListener]; boolean; net.sourceforge.pmd.Report; addListener[net.sourceforge.pmd.ReportListener]; void; null; listeners>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violation>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; linesToExclude>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; suppressedRuleViolations>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; linesToExclude>
<net.sourceforge.pmd.IRuleViolation; isSuppressed[]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violation>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; suppressedRuleViolations>
<java.util.Set; add[net.sourceforge.pmd.IRuleViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violations>
<net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violationTree>
<net.sourceforge.pmd.ReportListener; ruleViolationAdded[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; listener>
<java.util.Set; add[net.sourceforge.pmd.stat.Metric]; boolean; net.sourceforge.pmd.Report; addMetric[net.sourceforge.pmd.stat.Metric]; void; null; metrics>
<net.sourceforge.pmd.ReportListener; metricAdded[net.sourceforge.pmd.stat.Metric]; void; net.sourceforge.pmd.Report; addMetric[net.sourceforge.pmd.stat.Metric]; void; null; listener>
<java.util.List; add[net.sourceforge.pmd.Report.ProcessingError]; boolean; net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; null; errors>
<net.sourceforge.pmd.Report; errors[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; add[net.sourceforge.pmd.Report.ProcessingError]; r>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; i>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; this>
<java.util.Iterator; next[]; net.sourceforge.pmd.Report.ProcessingError; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; i>
<net.sourceforge.pmd.Report; metrics[]; java.util.Iterator<net.sourceforge.pmd.stat.Metric>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; r>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; m>
<net.sourceforge.pmd.Report; addMetric[net.sourceforge.pmd.stat.Metric]; void; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; this>
<java.util.Iterator; next[]; net.sourceforge.pmd.stat.Metric; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; m>
<net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; r>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; v>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; v>
<java.util.Set; add[net.sourceforge.pmd.IRuleViolation]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; violations>
<net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; violationTree>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Report.SuppressedViolation>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; r.getSuppressedRuleViolations()>
<net.sourceforge.pmd.Report; getSuppressedRuleViolations[]; java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; iterator[]; r>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; s>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; suppressedRuleViolations>
<java.util.Iterator; next[]; net.sourceforge.pmd.Report.SuppressedViolation; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; s>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.Report; hasMetrics[]; boolean; null; metrics>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.stat.Metric>; net.sourceforge.pmd.Report; metrics[]; java.util.Iterator<net.sourceforge.pmd.stat.Metric>; null; metrics>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; isEmpty[]; boolean; null; violations.iterator()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; isEmpty[]; boolean; hasNext[]; violations>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.Report; isEmpty[]; boolean; null; errors>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.Report; treeIsEmpty[]; boolean; null; violationTree.iterator()>
<net.sourceforge.pmd.dfa.report.ReportTree; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; treeIsEmpty[]; boolean; hasNext[]; violationTree>
<net.sourceforge.pmd.dfa.report.ReportTree; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; treeIterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; null; violationTree>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; null; violations>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; net.sourceforge.pmd.Report; errors[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; null; errors>
<net.sourceforge.pmd.dfa.report.ReportTree; size[]; int; net.sourceforge.pmd.Report; treeSize[]; int; null; violationTree>
<java.util.Set; size[]; int; net.sourceforge.pmd.Report; size[]; int; null; violations>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.Report; start[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.Report; end[]; void; null; System>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; null; System>
<java.util.logging.Logger; getLogger[java.lang.String]; java.util.logging.Logger; net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; null; Logger>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; null; PMD.class>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.PMD>; net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; getClassLoader[]; this>
<net.sourceforge.pmd.PMD; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; null; ctx>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ruleSets>
<net.sourceforge.pmd.RuleContext; getSourceCodeFile[]; java.io.File; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ctx>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandlerBroker; getVisitorsFactoryForSourceType[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; SourceTypeHandlerBroker>
<net.sourceforge.pmd.RuleContext; setSourceType[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ctx>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getParser[]; net.sourceforge.pmd.parsers.Parser; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; sourceTypeHandler>
<net.sourceforge.pmd.parsers.Parser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; parser>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.parsers.Parser; parse[java.io.Reader]; java.lang.Object; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; parser>
<net.sourceforge.pmd.RuleContext; excludeLines[java.util.Map<java.lang.Integer,java.lang.String>]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ctx>
<net.sourceforge.pmd.parsers.Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; parser>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; Benchmark>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; start[java.lang.Object]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; sourceTypeHandler.getSymbolFacade()>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getSymbolFacade[]; net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; start[java.lang.Object]; sourceTypeHandler>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; Benchmark>
<net.sourceforge.pmd.SourceTypeToRuleLanguageMapper; getMappedLanguage[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.Language; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; SourceTypeToRuleLanguageMapper>
<net.sourceforge.pmd.RuleSets; usesDFA[net.sourceforge.pmd.Language]; boolean; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ruleSets>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; start[java.lang.Object]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; sourceTypeHandler.getDataFlowFacade()>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getDataFlowFacade[]; net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; start[java.lang.Object]; sourceTypeHandler>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; Benchmark>
<net.sourceforge.pmd.RuleSets; usesTypeResolution[net.sourceforge.pmd.Language]; boolean; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ruleSets>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; start[java.lang.Object]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; sourceTypeHandler.getTypeResolutionFacade(classLoader)>
<net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; getTypeResolutionFacade[java.lang.ClassLoader]; net.sourceforge.pmd.sourcetypehandlers.VisitorStarter; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; start[java.lang.Object]; sourceTypeHandler>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; Benchmark>
<java.util.List; add[net.sourceforge.pmd.ast.CompilationUnit]; boolean; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; acus>
<net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ruleSets>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ctx>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; ctx>
<java.io.Reader; close[]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; reader>
<net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.PMD; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; sourceTypeDiscoverer>
<net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfJavaFiles[]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.PMD; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; sourceTypeDiscoverer>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; null; uee>
<net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; null; uee>
<net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.PMD; processFile[java.io.InputStream, net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.SourceTypeDiscoverer; setSourceTypeOfJavaFiles[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.PMD; setJavaVersion[net.sourceforge.pmd.SourceType]; void; null; sourceTypeDiscoverer>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.PMD; setClassLoader[java.lang.ClassLoader]; void; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.PMD>; net.sourceforge.pmd.PMD; setClassLoader[java.lang.ClassLoader]; void; getClassLoader[]; this>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.PMD; createClasspathClassLoader[java.lang.String]; java.lang.ClassLoader; null; PMD.class>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.SourceFileSelector; setSelectJavaFiles[boolean]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; fileSelector>
<net.sourceforge.pmd.CommandLineOptions; isCheckJavaFiles[]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.SourceFileSelector; setSelectJspFiles[boolean]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; fileSelector>
<net.sourceforge.pmd.CommandLineOptions; isCheckJspFiles[]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; containsCommaSeparatedFileList[]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; this>
<net.sourceforge.pmd.CommandLineOptions; getInputPath[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.PMD; collectFilesFromOneName[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; this>
<net.sourceforge.pmd.CommandLineOptions; getInputPath[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; Benchmark>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts.getTargetJDK()>
<net.sourceforge.pmd.CommandLineOptions; getTargetJDK[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; equals[java.lang.Object]; opts>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts.getTargetJDK()>
<net.sourceforge.pmd.CommandLineOptions; getTargetJDK[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; equals[java.lang.Object]; opts>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts.getTargetJDK()>
<net.sourceforge.pmd.CommandLineOptions; getTargetJDK[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; equals[java.lang.Object]; opts>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts.getTargetJDK()>
<net.sourceforge.pmd.CommandLineOptions; getTargetJDK[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; equals[java.lang.Object]; opts>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<net.sourceforge.pmd.PMD; createClasspathClassLoader[java.lang.String]; java.lang.ClassLoader; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; this>
<net.sourceforge.pmd.CommandLineOptions; getAuxClasspath[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System.out>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; renderers>
<net.sourceforge.pmd.CommandLineOptions; getReportFile[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getReportFile[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.renderers.Renderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; renderer>
<net.sourceforge.pmd.renderers.Renderer; start[]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; renderer>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; Benchmark>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.RuleSetFactory; setMinimumPriority[int]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; ruleSetFactory>
<net.sourceforge.pmd.CommandLineOptions; getMinPriority[]; int; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; ruleSetFactory>
<net.sourceforge.pmd.CommandLineOptions; getRulesets[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.PMD; printRuleNamesInDebug[net.sourceforge.pmd.RuleSets]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; this>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; Benchmark>
<net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; this>
<net.sourceforge.pmd.CommandLineOptions; getCpus[]; int; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; stressTestEnabled[]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getRulesets[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; shortNamesEnabled[]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getInputPath[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getEncoding[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getExcludeMarker[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System.out>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.renderers.Renderer; end[]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; renderer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; w>
<java.io.Writer; flush[]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; w>
<net.sourceforge.pmd.CommandLineOptions; getReportFile[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.io.Writer; close[]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; w>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; e>
<java.util.logging.Logger; severe[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<java.util.logging.Logger; info[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; LOG>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<net.sourceforge.pmd.CommandLineOptions; getReportFile[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; opts>
<java.io.Writer; close[]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; w>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System.out>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; e>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; Benchmark>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; System>
<net.sourceforge.pmd.CommandLineOptions; debugEnabled[]; boolean; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; opts>
<java.util.logging.Logger; getLevel[]; java.util.logging.Level; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; LOG>
<java.util.logging.Logger; setLevel[java.util.logging.Level]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; LOG>
<net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.ScopedLogHandlersManager; close[]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; logHandlerManager>
<java.util.logging.Logger; setLevel[java.util.logging.Level]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; LOG>
<net.sourceforge.pmd.CommandLineOptions; benchmark[]; boolean; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; opts>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; Benchmark>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; System.err>
<net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; net.sourceforge.pmd.PMD; main[java.lang.String[]]; void; null; Benchmark>
<net.sourceforge.pmd.PMD; setJavaVersion[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.PMD.PmdRunnable; PmdRunnable[java.util.concurrent.ExecutorService, net.sourceforge.pmd.DataSource, java.lang.String, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.renderers.Renderer>, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; this>
<net.sourceforge.pmd.PMD; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.PMD.PmdRunnable; PmdRunnable[java.util.concurrent.ExecutorService, net.sourceforge.pmd.DataSource, java.lang.String, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.renderers.Renderer>, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; this>
<net.sourceforge.pmd.PMD; setClassLoader[java.lang.ClassLoader]; void; net.sourceforge.pmd.PMD.PmdRunnable; PmdRunnable[java.util.concurrent.ExecutorService, net.sourceforge.pmd.DataSource, java.lang.String, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.renderers.Renderer>, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; this>
<java.lang.Thread; currentThread[]; java.lang.Thread; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; Thread>
<net.sourceforge.pmd.PMD$PmdThread; getRuleContext[]; net.sourceforge.pmd.RuleContext; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; thread>
<net.sourceforge.pmd.PMD$PmdThread; getRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; thread>
<net.sourceforge.pmd.RuleContext; setReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFile[java.io.File]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; ctx>
<java.util.logging.Logger; isLoggable[java.util.logging.Level]; boolean; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; LOG>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; LOG>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; ctx>
<net.sourceforge.pmd.renderers.Renderer; startFileAnalysis[net.sourceforge.pmd.DataSource]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; r>
<net.sourceforge.pmd.DataSource; getInputStream[]; java.io.InputStream; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; dataSource>
<net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; this>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; LOG>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; pmde>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; pmde>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; LOG>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; ioe>
<java.util.concurrent.ExecutorService; shutdownNow[]; java.util.List<java.lang.Runnable>; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; executor>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; LOG>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; re>
<java.util.concurrent.ExecutorService; shutdownNow[]; java.util.List<java.lang.Runnable>; net.sourceforge.pmd.PMD.PmdRunnable; call[]; net.sourceforge.pmd.Report; null; executor>
<java.util.concurrent.atomic.AtomicInteger; incrementAndGet[]; int; net.sourceforge.pmd.PMD.PmdThreadFactory; newThread[java.lang.Runnable]; java.lang.Thread; null; counter>
<java.util.List; add[net.sourceforge.pmd.PMD.PmdThread]; boolean; net.sourceforge.pmd.PMD.PmdThreadFactory; newThread[java.lang.Runnable]; java.lang.Thread; null; threadList>
<java.util.Collections; synchronizedList[java.util.List<net.sourceforge.pmd.PMD.PmdThread>]; java.util.List<net.sourceforge.pmd.PMD.PmdThread>; net.sourceforge.pmd.PMD.PmdThreadFactory; newThread[java.lang.Runnable]; java.lang.Thread; null; Collections>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.PMD.PmdThread; getRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; null; ruleSetFactory>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.PMD.PmdThread; getRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; null; e>
<java.util.concurrent.Executors; newFixedThreadPool[int]; java.util.concurrent.ExecutorService; net.sourceforge.pmd.PMD.PmdThread; toString[]; java.lang.String; null; Executors>
<java.util.concurrent.ExecutorService; shutdown[]; void; net.sourceforge.pmd.PMD.PmdThread; toString[]; java.lang.String; null; executor>
<net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; this>
<java.util.Collections; shuffle[java.util.List<?>]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Collections>
<java.util.Collections; sort[java.util.List<net.sourceforge.pmd.DataSource>, java.util.Comparator<? super net.sourceforge.pmd.DataSource>]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Collections>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.DataSource, net.sourceforge.pmd.DataSource]; int; null; d1>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; java.lang.Object; compare[net.sourceforge.pmd.DataSource, net.sourceforge.pmd.DataSource]; int; null; d2>
<java.lang.String; compareTo[java.lang.String]; int; java.lang.Object; compare[net.sourceforge.pmd.DataSource, net.sourceforge.pmd.DataSource]; int; null; s1>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ruleSetFactory>
<net.sourceforge.pmd.RuleSets; start[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; rs>
<java.util.concurrent.Executors; newFixedThreadPool[int, java.util.concurrent.ThreadFactory]; java.util.concurrent.ExecutorService; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Executors>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; dataSource>
<java.util.concurrent.ExecutorService; submit[java.util.concurrent.Callable<net.sourceforge.pmd.Report>]; java.util.concurrent.Future<net.sourceforge.pmd.Report>; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; executor>
<java.util.List; add[java.util.concurrent.Future<net.sourceforge.pmd.Report>]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.concurrent.ExecutorService; shutdown[]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; executor>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.List; remove[int]; java.util.concurrent.Future<net.sourceforge.pmd.Report>; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.concurrent.Future; get[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; future>
<java.lang.Thread; interrupt[]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; interrupt[]; Thread>
<java.util.concurrent.Future; cancel[boolean]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; future>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ee>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.renderers.Renderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; r>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Benchmark>
<net.sourceforge.pmd.RuleSets; end[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; rs>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.renderers.Renderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; r>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ctx>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Benchmark>
<net.sourceforge.pmd.PMD; setJavaVersion[net.sourceforge.pmd.SourceType]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; pmd>
<net.sourceforge.pmd.PMD; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; pmd>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ruleSetFactory>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; dataSource>
<net.sourceforge.pmd.RuleContext; setReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFile[java.io.File]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ctx>
<java.util.logging.Logger; isLoggable[java.util.logging.Level]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; LOG>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; LOG>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ctx>
<net.sourceforge.pmd.RuleSets; start[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; rs>
<net.sourceforge.pmd.renderers.Renderer; startFileAnalysis[net.sourceforge.pmd.DataSource]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; r>
<net.sourceforge.pmd.DataSource; getInputStream[]; java.io.InputStream; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; dataSource>
<net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; pmd>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; LOG>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; pmde>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; pmde>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; LOG>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; ioe>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; LOG>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; report>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; re>
<net.sourceforge.pmd.RuleSets; end[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; rs>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.renderers.Renderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; r>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; Benchmark>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; dataSource>
<net.sourceforge.pmd.RuleContext; setSourceCodeFilename[java.lang.String]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; ctx>
<net.sourceforge.pmd.RuleContext; setSourceCodeFile[java.io.File]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; ctx>
<java.util.logging.Logger; fine[java.lang.String]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; LOG>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; ctx>
<net.sourceforge.pmd.DataSource; getInputStream[]; java.io.InputStream; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; dataSource>
<net.sourceforge.pmd.PMD; processFile[java.io.InputStream, java.lang.String, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; this>
<java.util.logging.Logger; log[java.util.logging.Level, java.lang.String, java.lang.Throwable]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; LOG>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; pmde>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; addError[net.sourceforge.pmd.Report.ProcessingError]; ctx>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.PMD; processFiles[java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.RuleSets, boolean, boolean, java.lang.String, java.lang.String]; void; null; pmde>
<java.util.logging.Logger; isLoggable[java.util.logging.Level]; boolean; net.sourceforge.pmd.PMD; printRuleNamesInDebug[net.sourceforge.pmd.RuleSets]; void; null; LOG>
<net.sourceforge.pmd.RuleSets; getAllRules[]; java.util.Set<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.PMD; printRuleNamesInDebug[net.sourceforge.pmd.RuleSets]; void; null; rulesets>
<java.util.logging.Logger; finer[java.lang.String]; void; net.sourceforge.pmd.PMD; printRuleNamesInDebug[net.sourceforge.pmd.RuleSets]; void; null; LOG>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.PMD; printRuleNamesInDebug[net.sourceforge.pmd.RuleSets]; void; null; r>
<net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; net.sourceforge.pmd.PMD; collectFilesFromOneName[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; st>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.DataSource>]; boolean; net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; files>
<net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; this>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; st>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; inputFile>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; inputFile>
<java.io.File; isDirectory[]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; inputFile>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; filename>
<java.util.zip.ZipFile; entries[]; java.util.Enumeration<? extends java.util.zip.ZipEntry>; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; zipFile>
<java.util.Enumeration; hasMoreElements[]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; e>
<net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; fileSelector>
<java.util.zip.ZipEntry; getName[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; zipEntry>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<java.io.File; getName[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; inputFile>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<net.sourceforge.pmd.util.FileFinder; findFilesFrom[java.lang.String, java.io.FilenameFilter, boolean]; java.util.List<java.io.File>; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; finder>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; inputFile>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.CommonAbstractRule>; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; getName[]; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.CommonAbstractRule>; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; getName[]; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; size[]; int; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.CommonAbstractRule; addExample[java.lang.String]; void; null; examples>
<net.sourceforge.pmd.CommonAbstractRule; getPriority[]; int; net.sourceforge.pmd.CommonAbstractRule; getPriorityName[]; java.lang.String; null; this>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; addProperty[java.lang.String, java.lang.String]; void; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; addProperty[java.lang.String, java.lang.String]; void; setProperty[java.lang.String, java.lang.String]; this>
<java.util.Hashtable; putAll[java.util.Map<? extends java.lang.Object,? extends java.lang.Object>]; void; net.sourceforge.pmd.CommonAbstractRule; addProperties[java.util.Properties]; void; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; addProperties[java.util.Properties]; void; putAll[java.util.Map<? extends java.lang.Object,? extends java.lang.Object>]; this>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; containsKey[java.lang.Object]; this>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; null; propertiesByName()>
<net.sourceforge.pmd.CommonAbstractRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; containsKey[java.lang.Object]; this>
<java.lang.Boolean; parseBoolean[java.lang.String]; boolean; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; null; Boolean>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; getProperty[java.lang.String]; this>
<java.lang.Boolean; booleanValue[]; boolean; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; null; ((Boolean)getProperty(descriptor))>
<net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[net.sourceforge.pmd.PropertyDescriptor]; boolean; booleanValue[]; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperties[net.sourceforge.pmd.PropertyDescriptor]; boolean[]; null; this>
<java.lang.Boolean; booleanValue[]; boolean; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperties[net.sourceforge.pmd.PropertyDescriptor]; boolean[]; null; values[i]>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; null; Integer>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; getProperty[java.lang.String]; this>
<java.lang.Number; intValue[]; int; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; null; ((Number)getProperty(descriptor))>
<net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; intValue[]; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; net.sourceforge.pmd.CommonAbstractRule; getIntProperties[net.sourceforge.pmd.PropertyDescriptor]; int[]; null; this>
<java.lang.Number; intValue[]; int; net.sourceforge.pmd.CommonAbstractRule; getIntProperties[net.sourceforge.pmd.PropertyDescriptor]; int[]; null; values[i]>
<java.lang.Double; parseDouble[java.lang.String]; double; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[java.lang.String]; double; null; Double>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[java.lang.String]; double; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[java.lang.String]; double; getProperty[java.lang.String]; this>
<java.lang.Number; doubleValue[]; double; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[net.sourceforge.pmd.PropertyDescriptor]; double; null; ((Number)getProperty(descriptor))>
<net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[net.sourceforge.pmd.PropertyDescriptor]; double; doubleValue[]; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperties[net.sourceforge.pmd.PropertyDescriptor]; double[]; null; this>
<java.lang.Number; doubleValue[]; double; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperties[net.sourceforge.pmd.PropertyDescriptor]; double[]; null; values[i]>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; getProperty[java.lang.String]; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getStringProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; net.sourceforge.pmd.CommonAbstractRule; getStringProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.String[]; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; net.sourceforge.pmd.CommonAbstractRule; getTypeProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Class[]; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getTypeProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Class; null; this>
<net.sourceforge.pmd.PropertyDescriptor; maxValueCount[]; int; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; descriptor>
<net.sourceforge.pmd.CommonAbstractRule; propertyGetError[net.sourceforge.pmd.PropertyDescriptor, boolean]; void; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; getProperty[java.lang.String]; this>
<net.sourceforge.pmd.PropertyDescriptor; name[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; descriptor>
<java.lang.String; length[]; int; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; rawValue>
<net.sourceforge.pmd.PropertyDescriptor; defaultValue[]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; valueFrom[java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; maxValueCount[]; int; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; descriptor>
<net.sourceforge.pmd.CommonAbstractRule; propertySetError[net.sourceforge.pmd.PropertyDescriptor, boolean]; void; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; this>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; setProperty[java.lang.String, java.lang.String]; this>
<net.sourceforge.pmd.PropertyDescriptor; name[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; asDelimitedString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; maxValueCount[]; int; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; descriptor>
<net.sourceforge.pmd.CommonAbstractRule; propertyGetError[net.sourceforge.pmd.PropertyDescriptor, boolean]; void; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; getProperty[java.lang.String]; this>
<net.sourceforge.pmd.PropertyDescriptor; name[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; descriptor>
<java.lang.String; length[]; int; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; rawValue>
<net.sourceforge.pmd.PropertyDescriptor; defaultValue[]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; valueFrom[java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; maxValueCount[]; int; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; descriptor>
<net.sourceforge.pmd.CommonAbstractRule; propertySetError[net.sourceforge.pmd.PropertyDescriptor, boolean]; void; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; this>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; setProperty[java.lang.String, java.lang.String]; this>
<net.sourceforge.pmd.PropertyDescriptor; name[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; descriptor>
<net.sourceforge.pmd.PropertyDescriptor; asDelimitedString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; descriptor>
<java.util.Collections; emptyMap[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.CommonAbstractRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; Collections>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.PropertyDescriptor; net.sourceforge.pmd.CommonAbstractRule; propertyDescriptorFor[java.lang.String]; net.sourceforge.pmd.PropertyDescriptor; null; propertiesByName()>
<net.sourceforge.pmd.CommonAbstractRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.CommonAbstractRule; propertyDescriptorFor[java.lang.String]; net.sourceforge.pmd.PropertyDescriptor; get[java.lang.Object]; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.CommonAbstractRule; usesRuleChain[]; boolean; null; getRuleChainVisits()>
<net.sourceforge.pmd.CommonAbstractRule; getRuleChainVisits[]; java.util.List<java.lang.String>; net.sourceforge.pmd.CommonAbstractRule; usesRuleChain[]; boolean; isEmpty[]; this>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; addRuleChainVisit[java.lang.String]; void; null; ruleChainVisits>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.CommonAbstractRule; addRuleChainVisit[java.lang.String]; void; null; ruleChainVisits>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; this.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.CommonAbstractRule>; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; getName[]; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; o.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; getName[]; o>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; this.getName()>
<net.sourceforge.pmd.CommonAbstractRule; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; that>
<net.sourceforge.pmd.CommonAbstractRule; getPriority[]; int; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; this>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; that>
<java.util.Hashtable; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; this.getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.Rule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; that>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; hashCode[]; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.CommonAbstractRule>; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; getName[]; this>
<net.sourceforge.pmd.CommonAbstractRule; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this.getName()>
<net.sourceforge.pmd.CommonAbstractRule; getName[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; hashCode[]; this>
<net.sourceforge.pmd.CommonAbstractRule; getPriority[]; int; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this>
<java.util.Hashtable; hashCode[]; int; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this.getProperties()>
<net.sourceforge.pmd.CommonAbstractRule; getProperties[]; java.util.Properties; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; hashCode[]; this>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.PropertyDescriptor]; net.sourceforge.pmd.PropertyDescriptor; net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; descriptorsByName>
<net.sourceforge.pmd.PropertyDescriptor; name[]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; descriptor>
<java.util.Collections; unmodifiableMap[java.util.Map<? extends java.lang.String,? extends net.sourceforge.pmd.PropertyDescriptor>]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; Collections>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; this>
<java.util.Collections; synchronizedMap[java.util.Map<java.lang.String,java.lang.Object>]; java.util.Map<java.lang.String,java.lang.Object>; net.sourceforge.pmd.RuleContext; RuleContext[]; void; null; Collections>
<net.sourceforge.pmd.Report; exclude[java.util.Map<java.lang.Integer,java.lang.String>]; void; net.sourceforge.pmd.RuleContext; excludeLines[java.util.Map<java.lang.Integer,java.lang.String>]; void; null; report>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleContext; setAttribute[java.lang.String, java.lang.Object]; boolean; null; this.attributes>
<java.util.Map; put[java.lang.String, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; setAttribute[java.lang.String, java.lang.Object]; boolean; null; this.attributes>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; getAttribute[java.lang.String]; java.lang.Object; null; this.attributes>
<java.util.Map; remove[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; removeAttribute[java.lang.String]; java.lang.Object; null; this.attributes>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; ruleString>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; st>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; net.sourceforge.pmd.SimpleRuleSetNameMapper; SimpleRuleSetNameMapper[java.lang.String]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; getRuleSets[]; java.lang.String; null; rulesets>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; name>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; nameMap>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; this>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; nameMap>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; this>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; null; rulesets>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; null; rulesets>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; null; rulesets>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.AbstractJavaRule; addViolationWithMessage[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; MessageFormat>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; MessageFormat>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; addViolation[java.lang.Object, net.sourceforge.pmd.ast.Node, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractJavaRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; acus>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; i>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration>]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.AbstractJavaRule; getDeclaringType[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; getDeclaringType[net.sourceforge.pmd.ast.SimpleNode]; java.lang.String; null; c>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; isQualifiedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; indexOf[int]; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTImportDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTImportDeclaration>; net.sourceforge.pmd.AbstractJavaRule; importsPackage[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; boolean; null; node>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.AbstractJavaRule; importsPackage[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; boolean; null; n.getPackageName()>
<net.sourceforge.pmd.ast.ASTImportDeclaration; getPackageName[]; java.lang.String; net.sourceforge.pmd.AbstractJavaRule; importsPackage[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.String]; boolean; startsWith[java.lang.String]; n>
<net.sourceforge.pmd.ast.SimpleJavaNode; childrenAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTExtendsList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTImplementsList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeParameters, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMemberSelector, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeParameter, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeBound, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTEnumBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTEnumConstant, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTReferenceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeArguments, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeArgument, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTWildcardBounds, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTNormalAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMarkerAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTSingleMemberAnnotation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMemberValuePairs, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMemberValuePair, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMemberValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeBody, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAnnotationMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTDefaultValue, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTRUNSIGNEDSHIFT, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAssertStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPackageDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTVariableInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTArrayInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTFormalParameters, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTFormalParameter, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTInitializer, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPrimitiveType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTResultType, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTNameList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAssignmentOperator, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTConditionalOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTConditionalAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTInclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTExclusiveOrExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAndExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTInstanceOfExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTRelationalExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTShiftExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTMultiplicativeExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTUnaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPreIncrementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPreDecrementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPostfixExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTCastExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTPrimarySuffix, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTBooleanLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTNullLiteral, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTArguments, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTArgumentList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTArrayDimsAndInits, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTBlockStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTEmptyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTStatementExpressionList, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTSynchronizedStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.AbstractJavaRule; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; NodeIterator[net.sourceforge.pmd.ast.Node]; void; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; next[]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.jaxen.NodeIterator; getPositionFromParent[net.sourceforge.pmd.ast.Node]; int; net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getPositionFromParent[net.sourceforge.pmd.ast.Node]; int; null; contextNode>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.jaxen.NodeIterator; getPositionFromParent[net.sourceforge.pmd.ast.Node]; int; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getPositionFromParent[net.sourceforge.pmd.ast.Node]; int; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.jaxen.NodeIterator; getPositionFromParent[net.sourceforge.pmd.ast.Node]; int; net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; parentNode>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.jaxen.NodeIterator; getFirstChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.jaxen.NodeIterator; getLastChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getLastChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.jaxen.NodeIterator; getLastChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; contextNode>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; MethodWrapper[java.lang.reflect.Method]; void; null; this>
<java.lang.reflect.Method; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; MethodWrapper[java.lang.reflect.Method]; void; null; m>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; length[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; "get">
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; length[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; "is">
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; length[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; "has">
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; n>
<java.lang.String; length[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper; truncateMethodName[java.lang.String]; java.lang.String; null; "uses">
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; contextNode>
<java.lang.Class; getMethods[]; java.lang.reflect.Method[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; contextNode.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; getMethods[]; contextNode>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; this>
<java.util.List; add[net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.Map; put[java.lang.Class, net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; contextNode>
<java.util.List; toArray[net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.List; size[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.Node>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; contextNode>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator; getNextAttribute[]; net.sourceforge.pmd.jaxen.Attribute; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; this>
<net.sourceforge.pmd.jaxen.AttributeAxisIterator; getNextAttribute[]; net.sourceforge.pmd.jaxen.Attribute; net.sourceforge.pmd.jaxen.AttributeAxisIterator; next[]; net.sourceforge.pmd.jaxen.Attribute; null; this>
<java.lang.reflect.Method; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; method>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; isAttributeAccessor[java.lang.reflect.Method]; boolean; null; methodName>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; null; method>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; null; String>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; null; iae>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; null; ite>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.Attribute; toString[]; java.lang.String; null; this>
<not found; registerFunction[]; not found; net.sourceforge.pmd.jaxen.TypeOfFunction; registerSelfInSimpleContext[]; void; null; ((SimpleFunctionContext)XPathFunctionContext.getInstance())>
<not found; getInstance[]; not found; net.sourceforge.pmd.jaxen.TypeOfFunction; registerSelfInSimpleContext[]; void; registerFunction[]; XPathFunctionContext>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<not found; get[]; not found; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; context.getNodeSet()>
<not found; getNodeSet[]; not found; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; get[]; context>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attributes>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; ((TypeNode)n)>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; size[]; int; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; typeName>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attr>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; shortName>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attr>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; type.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; equals[java.lang.Object]; type>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; type.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; equals[java.lang.Object]; type>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attr>
<java.util.Arrays; asList[java.lang.Class[]]; java.util.List<java.lang.Class>; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; Arrays>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; type>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; implementors>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; type>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; superC>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; superC.getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; equals[java.lang.Object]; superC>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; superC>
<not found; registerFunction[]; not found; net.sourceforge.pmd.jaxen.MatchesFunction; registerSelfInSimpleContext[]; void; null; ((SimpleFunctionContext)XPathFunctionContext.getInstance())>
<not found; getInstance[]; not found; net.sourceforge.pmd.jaxen.MatchesFunction; registerSelfInSimpleContext[]; void; registerFunction[]; XPathFunctionContext>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attributes>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; Pattern>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; check>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attr>
<java.util.regex.Matcher; find[]; boolean; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; matcher>
<not found; getNodeSet[]; not found; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; context>
<java.util.ArrayList; iterator[]; java.util.Iterator; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; new ArrayList()>
<net.sourceforge.pmd.jaxen.Attribute; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.DocumentNavigator; getAttributeName[java.lang.Object]; java.lang.String; null; ((Attribute)arg0)>
<net.sourceforge.pmd.jaxen.Attribute; getName[]; java.lang.String; net.sourceforge.pmd.jaxen.DocumentNavigator; getAttributeQName[java.lang.Object]; java.lang.String; null; ((Attribute)arg0)>
<net.sourceforge.pmd.jaxen.Attribute; getValue[]; java.lang.String; net.sourceforge.pmd.jaxen.DocumentNavigator; getAttributeStringValue[java.lang.Object]; java.lang.String; null; ((Attribute)arg0)>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.jaxen.DocumentNavigator; getElementName[java.lang.Object]; java.lang.String; null; node>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getElementName[java.lang.Object]; java.lang.String; net.sourceforge.pmd.jaxen.DocumentNavigator; getElementQName[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.DocumentNavigator; getParentNode[java.lang.Object]; java.lang.Object; null; ((Node)arg0)>
<net.sourceforge.pmd.jaxen.Attribute; getParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.DocumentNavigator; getParentNode[java.lang.Object]; java.lang.Object; null; ((Attribute)arg0)>
<net.sourceforge.pmd.jaxen.NodeIterator; getFirstChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.DocumentNavigator; isAttribute[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.DocumentNavigator; getParentAxisIterator[java.lang.Object]; java.util.Iterator; null; this>
<net.sourceforge.pmd.jaxen.Attribute; getParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.DocumentNavigator; getParentAxisIterator[java.lang.Object]; java.util.Iterator; null; ((Attribute)contextNode)>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.DocumentNavigator; getParentAxisIterator[java.lang.Object]; java.util.Iterator; null; ((Node)contextNode)>
<null; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<null; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<null; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<net.sourceforge.pmd.jaxen.NodeIterator; getFirstChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getNextSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<null; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<null; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<net.sourceforge.pmd.jaxen.NodeIterator; getLastChild[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.jaxen.NodeIterator; getPreviousSibling[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<null; getFirstNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.jaxen.NodeIterator; getNextNode[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; node>
<net.sourceforge.pmd.jaxen.DocumentNavigator; isDocument[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.DocumentNavigator; getDocumentNode[java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getDocumentNode[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jaxen.DocumentNavigator; getDocumentNode[java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.jaxen.DocumentNavigator; getParentNode[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.jaxen.DocumentNavigator; getDocumentNode[java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.parsers.Java16Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.parsers.Java16Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.Java16Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.parsers.Java16Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; parser>
<net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.JspParser; parse[java.io.Reader]; java.lang.Object; null; new net.sourceforge.pmd.jsp.ast.JspParser(new JspCharStream(source))>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.parsers.Java15Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.parsers.Java15Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.Java15Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.parsers.Java15Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setJDK13[]; void; net.sourceforge.pmd.parsers.Java13Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.parsers.Java13Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.Java13Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.parsers.Java13Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.parsers.Java14Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.Java14Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.parsers.Java14Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.parsers.Java17Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; setExcludeMarker[java.lang.String]; void; net.sourceforge.pmd.parsers.Java17Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; CompilationUnit[]; net.sourceforge.pmd.ast.ASTCompilationUnit; net.sourceforge.pmd.parsers.Java17Parser; parse[java.io.Reader]; java.lang.Object; null; parser>
<net.sourceforge.pmd.ast.JavaParser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; net.sourceforge.pmd.parsers.Java17Parser; getExcludeMap[]; java.util.Map<java.lang.Integer,java.lang.String>; null; parser>
<net.sourceforge.pmd.properties.FloatProperty; asFloats[float[]]; java.lang.Float[]; net.sourceforge.pmd.properties.FloatProperty; FloatProperty[java.lang.String, java.lang.String, float[], float, int]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.FloatProperty; FloatProperty[java.lang.String, java.lang.String, java.lang.Float[], float, int]; void; null; this>
<java.lang.Float; valueOf[java.lang.String]; java.lang.Float; net.sourceforge.pmd.properties.FloatProperty; createFrom[java.lang.String]; java.lang.Object; null; Float>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; net.sourceforge.pmd.properties.BooleanProperty; BooleanProperty[java.lang.String, java.lang.String, boolean, float]; void; null; Boolean>
<net.sourceforge.pmd.properties.BooleanProperty; asBooleans[boolean[]]; java.lang.Boolean[]; net.sourceforge.pmd.properties.BooleanProperty; BooleanProperty[java.lang.String, java.lang.String, boolean[], float, int]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.BooleanProperty; BooleanProperty[java.lang.String, java.lang.String, java.lang.Boolean[], float, int]; void; null; this>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; net.sourceforge.pmd.properties.BooleanProperty; asBooleans[boolean[]]; java.lang.Boolean[]; null; Boolean>
<java.lang.Boolean; valueOf[java.lang.String]; java.lang.Boolean; net.sourceforge.pmd.properties.BooleanProperty; createFrom[java.lang.String]; java.lang.Object; null; Boolean>
<java.lang.Character; valueOf[char]; java.lang.Character; net.sourceforge.pmd.properties.CharacterProperty; CharacterProperty[java.lang.String, java.lang.String, char, float]; void; null; Character>
<net.sourceforge.pmd.properties.CharacterProperty; asCharacters[char[]]; java.lang.Character[]; net.sourceforge.pmd.properties.CharacterProperty; CharacterProperty[java.lang.String, java.lang.String, char[], float, char]; void; null; this>
<java.lang.String; toCharArray[]; char[]; net.sourceforge.pmd.properties.CharacterProperty; CharacterProperty[java.lang.String, java.lang.String, java.lang.String, float, char]; void; null; theDefaults>
<net.sourceforge.pmd.properties.AbstractPMDProperty; multiValueDelimiter[char]; void; net.sourceforge.pmd.properties.CharacterProperty; CharacterProperty[java.lang.String, java.lang.String, java.lang.Character[], float, char]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.CharacterProperty; CharacterProperty[java.lang.String, java.lang.String, java.lang.Character[], float, char]; void; null; this>
<java.lang.Character; valueOf[char]; java.lang.Character; net.sourceforge.pmd.properties.CharacterProperty; asCharacters[char[]]; java.lang.Character[]; null; Character>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; valueString>
<java.lang.Character; valueOf[char]; java.lang.Character; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; valueString>
<net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; StringUtil>
<java.lang.Character; valueOf[char]; java.lang.Character; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; Character>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.properties.CharacterProperty; valueFrom[java.lang.String]; java.lang.Object; null; values[i]>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.StringProperty; StringProperty[java.lang.String, java.lang.String, java.lang.String, float]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.StringProperty; StringProperty[java.lang.String, java.lang.String, java.lang.String[], float, char]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; multiValueDelimiter[char]; void; net.sourceforge.pmd.properties.StringProperty; StringProperty[java.lang.String, java.lang.String, java.lang.String[], float, char]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.StringProperty; StringProperty[java.lang.String, java.lang.String, java.lang.Object, float, char]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; multiValueDelimiter[char]; void; net.sourceforge.pmd.properties.StringProperty; StringProperty[java.lang.String, java.lang.String, java.lang.Object, float, char]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.StringProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; net.sourceforge.pmd.properties.StringProperty; valueFrom[java.lang.String]; java.lang.Object; null; StringUtil>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.properties.StringProperty; containsDelimiter[java.lang.String]; boolean; null; value>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.StringProperty; valueErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.StringProperty; containsDelimiter[java.lang.String]; boolean; net.sourceforge.pmd.properties.StringProperty; valueErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.StringProperty; illegalCharMsg[]; java.lang.String; net.sourceforge.pmd.properties.StringProperty; valueErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.StringProperty; containsDelimiter[java.lang.String]; boolean; net.sourceforge.pmd.properties.StringProperty; valueErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.StringProperty; illegalCharMsg[]; java.lang.String; net.sourceforge.pmd.properties.StringProperty; valueErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.util.CollectionUtil; mapFrom[java.lang.String[], E[]]; java.util.Map<java.lang.String,E>; net.sourceforge.pmd.properties.EnumeratedProperty; EnumeratedProperty[java.lang.String, java.lang.String, java.lang.String[], E[], float, int]; void; null; CollectionUtil>
<net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<java.lang.String,E>]; java.util.Map<E,java.lang.String>; net.sourceforge.pmd.properties.EnumeratedProperty; EnumeratedProperty[java.lang.String, java.lang.String, java.lang.String[], E[], float, int]; void; null; CollectionUtil>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.EnumeratedProperty; EnumeratedProperty[java.lang.String, java.lang.String, java.lang.String[], E[], float, int]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; this>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; labelsByChoice>
<net.sourceforge.pmd.properties.EnumeratedProperty; nonLegalValueMsgFor[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; this>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; labelsByChoice>
<net.sourceforge.pmd.properties.EnumeratedProperty; nonLegalValueMsgFor[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; this>
<java.util.Map; get[java.lang.Object]; E; net.sourceforge.pmd.properties.EnumeratedProperty; choiceFrom[java.lang.String]; E; null; choicesByLabel>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.EnumeratedProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.EnumeratedProperty; choiceFrom[java.lang.String]; E; net.sourceforge.pmd.properties.EnumeratedProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; net.sourceforge.pmd.properties.EnumeratedProperty; valueFrom[java.lang.String]; java.lang.Object; null; StringUtil>
<net.sourceforge.pmd.properties.EnumeratedProperty; choiceFrom[java.lang.String]; E; net.sourceforge.pmd.properties.EnumeratedProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; this>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asString[java.lang.Object]; java.lang.String; null; value>
<net.sourceforge.pmd.properties.AbstractPMDProperty; asString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<net.sourceforge.pmd.properties.AbstractPMDProperty; asString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; this>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<net.sourceforge.pmd.properties.AbstractPMDProperty; asString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; sb>
<net.sourceforge.pmd.properties.AbstractPMDProperty; asString[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.PropertyDescriptor; uiOrder[]; float; net.sourceforge.pmd.properties.AbstractPMDProperty; compareTo[net.sourceforge.pmd.PropertyDescriptor]; int; null; otherProperty>
<net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; errorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; valueErrorFor[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; errorFor[java.lang.Object]; java.lang.String; null; this>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; isArray[java.lang.Object]; boolean; null; value.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.properties.AbstractPMDProperty; isArray[java.lang.Object]; boolean; getComponentType[]; value>
<net.sourceforge.pmd.properties.AbstractPMDProperty; isArray[java.lang.Object]; boolean; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.PropertyDescriptor; type[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; this>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; value.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; getComponentType[]; value>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; arrayType>
<net.sourceforge.pmd.PropertyDescriptor; type[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.PropertyDescriptor; type[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; this>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; type()>
<net.sourceforge.pmd.PropertyDescriptor; type[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; isAssignableFrom[java.lang.Class<?>]; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; value>
<net.sourceforge.pmd.PropertyDescriptor; type[]; java.lang.Class<?>; net.sourceforge.pmd.properties.AbstractPMDProperty; typeErrorFor[java.lang.Object]; java.lang.String; null; this>
<net.sourceforge.pmd.Rule; getStringProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; propertyErrorFor[net.sourceforge.pmd.Rule]; java.lang.String; null; rule>
<net.sourceforge.pmd.properties.AbstractPMDProperty; name[]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; propertyErrorFor[net.sourceforge.pmd.Rule]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; isRequired[]; boolean; net.sourceforge.pmd.properties.AbstractPMDProperty; propertyErrorFor[net.sourceforge.pmd.Rule]; java.lang.String; null; this>
<net.sourceforge.pmd.PropertyDescriptor; valueFrom[java.lang.String]; java.lang.Object; net.sourceforge.pmd.properties.AbstractPMDProperty; propertyErrorFor[net.sourceforge.pmd.Rule]; java.lang.String; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; errorFor[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.AbstractPMDProperty; propertyErrorFor[net.sourceforge.pmd.Rule]; java.lang.String; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.properties.AbstractPMDProperty; areEqual[java.lang.Object, java.lang.Object]; boolean; null; value>
<net.sourceforge.pmd.properties.DoubleProperty; asDoubles[double[]]; java.lang.Double[]; net.sourceforge.pmd.properties.DoubleProperty; DoubleProperty[java.lang.String, java.lang.String, double[], float, int]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.DoubleProperty; DoubleProperty[java.lang.String, java.lang.String, java.lang.Double[], float, int]; void; null; this>
<java.lang.Double; valueOf[java.lang.String]; java.lang.Double; net.sourceforge.pmd.properties.DoubleProperty; createFrom[java.lang.String]; java.lang.Object; null; Double>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.TypeProperty; TypeProperty[java.lang.String, java.lang.String, java.lang.Class, float]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.TypeProperty; TypeProperty[java.lang.String, java.lang.String, java.lang.Class[], float]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.properties.TypeProperty; asString[java.lang.Object]; java.lang.String; null; ((Class)value)>
<net.sourceforge.pmd.util.ClassUtil; getTypeFor[java.lang.String]; java.lang.Class; net.sourceforge.pmd.properties.TypeProperty; classFrom[java.lang.String]; java.lang.Class; null; ClassUtil>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.properties.TypeProperty; classFrom[java.lang.String]; java.lang.Class; null; Class>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.TypeProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.TypeProperty; classFrom[java.lang.String]; java.lang.Class; net.sourceforge.pmd.properties.TypeProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.TypeProperty; classFrom[java.lang.String]; java.lang.Class; net.sourceforge.pmd.properties.TypeProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.MethodProperty; classIn[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.properties.MethodProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.MethodProperty; methodNameIn[java.lang.String]; java.lang.String; net.sourceforge.pmd.properties.MethodProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.MethodProperty; parameterTypesIn[java.lang.String]; java.lang.Class[]; net.sourceforge.pmd.properties.MethodProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; net.sourceforge.pmd.properties.MethodProperty; valueFrom[java.lang.String]; java.lang.Object; null; cls>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.properties.MethodProperty; classIn[java.lang.String]; java.lang.Class<?>; null; propertyString>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.properties.MethodProperty; classIn[java.lang.String]; java.lang.Class<?>; null; propertyString>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.properties.MethodProperty; classIn[java.lang.String]; java.lang.Class<?>; null; Class>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.properties.MethodProperty; methodNameIn[java.lang.String]; java.lang.String; null; propertyString>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.properties.MethodProperty; methodNameIn[java.lang.String]; java.lang.String; null; propertyString>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[]; int; net.sourceforge.pmd.properties.AbstractScalarProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.AbstractScalarProperty; createFrom[java.lang.String]; java.lang.Object; net.sourceforge.pmd.properties.AbstractScalarProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, char]; java.lang.String[]; net.sourceforge.pmd.properties.AbstractScalarProperty; valueFrom[java.lang.String]; java.lang.Object; null; StringUtil>
<net.sourceforge.pmd.properties.AbstractScalarProperty; arrayFor[int]; java.lang.Object[]; net.sourceforge.pmd.properties.AbstractScalarProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.AbstractScalarProperty; createFrom[java.lang.String]; java.lang.Object; net.sourceforge.pmd.properties.AbstractScalarProperty; valueFrom[java.lang.String]; java.lang.Object; null; this>
<net.sourceforge.pmd.properties.IntegerProperty; asIntegers[int[]]; java.lang.Integer[]; net.sourceforge.pmd.properties.IntegerProperty; IntegerProperty[java.lang.String, java.lang.String, int[], float, int]; void; null; this>
<net.sourceforge.pmd.properties.AbstractPMDProperty; maxValueCount[int]; void; net.sourceforge.pmd.properties.IntegerProperty; IntegerProperty[java.lang.String, java.lang.String, java.lang.Integer[], float, int]; void; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.properties.IntegerProperty; asIntegers[int[]]; java.lang.Integer[]; null; Integer>
<java.lang.Integer; valueOf[java.lang.String]; java.lang.Integer; net.sourceforge.pmd.properties.IntegerProperty; createFrom[java.lang.String]; java.lang.Object; null; Integer>
<net.sourceforge.pmd.util.CollectionUtil; mapFrom[net.sourceforge.pmd.SourceType[], net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler[]]; java.util.Map<net.sourceforge.pmd.SourceType,net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler>; net.sourceforge.pmd.sourcetypehandlers.Java16Handler; getParser[]; net.sourceforge.pmd.parsers.Parser; null; CollectionUtil>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandlerBroker; getVisitorsFactoryForSourceType[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; null; mapSourceTypeOnSourceTypeHandler>
<net.sourceforge.pmd.dfa.DataFlowFacade; initializeWith[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; java.lang.Object; start[java.lang.Object]; void; null; new DataFlowFacade()>
<net.sourceforge.pmd.symboltable.SymbolFacade; initializeWith[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; java.lang.Object; start[java.lang.Object]; void; null; new SymbolFacade()>
<net.sourceforge.pmd.typeresolution.TypeResolutionFacade; initializeWith[java.lang.ClassLoader, net.sourceforge.pmd.ast.ASTCompilationUnit]; void; java.lang.Object; start[java.lang.Object]; void; null; new TypeResolutionFacade()>
<net.sourceforge.pmd.jsp.ast.JspParser; CompilationUnit[]; net.sourceforge.pmd.jsp.ast.ASTCompilationUnit; java.lang.Object; parse[java.io.Reader]; java.lang.Object; null; new net.sourceforge.pmd.jsp.ast.JspParser(new JspCharStream(source))>
<java.lang.Runtime; availableProcessors[]; int; net.sourceforge.pmd.RuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; net.sourceforge.pmd.RuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; availableProcessors[]; Runtime>
<java.io.InputStreamReader; getEncoding[]; java.lang.String; net.sourceforge.pmd.RuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; new InputStreamReader(System.in)>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; this>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[0]>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; getRuleSets[]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; new SimpleRuleSetNameMapper(args[optIndex + 2])>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; Integer>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; MessageFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; Integer>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; MessageFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; args[i]>
<net.sourceforge.pmd.CommandLineOptions; usage[]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; CommandLineOptions[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; reportFormat>
<java.lang.Class; newInstance[]; ; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; Class.forName(reportFormat)>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; newInstance[]; Class>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Exception>; net.sourceforge.pmd.CommandLineOptions; createRenderer[]; net.sourceforge.pmd.renderers.Renderer; getName[]; e>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.CommandLineOptions; containsCommaSeparatedFileList[]; boolean; null; inputPath>
<java.util.zip.ZipFile; getInputStream[java.util.zip.ZipEntry]; java.io.InputStream; net.sourceforge.pmd.ZipDataSource; getInputStream[]; java.io.InputStream; null; zipFile>
<java.util.zip.ZipFile; getName[]; java.lang.String; net.sourceforge.pmd.ZipDataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; null; zipFile>
<java.util.zip.ZipEntry; getName[]; java.lang.String; net.sourceforge.pmd.ZipDataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; null; zipEntry>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; null; fileName>
<java.lang.String; toUpperCase[]; java.lang.String; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; null; fileName.substring(1 + lastDotIndex)>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; toUpperCase[]; fileName>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; null; extensionUppercase>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; null; extensionUppercase>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; null; extensionUppercase>
<net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.lang.String]; boolean; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.io.File]; boolean; null; this>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.SourceFileSelector; isWantedFile[java.io.File]; boolean; null; file>
<java.io.OutputStream; flush[]; void; net.sourceforge.pmd.RuleSetWriter; close[]; void; null; outputStream>
<java.io.OutputStream; close[]; void; net.sourceforge.pmd.RuleSetWriter; close[]; void; null; outputStream>
<javax.xml.parsers.DocumentBuilderFactory; newInstance[]; javax.xml.parsers.DocumentBuilderFactory; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; DocumentBuilderFactory>
<javax.xml.parsers.DocumentBuilderFactory; newDocumentBuilder[]; javax.xml.parsers.DocumentBuilder; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; documentBuilderFactory>
<javax.xml.parsers.DocumentBuilder; newDocument[]; org.w3c.dom.Document; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; documentBuilder>
<net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; document>
<javax.xml.transform.TransformerFactory; newInstance[]; javax.xml.transform.TransformerFactory; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; TransformerFactory>
<javax.xml.transform.TransformerFactory; newTransformer[]; javax.xml.transform.Transformer; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; transformerFactory>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; transformer>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; transformer>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; transformer>
<javax.xml.transform.Transformer; setOutputProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; null; transformer>
<javax.xml.transform.Transformer; transform[javax.xml.transform.Source, javax.xml.transform.Result]; void; net.sourceforge.pmd.RuleSetWriter; write[net.sourceforge.pmd.RuleSet]; void; setOutputProperty[java.lang.String, java.lang.String]; transformer>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<org.w3c.dom.Element; setAttributeNS[java.lang.String, java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<org.w3c.dom.Element; setAttributeNS[java.lang.String, java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.RuleSet; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.Language; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet.getLanguage()>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; getName[]; ruleSet>
<net.sourceforge.pmd.RuleSetWriter; createDescriptionElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSet; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.RuleSet; getExcludePatterns[]; java.util.List<java.lang.String>; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<net.sourceforge.pmd.RuleSetWriter; createExcludePatternElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.RuleSet; getIncludePatterns[]; java.util.List<java.lang.String>; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<net.sourceforge.pmd.RuleSetWriter; createIncludePatternElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSet>
<net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createRuleSetElement[net.sourceforge.pmd.RuleSet]; org.w3c.dom.Element; null; ruleSetElement>
<net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createDescriptionElement[java.lang.String]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createExcludePatternElement[java.lang.String]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createIncludePatternElement[java.lang.String]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleReference; getRuleSetReference[]; net.sourceforge.pmd.RuleSetReference; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleSetReference; isAllRules[]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetReference>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetFileNames>
<net.sourceforge.pmd.RuleSetReference; getRuleSetFileName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetReference>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetFileNames>
<net.sourceforge.pmd.RuleSetReference; getRuleSetFileName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetReference>
<net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleReference; getOverriddenName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleSetReference; getRuleSetFileName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference.getRuleSetReference()>
<net.sourceforge.pmd.RuleReference; getRuleSetReference[]; net.sourceforge.pmd.RuleSetReference; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; getRuleSetFileName[]; ruleReference>
<net.sourceforge.pmd.AbstractDelegateRule; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenDescription[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenPriority[]; java.lang.Integer; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenProperties[]; java.util.Properties; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleReference; getOverriddenExamples[]; java.util.List<java.lang.String>; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleReference>
<net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getSince[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getRuleClass[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; usesDFA[]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; usesTypeResolution[]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getDescription[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getProperties[]; java.util.Properties; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<net.sourceforge.pmd.Rule; getExamples[]; java.util.List<java.lang.String>; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; rule>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<java.lang.Boolean; toString[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; dfa>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<java.lang.Boolean; toString[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; typeResolution>
<net.sourceforge.pmd.RuleSetWriter; createDescriptionElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<net.sourceforge.pmd.RuleSetWriter; createPriorityElement[java.lang.Integer]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<net.sourceforge.pmd.RuleSetWriter; createExampleElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createSingleRuleElement[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Integer, java.util.Properties, java.util.List<java.lang.String>]; org.w3c.dom.Element; null; ruleElement>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; ruleSetReferenceElement>
<net.sourceforge.pmd.RuleSetReference; getRuleSetFileName[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; ruleSetReference>
<net.sourceforge.pmd.RuleSetReference; getExcludes[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; ruleSetReference>
<net.sourceforge.pmd.RuleSetWriter; createExcludeElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createRuleSetReferenceElement[net.sourceforge.pmd.RuleSetReference]; org.w3c.dom.Element; null; ruleSetReferenceElement>
<net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createExcludeElement[java.lang.String]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSetWriter; createCDATASectionElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createExampleElement[java.lang.String]; org.w3c.dom.Element; null; this>
<net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createPriorityElement[java.lang.Integer]; org.w3c.dom.Element; null; this>
<java.lang.Integer; toString[]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createPriorityElement[java.lang.Integer]; org.w3c.dom.Element; null; priority>
<java.util.Hashtable; isEmpty[]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; properties>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; document>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; properties>
<net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; this>
<java.util.Map$Entry; getKey[]; java.lang.Object; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; entry>
<java.util.Map$Entry; getValue[]; java.lang.Object; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; entry>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; propertiesElement>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; propertyElement>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; "xpath">
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; propertyElement>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<net.sourceforge.pmd.RuleSetWriter; createCDATASectionElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; this>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; propertyElement>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; "pluginname">
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; propertyElement>
<org.w3c.dom.Element; setAttribute[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; propertyElement>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Document; createTextNode[java.lang.String]; org.w3c.dom.Text; net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createTextElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; element>
<org.w3c.dom.Document; createElement[java.lang.String]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetWriter; createCDATASectionElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Document; createCDATASection[java.lang.String]; org.w3c.dom.CDATASection; net.sourceforge.pmd.RuleSetWriter; createCDATASectionElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; document>
<org.w3c.dom.Node; appendChild[org.w3c.dom.Node]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetWriter; createCDATASectionElement[java.lang.String, java.lang.String]; org.w3c.dom.Element; null; element>
<net.sourceforge.pmd.ast.SimpleNode; setDataFlowNode[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; node>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; parent>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.DataFlowNode]; void; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this.children>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this>
<java.util.List; add[net.sourceforge.pmd.dfa.DataFlowNode]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this.children>
<java.util.List; add[net.sourceforge.pmd.dfa.DataFlowNode]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; thisChild.parents>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; thisChild.parents>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; this.children>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parents>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parents>
<net.sourceforge.pmd.dfa.DataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parent>
<net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parent>
<java.util.BitSet; set[int]; void; net.sourceforge.pmd.dfa.DataFlowNode; setType[int]; void; null; this.type>
<java.util.BitSet; get[int]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; isType[int]; boolean; null; type>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.dfa.DataFlowNode; isType[int]; boolean; null; e>
<java.util.LinkedList; indexOf[java.lang.Object]; int; net.sourceforge.pmd.dfa.DataFlowNode; getIndex[]; int; null; this.dataFlow>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; null; this.variableAccess>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; null; this.variableAccess>
<net.sourceforge.pmd.dfa.DataFlowNode; getLine[]; int; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; this>
<java.util.BitSet; toString[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; type>
<java.lang.String; toCharArray[]; char[]; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; tmp>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; st>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; Integer>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; st>
<net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; this>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; this.node.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; substring[int]; this.node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; getName[]; this.node>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; node.getClass().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; lastIndexOf[int]; node.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; getName[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; toString[]; java.lang.String; null; this.node>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; VariableAccess[int, java.lang.String]; void; null; varName>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; VariableAccess[int, java.lang.String]; void; null; varName>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isDefinition[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isReference[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isUndefinition[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; compute[net.sourceforge.pmd.ast.ASTMethodDeclaration]; void; null; node>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; compute[net.sourceforge.pmd.ast.ASTMethodDeclaration]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; compute[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; get[int]; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; firstINode>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; get[int]; inode>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; size[]; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; lastINode>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; this>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; declarations>
<java.util.Map$Entry; getKey[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; entry>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; vnd>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableInitializer>]; net.sourceforge.pmd.ast.ASTVariableInitializer; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; vnd.getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTVariableInitializer>]; vnd>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; this>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; vnd>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; vnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; inode>
<java.util.List; add[net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; undefinitions>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; vnd>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; entry>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; size[]; inode>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; get[int]; inode>
<net.sourceforge.pmd.symboltable.Scope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; n.getSimpleNode().getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; getVariableDeclarations[]; n.getSimpleNode()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; getScope[]; n>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; decls>
<java.util.Set; add[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; decls>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; inode>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; occurrence>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addAccess[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; inode>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; flow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; flow>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; inode>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<>]; java.util.List<>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; inode.getSimpleNode()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; findChildrenOfType[java.lang.Class<>]; inode>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; node>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; v>
<net.sourceforge.pmd.dfa.IDataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; inode>
<net.sourceforge.pmd.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dfa.DataFlowFacade; initializeWith[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.dfa.DataFlowFacade; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; sbf>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; compute[net.sourceforge.pmd.ast.ASTMethodDeclaration]; void; net.sourceforge.pmd.dfa.DataFlowFacade; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; vav>
<net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.dfa.DataFlowFacade; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; sbf>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; compute[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; void; net.sourceforge.pmd.dfa.DataFlowFacade; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; vav>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; parent>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.DataFlowNode]; void; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; braceStack>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; firstStackObject>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; System.out>
<net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getLastIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<net.sourceforge.pmd.dfa.SequenceChecker; getFirstIndex[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; sc>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; braceStack>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; stackObject>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; stackObject>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; get[int]; node>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; get[int]; node>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; size[]; node>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; get[int]; node>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node>
<java.util.List; indexOf[java.lang.Object]; int; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n>
<net.sourceforge.pmd.ast.SimpleNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLabeledStatement>]; net.sourceforge.pmd.ast.ASTLabeledStatement; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; n.getSimpleNode()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; getFirstParentOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTLabeledStatement>]; n>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getSimpleNode()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; getImage[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; label>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; parentNode>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; get[int]; node>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; get[int]; node>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; ((StackObject)this.braceStack.get(first))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; ((StackObject)this.braceStack.get(last))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doSt.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; get[int]; doSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doFirst>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doExpr>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; so>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; get[int]; fEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; get[int]; fSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; end>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fUpdate>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fUpdate>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fUpdate>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; end>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fExpr>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; ((StackObject)this.braceStack.get(firstIndex))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; ((StackObject)this.braceStack.get(lastIndex))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; sEnd.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; get[int]; sEnd>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; sStart>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; get[int]; node>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; so>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; sStart>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; ((StackObject)this.braceStack.get(first))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; ((StackObject)this.braceStack.get(last))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wEnd.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; get[int]; wEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; end>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wStart>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ((StackObject)this.braceStack.get(first))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ((StackObject)this.braceStack.get(second))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ((StackObject)this.braceStack.get(last))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; get[int]; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; get[int]; elseEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ((StackObject)this.braceStack.get(first))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.StackObject; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ((StackObject)this.braceStack.get(last))>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; getDataFlowNode[]; this.braceStack>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifEnd>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifEnd.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; get[int]; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifEnd>
<net.sourceforge.pmd.dfa.IDataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifStart>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; net.sourceforge.pmd.dfa.report.ReportVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; ((ViolationNode)arg0)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; rv.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; getRuleViolation()>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; getFilename[]; this>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; rv>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; getRuleViolation()>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; getBeginLine[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; rv.getVariableName()>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; getRuleViolation()>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; getVariableName[]; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.report.ViolationNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; System>
<java.io.BufferedWriter; write[java.lang.String, int, int]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; null; bw>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; null; buf>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; null; buf>
<java.io.BufferedWriter; close[]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; null; bw>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb.append("<tr><td><b>Rule:</b></td><td>").append(vio.getRule().getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Rule:</b></td><td>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; getName[]; vio>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb.append("<tr><td><b>Description:</b></td><td>").append(vio.getDescription())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Description:</b></td><td>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<java.lang.String; length[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio.getVariableName()>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; length[]; vio>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb.append("<tr><td><b>Variable:</b></td><td>").append(vio.getVariableName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Variable:</b></td><td>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<net.sourceforge.pmd.IRuleViolation; getEndLine[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb.append("<tr><td><b>Line:</b></td><td>").append(vio.getEndLine()).append(" and ").append(vio.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Line:</b></td><td>").append(vio.getEndLine()).append(" and ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[int]; sb.append("<tr><td><b>Line:</b></td><td>").append(vio.getEndLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Line:</b></td><td>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[int]; sb>
<net.sourceforge.pmd.IRuleViolation; getEndLine[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb.append("<tr><td><b>Line:</b></td><td>").append(vio.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[java.lang.String]; sb.append("<tr><td><b>Line:</b></td><td>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; append[int]; sb>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; vio>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; null; sb>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.packageBuf>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.packageBuf>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; addNumberOfViolation[int]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; vnode.getParent()>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; addNumberOfViolation[int]; vnode>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; vnode>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; classBuf>
<net.sourceforge.pmd.IRuleViolation; getMethodName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; vio>
<net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; displayRuleViolation[net.sourceforge.pmd.IRuleViolation]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this>
<net.sourceforge.pmd.dfa.report.ClassNode; getClassName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; cnode>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; classBuf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; classBuf>
<net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; e>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.packageBuf>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getNumberOfViolations[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; addNumberOfViolation[int]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node.getParent()>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; addNumberOfViolation[int]; node>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getNumberOfViolations[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<net.sourceforge.pmd.dfa.report.PackageNode; getPackageName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; pnode>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; addNumberOfViolation[int]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node.getParent()>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; addNumberOfViolation[int]; node>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getNumberOfViolations[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.packageBuf>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getNumberOfViolations[]; int; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; node>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.packageBuf>
<net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; write[java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportHTMLPrintVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.PackageNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; ((PackageNode)arg0).getPackageName()>
<net.sourceforge.pmd.dfa.report.PackageNode; getPackageName[]; java.lang.String; net.sourceforge.pmd.dfa.report.PackageNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; equals[java.lang.Object]; ((PackageNode)arg0)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.ClassNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; ((ClassNode)arg0).getClassName()>
<net.sourceforge.pmd.dfa.report.ClassNode; getClassName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ClassNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; equals[java.lang.Object]; ((ClassNode)arg0)>
<net.sourceforge.pmd.dfa.report.ReportTree$TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; hasNext[]; boolean; null; this>
<net.sourceforge.pmd.dfa.report.ReportTree$TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; next[]; net.sourceforge.pmd.IRuleViolation; null; this>
<net.sourceforge.pmd.dfa.report.ViolationNode; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; next[]; net.sourceforge.pmd.IRuleViolation; null; ((ViolationNode)this.iterNode)>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.iterNode>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; (this.iterNode)>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getParent[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.iterNode>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.iterNode>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getFirstChild[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.iterNode>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; net.sourceforge.pmd.dfa.report.ReportTree.TreeIterator; getNext[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.iterNode>
<net.sourceforge.pmd.dfa.report.ReportTree; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.dfa.report.ReportTree; size[]; int; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; size[]; int; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.dfa.report.ReportTree; size[]; int; null; i>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violation>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; pack>
<java.lang.String; split[java.lang.String]; java.lang.String[]; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; pack>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; System>
<net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; addFirst[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this.level>
<net.sourceforge.pmd.IRuleViolation; getClassName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violation>
<net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; addFirst[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this.level>
<net.sourceforge.pmd.dfa.report.ReportTree; equalsNodeInLevel[net.sourceforge.pmd.dfa.report.AbstractReportNode, net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; add[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.ReportTree; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; this.level>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildCount[]; int; net.sourceforge.pmd.dfa.report.ReportTree; equalsNodeInLevel[net.sourceforge.pmd.dfa.report.AbstractReportNode, net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; level>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; equalsNodeInLevel[net.sourceforge.pmd.dfa.report.AbstractReportNode, net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; null; (level.getChildAt(i))>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree; equalsNodeInLevel[net.sourceforge.pmd.dfa.report.AbstractReportNode, net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; equalsNode[net.sourceforge.pmd.dfa.report.AbstractReportNode]; level>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildCount[]; int; net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; null; this.level>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; null; this.level>
<net.sourceforge.pmd.dfa.report.PackageNode; getPackageName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; null; ((PackageNode)child)>
<net.sourceforge.pmd.dfa.report.ClassNode; getClassName[]; java.lang.String; net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; null; ((ClassNode)child)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.ReportTree; isStringInLevel[java.lang.String]; boolean; null; tmp>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; getFirstChild[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getFirstChild[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.parentNode>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.parentNode.childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.parentNode.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; null; this.childNodes>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; null; this.childNodes.get(i)>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; equals[java.lang.Object]; this.childNodes>
<java.util.List; add[int, net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.AbstractReportNode; addFirst[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.childNodes>
<java.util.List; add[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; add[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; childNodes>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; accept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; node>
<net.sourceforge.pmd.dfa.report.ReportVisitor; visit[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.AbstractReportNode; accept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; visitor>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildCount[]; int; null; this.childNodes>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; null; this.childNodes>
<java.util.List; add[net.sourceforge.pmd.dfa.SequenceChecker.Status]; boolean; net.sourceforge.pmd.dfa.SequenceChecker.Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; null; nextSteps>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; this.nextSteps>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; nextSteps>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; nextSteps>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; this.nextSteps>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; root>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; ifNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; ifNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; ifSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; ifStWithoutElse>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; elseSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; labelNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; labelEnd>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; whileNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; whileSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchNode>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; caseSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; caseSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; caseSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchDefault>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchDefault>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; switchEnd>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forInit>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forInit>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forInit>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forExpr>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forExpr>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forUpdate>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; forEnd>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; doSt>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; doExpr>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; this.bracesList>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; bracesList>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; this.aktStatus>
<net.sourceforge.pmd.dfa.StackObject; getType[]; int; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; so>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; isLastStep[]; boolean; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; aktStatus>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; hasMoreSteps[]; boolean; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; aktStatus>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; isLastStep[]; boolean; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; aktStatus>
<net.sourceforge.pmd.dfa.SequenceChecker$Status; hasMoreSteps[]; boolean; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; aktStatus>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase1[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; run[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase1[]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase1[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.Executable; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase1[]; void; null; shim>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase1[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase2[boolean]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEmpty[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; incChild[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; removeLast[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; removeLast[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; removeLast[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; phase3[]; boolean; null; currentPath>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; null; stack.getLastLeaf()>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; getUserObject[]; stack>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; null; e.node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; size[]; e.node>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; stack.getLastLeaf()>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; getUserObject[]; stack>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; size[]; e.node>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; currentPath>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; get[int]; e.node>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; currentPath>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; stack.getLastLeaf()>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; getUserObject[]; stack>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; currentPath>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; size[]; inode>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; get[int]; inode>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; this.currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; currentPath>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; get[int]; inode>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; this.currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; currentPath>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; level>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addRefPseudoPathElement[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getLastChildNode[javax.swing.tree.DefaultMutableTreeNode]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPseudoPathElement[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isDoBranchNode[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getLastChildNode[javax.swing.tree.DefaultMutableTreeNode]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; level>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPathElement[javax.swing.tree.DefaultMutableTreeNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; level>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getLastChildNode[javax.swing.tree.DefaultMutableTreeNode]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPathElement[javax.swing.tree.DefaultMutableTreeNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNodeToTree[]; void; null; this>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; stack>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; System.out>
<javax.swing.tree.DefaultMutableTreeNode; getParent[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; last>
<javax.swing.tree.DefaultMutableTreeNode; remove[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; parent>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; stack>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; last>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; last>
<net.sourceforge.pmd.dfa.pathfinder.PathElement; isPseudoPathElement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; e>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; removeFromTree[]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPathElement[javax.swing.tree.DefaultMutableTreeNode]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPathElement[javax.swing.tree.DefaultMutableTreeNode]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPseudoPathElement[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNewPseudoPathElement[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; currentPath>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addRefPseudoPathElement[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; currentPath>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; inode>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; level>
<javax.swing.tree.DefaultMutableTreeNode; getChildAt[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; level>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; child>
<net.sourceforge.pmd.dfa.pathfinder.PathElement; isPseudoPathElement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; pe>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; equalsPseudoPathElementWithDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; boolean; null; pe.pseudoRef>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; currentPath>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; inode>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; level>
<javax.swing.tree.DefaultMutableTreeNode; getChildAt[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; level>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; child>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getDoBranchNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; inode>
<javax.swing.tree.DefaultMutableTreeNode; setUserObject[java.lang.Object]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; null; node>
<javax.swing.tree.DefaultMutableTreeNode; add[javax.swing.tree.MutableTreeNode]; void; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addNode[javax.swing.tree.DefaultMutableTreeNode, net.sourceforge.pmd.dfa.pathfinder.PathElement]; void; null; level>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; currentPath>
<javax.swing.tree.DefaultMutableTreeNode; getFirstChild[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; level>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; child>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; isNodeInLevel[javax.swing.tree.DefaultMutableTreeNode]; net.sourceforge.pmd.dfa.pathfinder.PathElement; null; inode>
<javax.swing.tree.DefaultMutableTreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getLastChildNode[javax.swing.tree.DefaultMutableTreeNode]; javax.swing.tree.DefaultMutableTreeNode; null; node>
<javax.swing.tree.DefaultMutableTreeNode; getLastChild[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; getLastChildNode[javax.swing.tree.DefaultMutableTreeNode]; javax.swing.tree.DefaultMutableTreeNode; null; node>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; stack>
<javax.swing.tree.DefaultMutableTreeNode; getParent[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; treeNode>
<javax.swing.tree.TreeNode; getChildCount[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; treeNode.getParent()>
<javax.swing.tree.DefaultMutableTreeNode; getParent[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; getChildCount[]; treeNode>
<javax.swing.tree.TreeNode; getChildAt[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; treeNode.getParent()>
<javax.swing.tree.DefaultMutableTreeNode; getParent[]; javax.swing.tree.TreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; getChildAt[int]; treeNode>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; tNode>
<net.sourceforge.pmd.dfa.pathfinder.PathElement; isPseudoPathElement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; countLoops[]; int; null; e>
<javax.swing.tree.DefaultMutableTreeNode; getUserObject[]; java.lang.Object; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; incChild[]; void; null; stack.getLastLeaf()>
<javax.swing.tree.DefaultMutableTreeNode; getLastLeaf[]; javax.swing.tree.DefaultMutableTreeNode; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; incChild[]; void; getUserObject[]; stack>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLength[]; int; null; list>
<java.util.AbstractSequentialList; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; null; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; list>
<java.util.LinkedList; removeLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; removeLast[]; void; null; list>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEmpty[]; boolean; null; list>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; list>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isDoBranchNode[]; boolean; null; list.getLast()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isDoBranchNode[]; boolean; isType[int]; list>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; null; this>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; null; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; list>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; getParents[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; parent>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; null; list.getLast().getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; size[]; list.getLast()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; getChildren[]; list>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; null; list.getLast().getChildren()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getChildren[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; size[]; list.getLast()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; getChildren[]; list>
<net.sourceforge.pmd.dfa.IDataFlowNode; getIndex[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; isType[int]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; ((IDataFlowNode)inode.getFlow().get(index))>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; isType[int]; inode.getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; get[int]; inode>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; this.dataFlow>
<java.util.LinkedList; getFirst[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.Structure; getFirst[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; this.dataFlow>
<java.util.Stack; push[net.sourceforge.pmd.dfa.StackObject]; net.sourceforge.pmd.dfa.StackObject; net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; continueBreakReturnStack>
<java.util.Stack; push[net.sourceforge.pmd.dfa.StackObject]; net.sourceforge.pmd.dfa.StackObject; net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; braceStack>
<net.sourceforge.pmd.dfa.DataFlowNode; setType[int]; void; net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; ((DataFlowNode)node)>
<net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; net.sourceforge.pmd.dfa.Structure; getContinueBreakReturnStack[]; java.util.List; null; this>
<net.sourceforge.pmd.dfa.IDataFlowNode; getLine[]; int; net.sourceforge.pmd.dfa.DaaRule.Usage; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getDataFlowNode().getFlow()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getFlow[]; java.util.List<? extends net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; get[int]; methodDeclaration.getDataFlowNode()>
<net.sourceforge.pmd.ast.SimpleNode; getDataFlowNode[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getFlow[]; methodDeclaration>
<net.sourceforge.pmd.CommonAbstractRule; getIntProperty[net.sourceforge.pmd.PropertyDescriptor]; int; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; run[]; void; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pathFinder>
<net.sourceforge.pmd.dfa.DaaRule; maxNumberOfViolationsReached[]; boolean; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; this>
<net.sourceforge.pmd.dfa.pathfinder.CurrentPath; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; path>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; pathIterator>
<java.util.Iterator; next[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; pathIterator>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; size[]; inode>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<net.sourceforge.pmd.dfa.IDataFlowNode; getVariableAccess[]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; get[int]; inode>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.dfa.DaaRule.Usage; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getAccessType[]; int; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.dfa.DaaRule.Usage]; net.sourceforge.pmd.dfa.DaaRule.Usage; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; va>
<net.sourceforge.pmd.dfa.IDataFlowNode; getLine[]; int; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; u.node>
<net.sourceforge.pmd.dfa.IDataFlowNode; getLine[]; int; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; inode>
<net.sourceforge.pmd.dfa.IDataFlowNode; getSimpleNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; u.node>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; accessTypeMatches[int]; boolean; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isDefinition[]; boolean; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isReference[]; boolean; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; isUndefinition[]; boolean; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; this>
<net.sourceforge.pmd.dfa.variableaccess.VariableAccess; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; checkVariableAccess[net.sourceforge.pmd.dfa.IDataFlowNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, net.sourceforge.pmd.dfa.DaaRule.Usage]; void; null; va>
<net.sourceforge.pmd.dfa.DaaRule; maxNumberOfViolationsReached[]; boolean; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this>
<net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this>
<java.text.MessageFormat; format[java.lang.String, java.lang.Object[]]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; MessageFormat>
<net.sourceforge.pmd.CommonAbstractRule; getMessage[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this>
<net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; ctx.getReport()>
<net.sourceforge.pmd.RuleContext; getReport[]; net.sourceforge.pmd.Report; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; ctx>
<java.util.List; add[net.sourceforge.pmd.dfa.DaaRuleViolation]; boolean; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this.daaRuleViolations>
<net.sourceforge.pmd.dfa.DaaRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; null; violation>
<net.sourceforge.pmd.dfa.DaaRuleViolation; getEndLine[]; int; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; null; violation>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; null; violation.getType()>
<net.sourceforge.pmd.dfa.DaaRuleViolation; getType[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; equals[java.lang.Object]; violation>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; null; violation.getVariableName()>
<net.sourceforge.pmd.dfa.DaaRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.dfa.DaaRule; violationAlreadyExists[java.lang.String, java.lang.String, int, int]; boolean; equals[java.lang.Object]; violation>
<net.sourceforge.pmd.dfa.Structure; createStartNode[int]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this.dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this.dataFlow>
<net.sourceforge.pmd.ast.SimpleJavaNode; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; node>
<net.sourceforge.pmd.dfa.Structure; createEndNode[int]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; this.dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; getEndLine[]; int; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; node>
<net.sourceforge.pmd.dfa.Structure; getBraceStack[]; java.util.List; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getContinueBreakReturnStack[]; java.util.List; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Linker; computePaths[]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; linker>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; buildDataFlowFor[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; e>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTExpression, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForInit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTLabeledStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTForUpdate, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; st>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.ASTIfStatement; hasElse[]; boolean; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; st>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; st.jjtGetChild(1)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; st>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTSwitchLabel, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTBreakStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTContinueStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; dataFlow>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; parent>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; parent>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; createNewNode[net.sourceforge.pmd.ast.SimpleNode]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.StatementAndBraceFinder; addForExpressionNode[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.Structure]; void; null; dataFlow>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules>
<java.util.Map; put[net.sourceforge.pmd.RuleSet, java.util.List<net.sourceforge.pmd.Rule>]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules.get(ruleSet)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; add[net.sourceforge.pmd.Rule]; ruleSetRules>
<net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; this>
<net.sourceforge.pmd.AbstractRuleChainVisitor; clear[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.AbstractRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, long, long]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; Benchmark>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ruleSetRules>
<net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ruleSet>
<net.sourceforge.pmd.RuleContext; getSourceCodeFile[]; java.io.File; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ctx>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; System>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ruleSetRules>
<net.sourceforge.pmd.Rule; getRuleChainVisits[]; java.util.List<java.lang.String>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.util.List; size[]; int; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNames>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNameToNodes>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNames>
<net.sourceforge.pmd.AbstractDelegateRule; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ((RuleReference)rule)>
<net.sourceforge.pmd.AbstractRuleChainVisitor; visit[net.sourceforge.pmd.Rule, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; this>
<java.util.List; size[]; int; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodes>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; Benchmark>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; null; nodeNameToNodes>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; null; nodes>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleSetRules.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; iterator[]; ruleSetRules>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entryIterator>
<java.util.Iterator; next[]; java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entryIterator>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; iterator[]; entry>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleIterator>
<java.util.Iterator; next[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleIterator>
<net.sourceforge.pmd.Rule; usesRuleChain[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; rule>
<java.util.Set; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; visitedNodes>
<net.sourceforge.pmd.Rule; getRuleChainVisits[]; java.util.List<java.lang.String>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; rule>
<java.util.Iterator; remove[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleIterator>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.Map$Entry; getValue[]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; isEmpty[]; entry>
<java.util.Iterator; remove[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entryIterator>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.ast.SimpleNode>]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; nodeNameToNodes>
<java.util.Map; values[]; java.util.Collection<java.util.List<net.sourceforge.pmd.ast.SimpleNode>>; net.sourceforge.pmd.AbstractRuleChainVisitor; clear[]; void; null; nodeNameToNodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; clear[]; void; null; l>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_7; createParser[java.io.InputStream]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.ast.JavaParser; setJDK15[]; void; net.sourceforge.pmd.TargetJDK1_7; createParser[java.io.Reader]; net.sourceforge.pmd.ast.JavaParser; null; jp>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; init[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; TypeSignatureVisitor[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; init[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; TypeSignatureVisitor[net.sourceforge.pmd.dcd.asm.PrintVisitor]; void; null; this>
<java.util.List; clear[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; init[]; void; null; parameterTypes>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getFieldType[]; java.lang.Class; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodReturnType[]; java.lang.Class; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; null; this>
<java.util.List; toArray[java.lang.Class[]]; java.lang.Class[]; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; null; parameterTypes>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; null; parameterTypes>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getType[]; java.lang.Class; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getType[]; java.lang.Class; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; null; this>
<java.util.List; add[java.lang.Class]; boolean; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; null; parameterTypes>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getType[]; java.lang.Class; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; null; this>
<java.lang.reflect.Array; newInstance[java.lang.Class<?>, int]; java.lang.Object; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getType[]; java.lang.Class; null; Array>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getType[]; java.lang.Class; null; array>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitArrayType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitBaseType[char]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitBaseType[char]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitClassBound[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitClassType[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitClassType[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; fromInternalForm[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitClassType[java.lang.String]; void; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getClass[java.lang.String]; java.lang.Class; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitClassType[java.lang.String]; void; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitEnd[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitEnd[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitExceptionType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitFormalTypeParameter[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitFormalTypeParameter[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitInnerClassType[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitInnerClassType[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitInterface[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitInterfaceBound[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitParameterType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitParameterType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; pushType[int]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitParameterType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitReturnType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitReturnType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; pushType[int]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitReturnType[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitSuperclass[]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitTypeArgument[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitTypeArgument[char]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitTypeArgument[char]; net.sourceforge.pmd.dcd.asm.SignatureVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitTypeVariable[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; visitTypeVariable[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[int, java.lang.String]; void; net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[int, java.lang.String]; void; net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; null; this>
<java.io.PrintStream; print[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.PrintVisitor; println[int, java.lang.String]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.asm.PrintVisitor; println[int, java.lang.String]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.UsageGraph, java.lang.Object]; java.lang.Object; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.UsageGraph, java.lang.Object]; java.lang.Object; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; fromInternalForm[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.ClassNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; System.out>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getFieldNodes()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getFieldNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.FieldNode>; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; size[]; classNode>
<net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; System.out>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getConstructorNodes()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getConstructorNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.ConstructorNode>; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; size[]; classNode>
<net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; System.out>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getMethodNodes()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getMethodNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.MethodNode>; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; size[]; classNode>
<net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUses()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUses[]; java.util.List; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; isEmpty[]; memberNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUse[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUse[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; use>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; isEmpty[]; memberNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUser[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUser[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; user>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; System.out>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUses()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUses[]; java.util.List; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; size[]; memberNode>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; size[]; memberNode>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.UsageGraph, java.lang.Object]; java.lang.Object; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.UsageGraph, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreClassAnonymous[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; options>
<java.lang.Class; isAnonymousClass[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getType()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; isAnonymousClass[]; classNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.ClassNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.ClassNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; isEmpty[]; fieldNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreFieldInlinable[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; options>
<java.lang.reflect.Modifier; isFinal[int]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; Modifier>
<java.lang.reflect.Field; getModifiers[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getMember()>
<net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; getModifiers[]; fieldNode>
<java.lang.Class; isPrimitive[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getMember().getType()>
<java.lang.reflect.Field; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; isPrimitive[]; fieldNode.getMember()>
<net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; getType[]; fieldNode>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getMember().getType().getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; fieldNode.getMember().getType()>
<java.lang.reflect.Field; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; getName[]; fieldNode.getMember()>
<net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; getType[]; fieldNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; isEmpty[]; constructorNode>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; isStaticInitializer[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreConstructorStaticInitializer[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; options>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; isInstanceInitializer[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode>
<java.lang.reflect.Modifier; isPrivate[int]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; Modifier>
<java.lang.reflect.Constructor; getModifiers[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; getModifiers[]; constructorNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreConstructorAllPrivate[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; options>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreConstructorSinglePrivateNoArg[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; options>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; getParameterTypes[]; constructorNode>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getClassNode().getConstructorNodes()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getConstructorNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.ConstructorNode>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; size[]; constructorNode.getClassNode()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getClassNode[]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; getConstructorNodes[]; constructorNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; isEmpty[]; methodNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreMethodAllOverride[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; options>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; ClassLoaderUtil>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.dcd.graph.ClassNode>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getClassNode()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getClassNode[]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getClass[]; methodNode>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreMethodJavaLangObjectOverride[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; options>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.UsageNodeVisitor$Options; isIgnoreMethodMain[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember().getName()>
<java.lang.reflect.Method; getName[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getName[]; methodNode>
<java.lang.reflect.Modifier; isPublic[int]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getModifiers[]; methodNode>
<java.lang.reflect.Modifier; isStatic[int]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getModifiers[]; methodNode>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getReturnType[]; methodNode>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getParameterTypes[]; methodNode>
<java.lang.Class; isArray[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember().getParameterTypes()[0]>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; isArray[]; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getParameterTypes[]; methodNode>
<java.lang.Object; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getMember().getParameterTypes()[0].getComponentType()>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; equals[java.lang.Object]; methodNode.getMember().getParameterTypes()[0]>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getComponentType[]; methodNode.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; getParameterTypes[]; methodNode>
<net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.ClassNode]; void; null; System.out>
<net.sourceforge.pmd.dcd.graph.ClassNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.ClassNode]; void; null; classNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; ignore[java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; size[]; memberNode>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; System.out>
<net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode>
<net.sourceforge.pmd.dcd.graph.UsageGraph; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.DCD; dump[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; null; usageGraph>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; net.sourceforge.pmd.dcd.DCD; dump[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; null; Boolean>
<net.sourceforge.pmd.dcd.graph.UsageGraph; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.DCD; report[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; null; usageGraph>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; net.sourceforge.pmd.dcd.DCD; report[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; null; Boolean>
<java.util.List; add[java.io.File]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.io.File; isDirectory[]; boolean; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; new File(dir,name)>
<java.lang.String; startsWith[java.lang.String]; boolean; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; name>
<java.lang.String; startsWith[java.lang.String]; boolean; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; name>
<java.lang.String; indexOf[java.lang.String]; int; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; dir.getPath()>
<java.io.File; getPath[]; java.lang.String; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; indexOf[java.lang.String]; dir>
<java.lang.String; indexOf[java.lang.String]; int; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; dir.getPath()>
<java.io.File; getPath[]; java.lang.String; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; indexOf[java.lang.String]; dir>
<java.lang.String; endsWith[java.lang.String]; boolean; java.lang.Object; accept[java.io.File, java.lang.String]; boolean; null; name>
<java.util.List; add[java.io.FilenameFilter]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; get[int]; java.io.File; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; get[int]; java.io.FilenameFilter; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<net.sourceforge.pmd.util.FileFinder; findFilesFrom[java.lang.String, java.io.FilenameFilter, boolean]; java.util.List<java.io.File>; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; new FileFinder()>
<java.io.File; getPath[]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directory>
<java.io.File; getPath[]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; file>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; name>
<java.lang.String; length[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directory.getPath()>
<java.io.File; getPath[]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; length[]; directory>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; name>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; name>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; name>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; classes>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System>
<java.util.Arrays; asList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; Arrays>
<java.util.Arrays; asList[java.lang.String[]]; java.util.List<java.lang.String>; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; Arrays>
<net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; Filters>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; builder>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getUsageGraph[]; net.sourceforge.pmd.dcd.graph.UsageGraph; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; builder>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.dcd.DCD; dump[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.dcd.DCD; report[net.sourceforge.pmd.dcd.graph.UsageGraph, boolean]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; System.out>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.MemberNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.MemberNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUse[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; uses>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MemberNode]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUse[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; uses>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; net.sourceforge.pmd.dcd.graph.MemberNode; getUses[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; null; Collections>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUser[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; users>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MemberNode]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUser[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; users>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List<net.sourceforge.pmd.dcd.graph.MemberNode>; null; Collections>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; null; getMember()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getMember[]; T; net.sourceforge.pmd.dcd.graph.MemberNode; toStringLong[]; java.lang.String; toString[]; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; equals[S]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; null; this.name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; null; this.desc>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.dcd.graph.MemberNode; hashCode[]; int; null; name>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.dcd.graph.MemberNode; hashCode[]; int; null; desc>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.ConstructorNode; isStaticInitializer[]; boolean; null; ClassLoaderUtil.CLINIT>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.ConstructorNode; isInstanceInitializer[]; boolean; null; ClassLoaderUtil.INIT>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; ClassLoaderUtil.CLINIT>
<java.lang.ref.Reference; get[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; constructorReference>
<not found; accept[]; not found; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; signatureReader>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getConstructor[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Constructor; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; super.getClassNode()>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; null; visitor>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.ConstructorNode; toStringLong[]; java.lang.String; null; ClassLoaderUtil.CLINIT>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; this.getName()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; compareTo[java.lang.String]; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; that>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; this.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getParameterTypes[]; this>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; that.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getParameterTypes[]; that>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; this.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getParameterTypes[]; this>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; this.getMember().getParameterTypes()[i].getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; compareTo[java.lang.String]; this.getMember().getParameterTypes()[i]>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getName[]; this.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getParameterTypes[]; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; null; that.getMember().getParameterTypes()[i]>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getName[]; that.getMember()>
<net.sourceforge.pmd.dcd.graph.ConstructorNode; getMember[]; java.lang.reflect.Constructor<?>; net.sourceforge.pmd.dcd.graph.ConstructorNode; compareTo[net.sourceforge.pmd.dcd.graph.ConstructorNode]; int; getParameterTypes[]; that>
<net.sourceforge.pmd.dcd.graph.UsageGraph; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.UsageGraph, java.lang.Object]; java.lang.Object; null; usageGraph>
<net.sourceforge.pmd.dcd.graph.ClassNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<net.sourceforge.pmd.dcd.graph.ClassNode; getFieldNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.FieldNode>; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode>
<net.sourceforge.pmd.dcd.graph.ClassNode; getConstructorNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.ConstructorNode>; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode>
<net.sourceforge.pmd.dcd.graph.ClassNode; getMethodNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.MethodNode>; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode>
<net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUses[]; java.util.List; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode>
<net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUse[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; getUsers[]; java.util.List; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode>
<net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUser[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.NodeVisitorAdapter; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.ClassNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.ClassNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.ClassNode; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<java.lang.ref.Reference; get[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; null; typeReference>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getClass[java.lang.String]; java.lang.Class; net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; fromInternalForm[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineField[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; null; fieldNode>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.FieldNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineField[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; null; fieldNodes>
<net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineConstructor[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.ConstructorNode; null; constructorNode>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.ConstructorNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineConstructor[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.ConstructorNode; null; constructorNodes>
<net.sourceforge.pmd.dcd.graph.MemberNode; equals[java.lang.String, java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineMethod[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MethodNode; null; methodNode>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MethodNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineMethod[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MethodNode; null; methodNodes>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.dcd.graph.FieldNode>; net.sourceforge.pmd.dcd.graph.ClassNode; getFieldNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.FieldNode>; null; Collections>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.dcd.graph.ConstructorNode>; net.sourceforge.pmd.dcd.graph.ClassNode; getConstructorNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.ConstructorNode>; null; Collections>
<java.util.Collections; emptyList[]; java.util.List<net.sourceforge.pmd.dcd.graph.MethodNode>; net.sourceforge.pmd.dcd.graph.ClassNode; getMethodNodes[]; java.util.List<net.sourceforge.pmd.dcd.graph.MethodNode>; null; Collections>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ClassNode; compareTo[net.sourceforge.pmd.dcd.graph.ClassNode]; int; null; this.name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; equals[java.lang.Object]; boolean; null; this.name>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.dcd.graph.ClassNode; hashCode[]; int; null; name>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getResourceName[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; this>
<net.sourceforge.pmd.util.filter.Filter; filter[java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; classFilter>
<net.sourceforge.pmd.dcd.graph.UsageGraph; isClass[java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; usageGraph>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; usageGraph>
<java.lang.ClassLoader; getResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; this.getClass().getClassLoader()>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; getResourceAsStream[java.lang.String]; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.dcd.graph.UsageGraphBuilder>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; getClassLoader[]; this>
<not found; accept[]; not found; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; classReader>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getNewClassVisitor[]; net.sourceforge.pmd.dcd.graph.ClassVisitor; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; null; e>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visit[int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitAttribute[net.sourceforge.pmd.dcd.graph.Attribute]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitAttribute[net.sourceforge.pmd.dcd.graph.Attribute]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitEnd[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<not found; acceptType[]; not found; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; signatureReader>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getFieldType[]; java.lang.Class; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; visitor>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineField[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitField[int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object]; net.sourceforge.pmd.dcd.graph.FieldVisitor; null; usageGraph>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; index[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; usageGraph>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getNewMethodVisitor[net.sourceforge.pmd.dcd.asm.PrintVisitor, net.sourceforge.pmd.dcd.graph.MemberNode]; net.sourceforge.pmd.dcd.graph.MethodVisitor; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitMethod[int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]]; net.sourceforge.pmd.dcd.graph.MethodVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitOuterClass[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitOuterClass[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitOuterClass[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitOuterClass[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitSource[java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitSource[java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyClassVisitor; visitSource[java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAnnotation[java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAnnotationDefault[]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAttribute[net.sourceforge.pmd.dcd.graph.Attribute]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitAttribute[net.sourceforge.pmd.dcd.graph.Attribute]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitCode[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitEnd[]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; usageField[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFieldInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; usageGraph>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitFrame[int, int, java.lang.Object[], int, java.lang.Object[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIincInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIincInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIincInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitInsn[int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitInsn[int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIntInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIntInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitIntInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitJumpInsn[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitJumpInsn[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitJumpInsn[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLabel[net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLabel[net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLdcInsn[java.lang.Object]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLdcInsn[java.lang.Object]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLineNumber[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLineNumber[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLineNumber[int, net.sourceforge.pmd.dcd.graph.Label]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLocalVariable[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[int[]]; java.util.List<java.lang.Integer>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[int[]]; java.util.List<java.lang.Integer>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitLookupSwitchInsn[net.sourceforge.pmd.dcd.graph.Label, int[], net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMaxs[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMaxs[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMaxs[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMethodInsn[int, java.lang.String, java.lang.String, java.lang.String]; void; null; usageGraph>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMultiANewArrayInsn[java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMultiANewArrayInsn[java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitMultiANewArrayInsn[java.lang.String, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitParameterAnnotation[int, java.lang.String, boolean]; net.sourceforge.pmd.dcd.graph.AnnotationVisitor; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[int[]]; java.util.List<java.lang.Integer>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTableSwitchInsn[int, int, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label[]]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTryCatchBlock[net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, net.sourceforge.pmd.dcd.graph.Label, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitTypeInsn[int, java.lang.String]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; println[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitVarInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitVarInsn[int, int]; void; null; this>
<net.sourceforge.pmd.dcd.asm.PrintVisitor; printlnIndent[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder.MyMethodVisitor; visitVarInsn[int, int]; void; null; this>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getResourceName[java.lang.String]; java.lang.String; null; name>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; getClassName[java.lang.String]; java.lang.String; null; name>
<java.util.List; add[java.lang.Integer]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[int[]]; java.util.List<java.lang.Integer>; null; list>
<java.util.Arrays; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; null; Arrays>
<java.lang.ref.Reference; get[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; null; methodReference>
<not found; accept[]; not found; net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; null; signatureReader>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; null; super.getClassNode()>
<net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; null; visitor>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; this.getName()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; compareTo[java.lang.String]; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; that>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; this.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getParameterTypes[]; this>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; that.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getParameterTypes[]; that>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; this.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getParameterTypes[]; this>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; this.getMember().getParameterTypes()[i].getName()>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; compareTo[java.lang.String]; this.getMember().getParameterTypes()[i]>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getName[]; this.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getParameterTypes[]; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; null; that.getMember().getParameterTypes()[i]>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getName[]; that.getMember()>
<net.sourceforge.pmd.dcd.graph.MethodNode; getMember[]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.graph.MethodNode; compareTo[net.sourceforge.pmd.dcd.graph.MethodNode]; int; getParameterTypes[]; that>
<net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.graph.FieldNode; FieldNode[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.String, java.lang.String]; void; null; this>
<java.lang.ref.Reference; get[]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; null; fieldReference>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; null; ClassLoaderUtil>
<net.sourceforge.pmd.dcd.graph.ClassNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; null; getClassNode()>
<net.sourceforge.pmd.dcd.graph.MemberNode; getClassNode[]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.FieldNode; getMember[]; java.lang.reflect.Field; getType[]; this>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.FieldNode; compareTo[net.sourceforge.pmd.dcd.graph.FieldNode]; int; null; this.name>
<java.lang.Comparable; compareTo[java.lang.Object]; int; net.sourceforge.pmd.dcd.graph.MemberNodeComparator; compare[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; int; null; node1>
<java.lang.Comparable; compareTo[java.lang.Object]; int; net.sourceforge.pmd.dcd.graph.MemberNodeComparator; compare[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; int; null; node1>
<java.lang.Comparable; compareTo[java.lang.Object]; int; net.sourceforge.pmd.dcd.graph.MemberNodeComparator; compare[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; int; null; node1>
<net.sourceforge.pmd.dcd.graph.NodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.dcd.graph.UsageGraph; accept[net.sourceforge.pmd.dcd.graph.NodeVisitor, java.lang.Object]; java.lang.Object; null; visitor>
<net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; isClass[java.lang.String]; boolean; null; this>
<java.util.Collections; binarySearch[java.util.List<? extends java.lang.Comparable<?>>, java.lang.Comparable<?>, java.util.Comparator<? super java.lang.Comparable<?>>]; int; net.sourceforge.pmd.dcd.graph.UsageGraph; isClass[java.lang.String]; boolean; null; Collections>
<net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; this>
<java.util.Collections; binarySearch[java.util.List<? extends java.lang.Comparable<?>>, java.lang.Comparable<?>, java.util.Comparator<? super java.lang.Comparable<?>>]; int; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; Collections>
<java.util.List; get[int]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; classNodes>
<java.util.List; add[int, net.sourceforge.pmd.dcd.graph.ClassNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; classNodes>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineField[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; null; this>
<net.sourceforge.pmd.dcd.graph.ClassNode; defineField[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineField[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; null; classNode>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineConstructor[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; this>
<net.sourceforge.pmd.dcd.graph.ClassNode; defineConstructor[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.ConstructorNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineConstructor[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; classNode>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; ClassLoaderUtil.CLINIT>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; ClassLoaderUtil.INIT>
<net.sourceforge.pmd.dcd.graph.ClassNode; defineConstructor[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.ConstructorNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; classNode>
<net.sourceforge.pmd.dcd.graph.ClassNode; defineMethod[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MethodNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; null; classNode>
<net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usageField[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.util.filter.Filter; filter[java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; usageField[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; classFilter>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineField[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; net.sourceforge.pmd.dcd.graph.UsageGraph; usageField[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; usage[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usageField[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.util.filter.Filter; filter[java.lang.String]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; classFilter>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; ClassLoaderUtil.CLINIT>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; ClassLoaderUtil.INIT>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineConstructor[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; defineMethod[java.lang.String, java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MemberNode; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.dcd.graph.UsageGraph; usage[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usageMethod[java.lang.String, java.lang.String, java.lang.String, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; this>
<net.sourceforge.pmd.dcd.graph.MemberNode; addUser[net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usage[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; use>
<net.sourceforge.pmd.dcd.graph.MemberNode; addUse[net.sourceforge.pmd.dcd.graph.MemberNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; usage[net.sourceforge.pmd.dcd.graph.MemberNode, net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; user>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; null; className>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.UsageGraph; checkClassName[java.lang.String]; void; null; className>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; null; ((String)obj1)>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; null; ((String)obj1)>
<net.sourceforge.pmd.dcd.graph.ClassNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; null; ((ClassNode)obj2)>
<java.lang.String; compareTo[java.lang.String]; int; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; null; ((ClassNode)obj1).getName()>
<net.sourceforge.pmd.dcd.graph.ClassNode; getName[]; java.lang.String; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; compareTo[java.lang.String]; ((ClassNode)obj1)>
<net.sourceforge.pmd.dcd.graph.ClassNode; compareTo[net.sourceforge.pmd.dcd.graph.ClassNode]; int; net.sourceforge.pmd.dcd.graph.ClassNodeComparator; compare[java.lang.Object, java.lang.Object]; int; null; ((ClassNode)obj1)>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; fromInternalForm[java.lang.String]; java.lang.String; null; internalForm>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; toInternalForm[java.lang.String]; java.lang.String; null; internalForm>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.dcd.ClassLoaderUtil; getClass[java.lang.String]; java.lang.Class; null; ClassLoaderUtil.class.getClassLoader()>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.dcd.ClassLoaderUtil; getClass[java.lang.String]; java.lang.Class; loadClass[java.lang.String]; ClassLoaderUtil.class>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.ClassLoaderUtil; getField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; this>
<java.lang.Class; getDeclaredField[java.lang.String]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; type>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; type>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetField[java.lang.Class, java.lang.String]; java.lang.reflect.Field; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; this>
<java.lang.Class; getDeclaredMethod[java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; type>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; type>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; this>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; type>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; myGetMethod[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; null; this>
<java.lang.Class; getDeclaredConstructor[java.lang.Class[]]; java.lang.reflect.Constructor; net.sourceforge.pmd.dcd.ClassLoaderUtil; getConstructor[java.lang.Class, java.lang.String, java.lang.Class[]]; java.lang.reflect.Constructor; null; type>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; name>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<java.lang.Class; getName[]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; parameterTypes[i]>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<java.lang.StringBuilder; toString[]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; getMethodSignature[java.lang.String, java.lang.Class[]]; java.lang.String; null; builder>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; getClass[java.lang.String]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; getParameterTypes[java.lang.String[]]; java.lang.Class[]; null; this>
<java.lang.Class; getDeclaredMethod[java.lang.String, java.lang.Class[]]; java.lang.reflect.Method; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; clazz>
<java.lang.reflect.Method; getName[]; java.lang.String; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; method>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; method>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; clazz>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; clazz>
<java.lang.Class; getInterfaces[]; java.lang.Class[]; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; clazz>
<net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; net.sourceforge.pmd.dcd.ClassLoaderUtil; isOverridenMethod[java.lang.Class, java.lang.reflect.Method, boolean]; boolean; null; this>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.PMDException; getReason[]; java.lang.Exception; null; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; null; System.getProperty("pmd.color")>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; equals[java.lang.Object]; System>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; null; System.getProperty("pmd.color")>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; equals[java.lang.Object]; System>
<net.sourceforge.pmd.renderers.PapariTextRenderer; initializeColorsIfSupported[]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; report>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; i>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; i>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; equals[java.lang.Object]; rv>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; lastFile>
<java.lang.String; lastIndexOf[java.lang.String]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; lastFile>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getEndLine[]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getEndLine[]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; getName[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; report>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Integer>>; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; summary>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.util.Map$Entry; getKey[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; entry>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf.append(key).append(" : ").append(entry.getValue())>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; append[java.lang.String]; buf.append(key).append(" : ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; append[java.lang.Object]; buf.append(key)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; append[java.lang.String]; buf>
<java.util.Map$Entry; getValue[]; java.lang.Integer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; entry>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.Report; errors[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; report>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; i>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.Report.ProcessingError; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; i>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; error.getFile()>
<net.sourceforge.pmd.Report$ProcessingError; getFile[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; equals[java.lang.Object]; error>
<net.sourceforge.pmd.Report$ProcessingError; getFile[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; error>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.Report$ProcessingError; getMsg[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; error>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.PapariTextRenderer; getReader[java.lang.String]; java.io.Reader; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; null; this>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; null; br.readLine()>
<java.io.BufferedReader; readLine[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; trim[]; br>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; null; ioErr>
<java.io.BufferedReader; close[]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; null; br>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.PapariTextRenderer; getLine[java.lang.String, int]; java.lang.String; null; ioErr>
<java.io.File; getCanonicalPath[]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; new File(".")>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; fileName>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; fileName>
<java.lang.String; length[]; int; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; this.pwd>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; relativePath>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.renderers.PapariTextRenderer; getRelativePath[java.lang.String]; java.lang.String; null; relativePath>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; buf.append("<?xml version=\"1.0\" encoding=\"" + this.encoding + "\"?>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.renderers.XMLRenderer; createVersionAttr[java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.XMLRenderer; createTimestampAttr[java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; buf.append('>')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; append[java.lang.String]; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; start[]; void; null; buf>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; equals[java.lang.Object]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("</file>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("<violation beginline=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[int]; buf>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("\" endline=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[int]; buf>
<net.sourceforge.pmd.IRuleViolation; getEndLine[]; int; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("\" begincolumn=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[int]; buf>
<net.sourceforge.pmd.IRuleViolation; getBeginColumn[]; int; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("\" endcolumn=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[int]; buf>
<net.sourceforge.pmd.IRuleViolation; getEndColumn[]; int; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getName[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<net.sourceforge.pmd.Rule; getRuleSetName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getRuleSetName[]; rv>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getClassName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getMethodName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getVariableName[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getExternalInfoUrl[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getPriority[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append("\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; this>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf.append("<error ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.Report$ProcessingError; getFile[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; pe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.Report$ProcessingError; getMsg[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; pe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf.append("\"/>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; append[java.lang.String]; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf.append("<suppressedviolation ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; s.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; getFilename[]; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.Report$SuppressedViolation; suppressedByNOPMD[]; boolean; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; s.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; getDescription[]; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; StringUtil>
<net.sourceforge.pmd.Report$SuppressedViolation; getUserMessage[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; s>
<net.sourceforge.pmd.Report$SuppressedViolation; getUserMessage[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; s>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf.append("\"/>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; append[java.lang.String]; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; end[]; void; null; writer>
<java.lang.String; length[]; int; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; null; value>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; null; buf.append(' ').append(attr)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; append[java.lang.String]; buf.append(' ')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.util.StringUtil; appendXmlEscaped[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; null; StringUtil>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; maybeAdd[java.lang.String, java.lang.String, java.lang.StringBuffer]; void; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createVersionAttr[java.lang.StringBuffer]; void; null; buffer.append("<pmd version=\"").append(PMD.VERSION)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createVersionAttr[java.lang.StringBuffer]; void; append[char]; buffer.append("<pmd version=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createVersionAttr[java.lang.StringBuffer]; void; append[java.lang.String]; buffer>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createTimestampAttr[java.lang.StringBuffer]; void; null; buffer.append(" timestamp=\"").append(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(new Date()))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createTimestampAttr[java.lang.StringBuffer]; void; append[char]; buffer.append(" timestamp=\"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XMLRenderer; createTimestampAttr[java.lang.StringBuffer]; void; append[java.lang.String]; buffer>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; createTimestampAttr[java.lang.StringBuffer]; void; null; new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")>
<net.sourceforge.pmd.Report; getElapsedTimeInMillis[]; long; net.sourceforge.pmd.renderers.XMLRenderer; createTimeElapsedAttr[net.sourceforge.pmd.Report]; java.lang.String; null; rpt>
<net.sourceforge.pmd.Report$ReadableDuration; getTime[]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; createTimeElapsedAttr[net.sourceforge.pmd.Report]; java.lang.String; null; d>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.XMLRenderer; createTimeElapsedAttr[net.sourceforge.pmd.Report]; java.lang.String; null; System>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(EOL)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(':')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(": ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.EmacsRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(PMD.EOL)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(':')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append('\t')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; this>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; errors>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf.append(PMD.EOL)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.Report$ProcessingError; getFile[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; error>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf.append("\t-\t")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.Report$ProcessingError; getMsg[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; error>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; excluded.getRuleViolation().getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; getName[]; excluded.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; getRule[]; excluded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<net.sourceforge.pmd.Report$SuppressedViolation; suppressedByNOPMD[]; boolean; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; excluded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf.append(" in ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; excluded.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; getFilename[]; excluded>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; getWriter()>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; write[java.lang.String]; this>
<net.sourceforge.pmd.renderers.AbstractRenderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.OnTheFlyRenderer; start[]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.OnTheFlyRenderer; end[]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; report>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; violations>
<net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; this>
<java.io.Writer; flush[]; void; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; getWriter()>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; flush[]; this>
<net.sourceforge.pmd.Report; errors[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; report>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; i>
<java.util.List; add[net.sourceforge.pmd.Report.ProcessingError]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; errors>
<java.util.Iterator; next[]; net.sourceforge.pmd.Report.ProcessingError; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; i>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.Report.SuppressedViolation>]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; suppressed>
<net.sourceforge.pmd.Report; getSuppressedRuleViolations[]; java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; report>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.OnTheFlyRenderer; end[]; void; null; System>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.OnTheFlyRenderer; end[]; void; null; System>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; SourcePath[java.lang.String]; void; null; st>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; SourcePath[java.lang.String]; void; null; paths>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; SourcePath[java.lang.String]; void; null; st>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; clipPath[java.lang.String]; java.lang.String; null; fullFilename>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; clipPath[java.lang.String]; java.lang.String; null; fullFilename>
<java.lang.String; length[]; int; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; clipPath[java.lang.String]; java.lang.String; null; path>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.IDEAJRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; args[4]>
<net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; violations>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; buf.append(" at ").append(getFullyQualifiedClassName(rv.getFilename(),sourcePath))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[java.lang.String]; buf.append(" at ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; buf.append(getSimpleFileName(rv.getFilename())).append(':').append(rv.getBeginLine()).append(')')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[java.lang.String]; buf.append(getSimpleFileName(rv.getFilename())).append(':').append(rv.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[char]; buf.append(getSimpleFileName(rv.getFilename())).append(':')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[int]; buf.append(getSimpleFileName(rv.getFilename()))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; append[char]; buf>
<net.sourceforge.pmd.renderers.IDEAJRenderer; getSimpleFileName[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; rv>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String]; void; null; buf>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; violations>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; buf.append(rv.getDescription())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; buf.append(" at ").append(classAndMethod).append('(').append(file).append(':').append(rv.getBeginLine()).append(')')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[java.lang.String]; buf.append(" at ").append(classAndMethod).append('(').append(file).append(':').append(rv.getBeginLine())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[char]; buf.append(" at ").append(classAndMethod).append('(').append(file).append(':')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[int]; buf.append(" at ").append(classAndMethod).append('(').append(file)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[char]; buf.append(" at ").append(classAndMethod).append('(')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[java.lang.String]; buf.append(" at ").append(classAndMethod)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[char]; buf.append(" at ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; render[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>, java.lang.String, java.lang.String]; void; null; buf>
<net.sourceforge.pmd.renderers.IDEAJRenderer$SourcePath; clipPath[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; null; sourcePath>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; null; classNameWithSlashes>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; null; FILE_SEPARATOR>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; null; className>
<java.lang.String; length[]; int; net.sourceforge.pmd.renderers.IDEAJRenderer; getFullyQualifiedClassName[java.lang.String, net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath]; java.lang.String; null; className>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.renderers.IDEAJRenderer; getSimpleFileName[java.lang.String]; java.lang.String; null; in>
<java.lang.String; lastIndexOf[java.lang.String]; int; net.sourceforge.pmd.renderers.IDEAJRenderer; getSimpleFileName[java.lang.String]; java.lang.String; null; in>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; start[]; void; null; getWriter()>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.VBHTMLRenderer; start[]; void; write[java.lang.String]; this>
<net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; start[]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getFilename()>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; equals[java.lang.Object]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb.append("<tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;").append(filename)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; sb.append("<tr id=TableHeader><td colspan=\"2\"><font class=title>&nbsp;")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; sb>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; writer>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; errors>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb.append("<td><font class=body>").append(error)>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; append[java.lang.String]; sb.append("<td><font class=body>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; append[java.lang.Object]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; sb>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; writer>
<net.sourceforge.pmd.renderers.VBHTMLRenderer; footer[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.VBHTMLRenderer; header[]; java.lang.String; null; sb>
<net.sourceforge.pmd.renderers.Renderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.AbstractRenderer; render[net.sourceforge.pmd.Report]; java.lang.String; null; this>
<java.io.StringWriter; toString[]; java.lang.String; net.sourceforge.pmd.renderers.AbstractRenderer; render[net.sourceforge.pmd.Report]; java.lang.String; null; w>
<net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.AbstractRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; mainReport>
<net.sourceforge.pmd.renderers.Renderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.AbstractRenderer; end[]; void; null; this>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(PMD.EOL)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(Integer.toString(rv.getBeginLine()))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf.append(rv.getRule().getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; append[java.lang.String]; buf>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getName[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.TextPadRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.AbstractRenderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.HTMLRenderer; start[]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; start[]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; start[]; void; write[java.lang.String]; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; start[]; void; write[java.lang.String]; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; start[]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.HTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; net.sourceforge.pmd.renderers.HTMLRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.HTMLRenderer; end[]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; end[]; void; null; writer>
<net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; net.sourceforge.pmd.renderers.HTMLRenderer; end[]; void; null; this>
<net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; net.sourceforge.pmd.renderers.HTMLRenderer; end[]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; end[]; void; null; writer>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<net.sourceforge.pmd.renderers.HTMLRenderer; maybeWrap[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.util.StringUtil; htmlEncode[java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getExternalInfoUrl[]; rv>
<java.lang.String; length[]; int; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule().getExternalInfoUrl()>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; length[]; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getExternalInfoUrl[]; rv>
<net.sourceforge.pmd.Rule; getExternalInfoUrl[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getExternalInfoUrl[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomIRuleViolations[java.io.Writer, java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; errors>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; write[java.lang.String]; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; write[java.lang.String]; writer>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<net.sourceforge.pmd.Report$ProcessingError; getFile[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; pe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<net.sourceforge.pmd.Report$ProcessingError; getMsg[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; pe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; writer>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; suppressed>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; write[java.lang.String]; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; write[java.lang.String]; writer>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; getFilename[]; sv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; getBeginLine[]; sv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv.getRuleViolation().getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; getName[]; sv.getRuleViolation()>
<net.sourceforge.pmd.Report$SuppressedViolation; getRuleViolation[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; getRule[]; sv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<net.sourceforge.pmd.Report$SuppressedViolation; suppressedByNOPMD[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<net.sourceforge.pmd.Report$SuppressedViolation; getUserMessage[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv>
<net.sourceforge.pmd.Report$SuppressedViolation; getUserMessage[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; sv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; writer>
<java.lang.String; replace[char, char]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; maybeWrap[java.lang.String, java.lang.String]; java.lang.String; null; filename.substring(0,filename.lastIndexOf('.'))>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.renderers.HTMLRenderer; maybeWrap[java.lang.String, java.lang.String]; java.lang.String; replace[char, char]; filename>
<java.lang.String; lastIndexOf[int]; int; net.sourceforge.pmd.renderers.HTMLRenderer; maybeWrap[java.lang.String, java.lang.String]; java.lang.String; null; filename>
<net.sourceforge.pmd.Report; getViolationTree[]; net.sourceforge.pmd.dfa.report.ReportTree; net.sourceforge.pmd.renderers.YAHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; report>
<net.sourceforge.pmd.dfa.report.AbstractReportNode; accept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; net.sourceforge.pmd.renderers.YAHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; tree.getRootNode()>
<net.sourceforge.pmd.dfa.report.ReportTree; getRootNode[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.renderers.YAHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; accept[net.sourceforge.pmd.dfa.report.ReportVisitor]; tree>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.YAHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; write[java.lang.String]; writer>
<net.sourceforge.pmd.renderers.HTMLRenderer; renderBody[java.io.Writer, net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; new HTMLRenderer(linkPrefix,linePrefix)>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; report>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Integer>>; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; summary>
<java.util.Map$Entry; getKey[]; java.lang.String; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; entry>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; entry.getValue()>
<java.util.Map$Entry; getValue[]; java.lang.Integer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; intValue[]; entry>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; writer>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.renderers.XSLTRenderer; XSLTRenderer[java.lang.String]; void; null; file>
<java.io.File; canRead[]; boolean; net.sourceforge.pmd.renderers.XSLTRenderer; XSLTRenderer[java.lang.String]; void; null; file>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.AbstractRenderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; this>
<java.io.File; exists[]; boolean; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; file>
<java.io.File; canRead[]; boolean; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; file>
<java.lang.Class; getResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; this.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.renderers.XSLTRenderer>; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; getResourceAsStream[java.lang.String]; this>
<net.sourceforge.pmd.renderers.XSLTRenderer; prepareTransformer[java.io.InputStream]; void; net.sourceforge.pmd.renderers.XSLTRenderer; start[]; void; null; this>
<javax.xml.transform.TransformerFactory; newInstance[]; javax.xml.transform.TransformerFactory; net.sourceforge.pmd.renderers.XSLTRenderer; prepareTransformer[java.io.InputStream]; void; null; TransformerFactory>
<javax.xml.transform.TransformerFactory; newTransformer[javax.xml.transform.Source]; javax.xml.transform.Transformer; net.sourceforge.pmd.renderers.XSLTRenderer; prepareTransformer[java.io.InputStream]; void; null; factory>
<javax.xml.transform.TransformerException; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; prepareTransformer[java.io.InputStream]; void; null; e>
<java.io.StringWriter; getBuffer[]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; null; w>
<java.lang.String; getBytes[java.lang.String]; byte[]; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; null; buffer.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; getBytes[java.lang.String]; buffer>
<net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; null; this>
<net.sourceforge.pmd.renderers.XSLTRenderer; transform[org.w3c.dom.Document]; void; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; null; this>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; end[]; void; null; new RuntimeException("Wrong writer")>
<net.sourceforge.pmd.renderers.AbstractRenderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.renderers.XSLTRenderer; transform[org.w3c.dom.Document]; void; null; this>
<javax.xml.transform.Transformer; transform[javax.xml.transform.Source, javax.xml.transform.Result]; void; net.sourceforge.pmd.renderers.XSLTRenderer; transform[org.w3c.dom.Document]; void; null; transformer>
<javax.xml.transform.TransformerException; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; transform[org.w3c.dom.Document]; void; null; e>
<javax.xml.parsers.DocumentBuilderFactory; newDocumentBuilder[]; javax.xml.parsers.DocumentBuilder; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; null; DocumentBuilderFactory.newInstance()>
<javax.xml.parsers.DocumentBuilderFactory; newInstance[]; javax.xml.parsers.DocumentBuilderFactory; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; newDocumentBuilder[]; DocumentBuilderFactory>
<javax.xml.parsers.DocumentBuilder; parse[java.io.InputStream]; org.w3c.dom.Document; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; null; parser>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; null; e>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.renderers.XSLTRenderer; getDocument[java.io.InputStream]; org.w3c.dom.Document; null; e>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; getWriter()>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; write[java.lang.String]; this>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; start[]; void; null; buf>
<net.sourceforge.pmd.renderers.AbstractRenderer; getWriter[]; java.io.Writer; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<java.lang.StringBuffer; setLength[int]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.util.Iterator; next[]; net.sourceforge.pmd.IRuleViolation; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; violations>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getPackageName[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.IRuleViolation; getFilename[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getPriority[]; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<java.lang.Integer; toString[int]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; Integer>
<net.sourceforge.pmd.IRuleViolation; getBeginLine[]; int; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.util.StringUtil; replaceString[java.lang.String, char, java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; StringUtil>
<net.sourceforge.pmd.IRuleViolation; getDescription[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.Rule; getRuleSetName[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getRuleSetName[]; rv>
<net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; this>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; rv.getRule()>
<net.sourceforge.pmd.IRuleViolation; getRule[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; getName[]; rv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; writer>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.renderers.CSVRenderer; renderFileViolations[java.util.Iterator<net.sourceforge.pmd.IRuleViolation>]; void; null; buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; null; sb.append('"').append(d)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; append[char]; sb.append('"')>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; append[java.lang.String]; sb>
<net.sourceforge.pmd.renderers.CSVRenderer; quote[java.lang.StringBuffer, java.lang.String]; void; net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.renderers.CSVRenderer; quoteAndCommify[java.lang.StringBuffer, java.lang.String]; void; null; sb>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.VariableNameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; void; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; getUsed[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; f>
<net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.get(decl)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; add[net.sourceforge.pmd.symboltable.NameOccurrence]; variableNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.ast.ASTName; setNameDeclaration[net.sourceforge.pmd.symboltable.NameDeclaration]; void; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; ((ASTName)n)>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.MethodScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.NameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.NameDeclaration>]; void; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.ImageFinderFunction; getDecl[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; finder>
<net.sourceforge.pmd.symboltable.ClassScope; getClassName[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; null; this.getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.AbstractScope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; getClassName[]; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; null; ((SimpleNode)node.jjtGetChild(1))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodScope; getName[]; java.lang.String; getImage[]; node>
<net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; java.lang.String; net.sourceforge.pmd.symboltable.MethodScope; toString[]; java.lang.String; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; toString[]; java.lang.String; null; variableNames>
<net.sourceforge.pmd.symboltable.JspScopeAndDeclarationFinder; setJspScope[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit]; void; net.sourceforge.pmd.symboltable.JspSymbolFacade; start[java.lang.Object]; void; null; new JspScopeAndDeclarationFinder()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingMethodScope[]; net.sourceforge.pmd.symboltable.MethodScope; net.sourceforge.pmd.symboltable.AbstractScope; getEnclosingMethodScope[]; net.sourceforge.pmd.symboltable.MethodScope; null; parent>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.symboltable.AbstractScope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; null; parent>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; net.sourceforge.pmd.symboltable.AbstractScope; getEnclosingSourceFileScope[]; net.sourceforge.pmd.symboltable.SourceFileScope; null; parent>
<net.sourceforge.pmd.symboltable.Scope; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; void; net.sourceforge.pmd.symboltable.AbstractScope; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; void; null; parent>
<net.sourceforge.pmd.symboltable.Scope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; net.sourceforge.pmd.symboltable.AbstractScope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; null; parent>
<net.sourceforge.pmd.symboltable.AbstractScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.AbstractScope; contains[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; result>
<java.lang.Object; toString[]; java.lang.String; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; t>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; result>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; result>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; result.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; substring[int, int]; result>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<T>]; java.lang.String; null; result>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getScope[]; net.sourceforge.pmd.symboltable.Scope; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getScope[]; net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; null; astVariableDeclaratorId>
<net.sourceforge.pmd.ast.Dimensionable; isArray[]; boolean; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; null; ((Dimensionable)(typeNode.jjtGetParent()))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isArray[]; boolean; isArray[]; typeNode>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; isExceptionBlockParameter[]; boolean; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isExceptionBlockParameter[]; boolean; null; ((ASTVariableDeclaratorId)node)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isPrimitiveType[]; boolean; null; getAccessNodeParent().jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isPrimitiveType[]; boolean; jjtGetChild[int]; getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isPrimitiveType[]; boolean; jjtGetChild[int]; this>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; isPrimitiveType[]; boolean; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; null; ((SimpleNode)(getAccessNodeParent().jjtGetChild(0).jjtGetChild(0)))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; getImage[]; getAccessNodeParent().jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; jjtGetChild[int]; getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; jjtGetChild[int]; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; null; ((SimpleNode)getAccessNodeParent().jjtGetChild(0).jjtGetChild(0).jjtGetChild(0))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; getImage[]; getAccessNodeParent().jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; jjtGetChild[int]; getAccessNodeParent().jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; jjtGetChild[int]; getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getTypeImage[]; java.lang.String; jjtGetChild[int]; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isReferenceType[]; boolean; null; getAccessNodeParent().jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isReferenceType[]; boolean; jjtGetChild[int]; getAccessNodeParent()>
<net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; net.sourceforge.pmd.symboltable.VariableNameDeclaration; isReferenceType[]; boolean; jjtGetChild[int]; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getAccessNodeParent[]; net.sourceforge.pmd.ast.AccessNode; jjtGetParent[]; node>
<net.sourceforge.pmd.ast.TypeNode; getType[]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.VariableNameDeclaration; getType[]; java.lang.Class; null; ((TypeNode)node)>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.VariableNameDeclaration; equals[java.lang.Object]; boolean; null; n.node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; equals[java.lang.Object]; boolean; equals[java.lang.Object]; n.node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; equals[java.lang.Object]; boolean; null; node>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.symboltable.VariableNameDeclaration; hashCode[]; int; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; hashCode[]; int; hashCode[]; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.VariableNameDeclaration; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.symboltable.VariableNameDeclaration; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; setScope[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.JspScopeAndDeclarationFinder; setJspScope[net.sourceforge.pmd.jsp.ast.ASTCompilationUnit]; void; null; compilationUnit>
<net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.ast.ASTName; setNameDeclaration[net.sourceforge.pmd.symboltable.NameDeclaration]; void; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; ((ASTName)n)>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.VariableNameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; void; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; getUsed[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; f>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.LocalScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.LocalScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.NameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.NameDeclaration>]; void; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.ImageFinderFunction; getDecl[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; finder>
<net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; java.lang.String; net.sourceforge.pmd.symboltable.LocalScope; toString[]; java.lang.String; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; toString[]; java.lang.String; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; results>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; decls>
<net.sourceforge.pmd.symboltable.NameFinder; getNames[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; nameFinder>
<net.sourceforge.pmd.symboltable.Search; execute[]; void; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; search>
<net.sourceforge.pmd.symboltable.Search; getResult[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; search>
<net.sourceforge.pmd.symboltable.Search; execute[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; search>
<net.sourceforge.pmd.symboltable.NameDeclaration; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; decl>
<net.sourceforge.pmd.symboltable.Search; getResult[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.OccurrenceFinder; visit[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.Object]; java.lang.Object; null; search>
<net.sourceforge.pmd.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.SymbolFacade; initializeWith[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<net.sourceforge.pmd.ast.ASTCompilationUnit; jjtAccept[net.sourceforge.pmd.ast.JavaParserVisitor, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.SymbolFacade; initializeWith[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; node>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesSuperModifier[]; boolean; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; prefix>
<net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; this>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesThisModifier[]; boolean; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; prefix>
<net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; node>
<net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; NameFinder[net.sourceforge.pmd.ast.ASTPrimaryExpression]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; grandchild>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; st>
<net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; st>
<net.sourceforge.pmd.ast.ASTPrimarySuffix; isArguments[]; boolean; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; suffix>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; names>
<net.sourceforge.pmd.symboltable.NameOccurrence; setIsMethodOrConstructorInvocation[]; void; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; occurrence>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((ASTPrimarySuffix)node)>
<net.sourceforge.pmd.symboltable.NameOccurrence; setArgumentCount[int]; void; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; occurrence>
<net.sourceforge.pmd.ast.ASTArguments; getArgumentCount[]; int; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; args>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; suffix>
<net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; suffix>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((SimpleNode)suffix.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; getImage[]; suffix>
<java.util.LinkedList; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<net.sourceforge.pmd.symboltable.NameOccurrence; setNameWhichThisQualifies[net.sourceforge.pmd.symboltable.NameOccurrence]; void; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; qualifiedName>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.NameFinder; toString[]; java.lang.String; null; result>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; toString[]; java.lang.String; null; occ>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.symboltable.NameFinder; toString[]; java.lang.String; null; result>
<java.util.Map; put[net.sourceforge.pmd.symboltable.ClassNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.SourceFileScope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; null; classNames>
<net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>]; java.lang.String; net.sourceforge.pmd.symboltable.SourceFileScope; toString[]; java.lang.String; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; toString[]; java.lang.String; null; classNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occ>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.NameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.NameDeclaration>]; void; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; classNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; classNames>
<net.sourceforge.pmd.symboltable.ImageFinderFunction; getDecl[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; finder>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.TypeSet.ExplicitImportResolver; resolve[java.lang.String]; java.lang.Class; null; importStmt>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.TypeSet.ExplicitImportResolver; resolve[java.lang.String]; java.lang.Class; null; Class>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.TypeSet.CurrentPackageResolver; resolve[java.lang.String]; java.lang.Class; null; Class>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.TypeSet.ImplicitImportResolver; resolve[java.lang.String]; java.lang.Class; null; Class>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.TypeSet.ImportOnDemandResolver; resolve[java.lang.String]; java.lang.Class; null; importStmt>
<java.lang.String; substring[int, int]; java.lang.String; net.sourceforge.pmd.symboltable.TypeSet.ImportOnDemandResolver; resolve[java.lang.String]; java.lang.Class; null; importStmt>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.symboltable.TypeSet.ImportOnDemandResolver; resolve[java.lang.String]; java.lang.Class; null; importStmt>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.TypeSet.ImportOnDemandResolver; resolve[java.lang.String]; java.lang.Class; null; Class>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; resolve[java.lang.String]; java.lang.Class; null; primitiveTypes>
<java.util.Map; get[java.lang.Object]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; resolve[java.lang.String]; java.lang.Class; null; primitiveTypes>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.TypeSet.VoidResolver; resolve[java.lang.String]; java.lang.Class; null; name>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.symboltable.TypeSet.FullyQualifiedNameResolver; resolve[java.lang.String]; java.lang.Class; null; Class>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.TypeSet; addImport[java.lang.String]; void; null; imports>
<java.util.Set; size[]; int; net.sourceforge.pmd.symboltable.TypeSet; getImportsCount[]; int; null; imports>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.TypeSet; findClass[java.lang.String]; java.lang.Class; null; resolvers>
<net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; net.sourceforge.pmd.symboltable.TypeSet; findClass[java.lang.String]; java.lang.Class; null; this>
<net.sourceforge.pmd.symboltable.TypeSet$Resolver; resolve[java.lang.String]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet; findClass[java.lang.String]; java.lang.Class; null; resolver>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassNameDeclaration; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterCount[]; int; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; null; params>
<net.sourceforge.pmd.ast.ASTFormalParameter; isVarargs[]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; null; p>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; params>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<net.sourceforge.pmd.ast.ASTType; getTypeImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; p.getTypeNode()>
<net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; getTypeImage[]; p>
<net.sourceforge.pmd.ast.ASTFormalParameter; isVarargs[]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; charAt[int]; char; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; deleteCharAt[int]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; length[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterDisplaySignature[]; java.lang.String; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; other.node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; equals[java.lang.Object]; other.node>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; ((ASTMethodDeclarator)(other.node))>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; other.node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myParams>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; otherParams>
<net.sourceforge.pmd.ast.ASTFormalParameter; isVarargs[]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myParam>
<net.sourceforge.pmd.ast.ASTFormalParameter; isVarargs[]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; otherParam>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myParam.getTypeNode()>
<net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; jjtGetChild[int]; myParam>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; otherParam.getTypeNode()>
<net.sourceforge.pmd.ast.ASTFormalParameter; getTypeNode[]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; jjtGetChild[int]; otherParam>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myTypeNode>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; otherTypeNode>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myTypeNode>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; otherTypeNode>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; ((SimpleNode)(myTypeNode.jjtGetChild(0)))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; getImage[]; myTypeNode>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; ((SimpleNode)(otherTypeNode.jjtGetChild(0)))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; getImage[]; otherTypeNode>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.MethodNameDeclaration; equals[java.lang.Object]; boolean; null; myTypeImg>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; hashCode[]; int; null; node.getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; hashCode[]; int; hashCode[]; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; hashCode[]; int; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.MethodNameDeclaration; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; toString[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.ASTMethodDeclarator; getParameterCount[]; int; net.sourceforge.pmd.symboltable.MethodNameDeclaration; toString[]; java.lang.String; null; ((ASTMethodDeclarator)node)>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; null; location.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; jjtGetParent[]; location.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; jjtGetParent[]; location>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isOnRightHandSide[]; boolean; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; jjtGetParent[]; location>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; jjtGetParent[]; location>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location.jjtGetParent().jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; jjtGetParent[]; location.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; jjtGetParent[]; location>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; location.jjtGetParent()>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; jjtGetParent[]; location>
<net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; parentOfPrimaryExpression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; parentOfPrimaryExpression>
<net.sourceforge.pmd.symboltable.NameOccurrence; isPartOfQualifiedName[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; isCompoundAssignment[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isOnLeftHandSide[]; boolean; null; this>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; isCompound[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isCompoundAssignment[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; ((ASTAssignmentOperator)(primaryExpression.jjtGetChild(1)))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isCompoundAssignment[net.sourceforge.pmd.ast.SimpleNode]; boolean; isCompound[]; primaryExpression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; primaryExpression>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; ((ASTPrimaryExpression)primaryExpression.jjtGetChild(0))>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; primaryExpression>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesThisModifier[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; pf>
<net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isStandAlonePostfix[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; this>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; primaryExpression.jjtGetChild(0).jjtGetChild(0)>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; primaryExpression.jjtGetChild(0)>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; jjtGetChild[int]; primaryExpression>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; ((ASTName)thirdChild).getImage()>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameOccurrence; thirdChildHasDottedName[net.sourceforge.pmd.ast.SimpleNode]; boolean; indexOf[int]; ((ASTName)thirdChild)>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; l>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; p>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; gp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; exp>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; exp>
<net.sourceforge.pmd.ast.ASTAssignmentOperator; isCompound[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; op>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; p>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; gp>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; node>
<net.sourceforge.pmd.ast.Node; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; null; node.jjtGetParent()>
<net.sourceforge.pmd.ast.Node; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; isSelfAssignment[]; boolean; jjtGetNumChildren[]; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; null; image>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; null; image>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; location>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPrimaryPrefix>]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; primaryExpression>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesSuperModifier[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; prefix>
<net.sourceforge.pmd.ast.ASTPrimaryPrefix; usesThisModifier[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; prefix>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; image>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; useThisOrSuper[]; boolean; null; image>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; equals[java.lang.Object]; boolean; null; n.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameOccurrence; equals[java.lang.Object]; boolean; equals[java.lang.Object]; n>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameOccurrence; equals[java.lang.Object]; boolean; null; this>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; hashCode[]; int; null; getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameOccurrence; hashCode[]; int; hashCode[]; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.NameOccurrence; toString[]; java.lang.String; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.symboltable.NameOccurrence; toString[]; java.lang.String; null; location>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.symboltable.NameOccurrence; toString[]; java.lang.String; null; location>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.NameOccurrence; toString[]; java.lang.String; null; this>
<java.lang.Integer; valueOf[int]; java.lang.Integer; java.lang.ThreadLocal<java.lang.Integer>; initialValue[]; java.lang.Integer; null; Integer>
<java.lang.ThreadLocal; set[java.lang.Integer]; void; net.sourceforge.pmd.symboltable.ClassScope; ClassScope[java.lang.String]; void; null; anonymousInnerClassCounter>
<java.lang.Integer; valueOf[int]; java.lang.Integer; net.sourceforge.pmd.symboltable.ClassScope; ClassScope[java.lang.String]; void; null; Integer>
<java.lang.Integer; intValue[]; int; net.sourceforge.pmd.symboltable.ClassScope; ClassScope[]; void; null; anonymousInnerClassCounter.get()>
<java.lang.ThreadLocal; get[]; java.lang.Integer; net.sourceforge.pmd.symboltable.ClassScope; ClassScope[]; void; intValue[]; anonymousInnerClassCounter>
<java.lang.ThreadLocal; set[java.lang.Integer]; void; net.sourceforge.pmd.symboltable.ClassScope; ClassScope[]; void; null; anonymousInnerClassCounter>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.ast.ASTName; setNameDeclaration[net.sourceforge.pmd.symboltable.NameDeclaration]; void; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; ((ASTName)n)>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.ast.ASTName; setNameDeclaration[net.sourceforge.pmd.symboltable.NameDeclaration]; void; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; ((ASTName)n)>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.VariableNameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; void; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; getUsed[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; f>
<java.util.Map; put[net.sourceforge.pmd.symboltable.MethodNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; void; null; methodNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.ClassNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; null; classNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; isThisOrSuper[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; equals[java.lang.Object]; occurrence>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.Iterator; next[]; net.sourceforge.pmd.symboltable.VariableNameDeclaration; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet().iterator()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; next[]; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<java.util.Iterator; next[]; net.sourceforge.pmd.symboltable.MethodNameDeclaration; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames.keySet().iterator()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; next[]; methodNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; methodNames>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; mnd.getImage()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; equals[java.lang.Object]; mnd>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.NameOccurrence; getArgumentCount[]; int; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterCount[]; int; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; isVarargs[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; mnd>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; getParameterCount[]; int; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; mnd>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; images>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence.getImage()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; startsWith[java.lang.String]; occurrence>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; images>
<net.sourceforge.pmd.symboltable.ClassScope; clipClassName[java.lang.String]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; this>
<net.sourceforge.pmd.symboltable.NameOccurrence; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; occurrence>
<net.sourceforge.pmd.util.Applier; apply[net.sourceforge.pmd.util.UnaryFunction<net.sourceforge.pmd.symboltable.NameDeclaration>, java.util.Iterator<? extends net.sourceforge.pmd.symboltable.NameDeclaration>]; void; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; Applier>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<net.sourceforge.pmd.symboltable.ImageFinderFunction; getDecl[]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; finder>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; classNames>
<net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; classNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames>
<net.sourceforge.pmd.symboltable.MethodNameDeclaration; toString[]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; mnd>
<java.util.List; size[]; int; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames.get(mnd)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; size[]; methodNames>
<net.sourceforge.pmd.ast.SimpleNode; getBeginLine[]; int; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; mnd.getNode()>
<net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getNode[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; getBeginLine[]; mnd>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; variableNames>
<net.sourceforge.pmd.symboltable.AbstractScope; glomNames[java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; this>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; variableNames>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.symboltable.ClassScope; clipClassName[java.lang.String]; java.lang.String; null; in>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.symboltable.ClassScope; clipClassName[java.lang.String]; java.lang.String; null; in>
<java.util.Collections; emptyMap[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.symboltable.DummyScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; Collections>
<java.util.Collections; emptyMap[]; java.util.Map<net.sourceforge.pmd.symboltable.ClassNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; net.sourceforge.pmd.symboltable.DummyScope; getClassDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.ClassNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; Collections>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getImage[]; java.lang.String; null; node>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.AbstractNameDeclaration; getScope[]; net.sourceforge.pmd.symboltable.Scope; null; node>
<net.sourceforge.pmd.symboltable.Scope; setParent[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; newScope>
<java.util.Stack; peek[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<java.util.Stack; push[net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<net.sourceforge.pmd.ast.SimpleNode; setScope[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createMethodScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTPackageDeclaration>]; java.util.List<net.sourceforge.pmd.ast.ASTPackageDeclaration>; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; packages>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; packages>
<net.sourceforge.pmd.ast.SimpleNode; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; ((SimpleNode)n.jjtGetChild(0))>
<net.sourceforge.pmd.ast.Node; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; getImage[]; n>
<java.util.Stack; push[net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<net.sourceforge.pmd.ast.SimpleNode; setScope[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; ((SimpleNode)node.jjtGetParent())>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetParent[]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; getScope[]; node>
<net.sourceforge.pmd.symboltable.Scope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; s>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isAnonymousInnerClass[]; boolean; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration; isEnumChild[]; boolean; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createClassScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTBlock, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTFinallyStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createMethodScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetNumChildren[]; int; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTTypeParameters, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.ASTFormalParameters, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; jjtGetChild[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.ast.SimpleNode; setScope[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; b>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.JavaParserVisitorAdapter; visit[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; this>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; scopes>
<net.sourceforge.pmd.ast.SimpleNode; setScope[net.sourceforge.pmd.symboltable.Scope]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; node>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; scopes>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createMethodScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getFirstChildOfType[java.lang.Class<net.sourceforge.pmd.ast.ASTMethodDeclarator>]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getScope().getEnclosingClassScope()>
<net.sourceforge.pmd.symboltable.Scope; getEnclosingClassScope[]; net.sourceforge.pmd.symboltable.ClassScope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; getEnclosingClassScope[]; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTTryStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.Scope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node.getScope()>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; node>
<net.sourceforge.pmd.ast.ASTVariableDeclaratorId; setNameDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; node>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createLocalScope[net.sourceforge.pmd.ast.SimpleNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; this>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; scopes>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; Search[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; System.out>
<net.sourceforge.pmd.symboltable.NameOccurrence; isMethodOrConstructorInvocation[]; boolean; net.sourceforge.pmd.symboltable.Search; Search[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; occ>
<net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.Search; execute[]; void; null; this>
<net.sourceforge.pmd.ast.SimpleNode; getScope[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.Search; execute[]; void; null; occ.getLocation()>
<net.sourceforge.pmd.symboltable.NameOccurrence; getLocation[]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.symboltable.Search; execute[]; void; getScope[]; occ>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; execute[]; void; null; System.out>
<net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.Search; execute[net.sourceforge.pmd.symboltable.Scope]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; execute[net.sourceforge.pmd.symboltable.Scope]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; System.out>
<net.sourceforge.pmd.symboltable.Scope; contains[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<net.sourceforge.pmd.symboltable.Scope; getParent[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; System.out>
<net.sourceforge.pmd.symboltable.Scope; getParent[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; this>
<net.sourceforge.pmd.symboltable.Scope; getParent[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<net.sourceforge.pmd.symboltable.Scope; contains[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<java.io.PrintStream; println[java.lang.String]; void; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; System.out>
<net.sourceforge.pmd.symboltable.Scope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; net.sourceforge.pmd.symboltable.Search; searchUpward[net.sourceforge.pmd.symboltable.NameOccurrence, net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.NameDeclaration; null; scope>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; ImageFinderFunction[java.lang.String]; void; null; images>
<java.util.Set; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; ImageFinderFunction[java.util.List<java.lang.String>]; void; null; images>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.NameDeclaration]; void; null; images>
<net.sourceforge.pmd.symboltable.NameDeclaration; getImage[]; java.lang.String; net.sourceforge.pmd.symboltable.ImageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.NameDeclaration]; void; null; nameDeclaration>
<java.util.Properties; load[java.io.InputStream]; void; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; props>
<net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; ResourceLoader>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; props>
<net.sourceforge.pmd.RuleSets; getRuleSetsIterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; createRuleSets(rulesetFilenames)>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; getRuleSetsIterator[]; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; System>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; null; this>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.RuleSetFactory>; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; getClassLoader[]; this>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; null; st>
<net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; null; this>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; null; st.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; trim[]; st>
<net.sourceforge.pmd.RuleSets; addRuleSet[net.sourceforge.pmd.RuleSet]; void; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; null; ruleSets>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSets>
<net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; result>
<net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String]; net.sourceforge.pmd.RuleSet; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.RuleSetFactory>; net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String]; net.sourceforge.pmd.RuleSet; getClassLoader[]; this>
<net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<net.sourceforge.pmd.RuleSetFactory; tryToGetStreamTo[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; net.sourceforge.pmd.RuleSetFactory; createSingleRuleSet[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream]; net.sourceforge.pmd.RuleSet; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.RuleSetFactory>; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream]; net.sourceforge.pmd.RuleSet; getClassLoader[]; this>
<net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; net.sourceforge.pmd.RuleSetFactory; tryToGetStreamTo[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; null; ResourceLoader>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; tryToGetStreamTo[java.lang.String, java.lang.ClassLoader]; java.io.InputStream; null; System>
<javax.xml.parsers.DocumentBuilderFactory; newDocumentBuilder[]; javax.xml.parsers.DocumentBuilder; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; DocumentBuilderFactory.newInstance()>
<javax.xml.parsers.DocumentBuilderFactory; newInstance[]; javax.xml.parsers.DocumentBuilderFactory; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; newDocumentBuilder[]; DocumentBuilderFactory>
<javax.xml.parsers.DocumentBuilder; parse[java.io.InputStream]; org.w3c.dom.Document; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; builder>
<org.w3c.dom.Document; getDocumentElement[]; org.w3c.dom.Element; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; document>
<net.sourceforge.pmd.RuleSet; setFileName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<net.sourceforge.pmd.RuleSet; setName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSetElement>
<net.sourceforge.pmd.RuleSet; setLanguage[net.sourceforge.pmd.Language]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<net.sourceforge.pmd.Language; getByName[java.lang.String]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; Language>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSetElement>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSetElement>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; nodeList>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; nodeList>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSet; setDescription[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSet; addIncludePattern[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSet; addExcludePattern[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ruleSet>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; this>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; cnfe>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; cnfe>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ie>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ie>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; iae>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; iae>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; pce>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; pce>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; rsnfe>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; rsnfe>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ioe>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; ioe>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; se>
<org.xml.sax.SAXException; getMessage[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetNode[java.lang.String, java.io.InputStream, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSet; null; se>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<java.lang.String; endsWith[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ref>
<net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<java.lang.String; length[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ref.trim()>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; length[]; ref>
<net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<net.sourceforge.pmd.RuleSetReference; setAllRules[boolean]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference>
<net.sourceforge.pmd.RuleSetReference; setRuleSetFileName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleElement>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; excludeNodes>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; excludeNodes.item(i)>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; getNodeType[]; excludeNodes>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; excludeNodes.item(i).getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; equals[java.lang.Object]; excludeNodes.item(i)>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; getNodeName[]; excludeNodes>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; excludeNodes>
<net.sourceforge.pmd.RuleSetReference; addExclude[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; excludeElement>
<net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetFactory>
<net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ResourceLoader>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; otherRuleSet>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference.getExcludes()>
<net.sourceforge.pmd.RuleSetReference; getExcludes[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; contains[java.lang.Object]; ruleSetReference>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; rule>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; rule>
<net.sourceforge.pmd.RuleReference; setRuleSetReference[net.sourceforge.pmd.RuleSetReference]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.AbstractDelegateRule; setRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSet>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<java.lang.ClassLoader; loadClass[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; classLoader>
<java.lang.Class; newInstance[]; ; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; c>
<net.sourceforge.pmd.Rule; setName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<java.lang.String; length[]; int; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; since>
<net.sourceforge.pmd.Rule; setSince[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<net.sourceforge.pmd.Rule; setMessage[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<net.sourceforge.pmd.Rule; setRuleSetName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<net.sourceforge.pmd.RuleSet; getName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleSet>
<net.sourceforge.pmd.Rule; setExternalInfoUrl[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement.getAttribute("dfa")>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; ruleElement>
<net.sourceforge.pmd.Rule; setUsesDFA[]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement.getAttribute("typeResolution")>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; ruleElement>
<net.sourceforge.pmd.Rule; setUsesTypeResolution[]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; getLength[]; ruleElement>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleElement.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; item[int]; ruleElement>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.Rule; setDescription[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.Rule; addExample[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.Rule; setPriority[int]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; Integer>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; parseTextNode(node)>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; trim[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; this>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; p>
<net.sourceforge.pmd.Rule; addProperty[java.lang.String, java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<java.util.Map$Entry; getKey[]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; entry>
<java.util.Map$Entry; getValue[]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; entry>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; rule>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSetFactory; createRuleSet[java.io.InputStream]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleSetFactory>
<net.sourceforge.pmd.util.ResourceLoader; loadResourceAsStream[java.lang.String]; java.io.InputStream; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ResourceLoader>
<net.sourceforge.pmd.ExternalRuleID; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRuleID>
<net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRuleSet>
<net.sourceforge.pmd.ExternalRuleID; getRuleName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRuleID>
<net.sourceforge.pmd.ExternalRuleID; getRuleName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRuleID>
<net.sourceforge.pmd.RuleSetReference; setAllRules[boolean]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleSetReference>
<net.sourceforge.pmd.RuleSetReference; setRuleSetFileName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleSetReference>
<net.sourceforge.pmd.ExternalRuleID; getFilename[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRuleID>
<net.sourceforge.pmd.RuleReference; setRuleSetReference[net.sourceforge.pmd.RuleSetReference]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.AbstractDelegateRule; setRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<net.sourceforge.pmd.RuleReference; setName[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<net.sourceforge.pmd.RuleReference; setMessage[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<net.sourceforge.pmd.RuleReference; setExternalInfoUrl[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; getLength[]; ruleElement>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleElement.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; item[int]; ruleElement>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleReference; setDescription[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleReference; setPriority[int]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<java.lang.Integer; parseInt[java.lang.String]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; Integer>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; this>
<net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleReference>
<net.sourceforge.pmd.Rule; getPriority[]; int; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; externalRule>
<net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSetFactory; parseRuleReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.String]; void; null; ruleSet>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertiesNode.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; getLength[]; propertiesNode>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertiesNode.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; item[int]; propertiesNode>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; net.sourceforge.pmd.RuleSetFactory; parsePropertiesNode[java.util.Properties, org.w3c.dom.Node]; void; null; this>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyElement>
<org.w3c.dom.Element; getAttribute[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyElement>
<java.lang.String; length[]; int; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; value.trim()>
<java.lang.String; trim[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; length[]; value>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyNode.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; getLength[]; propertyNode>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyNode.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; item[int]; propertyNode>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; node>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; node.getNodeName()>
<org.w3c.dom.Node; getNodeName[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; equals[java.lang.Object]; node>
<net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; this>
<org.w3c.dom.Element; hasAttribute[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyElement>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; p>
<org.w3c.dom.Node; getNodeValue[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; propertyElement.getAttributeNode("pluginname")>
<org.w3c.dom.Element; getAttributeNode[java.lang.String]; org.w3c.dom.Attr; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; getNodeValue[]; propertyElement>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; p>
<org.w3c.dom.NodeList; getLength[]; int; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; node.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; getLength[]; node>
<org.w3c.dom.NodeList; item[int]; org.w3c.dom.Node; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; node.getChildNodes()>
<org.w3c.dom.Node; getChildNodes[]; org.w3c.dom.NodeList; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; item[int]; node>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; childNode>
<org.w3c.dom.Node; getNodeType[]; short; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; childNode>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; buffer>
<org.w3c.dom.Node; getNodeValue[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; childNode>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; buffer>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; parseTextNode[org.w3c.dom.Node]; java.lang.String; null; System>
<net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; net.sourceforge.pmd.FileDataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; null; this>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; inputFileName>
<java.io.File; isDirectory[]; boolean; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; (new File(inputFileName))>
<net.sourceforge.pmd.FileDataSource; trimAnyPathSep[java.lang.String]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; this>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; file.getAbsolutePath()>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; substring[int]; file>
<java.lang.String; length[]; int; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; inputFileName>
<java.lang.String; indexOf[int]; int; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; inputFileName>
<java.lang.String; charAt[int]; char; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; fileSeparator>
<net.sourceforge.pmd.FileDataSource; trimAnyPathSep[java.lang.String]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; this>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; inputFileName>
<java.lang.String; lastIndexOf[java.lang.String]; int; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; inputFileName>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; System>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; file.getCanonicalFile()>
<java.io.File; getCanonicalFile[]; java.io.File; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; getAbsolutePath[]; file>
<java.io.File; getAbsolutePath[]; java.lang.String; net.sourceforge.pmd.FileDataSource; glomName[boolean, java.lang.String, java.io.File]; java.lang.String; null; file>
<java.lang.String; startsWith[java.lang.String]; boolean; net.sourceforge.pmd.FileDataSource; trimAnyPathSep[java.lang.String]; java.lang.String; null; name>
<java.lang.String; substring[int]; java.lang.String; net.sourceforge.pmd.FileDataSource; trimAnyPathSep[java.lang.String]; java.lang.String; null; name>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet]; void; null; ruleSet>
<net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule, net.sourceforge.pmd.Language]; void; net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet]; void; null; this>
<net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule, net.sourceforge.pmd.Language]; void; null; this>
<net.sourceforge.pmd.RuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule, net.sourceforge.pmd.Language]; void; null; visitor>
<net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; this>
<net.sourceforge.pmd.RuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleChain; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; visitor>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; languageToRuleChainVisitor>
<net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; Language.JAVA>
<net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; Language.JSP>
<java.util.Map; put[net.sourceforge.pmd.Language, net.sourceforge.pmd.RuleChainVisitor]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; languageToRuleChainVisitor>
<java.util.List; size[]; int; net.sourceforge.pmd.RuleSet; size[]; int; null; rules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; null; rules>
<net.sourceforge.pmd.RuleSetReference; setRuleSetFileName[java.lang.String]; void; net.sourceforge.pmd.RuleSet; addRuleByReference[java.lang.String, net.sourceforge.pmd.Rule]; void; null; ruleSetReference>
<net.sourceforge.pmd.AbstractDelegateRule; setRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSet; addRuleByReference[java.lang.String, net.sourceforge.pmd.Rule]; void; null; ruleReference>
<net.sourceforge.pmd.RuleReference; setRuleSetReference[net.sourceforge.pmd.RuleSetReference]; void; net.sourceforge.pmd.RuleSet; addRuleByReference[java.lang.String, net.sourceforge.pmd.Rule]; void; null; ruleReference>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRuleByReference[java.lang.String, net.sourceforge.pmd.Rule]; void; null; rules>
<net.sourceforge.pmd.Rule; usesDFA[]; boolean; net.sourceforge.pmd.RuleSet; usesDFA[]; boolean; null; r>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; rules>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; i>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; r.getName()>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; equals[java.lang.Object]; r>
<java.util.List; addAll[int, java.util.Collection<? extends net.sourceforge.pmd.Rule>]; boolean; net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; rules>
<java.util.List; size[]; int; net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; rules>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSet; getFileName[]; java.lang.String; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSetReference; setRuleSetFileName[java.lang.String]; void; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleSetReference>
<net.sourceforge.pmd.RuleSet; getFileName[]; java.lang.String; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSetReference; setAllRules[boolean]; void; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleSetReference>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleSet>
<net.sourceforge.pmd.AbstractDelegateRule; setRule[net.sourceforge.pmd.Rule]; void; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleReference>
<net.sourceforge.pmd.RuleReference; setRuleSetReference[net.sourceforge.pmd.RuleSetReference]; void; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; ruleReference>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; rules>
<net.sourceforge.pmd.util.filter.Filters; buildRegexFilterIncludeOverExclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; null; Filters>
<net.sourceforge.pmd.util.filter.Filters; toNormalizedFileFilter[net.sourceforge.pmd.util.filter.Filter<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.io.File>; net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; null; Filters>
<net.sourceforge.pmd.util.filter.Filter; filter[java.io.File]; boolean; net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; null; filter>
<net.sourceforge.pmd.Rule; start[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSet; start[net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.Rule; usesRuleChain[]; boolean; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; rule>
<net.sourceforge.pmd.Rule; apply[java.util.List<?>, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.lang.System; nanoTime[]; long; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; System>
<net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; Benchmark>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; rule>
<net.sourceforge.pmd.Rule; end[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSet; end[net.sourceforge.pmd.RuleContext]; void; null; rule>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; null; this.getName()>
<net.sourceforge.pmd.RuleSet; getName[]; java.lang.String; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.RuleSet; getName[]; java.lang.String; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; null; ruleSet>
<java.util.Collection; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; null; this.getRules()>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; null; ruleSet>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.RuleSet; hashCode[]; int; null; this.getName()>
<net.sourceforge.pmd.RuleSet; getName[]; java.lang.String; net.sourceforge.pmd.RuleSet; hashCode[]; int; hashCode[]; this>
<java.util.Collection; hashCode[]; int; net.sourceforge.pmd.RuleSet; hashCode[]; int; null; this.getRules()>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; hashCode[]; int; hashCode[]; this>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSet; addExcludePattern[java.lang.String]; void; null; this.excludePatterns>
<java.util.List; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.RuleSet; addExcludePatterns[java.util.List<java.lang.String>]; void; null; this.excludePatterns>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSet; addIncludePattern[java.lang.String]; void; null; this.includePatterns>
<java.util.List; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.RuleSet; addIncludePatterns[java.util.List<java.lang.String>]; void; null; this.includePatterns>
<net.sourceforge.pmd.Rule; usesTypeResolution[]; boolean; net.sourceforge.pmd.RuleSet; usesTypeResolution[]; boolean; null; r>
<net.sourceforge.pmd.RuleSets; addRuleSet[net.sourceforge.pmd.RuleSet]; void; net.sourceforge.pmd.RuleSets; RuleSets[net.sourceforge.pmd.RuleSet]; void; null; this>
<java.util.Collection; add[net.sourceforge.pmd.RuleSet]; boolean; net.sourceforge.pmd.RuleSets; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; ruleSets>
<net.sourceforge.pmd.RuleChain; add[net.sourceforge.pmd.RuleSet]; void; net.sourceforge.pmd.RuleSets; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; ruleChain>
<java.util.Collection; toArray[net.sourceforge.pmd.RuleSet[]]; net.sourceforge.pmd.RuleSet[]; net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; null; ruleSets>
<java.util.Collection; size[]; int; net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; null; ruleSets>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; getRuleSetsIterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; ruleSets>
<java.util.AbstractCollection; addAll[java.util.Collection<? extends net.sourceforge.pmd.Rule>]; boolean; net.sourceforge.pmd.RuleSets; getAllRules[]; java.util.Set<net.sourceforge.pmd.Rule>; null; result>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSets; getAllRules[]; java.util.Set<net.sourceforge.pmd.Rule>; null; r>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; null; ruleSets>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; null; i>
<net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; null; ((RuleSet)i.next())>
<java.util.Iterator; next[]; java.lang.Object; net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; applies[java.io.File]; i>
<net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSets; applies[net.sourceforge.pmd.Language, net.sourceforge.pmd.Language]; boolean; null; languageOfSource>
<net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSets; applies[net.sourceforge.pmd.Language, net.sourceforge.pmd.Language]; boolean; null; languageOfSource>
<net.sourceforge.pmd.RuleSet; start[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSets; start[net.sourceforge.pmd.RuleContext]; void; null; ruleSet>
<net.sourceforge.pmd.RuleChain; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; ruleChain>
<net.sourceforge.pmd.RuleSets; applies[net.sourceforge.pmd.Language, net.sourceforge.pmd.Language]; boolean; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; this>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSet; applies[java.io.File]; boolean; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; ruleSet>
<net.sourceforge.pmd.RuleContext; getSourceCodeFile[]; java.io.File; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; ctx>
<net.sourceforge.pmd.RuleSet; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSets; apply[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.Language]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSet; end[net.sourceforge.pmd.RuleContext]; void; net.sourceforge.pmd.RuleSets; end[net.sourceforge.pmd.RuleContext]; void; null; ruleSet>
<net.sourceforge.pmd.RuleSets; applies[net.sourceforge.pmd.Language, net.sourceforge.pmd.Language]; boolean; net.sourceforge.pmd.RuleSets; usesDFA[net.sourceforge.pmd.Language]; boolean; null; this>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSets; usesDFA[net.sourceforge.pmd.Language]; boolean; null; ruleSet>
<net.sourceforge.pmd.RuleSet; usesDFA[]; boolean; net.sourceforge.pmd.RuleSets; usesDFA[net.sourceforge.pmd.Language]; boolean; null; ruleSet>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; ruleSets>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.RuleSets; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; i>
<java.util.Iterator; next[]; net.sourceforge.pmd.RuleSet; net.sourceforge.pmd.RuleSets; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; i>
<net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; net.sourceforge.pmd.RuleSets; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; ruleSet>
<net.sourceforge.pmd.RuleSets; applies[net.sourceforge.pmd.Language, net.sourceforge.pmd.Language]; boolean; net.sourceforge.pmd.RuleSets; usesTypeResolution[net.sourceforge.pmd.Language]; boolean; null; this>
<net.sourceforge.pmd.RuleSet; getLanguage[]; net.sourceforge.pmd.Language; net.sourceforge.pmd.RuleSets; usesTypeResolution[net.sourceforge.pmd.Language]; boolean; null; ruleSet>
<net.sourceforge.pmd.RuleSet; usesTypeResolution[]; boolean; net.sourceforge.pmd.RuleSets; usesTypeResolution[net.sourceforge.pmd.Language]; boolean; null; ruleSet>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.Language; net.sourceforge.pmd.Language; getByName[java.lang.String]; net.sourceforge.pmd.Language; null; mapNameOnRuleLanguage>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.Language]; net.sourceforge.pmd.Language; net.sourceforge.pmd.Language; Language[java.lang.String]; void; null; mapNameOnRuleLanguage>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; null; ((Language)obj).getName()>
<net.sourceforge.pmd.Language; getName[]; java.lang.String; net.sourceforge.pmd.Language; equals[java.lang.Object]; boolean; equals[java.lang.Object]; ((Language)obj)>
<java.lang.String; hashCode[]; int; net.sourceforge.pmd.Language; hashCode[]; int; null; name>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.ant.RuleSetWrapper; addText[java.lang.String]; void; null; System>
<java.lang.Runtime; availableProcessors[]; int; net.sourceforge.pmd.ant.RuleSetWrapper; addText[java.lang.String]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; net.sourceforge.pmd.ant.RuleSetWrapper; addText[java.lang.String]; void; availableProcessors[]; Runtime>
<not found; add[]; not found; net.sourceforge.pmd.ant.PMDTask; addFileset[net.sourceforge.pmd.ant.FileSet]; void; null; filesets>
<java.util.List; add[net.sourceforge.pmd.ant.Formatter]; boolean; net.sourceforge.pmd.ant.PMDTask; addFormatter[net.sourceforge.pmd.ant.Formatter]; void; null; formatters>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; createClasspath[]; net.sourceforge.pmd.ant.Path; null; this>
<not found; createPath[]; not found; net.sourceforge.pmd.ant.PMDTask; createClasspath[]; net.sourceforge.pmd.ant.Path; null; classpath>
<not found; setRefid[]; not found; net.sourceforge.pmd.ant.PMDTask; setClasspathRef[net.sourceforge.pmd.ant.Reference]; void; null; createLongClasspath()>
<net.sourceforge.pmd.ant.PMDTask; createLongClasspath[]; net.sourceforge.pmd.ant.Path; net.sourceforge.pmd.ant.PMDTask; setClasspathRef[net.sourceforge.pmd.ant.Reference]; void; setRefid[]; this>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; createAuxClasspath[]; net.sourceforge.pmd.ant.Path; null; this>
<not found; createPath[]; not found; net.sourceforge.pmd.ant.PMDTask; createAuxClasspath[]; net.sourceforge.pmd.ant.Path; null; auxClasspath>
<not found; setRefid[]; not found; net.sourceforge.pmd.ant.PMDTask; setAuxClasspathRef[net.sourceforge.pmd.ant.Reference]; void; null; createLongAuxClasspath()>
<net.sourceforge.pmd.ant.PMDTask; createLongAuxClasspath[]; net.sourceforge.pmd.ant.Path; net.sourceforge.pmd.ant.PMDTask; setAuxClasspathRef[net.sourceforge.pmd.ant.Reference]; void; setRefid[]; this>
<java.lang.String; indexOf[java.lang.String]; int; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; name>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; nameMap>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; this>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; nameMap>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; append[java.lang.String]; void; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; this>
<not found; replaceProperties[]; not found; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; getProject()>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; replaceProperties[]; this>
<net.sourceforge.pmd.SimpleRuleSetNameMapper; getRuleSets[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; new AntTaskNameMapper(ruleSetFiles)>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.Class; getClassLoader[]; java.lang.ClassLoader; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends net.sourceforge.pmd.ant.PMDTask>; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getClassLoader[]; this>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; toString[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; getProject().getBaseDir()>
<not found; getBaseDir[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; toString[]; getProject()>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getBaseDir[]; this>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; toString[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; auxClasspath>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ioe>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String]; net.sourceforge.pmd.RuleSets; null; this>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; formatter>
<not found; toString[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; getProject().getBaseDir()>
<not found; getBaseDir[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; toString[]; getProject()>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getBaseDir[]; this>
<net.sourceforge.pmd.RuleSetFactory; setMinimumPriority[int]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ruleSetFactory>
<net.sourceforge.pmd.RuleSetFactory; createRuleSets[java.lang.String, java.lang.ClassLoader]; net.sourceforge.pmd.RuleSets; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ruleSetFactory>
<net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; targetJDK>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; targetJDK>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; targetJDK>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; targetJDK>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; targetJDK>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; getDirectoryScanner[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; fs>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<not found; getIncludedFiles[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ds>
<not found; getBasedir[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ds>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; System>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; files>
<not found; getPath[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ds.getBasedir()>
<not found; getBasedir[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getPath[]; ds>
<not found; log[]; not found; net.sourceforge.pmd.renderers.AbstractRenderer; startFileAnalysis[net.sourceforge.pmd.DataSource]; void; null; this>
<net.sourceforge.pmd.DataSource; getNiceFileName[boolean, java.lang.String]; java.lang.String; net.sourceforge.pmd.renderers.AbstractRenderer; startFileAnalysis[net.sourceforge.pmd.DataSource]; void; null; dataSource>
<net.sourceforge.pmd.Report; size[]; int; net.sourceforge.pmd.renderers.AbstractRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; r>
<java.util.concurrent.atomic.AtomicInteger; addAndGet[int]; int; net.sourceforge.pmd.renderers.AbstractRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; reportSize>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; renderers>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; renderers>
<net.sourceforge.pmd.ant.Formatter; getRenderer[]; net.sourceforge.pmd.renderers.Renderer; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; formatter>
<net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; PMD>
<java.lang.Throwable; printStackTrace[]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.Throwable; toString[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde.getCause()>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; printStackTrace[java.io.PrintWriter]; pmde>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.io.StringWriter; toString[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; strWriter>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde.getCause()>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getMessage[]; pmde>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde.getCause()>
<java.lang.Throwable; getCause[]; java.lang.Throwable; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; getMessage[]; pmde>
<net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; errorReport>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; pmde>
<net.sourceforge.pmd.RuleContext; getSourceCodeFilename[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; ctx>
<java.util.concurrent.atomic.AtomicInteger; get[]; int; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; reportSize>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; formatter>
<not found; setProperty[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; getProject()>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; setProperty[]; this>
<java.lang.String; valueOf[int]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; String>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; this>
<net.sourceforge.pmd.ant.PMDTask; validate[]; void; net.sourceforge.pmd.ant.PMDTask; execute[]; void; null; this>
<net.sourceforge.pmd.ant.PMDTask; doTask[]; void; net.sourceforge.pmd.ant.PMDTask; execute[]; void; null; this>
<net.sourceforge.pmd.ScopedLogHandlersManager; close[]; void; net.sourceforge.pmd.ant.PMDTask; execute[]; void; null; logManager>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; close[]; this>
<net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; null; rules>
<net.sourceforge.pmd.RuleSet; getRules[]; java.util.Collection<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; null; ruleSet>
<not found; log[]; not found; net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; null; this>
<net.sourceforge.pmd.Rule; getName[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; logRulesUsed[net.sourceforge.pmd.RuleSets]; void; null; rule>
<net.sourceforge.pmd.ant.Formatter; isNoOutputSupplied[]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; f>
<java.util.Collection; isEmpty[]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; nestedRules>
<net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; targetJDK>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.ant.RuleSetWrapper>; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; nestedRules>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; it>
<java.util.Iterator; next[]; net.sourceforge.pmd.ant.RuleSetWrapper; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; it>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; sb>
<net.sourceforge.pmd.ant.RuleSetWrapper; getFile[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; rs>
<java.util.Iterator; hasNext[]; boolean; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; it>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; sb>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; createLongClasspath[]; net.sourceforge.pmd.ant.Path; null; this>
<not found; createPath[]; not found; net.sourceforge.pmd.ant.PMDTask; createLongClasspath[]; net.sourceforge.pmd.ant.Path; null; classpath>
<not found; getProject[]; not found; net.sourceforge.pmd.ant.PMDTask; createLongAuxClasspath[]; net.sourceforge.pmd.ant.Path; null; this>
<not found; createPath[]; not found; net.sourceforge.pmd.ant.PMDTask; createLongAuxClasspath[]; net.sourceforge.pmd.ant.Path; null; auxClasspath>
<java.util.Collection; add[net.sourceforge.pmd.ant.RuleSetWrapper]; boolean; net.sourceforge.pmd.ant.PMDTask; addRuleset[net.sourceforge.pmd.ant.RuleSetWrapper]; void; null; nestedRules>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<net.sourceforge.pmd.ant.Formatter; getToFileWriter[java.lang.String]; java.io.Writer; net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; null; this>
<net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; null; this>
<net.sourceforge.pmd.renderers.Renderer; setWriter[java.io.Writer]; void; net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; null; renderer>
<net.sourceforge.pmd.renderers.Renderer; start[]; void; net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; null; renderer>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.Formatter; start[java.lang.String]; void; null; ioe>
<net.sourceforge.pmd.renderers.Renderer; renderFileReport[net.sourceforge.pmd.Report]; void; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; null; renderer>
<net.sourceforge.pmd.renderers.Renderer; end[]; void; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; renderFileReport[net.sourceforge.pmd.Report]; renderer>
<java.io.Writer; write[java.lang.String]; void; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; flush[]; void; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; null; writer>
<java.io.Writer; close[]; void; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; null; writer>
<java.lang.Throwable; getMessage[]; java.lang.String; net.sourceforge.pmd.ant.Formatter; end[net.sourceforge.pmd.Report]; void; null; ioe>
<java.util.Set; toArray[java.lang.String[]]; java.lang.String[]; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; null; renderersByCode.keySet()>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; toArray[java.lang.String[]]; renderersByCode>
<java.util.Map; size[]; int; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; null; renderersByCode>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb>
<net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb.append("', '")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; null; sb>
<java.lang.Class; newInstance[]; ; net.sourceforge.pmd.ant.Formatter; fromClassname[java.lang.String]; net.sourceforge.pmd.renderers.Renderer; null; Class.forName(rendererClassname)>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; net.sourceforge.pmd.ant.Formatter; fromClassname[java.lang.String]; net.sourceforge.pmd.renderers.Renderer; newInstance[]; Class>
<net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; net.sourceforge.pmd.ant.Formatter; fromClassname[java.lang.String]; net.sourceforge.pmd.renderers.Renderer; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; "">
<net.sourceforge.pmd.ant.Formatter; unknownRendererMessage[java.lang.String]; java.lang.String; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; this>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<net.sourceforge.pmd.ant.Formatter; fromClassname[java.lang.String]; net.sourceforge.pmd.renderers.Renderer; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; this>
<net.sourceforge.pmd.ant.Formatter$RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; builder>
<net.sourceforge.pmd.renderers.Renderer; showSuppressedViolations[boolean]; void; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; renderer>
<java.io.File; isAbsolute[]; boolean; net.sourceforge.pmd.ant.Formatter; getToFileWriter[java.lang.String]; java.io.Writer; null; toFile>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.ant.Formatter; getToFileWriter[java.lang.String]; java.io.Writer; null; System>
<java.io.File; getPath[]; java.lang.String; net.sourceforge.pmd.ant.Formatter; getToFileWriter[java.lang.String]; java.io.Writer; null; toFile>


Calls That Belongs To JCF (1217)

<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleReference; addProperty[java.lang.String, java.lang.String]; void; null; this.properties>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleReference; addProperties[java.util.Properties]; void; null; properties>
<java.util.List; clear[]; void; net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; null; this.examples>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleReference; addExample[java.lang.String]; void; null; this.examples>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.List; get[int]; net.sourceforge.pmd.ast.CompilationUnit; net.sourceforge.pmd.ast.JavaRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; null; nodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JJTJavaParserState; reset[]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; rootNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; add[net.sourceforge.pmd.ast.Node]; boolean; net.sourceforge.pmd.ast.JJTJavaParserState; pushNode[net.sourceforge.pmd.ast.Node]; void; null; nodes>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; marks>
<java.util.List; remove[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; popNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; get[int]; net.sourceforge.pmd.ast.Node; net.sourceforge.pmd.ast.JJTJavaParserState; peekNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; peekNode[]; net.sourceforge.pmd.ast.Node; null; nodes>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; clearNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<java.util.List; add[java.lang.Integer]; boolean; net.sourceforge.pmd.ast.JJTJavaParserState; openNodeScope[net.sourceforge.pmd.ast.Node]; void; null; marks>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, int]; void; null; marks>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; remove[int]; java.lang.Integer; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JJTJavaParserState; closeNodeScope[net.sourceforge.pmd.ast.Node, boolean]; void; null; marks>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; serialRules>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.ast.ASTAnnotation; suppresses[net.sourceforge.pmd.Rule]; boolean; null; unusedRules>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; null; getScope().getVariableDeclarations()>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; getParentsOfType[java.lang.Class<T>]; java.util.List<T>; null; parents>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; results>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.ast.SimpleNode; findChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>, boolean]; void; null; results>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.ast.SimpleNode; containsChildOfType[java.lang.Class<T>]; boolean; null; findChildrenOfType(type)>
<java.util.List; iterator[]; java.util.Iterator<int[]>; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; add[int[]]; boolean; net.sourceforge.pmd.ast.JavaParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; clear[]; void; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; add[int[]]; boolean; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; get[int]; int[]; net.sourceforge.pmd.ast.JavaParser; generateParseException[]; net.sourceforge.pmd.ast.ParseException; null; jj_expentries>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.ast.ASTBlockStatement; isAllocation[]; boolean; null; findChildrenOfType(ASTAllocationExpression.class)>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; excludeMap>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.util.List; add[net.sourceforge.pmd.ast.Comment]; boolean; net.sourceforge.pmd.ast.JavaParserTokenManager; SkipLexicalActions[net.sourceforge.pmd.ast.Token]; void; null; comments>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.RuleViolation; RuleViolation[net.sourceforge.pmd.Rule, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; parentTypes>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; addDataPoint[net.sourceforge.pmd.stat.DataPoint]; void; null; dataPoints>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; newPoints>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints>
<java.util.SortedSet; first[]; net.sourceforge.pmd.stat.DataPoint; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; getScore[]; dataPoints>
<java.util.SortedSet; last[]; net.sourceforge.pmd.stat.DataPoint; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; getScore[]; dataPoints>
<java.util.Set; clear[]; void; net.sourceforge.pmd.stat.StatisticalRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; dataPoints>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; dataPoints>
<java.util.Set; size[]; int; net.sourceforge.pmd.stat.StatisticalRule; getStdDev[]; double; null; dataPoints>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; applyMinimumValue[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, double]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; RC>
<java.util.Set; toArray[net.sourceforge.pmd.stat.DataPoint[]]; net.sourceforge.pmd.stat.DataPoint[]; net.sourceforge.pmd.stat.StatisticalRule; applyTopScore[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, int]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; points>
<java.util.Set; add[net.sourceforge.pmd.stat.DataPoint]; boolean; net.sourceforge.pmd.stat.StatisticalRule; applyTopScore[java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>, int]; java.util.SortedSet<net.sourceforge.pmd.stat.DataPoint>; null; s>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; code>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.cpd.PHPTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; code>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchAlgorithm; matches[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; null; matches>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; tokenAt[int, net.sourceforge.pmd.cpd.TokenEntry]; net.sourceforge.pmd.cpd.TokenEntry; null; code>
<java.util.Collection; iterator[]; java.util.Iterator<java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; markGroups.values()>
<java.util.Map; values[]; java.util.Collection<java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; iterator[]; markGroups>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.cpd.SourceCode; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; source>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.Map; put[net.sourceforge.pmd.cpd.TokenEntry, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.util.Map; put[net.sourceforge.pmd.cpd.TokenEntry, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; markGroups>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; l>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchAlgorithm; hash[]; java.util.Map<net.sourceforge.pmd.cpd.TokenEntry,java.lang.Object>; null; code>
<java.util.Set; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Match; Match[int, net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; markSet>
<java.util.Set; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Match; Match[int, net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry]; void; null; markSet>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.Match; getMarkCount[]; int; null; markSet>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.Match; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; null; markSet>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.Match; toString[]; java.lang.String; null; markSet>
<java.util.Map; put[java.lang.Object, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.GUI.ColumnSpec; sorter[]; java.util.Comparator<net.sourceforge.pmd.cpd.Match>; null; langConfigsByLabel>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; languageConfigFor[java.lang.String]; net.sourceforge.pmd.cpd.GUI.LanguageConfig; null; langConfigsByLabel>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; matches>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.GUI.SaveListener; actionPerformed[java.awt.event.ActionEvent]; void; null; matches>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; selections>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.GUI; populateResultArea[]; void; null; selections>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.GUI; deleteMatchlistSelections[]; void; null; matches>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; next[]; sourceIDs>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.GUI; setLabelFor[net.sourceforge.pmd.cpd.Match]; java.lang.String; null; sourceIDs>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; go[]; void; null; p>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.GUI; go[]; void; null; p>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.GUI; go[]; void; null; matches>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; java.lang.Object; getValueAt[int, int]; java.lang.Object; null; items>
<java.util.List; size[]; int; java.lang.Object; getRowCount[]; int; null; items>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.FortranTokenizer; FortranTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.SourceCode.CodeLoader; load[]; java.util.List<java.lang.String>; null; lines>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; lines>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.cpd.SourceCode; getSlice[int, int]; java.lang.String; null; lines>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; collect[java.util.List<net.sourceforge.pmd.cpd.TokenEntry>]; void; null; marks>
<java.util.Map; values[]; java.util.Collection<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; startMap>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; next[]; match1.getMarkSet()>
<java.util.Set; clear[]; void; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.Set; add[net.sourceforge.pmd.cpd.Match.MatchCode]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2.getMarkSet()>
<java.util.Set; add[net.sourceforge.pmd.cpd.Match.MatchCode]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.Set; addAll[java.util.Collection<? extends net.sourceforge.pmd.cpd.TokenEntry>]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1.getMarkSet()>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchList>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.ArrayList; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.ArrayList; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; a1>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; matchSet>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<java.util.Set; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; pruned>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; fileMap>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.cpd.Match>]; java.util.List<net.sourceforge.pmd.cpd.Match>; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; fileMap>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.List; remove[int]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.Map; remove[java.lang.Object]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; startMap>
<java.util.List; add[net.sourceforge.pmd.cpd.Match]; boolean; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; pairMatches>
<java.util.Map; put[net.sourceforge.pmd.cpd.Match.MatchCode, net.sourceforge.pmd.cpd.Match]; net.sourceforge.pmd.cpd.Match; net.sourceforge.pmd.cpd.MatchCollector; determineMatch[net.sourceforge.pmd.cpd.TokenEntry, net.sourceforge.pmd.cpd.TokenEntry, int]; void; null; startMap>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; properties>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.cpd.JavaTokenizer; setProperties[java.util.Properties]; void; null; properties>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this.code>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; tokenize[net.sourceforge.pmd.cpd.SourceCode, net.sourceforge.pmd.cpd.Tokens]; void; null; this.code>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; this.code>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.cpd.AbstractTokenizer; parseString[java.lang.StringBuffer, int, char]; int; null; this.code>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; ignoreCharacter[char]; boolean; null; this.ignorableCharacter>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; isString[char]; boolean; null; this.stringToken>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.AbstractTokenizer; isIgnorableString[java.lang.String]; boolean; null; this.ignorableStmt>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; null; p>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.cpd.CPDTask; createLanguage[]; net.sourceforge.pmd.cpd.Language; null; p>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.CPD; add[java.util.List<java.io.File>]; void; null; files>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; current>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; current>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.cpd.SourceCode]; net.sourceforge.pmd.cpd.SourceCode; net.sourceforge.pmd.cpd.CPD; add[int, java.io.File]; void; null; source>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.util.Map; size[]; int; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.cpd.TokenEntry; TokenEntry[java.lang.String, java.lang.String, int]; void; null; Tokens>
<java.util.Map; clear[]; void; net.sourceforge.pmd.cpd.TokenEntry; clearImages[]; void; null; Tokens>
<java.util.List; add[net.sourceforge.pmd.cpd.TokenEntry]; boolean; net.sourceforge.pmd.cpd.Tokens; add[net.sourceforge.pmd.cpd.TokenEntry]; void; null; this.tokens>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.Tokens; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; null; tokens>
<java.util.List; get[int]; net.sourceforge.pmd.cpd.TokenEntry; net.sourceforge.pmd.cpd.Tokens; get[int]; net.sourceforge.pmd.cpd.TokenEntry; null; tokens>
<java.util.List; size[]; int; net.sourceforge.pmd.cpd.Tokens; size[]; int; null; tokens>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.stringToken>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableCharacter>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.cpd.RubyTokenizer; RubyTokenizer[]; void; null; this.ignorableStmt>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.Language; net.sourceforge.pmd.SourceTypeToRuleLanguageMapper; getMappedLanguage[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.Language; null; mapSourceTypeOnRuleLanguage>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; closeTargets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; closeTargets>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; types>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; types>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; types>
<java.util.List; add[net.sourceforge.pmd.ast.ASTVariableDeclaratorId]; boolean; net.sourceforge.pmd.rules.CloseResource; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ids>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CloseResource; ensureClosed[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; void; null; closeTargets>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; nullCompareNames>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; expressionUsageNames>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; nullCompareNames>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.rules.basic.BrokenNullCheck; primaryExpressionsAreEqual[net.sourceforge.pmd.ast.ASTPrimaryExpression, net.sourceforge.pmd.ast.ASTPrimaryExpression]; boolean; null; expressionUsageNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.basic.BrokenNullCheck; findExpressionNames[net.sourceforge.pmd.ast.Node, java.util.List<java.lang.String>]; void; null; results>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTArrayDimsAndInits.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; nameNode.getParentsOfType(ASTClassOrInterfaceDeclaration.class)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; this.typesFoundSoFar>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; typesFoundSoFar>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; prefixSet>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.optimization.UnnecessaryWrapperObjectCreation; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; suffixSet>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal; lookForViolation[net.sourceforge.pmd.symboltable.Scope, java.lang.Object]; void; null; decls>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; decls>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Map; put[java.lang.String, java.util.Set<java.lang.String>]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UnusedModifier; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; mapClasses>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; mapClasses.get(nodeType.getTypeImage())>
<java.util.Map; get[java.lang.Object]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; contains[java.lang.Object]; mapClasses>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; mapClasses.keySet()>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; contains[java.lang.Object]; mapClasses>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTMethodDeclaration>; net.sourceforge.pmd.rules.junit.TestClassWithoutTestCases; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; m>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; add[net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage.AssertionCall]; boolean; net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessage; JUnitAssertionsShouldIncludeMessage[]; void; null; checks>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; exceptionList>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strictexception.ExceptionSignatureDeclaration; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; exceptionList>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTType.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; UselessOverridingMethod[]; void; null; exceptions>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; isMethodType[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.String]; boolean; null; results>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; hasArguments[net.sourceforge.pmd.ast.ASTMethodDeclaration]; boolean; null; parameters>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block.findChildrenOfType(ASTStatement.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primaryExpressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(primaryExpression,ASTPrimaryPrefix.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(node,ASTMethodDeclarator.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primarySuffixList>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimarySuffix; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; primarySuffixList>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(formalParameter,ASTVariableDeclaratorId.class)>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; results>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.rules.UselessOverridingMethod; lclFindChildrenOfType[net.sourceforge.pmd.ast.Node, java.lang.Class<T>, java.util.List<T>]; void; null; results>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration, java.lang.Object]; java.lang.Object; null; found>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; catches>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; found>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; found>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.migration.JUnitUseExpected; getCatch[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.ASTCatchStatement; null; implClassNames>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.migration.UnnecessaryCast; process[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; java.lang.Object; null; implClassNames>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodScope]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodScope]; boolean; net.sourceforge.pmd.rules.AvoidCallingFinalize; visit[net.sourceforge.pmd.ast.ASTPrimaryPrefix, java.lang.Object]; java.lang.Object; null; checked>
<java.util.Stack; push[java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; stack>
<java.util.Stack; pop[]; java.lang.Integer; net.sourceforge.pmd.rules.MoreThanOneLogger; init[net.sourceforge.pmd.ast.SimpleJavaNode, java.lang.Object]; java.lang.Object; null; stack>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; list>
<java.util.List; add[java.util.regex.Pattern]; boolean; net.sourceforge.pmd.rules.regex.RegexHelper; compilePatternsFromList[java.util.List<java.lang.String>]; java.util.List<java.util.regex.Pattern>; null; patterns>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.AvoidReassigningParameters; lookForViolation[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>, java.lang.Object]; void; null; params>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.UnusedPrivateFieldRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTForStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTDoStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTSwitchStatement, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTWhileStatement, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConditionalExpression, java.lang.Object]; java.lang.Object; bumpDecisionPoints[int]; entryStack>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTEnumDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; push[net.sourceforge.pmd.rules.CyclomaticComplexity.Entry]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; pop[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Stack; peek[]; net.sourceforge.pmd.rules.CyclomaticComplexity.Entry; net.sourceforge.pmd.rules.CyclomaticComplexity; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; entryStack>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; occs>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; methods>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; sigs>
<java.util.Set; add[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; unique>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.UnusedPrivateMethodRule; findUnique[java.util.Map<net.sourceforge.pmd.symboltable.MethodNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; null; sigs>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; packagesAndClasses>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; getMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; varNames>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; l>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTArguments; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation; ConstructorInvocation[net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation]; void; null; l>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; initCI[]; void; null; expressions>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder; initCI[]; void; null; expressions>
<java.util.List; get[int]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; null; evalPackages>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; getCurrentEvalPackage[]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; null; evalPackages>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; putEvalPackage[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage]; void; null; evalPackages>
<java.util.List; remove[int]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.EvalPackage; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; null; evalPackages>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; removeCurrentEvalPackage[]; void; null; evalPackages>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; clearEvalPackages[]; void; null; evalPackages>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classMethodMap>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; calledMeths>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfMethods[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classMethodMap>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; classConstructorMap>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors1[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>, java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>]; void; null; calledMeths>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classConstructorMap>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classConstructorMap.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; iterator[]; classConstructorMap>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledMethods>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledConstructors>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; addCalledMethodsOfNodeImpl[java.util.List<net.sourceforge.pmd.ast.ASTPrimaryExpression>, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>, java.lang.String]; void; null; calledMethods>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; meth.getReferenceNames()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; packClass>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Set; add[java.lang.Class]; boolean; net.sourceforge.pmd.rules.ExcessiveImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; blockParents>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; decls>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; childNode.findChildrenOfType(ASTName.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; lstAdditive>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; expr.getParentsOfType(ASTArgumentList.class)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; blockParents>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; result>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule.ExceptionParser; parse[java.lang.String]; java.util.Set<java.lang.String>; null; result>
<java.util.Map; clear[]; void; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; exceptions>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; getBeginLine[]; occurrences>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; exceptions>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; add[net.sourceforge.pmd.ast.ASTLiteral]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.List; add[net.sourceforge.pmd.ast.ASTLiteral]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; occurrences>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.ast.ASTLiteral>]; java.util.List<net.sourceforge.pmd.ast.ASTLiteral>; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; visit[net.sourceforge.pmd.ast.ASTLiteral, java.lang.Object]; java.lang.Object; null; literals>
<java.util.Set; add[java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; blockParents>
<java.util.Set; add[java.lang.Class<? extends net.sourceforge.pmd.ast.SimpleNode>]; boolean; net.sourceforge.pmd.rules.strings.AvoidDuplicateLiteralsRule; propertiesByName[]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; blockParents>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; usage>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; usage>
<java.util.Map; get[java.lang.Object]; java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; blocks>
<java.util.Map; put[net.sourceforge.pmd.ast.Node, java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>]; java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; blocks>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; thisBranch>
<java.util.Map; put[net.sourceforge.pmd.ast.Node, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; storeBlockStatistics[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>, int, net.sourceforge.pmd.ast.Node]; void; null; thisBranch>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; blocks>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.ast.Node,java.lang.Integer>>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; entry.getValue()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; literal>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; name>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; null; literal>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getConstructorLength[net.sourceforge.pmd.ast.SimpleNode, int]; int; getImage[]; literal>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; null; literal>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTLiteral; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getInitialLength[net.sourceforge.pmd.ast.SimpleNode]; int; getImage[]; literal>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n.findChildrenOfType(ASTAdditiveExpression.class)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; getFirstParentBlock[net.sourceforge.pmd.ast.Node]; net.sourceforge.pmd.ast.Node; null; blockParents>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.StringInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; exp>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; alreadySeen>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; alreadySeen>
<java.util.Set; add[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; visit[net.sourceforge.pmd.ast.ASTName, java.lang.Object]; java.lang.Object; null; alreadySeen>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; literals>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.strings.UseStringBufferLength; isViolation[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; boolean; getImage[]; literals>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTName>; net.sourceforge.pmd.rules.strings.InefficientStringBuffering; visit[net.sourceforge.pmd.ast.ASTAdditiveExpression, java.lang.Object]; java.lang.Object; null; nameNodes>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UnnecessaryConversionTemporary; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; primitiveWrappers>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; vars>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; violations>
<java.util.List; get[int]; net.sourceforge.pmd.ast.SimpleNode; net.sourceforge.pmd.rules.design.PreserveStackTrace; visit[net.sourceforge.pmd.ast.ASTVariableDeclarator, java.lang.Object]; java.lang.Object; null; violations>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; useInitCause[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.ASTCatchStatement]; boolean; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.PreserveStackTrace; isThrownExceptionOfType[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.String]; boolean; null; results>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.design.PreserveStackTrace; ck[java.lang.Object, java.lang.String, net.sourceforge.pmd.ast.ASTThrowStatement, net.sourceforge.pmd.ast.ASTArgumentList]; void; null; nameNodes>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; stats>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; stats>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.TooManyFields; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; nodes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; nodes>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.rules.design.TooManyFields; bumpCounterFor[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; void; null; stats>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; getLocation[]; usages>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.SingularField; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; usages>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; null; assignments>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTAssignmentOperator; net.sourceforge.pmd.rules.design.SingularField; isInAssignment[net.sourceforge.pmd.ast.Node]; boolean; getImage[]; assignments>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleJavaNode]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.Object]; java.lang.Object; null; statementChildren>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; andNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NpathComplexity; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; orNodes>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.PositionalIteratorRule; collectNames[java.lang.String, java.util.List<java.lang.String>, net.sourceforge.pmd.ast.SimpleNode]; void; null; names>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.AssignmentToNonFinalStatic; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; fp.findChildrenOfType(ASTType.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; returnNodes>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTReturnStatement>; net.sourceforge.pmd.rules.design.OnlyOneReturnRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; returnNodes>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; node.getParentsOfType(ASTInitializer.class)>
<java.util.Map; clear[]; void; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; fieldDecls>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ast.ASTFieldDeclaration]; net.sourceforge.pmd.ast.ASTFieldDeclaration; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; assigmnents>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; assigmnents>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.NonThreadSafeSingleton; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; fieldDecls>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.ImmutableField; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; field.getAccessNodeParent().findChildrenOfType(ASTVariableInitializer.class)>
<java.util.Set; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; consSet>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; usages>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; consSet>
<java.util.Set; removeAll[java.util.Collection<?>]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; allConstructors>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedInConstructor[java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>, java.util.Set<net.sourceforge.pmd.ast.ASTConstructorDeclaration>]; int; null; allConstructors>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; findAllConstructors[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration]; java.util.List<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; targets>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.design.UnsynchronizedStaticDateFormatter; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; targets>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; arrayAsList[java.lang.String[]]; java.util.List<java.lang.String>; null; list>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; simpleClassname>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.rules.design.GenericClassCounterRule; addAMatch[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; this.matches>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.GenericClassCounterRule; searchForAMatch[java.lang.String, net.sourceforge.pmd.ast.SimpleNode]; boolean; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTPrimaryExpression.class)>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; vars>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.rules.UnusedFormalParameterRule; check[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; vars>
<java.util.List; get[int]; ; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getDataFlowNode().getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.rules.UselessAssignment.Usage; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.rules.UselessAssignment.Usage]; net.sourceforge.pmd.rules.UselessAssignment.Usage; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.rules.XPathRule; evaluate[net.sourceforge.pmd.ast.Node, net.sourceforge.pmd.RuleContext]; void; null; results>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.XPathRule; initializeXPathExpression[]; void; null; steps>
<java.util.Hashtable; size[]; int; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; getProperties()>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.rules.XPathRule; createXPath[java.lang.String]; net.sourceforge.pmd.rules.BaseXPath; null; getProperties()>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.rules.XPathRule; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; imports>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visitComments[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; imports>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; imports>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.UnusedImportsRule; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DontImportJavaLang; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; skipPackages>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<java.util.Set; clear[]; void; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; importOnDemandImports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.rules.imports.DuplicateImportsRule; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; singleTypeImports>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTCompilationUnit, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; add[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addInstantiation[net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData]; void; null; m_Instantiations>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData>; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; getInstantiationIterator[]; java.util.Iterator<net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData>; null; m_Instantiations>
<java.util.List; add[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addConstructor[net.sourceforge.pmd.ast.ASTConstructorDeclaration]; void; null; m_PrivateConstructors>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; getPrivateConstructorIterator[]; java.util.Iterator<net.sourceforge.pmd.ast.ASTConstructorDeclaration>; null; m_PrivateConstructors>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; addClassQualifyingName[java.lang.String]; void; null; m_ClassQualifyingNames>
<java.util.List; listIterator[int]; java.util.ListIterator<java.lang.String>; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; classQualifyingNames>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration.AllocData; AllocData[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.String, java.util.List<java.lang.String>]; void; null; classQualifyingNames>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; add[int, net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData]; void; net.sourceforge.pmd.rules.AccessorClassGeneration; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; classDataList>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; null; classDataList>
<java.util.List; get[int]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; net.sourceforge.pmd.rules.AccessorClassGeneration; getCurrentClassData[]; net.sourceforge.pmd.rules.AccessorClassGeneration.ClassData; null; classDataList>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; null; simpleNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; null; simpleNodes>
<java.util.List; get[int]; ; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; imagesOf[java.util.List<? extends net.sourceforge.pmd.ast.SimpleNode>]; java.lang.String[]; getImage[]; simpleNodes>
<java.util.Map; size[]; int; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; methods>
<java.util.List; add[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getSetMethList>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars.get(decl)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; isEmpty[]; vars>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; null; primitives>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; isBeanAccessor[net.sourceforge.pmd.ast.ASTMethodDeclarator]; boolean; isBoolean[]; primitives>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTVariableDeclaratorId.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; additives>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.rules.AbstractPoorMethodCall; visit[net.sourceforge.pmd.ast.ASTVariableDeclaratorId, java.lang.Object]; java.lang.Object; null; literals>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; rsl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTReturnStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; rsl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; pel>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ssl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTSynchronizedStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ssl>
<java.util.List; clear[]; void; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTIfStatement; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; isl>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; sel>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTStatementExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; sel>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryExpression; net.sourceforge.pmd.rules.DoubleCheckedLocking; ifVerify[net.sourceforge.pmd.ast.ASTIfStatement, java.lang.String]; boolean; null; finder>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTAllocationExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; e.findChildrenOfType(ASTEqualityExpression.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l>
<java.util.List; add[net.sourceforge.pmd.ast.ASTFormalParameter]; boolean; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<java.util.List; toArray[net.sourceforge.pmd.ast.ASTFormalParameter[]]; net.sourceforge.pmd.ast.ASTFormalParameter[]; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; getArrays[net.sourceforge.pmd.ast.ASTFormalParameters]; net.sourceforge.pmd.ast.ASTFormalParameter[]; null; l2>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; jj_add_error_token[int, int]; void; null; jj_expentries>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JspParser; generateParseException[]; net.sourceforge.pmd.jsp.ast.ParseException; null; jj_expentries>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; null; nodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.jsp.ast.JJTJspParserState; reset[]; void; null; marks>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; rootNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JJTJspParserState; pushNode[net.sourceforge.pmd.jsp.ast.Node]; void; null; nodes>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; marks>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; popNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; peekNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; peekNode[]; net.sourceforge.pmd.jsp.ast.Node; null; nodes>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; clearNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; marks>
<java.util.List; add[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.ast.JJTJspParserState; openNodeScope[net.sourceforge.pmd.jsp.ast.Node]; void; null; marks>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, int]; void; null; marks>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; marks>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; intValue[]; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JJTJspParserState; closeNodeScope[net.sourceforge.pmd.jsp.ast.Node, boolean]; void; null; marks>
<java.util.List; size[]; int; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.List; get[int]; net.sourceforge.pmd.ast.CompilationUnit; net.sourceforge.pmd.jsp.ast.JspRuleChainVisitor; indexNodes[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; astCompilationUnits>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.jsp.rules.AbstractJspRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; acus>
<java.util.Set; clear[]; void; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; apply[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; imports>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.jsp.rules.DuplicateJspImports; visit[net.sourceforge.pmd.jsp.ast.ASTJspDirectiveAttribute, java.lang.Object]; java.lang.Object; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleElement[net.sourceforge.pmd.jsp.ast.ASTElement]; boolean; null; STYLE_ELEMENT_NAMES>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; STYLE_ATTRIBUTES>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jsp.rules.NoInlineStyleInformation; isStyleAttribute[net.sourceforge.pmd.jsp.ast.ASTAttribute]; boolean; null; ELEMENT_NAMES_THAT_CAN_HAVE_STYLE_ATTRIBUTES>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetReference; addExclude[java.lang.String]; void; null; this.excludes>
<java.util.Set; add[net.sourceforge.pmd.util.Benchmark.Result]; boolean; net.sourceforge.pmd.util.Benchmark; stress[net.sourceforge.pmd.SourceType, net.sourceforge.pmd.RuleSet, java.util.List<java.io.File>, java.util.Set<net.sourceforge.pmd.util.Benchmark.Result>, boolean]; void; null; results>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.util.Benchmark.BenchmarkResult; net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; null; nameToBenchmarkResult>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; net.sourceforge.pmd.util.Benchmark.BenchmarkResult; net.sourceforge.pmd.util.Benchmark; mark[int, java.lang.String, long, long]; void; null; nameToBenchmarkResult>
<java.util.Map; clear[]; void; net.sourceforge.pmd.util.Benchmark; reset[]; void; null; nameToBenchmarkResult>
<java.util.Map; values[]; java.util.Collection<net.sourceforge.pmd.util.Benchmark.BenchmarkResult>; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; nameToBenchmarkResult>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; add[net.sourceforge.pmd.util.Benchmark.BenchmarkResult]; boolean; net.sourceforge.pmd.util.Benchmark; report[]; java.lang.String; null; results>
<java.util.List; toArray[java.net.URL[]]; java.net.URL[]; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; urls>
<java.util.List; size[]; int; net.sourceforge.pmd.util.ClasspathClassLoader; initURLs[java.lang.String]; java.net.URL[]; null; urls>
<java.util.List; add[java.net.URL]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; addClasspathURLs[java.util.List<java.net.URL>, java.lang.String]; void; null; urls>
<java.util.List; add[java.net.URL]; boolean; net.sourceforge.pmd.util.ClasspathClassLoader; addFileURLs[java.util.List<java.net.URL>, java.net.URL]; void; null; urls>
<java.util.Set; add[T]; boolean; net.sourceforge.pmd.util.CollectionUtil; asSet[T[]]; java.util.Set<T>; null; set>
<java.util.Map; put[K, V]; V; net.sourceforge.pmd.util.CollectionUtil; mapFrom[K[], V[]]; java.util.Map<K,V>; null; map>
<java.util.Map; size[]; int; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; source>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<K,V>>; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; source>
<java.util.Map; put[V, K]; K; net.sourceforge.pmd.util.CollectionUtil; invertedMapFrom[java.util.Map<K,V>]; java.util.Map<V,K>; null; map>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.DFAListener; actionPerformed[java.awt.event.ActionEvent]; void; null; methods>
<java.util.List; add[net.sourceforge.pmd.symboltable.Scope]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<java.util.List; get[int]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scopes>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; kids>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; getIndex[]; kids>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; node.getChildren()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; getIndex[]; kids>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; flow>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; flow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; getVariableAccess[]; flow>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; deriveAccessLabels[java.util.List]; java.lang.String[]; null; access>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; flow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; flow>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTMethodDeclaration; net.sourceforge.pmd.util.designer.DFAPanel; resetTo[java.util.List<net.sourceforge.pmd.ast.ASTMethodDeclaration>, net.sourceforge.pmd.util.LineGetter]; void; null; newNodes>
<java.util.List; add[java.io.File]; boolean; net.sourceforge.pmd.util.FileFinder; scanDirectory[java.io.File, java.util.List<java.io.File>, boolean]; void; null; list>
<java.util.LinkedList; addFirst[net.sourceforge.pmd.ast.Node]; void; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<java.util.LinkedList; toArray[]; java.lang.Object[]; net.sourceforge.pmd.util.viewer.gui.ASTPanel; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; list>
<java.util.List; get[int]; javax.swing.tree.TreeNode; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildAt[int]; javax.swing.tree.TreeNode; null; children>
<java.util.List; size[]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getChildCount[]; int; null; children>
<java.util.List; indexOf[java.lang.Object]; int; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; getIndex[javax.swing.tree.TreeNode]; int; null; children>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; isLeaf[]; boolean; null; children>
<java.util.List; add[javax.swing.tree.TreeNode]; boolean; net.sourceforge.pmd.util.viewer.model.SimpleNodeTreeNodeAdapter; checkChildren[]; void; null; children>
<java.util.List; add[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; boolean; net.sourceforge.pmd.util.viewer.model.ViewerModel; addViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; null; listeners>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.model.ViewerModel; removeViewerModelListener[net.sourceforge.pmd.util.viewer.model.ViewerModelListener]; void; null; listeners>
<java.util.List; size[]; int; net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; null; listeners>
<java.util.List; get[int]; net.sourceforge.pmd.util.viewer.model.ViewerModelListener; net.sourceforge.pmd.util.viewer.model.ViewerModel; fireViewerModelEvent[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; void; viewerModelChanged[net.sourceforge.pmd.util.viewer.model.ViewerModelEvent]; listeners>
<java.util.List; add[javax.swing.event.TreeModelListener]; boolean; net.sourceforge.pmd.util.viewer.model.ASTModel; addTreeModelListener[javax.swing.event.TreeModelListener]; void; null; listeners>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.util.viewer.model.ASTModel; removeTreeModelListener[javax.swing.event.TreeModelListener]; void; null; listeners>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.List; toArray[java.lang.String[]]; java.lang.String[]; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.util.StringUtil; substringsOf[java.lang.String, java.lang.String]; java.lang.String[]; null; list>
<java.util.List; add[T]; boolean; net.sourceforge.pmd.util.filter.Filters; filter[net.sourceforge.pmd.util.filter.Filter<T>, java.util.Collection<T>]; java.util.List<T>; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.util.filter.Filters; buildRegexFilterExcludeOverInclude[java.util.List<java.lang.String>, java.util.List<java.lang.String>]; net.sourceforge.pmd.util.filter.Filter<java.lang.String>; null; includeRegexes>
<java.util.List; add[net.sourceforge.pmd.util.filter.Filter<T>]; boolean; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; AbstractCompoundFilter[net.sourceforge.pmd.util.filter.Filter<T>[]]; void; null; this.filters>
<java.util.List; add[net.sourceforge.pmd.util.filter.Filter<T>]; boolean; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; addFilter[net.sourceforge.pmd.util.filter.Filter<T>]; void; null; filters>
<java.util.List; size[]; int; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; filters>
<java.util.List; get[int]; net.sourceforge.pmd.util.filter.Filter<T>; net.sourceforge.pmd.util.filter.AbstractCompoundFilter; toString[]; java.lang.String; null; filters>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; typesByName>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; add[java.lang.Class]; void; null; typesByName>
<java.util.Map; containsValue[java.lang.Object]; boolean; net.sourceforge.pmd.util.TypeMap; contains[java.lang.Class]; boolean; null; typesByName>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.util.TypeMap; contains[java.lang.String]; boolean; null; typesByName>
<java.util.Map; get[java.lang.Object]; java.lang.Class; net.sourceforge.pmd.util.TypeMap; typeFor[java.lang.String]; java.lang.Class; null; typesByName>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; implementors>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays.asList(clazz.getInterfaces())>
<java.util.List; size[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTBlock.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTBlockStatement; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; blocks>
<java.util.Set; add[net.sourceforge.pmd.rules.ImportWrapper]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; visit[net.sourceforge.pmd.ast.ASTImportDeclaration, java.lang.Object]; java.lang.Object; null; imports>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.Set; remove[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.imports.UnusedImports; check[net.sourceforge.pmd.ast.SimpleNode]; void; null; imports>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.rules.SignatureDeclareThrowsException; checkExceptions[net.sourceforge.pmd.ast.SimpleNode, java.lang.Object]; void; null; exceptionList>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; parseClassName[java.lang.String]; java.lang.String; null; packages>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; innerClasses>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; innerClasses>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.visitors.PMDASMVisitor; visitInnerClass[java.lang.String, java.lang.String, java.lang.String, int]; void; null; packages>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; dontBother>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; inner>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.PMDASMClassLoader; getImportedClasses[java.lang.String]; java.util.Map<java.lang.String,java.lang.String>; null; dontBother>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; implementors>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class<?>]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; thePrimitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.TypeHelper; subclasses[net.sourceforge.pmd.ast.TypeNode, java.lang.Class]; boolean; null; theJavaLang>
<java.util.Map; get[java.lang.Object]; java.lang.Class<?>; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; myPrimitiveTypes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.util.Map; containsValue[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateType[net.sourceforge.pmd.ast.TypeNode, java.lang.String]; void; null; importedClasses>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; getClassName[net.sourceforge.pmd.ast.ASTCompilationUnit]; java.lang.String; null; importedOnDemand>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedOnDemand>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<java.util.Map; putAll[java.util.Map<? extends java.lang.String,? extends java.lang.String>]; void; net.sourceforge.pmd.typeresolution.ClassTypeResolver; populateImports[net.sourceforge.pmd.ast.ASTCompilationUnit]; void; null; importedClasses>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; initialize[]; void; null; mapExtensionOnSourceType>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfFile[java.lang.String]; net.sourceforge.pmd.SourceType; null; mapExtensionOnSourceType>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; setSourceTypeOfJavaFiles[net.sourceforge.pmd.SourceType]; void; null; mapExtensionOnSourceType>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.SourceType; net.sourceforge.pmd.SourceTypeDiscoverer; getSourceTypeOfJavaFiles[]; net.sourceforge.pmd.SourceType; null; mapExtensionOnSourceType>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getCountSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; get[java.lang.Object]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.Map; put[java.lang.String, java.lang.Integer]; java.lang.Integer; net.sourceforge.pmd.Report; getSummary[]; java.util.Map<java.lang.String,java.lang.Integer>; null; summary>
<java.util.List; add[net.sourceforge.pmd.ReportListener]; boolean; net.sourceforge.pmd.Report; addListener[net.sourceforge.pmd.ReportListener]; void; null; listeners>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; linesToExclude>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; suppressedRuleViolations>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; linesToExclude>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; suppressedRuleViolations>
<java.util.Set; add[net.sourceforge.pmd.IRuleViolation]; boolean; net.sourceforge.pmd.Report; addRuleViolation[net.sourceforge.pmd.IRuleViolation]; void; null; violations>
<java.util.Set; add[net.sourceforge.pmd.stat.Metric]; boolean; net.sourceforge.pmd.Report; addMetric[net.sourceforge.pmd.stat.Metric]; void; null; metrics>
<java.util.List; add[net.sourceforge.pmd.Report.ProcessingError]; boolean; net.sourceforge.pmd.Report; addError[net.sourceforge.pmd.Report.ProcessingError]; void; null; errors>
<java.util.Set; add[net.sourceforge.pmd.IRuleViolation]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; violations>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Report.SuppressedViolation>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; r.getSuppressedRuleViolations()>
<java.util.List; add[net.sourceforge.pmd.Report.SuppressedViolation]; boolean; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; suppressedRuleViolations>
<java.util.Set; isEmpty[]; boolean; net.sourceforge.pmd.Report; hasMetrics[]; boolean; null; metrics>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.stat.Metric>; net.sourceforge.pmd.Report; metrics[]; java.util.Iterator<net.sourceforge.pmd.stat.Metric>; null; metrics>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; isEmpty[]; boolean; hasNext[]; violations>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.Report; isEmpty[]; boolean; null; errors>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; net.sourceforge.pmd.Report; iterator[]; java.util.Iterator<net.sourceforge.pmd.IRuleViolation>; null; violations>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; net.sourceforge.pmd.Report; errors[]; java.util.Iterator<net.sourceforge.pmd.Report.ProcessingError>; null; errors>
<java.util.Set; size[]; int; net.sourceforge.pmd.Report; size[]; int; null; violations>
<java.util.List; add[net.sourceforge.pmd.ast.CompilationUnit]; boolean; net.sourceforge.pmd.PMD; processFile[java.io.Reader, net.sourceforge.pmd.RuleSets, net.sourceforge.pmd.RuleContext, net.sourceforge.pmd.SourceType]; void; null; acus>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.PMD; doPMD[net.sourceforge.pmd.CommandLineOptions]; void; null; renderers>
<java.util.List; add[net.sourceforge.pmd.PMD.PmdThread]; boolean; net.sourceforge.pmd.PMD.PmdThreadFactory; newThread[java.lang.Runnable]; java.lang.Thread; null; threadList>
<java.util.List; add[java.util.concurrent.Future<net.sourceforge.pmd.Report>]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.List; remove[int]; java.util.concurrent.Future<net.sourceforge.pmd.Report>; net.sourceforge.pmd.PMD; processFiles[int, net.sourceforge.pmd.RuleSetFactory, net.sourceforge.pmd.SourceType, java.util.List<net.sourceforge.pmd.DataSource>, net.sourceforge.pmd.RuleContext, java.util.List<net.sourceforge.pmd.renderers.Renderer>, boolean, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader]; void; null; tasks>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.DataSource>]; boolean; net.sourceforge.pmd.PMD; collectFromCommaDelimitedString[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; files>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.PMD; collect[java.lang.String, net.sourceforge.pmd.SourceFileSelector]; java.util.List<net.sourceforge.pmd.DataSource>; null; dataSources>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; size[]; int; net.sourceforge.pmd.CommonAbstractRule; getExample[]; java.lang.String; null; examples>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.CommonAbstractRule; addExample[java.lang.String]; void; null; examples>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; addProperty[java.lang.String, java.lang.String]; void; null; getProperties()>
<java.util.Hashtable; putAll[java.util.Map<? extends java.lang.Object,? extends java.lang.Object>]; void; net.sourceforge.pmd.CommonAbstractRule; addProperties[java.util.Properties]; void; null; getProperties()>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; null; getProperties()>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; hasProperty[java.lang.String]; boolean; null; propertiesByName()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getBooleanProperty[java.lang.String]; boolean; null; getProperties()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getIntProperty[java.lang.String]; int; null; getProperties()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getDoubleProperty[java.lang.String]; double; null; getProperties()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getStringProperty[java.lang.String]; java.lang.String; null; getProperties()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperty[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object; null; getProperties()>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; setProperty[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object]; void; null; getProperties()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.CommonAbstractRule; getProperties[net.sourceforge.pmd.PropertyDescriptor]; java.lang.Object[]; null; getProperties()>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.CommonAbstractRule; setProperties[net.sourceforge.pmd.PropertyDescriptor, java.lang.Object[]]; void; null; getProperties()>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.PropertyDescriptor; net.sourceforge.pmd.CommonAbstractRule; propertyDescriptorFor[java.lang.String]; net.sourceforge.pmd.PropertyDescriptor; null; propertiesByName()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.CommonAbstractRule; usesRuleChain[]; boolean; null; getRuleChainVisits()>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; addRuleChainVisit[java.lang.String]; void; null; ruleChainVisits>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.CommonAbstractRule; addRuleChainVisit[java.lang.String]; void; null; ruleChainVisits>
<java.util.Hashtable; equals[java.lang.Object]; boolean; net.sourceforge.pmd.CommonAbstractRule; equals[java.lang.Object]; boolean; null; this.getProperties()>
<java.util.Hashtable; hashCode[]; int; net.sourceforge.pmd.CommonAbstractRule; hashCode[]; int; null; this.getProperties()>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.PropertyDescriptor]; net.sourceforge.pmd.PropertyDescriptor; net.sourceforge.pmd.CommonAbstractRule; asFixedMap[net.sourceforge.pmd.PropertyDescriptor[]]; java.util.Map<java.lang.String,net.sourceforge.pmd.PropertyDescriptor>; null; descriptorsByName>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleContext; setAttribute[java.lang.String, java.lang.Object]; boolean; null; this.attributes>
<java.util.Map; put[java.lang.String, java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; setAttribute[java.lang.String, java.lang.Object]; boolean; null; this.attributes>
<java.util.Map; get[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; getAttribute[java.lang.String]; java.lang.Object; null; this.attributes>
<java.util.Map; remove[java.lang.Object]; java.lang.Object; net.sourceforge.pmd.RuleContext; removeAttribute[java.lang.String]; java.lang.Object; null; this.attributes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; nameMap>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; check[java.lang.String]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.Map; put[java.lang.String, java.lang.String]; java.lang.String; net.sourceforge.pmd.SimpleRuleSetNameMapper; populateNameMap[]; void; null; nameMap>
<java.util.List; iterator[]; java.util.Iterator; net.sourceforge.pmd.AbstractJavaRule; visitAll[java.util.List, net.sourceforge.pmd.RuleContext]; void; null; acus>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.util.List; add[net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper]; boolean; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.Map; put[java.lang.Class, net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.util.List; toArray[net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.List; size[]; int; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; postFilter>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.jaxen.AttributeAxisIterator.MethodWrapper[]; net.sourceforge.pmd.jaxen.AttributeAxisIterator; AttributeAxisIterator[net.sourceforge.pmd.ast.Node]; void; null; methodCache>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attributes>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; size[]; int; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.jaxen.TypeOfFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; implementors>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; attributes>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; args>
<java.util.ArrayList; iterator[]; java.util.Iterator; net.sourceforge.pmd.jaxen.MatchesFunction; call[net.sourceforge.pmd.jaxen.Context, java.util.List]; java.lang.Object; null; new ArrayList()>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.properties.EnumeratedProperty; errorFor[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.util.Map; get[java.lang.Object]; E; net.sourceforge.pmd.properties.EnumeratedProperty; choiceFrom[java.lang.String]; E; null; choicesByLabel>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.properties.EnumeratedProperty; asDelimitedString[java.lang.Object]; java.lang.String; null; labelsByChoice>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandlerBroker; getVisitorsFactoryForSourceType[net.sourceforge.pmd.SourceType]; net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler; null; mapSourceTypeOnSourceTypeHandler>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetFileNames>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSetWriter; createRuleElement[net.sourceforge.pmd.Rule]; org.w3c.dom.Element; null; ruleSetFileNames>
<java.util.Hashtable; isEmpty[]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; properties>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleSetWriter; createPropertiesElement[java.util.Properties]; org.w3c.dom.Element; null; properties>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetWriter; createPropertyElement[java.util.Properties, java.lang.String, java.lang.String]; org.w3c.dom.Element; null; properties>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.DataFlowNode]; void; net.sourceforge.pmd.dfa.DataFlowNode; DataFlowNode[net.sourceforge.pmd.ast.SimpleNode, java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>]; void; null; this.dataFlow>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this.children>
<java.util.List; add[net.sourceforge.pmd.dfa.DataFlowNode]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; this.children>
<java.util.List; add[net.sourceforge.pmd.dfa.DataFlowNode]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; addPathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; thisChild.parents>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; thisChild.parents>
<java.util.List; remove[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; removePathToChild[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; null; this.children>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parents>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.DataFlowNode; reverseParentPathsTo[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; parents>
<java.util.LinkedList; indexOf[java.lang.Object]; int; net.sourceforge.pmd.dfa.DataFlowNode; getIndex[]; int; null; this.dataFlow>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; null; this.variableAccess>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; setVariableAccess[java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>]; void; null; this.variableAccess>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; put[java.lang.Integer, java.lang.String]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.dfa.DataFlowNode; stringFromType[int]; java.lang.String; null; typeMap>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; declarations>
<java.util.List; add[net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; markUsages[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.List<net.sourceforge.pmd.dfa.variableaccess.VariableAccess>; null; undefinitions>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; inode.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; inode.getFlow()>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; decls>
<java.util.Set; add[java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; decls>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; flow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; flow>
<java.util.List; add[net.sourceforge.pmd.dfa.variableaccess.VariableAccess]; boolean; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; addVariableAccess[net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.dfa.variableaccess.VariableAccess, java.util.List]; void; null; v>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.DataFlowNode]; void; net.sourceforge.pmd.dfa.StartOrEndDataFlowNode; StartOrEndDataFlowNode[java.util.LinkedList<net.sourceforge.pmd.dfa.DataFlowNode>, int, boolean]; void; null; this.dataFlow>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; braceStack>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; braceStack>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getChildren()>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; remove[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; continueBreakReturnStack>
<java.util.List; indexOf[java.lang.Object]; int; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getChildren()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; bList>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getFlow()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doSt.getFlow()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt.getChildren()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; sEnd.getChildren()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; node.getChildren()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wEnd.getFlow()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd.getFlow()>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; getDataFlowNode[]; this.braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifEnd.getFlow()>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getFirstChild[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.parentNode.childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getNextSibling[]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.parentNode.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; null; this.childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildIndex[net.sourceforge.pmd.dfa.report.AbstractReportNode]; int; equals[java.lang.Object]; this.childNodes>
<java.util.List; add[int, net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; net.sourceforge.pmd.dfa.report.AbstractReportNode; addFirst[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.childNodes>
<java.util.List; add[net.sourceforge.pmd.dfa.report.AbstractReportNode]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; add[net.sourceforge.pmd.dfa.report.AbstractReportNode]; void; null; this.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; childrenAccept[net.sourceforge.pmd.dfa.report.ReportVisitor]; void; null; childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildAt[int]; net.sourceforge.pmd.dfa.report.AbstractReportNode; null; this.childNodes>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.report.AbstractReportNode; getChildCount[]; int; null; this.childNodes>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dfa.report.AbstractReportNode; isLeaf[]; boolean; null; this.childNodes>
<java.util.List; add[net.sourceforge.pmd.dfa.SequenceChecker.Status]; boolean; net.sourceforge.pmd.dfa.SequenceChecker.Status; addStep[net.sourceforge.pmd.dfa.SequenceChecker.Status]; void; null; nextSteps>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; this.nextSteps>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; nextSteps>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; net.sourceforge.pmd.dfa.SequenceChecker.Status; step[int]; net.sourceforge.pmd.dfa.SequenceChecker.Status; null; nextSteps>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker.Status; hasMoreSteps[]; boolean; null; this.nextSteps>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; this.bracesList>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.dfa.SequenceChecker; run[]; boolean; null; bracesList>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; null; e.node.getChildren()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLength[]; int; null; list>
<java.util.AbstractSequentialList; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; iterator[]; java.util.Iterator<net.sourceforge.pmd.dfa.IDataFlowNode>; null; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; list>
<java.util.LinkedList; removeLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; removeLast[]; void; null; list>
<java.util.AbstractCollection; isEmpty[]; boolean; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEmpty[]; boolean; null; list>
<java.util.LinkedList; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; addLast[net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isDoBranchNode[]; boolean; isType[int]; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[]; boolean; null; list>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; getDoBranchNodeFromFirstDoStatement[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; list>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; null; list.getLast().getChildren()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; getChildren[]; list>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; null; list.getLast().getChildren()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; getChildren[]; list>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isFirstDoStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; boolean; isType[int]; inode.getFlow()>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.Structure; getLast[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; this.dataFlow>
<java.util.LinkedList; getFirst[]; net.sourceforge.pmd.dfa.DataFlowNode; net.sourceforge.pmd.dfa.Structure; getFirst[]; net.sourceforge.pmd.dfa.IDataFlowNode; null; this.dataFlow>
<java.util.Stack; push[net.sourceforge.pmd.dfa.StackObject]; net.sourceforge.pmd.dfa.StackObject; net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; continueBreakReturnStack>
<java.util.Stack; push[net.sourceforge.pmd.dfa.StackObject]; net.sourceforge.pmd.dfa.StackObject; net.sourceforge.pmd.dfa.Structure; pushOnStack[int, net.sourceforge.pmd.dfa.IDataFlowNode]; void; null; braceStack>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getDataFlowNode().getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.dfa.DaaRule.Usage; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.dfa.DaaRule.Usage]; net.sourceforge.pmd.dfa.DaaRule.Usage; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; hash>
<java.util.List; add[net.sourceforge.pmd.dfa.DaaRuleViolation]; boolean; net.sourceforge.pmd.dfa.DaaRule; addDaaViolation[java.lang.Object, net.sourceforge.pmd.ast.SimpleNode, java.lang.String, java.lang.String, int, int]; void; null; this.daaRuleViolations>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules>
<java.util.Map; put[net.sourceforge.pmd.RuleSet, java.util.List<net.sourceforge.pmd.Rule>]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules.get(ruleSet)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; add[net.sourceforge.pmd.Rule]; ruleSetRules>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ruleSetRules>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; ruleSetRules>
<java.util.List; size[]; int; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNames>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNameToNodes>
<java.util.List; get[int]; java.lang.String; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodeNames>
<java.util.List; size[]; int; net.sourceforge.pmd.AbstractRuleChainVisitor; visitAll[java.util.List<net.sourceforge.pmd.ast.CompilationUnit>, net.sourceforge.pmd.RuleContext]; void; null; nodes>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; null; nodeNameToNodes>
<java.util.List; add[net.sourceforge.pmd.ast.SimpleNode]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; indexNode[net.sourceforge.pmd.ast.SimpleNode]; void; null; nodes>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleSetRules.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; iterator[]; ruleSetRules>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.Set; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; visitedNodes>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.Map; put[java.lang.String, java.util.List<net.sourceforge.pmd.ast.SimpleNode>]; java.util.List<net.sourceforge.pmd.ast.SimpleNode>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; nodeNameToNodes>
<java.util.Map; values[]; java.util.Collection<java.util.List<net.sourceforge.pmd.ast.SimpleNode>>; net.sourceforge.pmd.AbstractRuleChainVisitor; clear[]; void; null; nodeNameToNodes>
<java.util.List; clear[]; void; net.sourceforge.pmd.AbstractRuleChainVisitor; clear[]; void; null; l>
<java.util.List; clear[]; void; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; init[]; void; null; parameterTypes>
<java.util.List; toArray[java.lang.Class[]]; java.lang.Class[]; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; null; parameterTypes>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; getMethodParameterTypes[]; java.lang.Class[]; null; parameterTypes>
<java.util.List; add[java.lang.Class]; boolean; net.sourceforge.pmd.dcd.asm.TypeSignatureVisitor; popType[]; void; null; parameterTypes>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getFieldNodes()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getConstructorNodes()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getMethodNodes()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUses()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUses()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getUsers()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getClassNode().getConstructorNodes()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<java.util.List; add[java.io.File]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; add[java.io.FilenameFilter]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; get[int]; java.io.File; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; directories>
<java.util.List; get[int]; java.io.FilenameFilter; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; filters>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.dcd.DCD; main[java.lang.String[]]; void; null; classes>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUse[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; uses>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MemberNode]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUse[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; uses>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUser[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; users>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MemberNode]; boolean; net.sourceforge.pmd.dcd.graph.MemberNode; addUser[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; users>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.FieldNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineField[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.FieldNode; null; fieldNodes>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.ConstructorNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineConstructor[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.ConstructorNode; null; constructorNodes>
<java.util.List; add[net.sourceforge.pmd.dcd.graph.MethodNode]; boolean; net.sourceforge.pmd.dcd.graph.ClassNode; defineMethod[java.lang.String, java.lang.String]; net.sourceforge.pmd.dcd.graph.MethodNode; null; methodNodes>
<java.util.List; add[java.lang.Integer]; boolean; net.sourceforge.pmd.dcd.graph.UsageGraphBuilder; asList[int[]]; java.util.List<java.lang.Integer>; null; list>
<java.util.List; get[int]; net.sourceforge.pmd.dcd.graph.ClassNode; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; classNodes>
<java.util.List; add[int, net.sourceforge.pmd.dcd.graph.ClassNode]; void; net.sourceforge.pmd.dcd.graph.UsageGraph; defineClass[java.lang.String]; net.sourceforge.pmd.dcd.graph.ClassNode; null; classNodes>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Integer>>; net.sourceforge.pmd.renderers.PapariTextRenderer; render[java.io.Writer, net.sourceforge.pmd.Report]; void; null; summary>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.TextRenderer; end[]; void; null; errors>
<java.util.List; add[net.sourceforge.pmd.Report.ProcessingError]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; errors>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.Report.SuppressedViolation>]; boolean; net.sourceforge.pmd.renderers.OnTheFlyRenderer; renderFileReport[net.sourceforge.pmd.Report]; void; null; suppressed>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.renderers.IDEAJRenderer.SourcePath; SourcePath[java.lang.String]; void; null; paths>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.VBHTMLRenderer; end[]; void; null; errors>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomProcessingErrors[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.ProcessingError>]; void; null; errors>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.renderers.HTMLRenderer; glomSuppressions[java.io.Writer, java.util.List<net.sourceforge.pmd.Report.SuppressedViolation>]; void; null; suppressed>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Integer>>; net.sourceforge.pmd.renderers.SummaryHTMLRenderer; renderSummary[java.io.Writer, net.sourceforge.pmd.Report]; void; null; summary>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.get(decl)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; add[net.sourceforge.pmd.symboltable.NameOccurrence]; variableNames>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.MethodScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.MethodScope; toString[]; java.lang.String; null; variableNames>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.LocalScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.LocalScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.LocalScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.LocalScope; toString[]; java.lang.String; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; results>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.VariableUsageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; decls>
<java.util.LinkedList; getLast[]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.symboltable.NameFinder; checkForNameChild[net.sourceforge.pmd.ast.SimpleNode]; void; null; names>
<java.util.LinkedList; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; get[int]; net.sourceforge.pmd.symboltable.NameOccurrence; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.LinkedList; size[]; int; net.sourceforge.pmd.symboltable.NameFinder; add[net.sourceforge.pmd.symboltable.NameOccurrence]; void; null; names>
<java.util.Map; put[net.sourceforge.pmd.symboltable.ClassNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.SourceFileScope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; null; classNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; toString[]; java.lang.String; null; classNames>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; classNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; classNames>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; put[java.lang.String, java.lang.Class]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; PrimitiveTypeResolver[]; void; null; primitiveTypes>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; resolve[java.lang.String]; java.lang.Class; null; primitiveTypes>
<java.util.Map; get[java.lang.Object]; java.lang.Class; net.sourceforge.pmd.symboltable.TypeSet.PrimitiveTypeResolver; resolve[java.lang.String]; java.lang.Class; null; primitiveTypes>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.TypeSet; addImport[java.lang.String]; void; null; imports>
<java.util.Set; size[]; int; net.sourceforge.pmd.symboltable.TypeSet; getImportsCount[]; int; null; imports>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.TypeSet; findClass[java.lang.String]; java.lang.Class; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.List; add[net.sourceforge.pmd.symboltable.TypeSet.Resolver]; boolean; net.sourceforge.pmd.symboltable.TypeSet; buildResolvers[]; void; null; resolvers>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.VariableNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; void; null; variableNames>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.ClassScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; nameOccurrences>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; getVariableDeclarations[]; java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>; iterator[]; variableNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.MethodNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.MethodNameDeclaration]; void; null; methodNames>
<java.util.Map; put[net.sourceforge.pmd.symboltable.ClassNameDeclaration, java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; addDeclaration[net.sourceforge.pmd.symboltable.ClassNameDeclaration]; void; null; classNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; next[]; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; next[]; methodNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; methodNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; methodNames>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; images>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; images>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.keySet()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; iterator[]; variableNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; classNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; classNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames>
<java.util.List; size[]; int; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames.get(mnd)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; size[]; methodNames>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; variableNames>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; variableNames>
<java.util.Stack; peek[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<java.util.Stack; push[net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; addScope[net.sourceforge.pmd.symboltable.Scope, net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; packages>
<java.util.List; get[int]; java.lang.Object; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; packages>
<java.util.Stack; push[net.sourceforge.pmd.symboltable.Scope]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; createSourceFileScope[net.sourceforge.pmd.ast.SimpleNode]; void; null; scopes>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; scopes>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; scopes>
<java.util.Stack; pop[]; net.sourceforge.pmd.symboltable.Scope; net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder; cont[net.sourceforge.pmd.ast.SimpleJavaNode]; void; null; scopes>
<java.util.Set; add[java.lang.String]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; ImageFinderFunction[java.lang.String]; void; null; images>
<java.util.Set; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; ImageFinderFunction[java.util.List<java.lang.String>]; void; null; images>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.symboltable.ImageFinderFunction; applyTo[net.sourceforge.pmd.symboltable.NameDeclaration]; void; null; images>
<java.util.Properties; load[java.io.InputStream]; void; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; net.sourceforge.pmd.RuleSetFactory; getRegisteredRuleSets[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; props>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference.getExcludes()>
<java.util.Hashtable; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>>; net.sourceforge.pmd.RuleSetFactory; parseSingleRuleNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Node, java.lang.ClassLoader]; void; null; p>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; p>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; net.sourceforge.pmd.RuleSetFactory; parsePropertyNode[java.util.Properties, org.w3c.dom.Node]; void; null; p>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; languageToRuleChainVisitor>
<java.util.Map; put[net.sourceforge.pmd.Language, net.sourceforge.pmd.RuleChainVisitor]; net.sourceforge.pmd.RuleChainVisitor; net.sourceforge.pmd.RuleChain; getRuleChainVisitor[net.sourceforge.pmd.Language]; net.sourceforge.pmd.RuleChainVisitor; null; languageToRuleChainVisitor>
<java.util.List; size[]; int; net.sourceforge.pmd.RuleSet; size[]; int; null; rules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRule[net.sourceforge.pmd.Rule]; void; null; rules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRuleByReference[java.lang.String, net.sourceforge.pmd.Rule]; void; null; rules>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.RuleSet; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; rules>
<java.util.List; addAll[int, java.util.Collection<? extends net.sourceforge.pmd.Rule>]; boolean; net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; rules>
<java.util.List; size[]; int; net.sourceforge.pmd.RuleSet; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; rules>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.RuleSet; addRuleSetByReference[net.sourceforge.pmd.RuleSet, boolean]; void; null; rules>
<java.util.Collection; equals[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSet; equals[java.lang.Object]; boolean; null; this.getRules()>
<java.util.Collection; hashCode[]; int; net.sourceforge.pmd.RuleSet; hashCode[]; int; null; this.getRules()>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSet; addExcludePattern[java.lang.String]; void; null; this.excludePatterns>
<java.util.List; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.RuleSet; addExcludePatterns[java.util.List<java.lang.String>]; void; null; this.excludePatterns>
<java.util.List; add[java.lang.String]; boolean; net.sourceforge.pmd.RuleSet; addIncludePattern[java.lang.String]; void; null; this.includePatterns>
<java.util.List; addAll[java.util.Collection<? extends java.lang.String>]; boolean; net.sourceforge.pmd.RuleSet; addIncludePatterns[java.util.List<java.lang.String>]; void; null; this.includePatterns>
<java.util.Collection; add[net.sourceforge.pmd.RuleSet]; boolean; net.sourceforge.pmd.RuleSets; addRuleSet[net.sourceforge.pmd.RuleSet]; void; null; ruleSets>
<java.util.Collection; toArray[net.sourceforge.pmd.RuleSet[]]; net.sourceforge.pmd.RuleSet[]; net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; null; ruleSets>
<java.util.Collection; size[]; int; net.sourceforge.pmd.RuleSets; getAllRuleSets[]; net.sourceforge.pmd.RuleSet[]; null; ruleSets>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; getRuleSetsIterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; null; ruleSets>
<java.util.AbstractCollection; addAll[java.util.Collection<? extends net.sourceforge.pmd.Rule>]; boolean; net.sourceforge.pmd.RuleSets; getAllRules[]; java.util.Set<net.sourceforge.pmd.Rule>; null; result>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; applies[java.io.File]; boolean; null; ruleSets>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.RuleSet>; net.sourceforge.pmd.RuleSets; getRuleByName[java.lang.String]; net.sourceforge.pmd.Rule; null; ruleSets>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.Language; net.sourceforge.pmd.Language; getByName[java.lang.String]; net.sourceforge.pmd.Language; null; mapNameOnRuleLanguage>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.Language]; net.sourceforge.pmd.Language; net.sourceforge.pmd.Language; Language[java.lang.String]; void; null; mapNameOnRuleLanguage>
<java.util.List; add[net.sourceforge.pmd.ant.Formatter]; boolean; net.sourceforge.pmd.ant.PMDTask; addFormatter[net.sourceforge.pmd.ant.Formatter]; void; null; formatters>
<java.util.Map; containsKey[java.lang.Object]; boolean; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; nameMap>
<java.util.Map; get[java.lang.Object]; java.lang.String; net.sourceforge.pmd.ant.PMDTask.AntTaskNameMapper; check[java.lang.String]; void; null; nameMap>
<java.util.List; add[net.sourceforge.pmd.DataSource]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; files>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; renderers>
<java.util.List; add[net.sourceforge.pmd.renderers.Renderer]; boolean; net.sourceforge.pmd.ant.PMDTask; doTask[]; void; null; renderers>
<java.util.Collection; isEmpty[]; boolean; net.sourceforge.pmd.ant.PMDTask; validate[]; void; null; nestedRules>
<java.util.Collection; iterator[]; java.util.Iterator<net.sourceforge.pmd.ant.RuleSetWrapper>; net.sourceforge.pmd.ant.PMDTask; getNestedRuleSetFiles[]; java.lang.String; null; nestedRules>
<java.util.Collection; add[net.sourceforge.pmd.ant.RuleSetWrapper]; boolean; net.sourceforge.pmd.ant.PMDTask; addRuleset[net.sourceforge.pmd.ant.RuleSetWrapper]; void; null; nestedRules>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Map; put[java.lang.String, net.sourceforge.pmd.ant.Formatter.RendererBuilder]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter.RendererBuilder; build[java.lang.Object[]]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>
<java.util.Set; toArray[java.lang.String[]]; java.lang.String[]; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; null; renderersByCode.keySet()>
<java.util.Map; keySet[]; java.util.Set<java.lang.String>; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; toArray[java.lang.String[]]; renderersByCode>
<java.util.Map; size[]; int; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; null; renderersByCode>
<java.util.Map; get[java.lang.Object]; net.sourceforge.pmd.ant.Formatter.RendererBuilder; net.sourceforge.pmd.ant.Formatter; getRenderer[boolean]; net.sourceforge.pmd.renderers.Renderer; null; renderersByCode>


Calls That Are Candidatas (105)

<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.ast.ASTBlockStatement; isAllocation[]; boolean; null; findChildrenOfType(ASTAllocationExpression.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.design.ExceptionAsFlowControl; visit[net.sourceforge.pmd.ast.ASTThrowStatement, java.lang.Object]; java.lang.Object; null; fp.findChildrenOfType(ASTType.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; childIndicesOf[net.sourceforge.pmd.dfa.IDataFlowNode, java.lang.String]; java.lang.String; null; node.getChildren()>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; visit[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration, java.lang.Object]; java.lang.Object; null; mapClasses.get(nodeType.getTypeImage())>
<java.util.List; size[]; int; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.util.designer.DFAPanel.DFACanvas; paintComponent[java.awt.Graphics]; void; null; inode.getChildren()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.CompareObjectsWithEquals; visit[net.sourceforge.pmd.ast.ASTEqualityExpression, java.lang.Object]; java.lang.Object; null; node.getParentsOfType(ASTInitializer.class)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.rules.UselessOperationOnImmutable; getDeclaration[net.sourceforge.pmd.ast.ASTLocalVariableDeclaration]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; null; mapClasses.keySet()>
<java.util.Collection; iterator[]; java.util.Iterator<java.lang.Object>; net.sourceforge.pmd.cpd.MatchAlgorithm; findMatches[]; void; null; markGroups.values()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.design.ImmutableField; initializedWhenDeclared[net.sourceforge.pmd.symboltable.VariableNameDeclaration]; boolean; null; field.getAccessNodeParent().findChildrenOfType(ASTVariableInitializer.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTType.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTClassOrInterfaceType; net.sourceforge.pmd.rules.strictexception.AvoidCatchingThrowable; visit[net.sourceforge.pmd.ast.ASTCatchStatement, java.lang.Object]; java.lang.Object; null; type.findChildrenOfType(ASTClassOrInterfaceType.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.design.UnnecessaryLocalBeforeReturn; visit[net.sourceforge.pmd.ast.ASTReturnStatement, java.lang.Object]; java.lang.Object; null; rtn.findChildrenOfType(ASTPrimaryExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; block.findChildrenOfType(ASTStatement.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTPrimaryPrefix; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(primaryExpression,ASTPrimaryPrefix.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTMethodDeclarator; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(node,ASTMethodDeclarator.class)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.UselessOverridingMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; findFirstDegreeChildrenOfType(formalParameter,ASTVariableDeclaratorId.class)>
<java.util.List; get[int]; ; net.sourceforge.pmd.rules.UselessAssignment; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.getDataFlowNode().getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.rules.UselessAssignment; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.cpd.TokenEntry>; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match2.getMarkSet()>
<java.util.Set; addAll[java.util.Collection<? extends net.sourceforge.pmd.cpd.TokenEntry>]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1.getMarkSet()>
<java.util.List; contains[java.lang.Object]; boolean; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; Arrays.asList(clazz.getInterfaces())>
<java.util.List; size[]; int; net.sourceforge.pmd.typeresolution.rules.CloneMethodMustImplementCloneable; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTBlock.class)>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; getUsages[]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; null; getScope().getVariableDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visitClassDec[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; evaluateDangerOfConstructors2[java.util.Map<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder,java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>>]; boolean; null; classConstructorMap.keySet()>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledMethods>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledConstructors>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; findMethod[net.sourceforge.pmd.ast.ASTPrimaryExpression, java.lang.String]; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation; null; meth.getReferenceNames()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitFields[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getFieldNodes()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitConstructors[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getConstructorNodes()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitMethods[net.sourceforge.pmd.dcd.graph.ClassNode, java.lang.Object]; java.lang.Object; null; classNode.getMethodNodes()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUses[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUses()>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Report.SuppressedViolation>; net.sourceforge.pmd.Report; merge[net.sourceforge.pmd.Report]; void; null; r.getSuppressedRuleViolations()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.DumpNodeVisitor; visitUsers[net.sourceforge.pmd.dcd.graph.MemberNode, java.lang.Object]; java.lang.Object; null; memberNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUses()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.DumpNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.FieldNode, java.lang.Object]; java.lang.Object; null; fieldNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; processAdditive[java.lang.Object, int, net.sourceforge.pmd.ast.SimpleNode, net.sourceforge.pmd.ast.SimpleNode]; int; null; childNode.findChildrenOfType(ASTName.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.ConstructorNode, java.lang.Object]; java.lang.Object; null; constructorNode.getClassNode().getConstructorNodes()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.ConsecutiveLiteralAppends; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; expr.getParentsOfType(ASTArgumentList.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.dcd.UsageNodeVisitor; visit[net.sourceforge.pmd.dcd.graph.MethodNode, java.lang.Object]; java.lang.Object; null; methodNode.getUsers()>
<java.util.List; size[]; int; net.sourceforge.pmd.dcd.UsageNodeVisitor; printMember[net.sourceforge.pmd.dcd.graph.MemberNode]; void; null; memberNode.getUsers()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<net.sourceforge.pmd.ast.Node,java.lang.Integer>>; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; processBlocks[java.util.Map<net.sourceforge.pmd.ast.Node,java.util.Map<net.sourceforge.pmd.ast.Node,java.lang.Integer>>]; int; null; entry.getValue()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.strings.InsufficientStringBufferDeclaration; isAdditive[net.sourceforge.pmd.ast.SimpleNode]; boolean; null; n.findChildrenOfType(ASTAdditiveExpression.class)>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getClassDeclarations()>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.MethodNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; classScope.getMethodDeclarations()>
<java.util.Map; isEmpty[]; boolean; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.Map; keySet[]; java.util.Set<net.sourceforge.pmd.symboltable.VariableNameDeclaration>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.Map; get[java.lang.Object]; java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>; net.sourceforge.pmd.util.designer.Designer.SymbolTableListener; valueChanged[javax.swing.event.TreeSelectionEvent]; void; null; scope.getVariableDeclarations()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.basic.BooleanInstantiation; visit[net.sourceforge.pmd.ast.ASTAllocationExpression, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTArrayDimsAndInits.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.BeanMembersShouldSerializeRule; visit[net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration, java.lang.Object]; java.lang.Object; null; vars.get(decl)>
<java.util.List; get[int]; net.sourceforge.pmd.ast.ASTVariableDeclaratorId; net.sourceforge.pmd.rules.SymbolTableTestRule; visit[net.sourceforge.pmd.ast.ASTFieldDeclaration, java.lang.Object]; java.lang.Object; null; node.findChildrenOfType(ASTVariableDeclaratorId.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.CouplingBetweenObjects; checkVariableType[net.sourceforge.pmd.ast.SimpleNode, java.lang.String]; void; null; nameNode.getParentsOfType(ASTClassOrInterfaceDeclaration.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; computeNow[net.sourceforge.pmd.ast.SimpleNode]; void; null; inode.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.variableaccess.VariableAccessVisitor; collectDeclarations[net.sourceforge.pmd.dfa.IDataFlowNode]; java.util.Set<java.util.Map<net.sourceforge.pmd.symboltable.VariableNameDeclaration,java.util.List<net.sourceforge.pmd.symboltable.NameOccurrence>>>; null; inode.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; lhs.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.IdempotentOperations; visit[net.sourceforge.pmd.ast.ASTStatementExpression, java.lang.Object]; java.lang.Object; null; rhs.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.Linker; computePaths[]; void; null; node.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; getNodeToBreakStatement[net.sourceforge.pmd.dfa.IDataFlowNode]; net.sourceforge.pmd.dfa.IDataFlowNode; null; node.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeDo[int, int]; void; null; doSt.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeFor[int, int]; void; null; fSt.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeSwitch[int, int]; void; null; sEnd.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeWhile[int, int]; void; null; wEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; ifEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int, int]; void; null; elseEnd.getFlow()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.Linker; computeIf[int, int]; void; null; ifEnd.getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTPrimarySuffix.class)>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.rules.sunsecure.MethodReturnsInternalArray; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; ret.findChildrenOfType(ASTAllocationExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.rules.sunsecure.ArrayIsStoredDirectly; checkForDirectAssignment[java.lang.Object, net.sourceforge.pmd.ast.ASTFormalParameter, java.util.List<net.sourceforge.pmd.ast.ASTBlockStatement>]; boolean; null; e.findChildrenOfType(ASTEqualityExpression.class)>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; hasMoreChildren[]; boolean; null; e.node.getChildren()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addLastChild[]; void; null; e.node.getChildren()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.pathfinder.DAAPathFinder; addCurrentChild[]; void; null; inode.getChildren()>
<java.util.Set; iterator[]; java.util.Iterator<net.sourceforge.pmd.symboltable.ClassNameDeclaration>; net.sourceforge.pmd.symboltable.SourceFileScope; findVariableHere[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; classNames.keySet()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isEndNode[]; boolean; null; list.getLast().getChildren()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.pathfinder.CurrentPath; isBranch[]; boolean; null; list.getLast().getChildren()>
<java.util.List; get[int]; ; net.sourceforge.pmd.dfa.DaaRule; visit[net.sourceforge.pmd.ast.ASTMethodDeclaration, java.lang.Object]; java.lang.Object; null; methodDeclaration.getDataFlowNode().getFlow()>
<java.util.List; size[]; int; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.List; get[int]; net.sourceforge.pmd.dfa.variableaccess.VariableAccess; net.sourceforge.pmd.dfa.DaaRule; execute[net.sourceforge.pmd.dfa.pathfinder.CurrentPath]; void; null; inode.getVariableAccess()>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules.get(ruleSet)>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<net.sourceforge.pmd.RuleSet,java.util.List<net.sourceforge.pmd.Rule>>>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; ruleSetRules.entrySet()>
<java.util.List; iterator[]; java.util.Iterator<net.sourceforge.pmd.Rule>; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.List; isEmpty[]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; initialize[]; void; null; entry.getValue()>
<java.util.List; size[]; int; net.sourceforge.pmd.symboltable.ClassScope; toString[]; java.lang.String; null; methodNames.get(mnd)>
<java.util.Set; contains[java.lang.Object]; boolean; net.sourceforge.pmd.RuleSetFactory; parseRuleSetReferenceNode[net.sourceforge.pmd.RuleSet, org.w3c.dom.Element, java.lang.String]; void; null; ruleSetReference.getExcludes()>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.get(decl)>
<java.util.Set; toArray[java.lang.String[]]; java.lang.String[]; net.sourceforge.pmd.ant.Formatter; validRendererCodes[]; java.lang.String[]; null; renderersByCode.keySet()>


Calls That Broken Confinement (7)

<java.util.Set; addAll[java.util.Collection<? extends net.sourceforge.pmd.cpd.TokenEntry>]; boolean; net.sourceforge.pmd.cpd.MatchCollector; getMatches[]; java.util.List<net.sourceforge.pmd.cpd.Match>; null; match1.getMarkSet()>
<java.util.List; addAll[java.util.Collection<? extends net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledMethods>
<java.util.List; add[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorInvocation]; boolean; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().calledConstructors>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.ConstructorHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTConstructorDeclaration, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allPrivateConstructorsOfClass>
<java.util.Map; put[net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodHolder, java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>]; java.util.List<net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod.MethodInvocation>; net.sourceforge.pmd.rules.ConstructorCallsOverridableMethod; visit[net.sourceforge.pmd.ast.ASTMethodDeclarator, java.lang.Object]; java.lang.Object; null; getCurrentEvalPackage().allMethodsOfClass>
<java.util.List; add[net.sourceforge.pmd.Rule]; boolean; net.sourceforge.pmd.AbstractRuleChainVisitor; add[net.sourceforge.pmd.RuleSet, net.sourceforge.pmd.Rule]; void; null; ruleSetRules.get(ruleSet)>
<java.util.List; add[net.sourceforge.pmd.symboltable.NameOccurrence]; boolean; net.sourceforge.pmd.symboltable.MethodScope; addVariableNameOccurrence[net.sourceforge.pmd.symboltable.NameOccurrence]; net.sourceforge.pmd.symboltable.NameDeclaration; null; variableNames.get(decl)>
