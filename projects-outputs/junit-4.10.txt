All Method Calls (1900)

<junit.framework.ComparisonCompactor; areStringsEqual[]; boolean; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<junit.framework.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; Assert>
<junit.framework.ComparisonCompactor; findCommonPrefix[]; void; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<junit.framework.ComparisonCompactor; findCommonSuffix[]; void; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<junit.framework.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; Assert>
<java.lang.String; substring[int, int]; java.lang.String; junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; source>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; source>
<junit.framework.ComparisonCompactor; computeCommonPrefix[]; java.lang.String; junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; this>
<junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; junit.framework.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; this>
<java.lang.Math; min[int, int]; int; junit.framework.ComparisonCompactor; findCommonPrefix[]; void; null; Math>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; findCommonPrefix[]; void; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; findCommonPrefix[]; void; null; fActual>
<java.lang.String; charAt[int]; char; junit.framework.ComparisonCompactor; findCommonPrefix[]; void; null; fExpected>
<java.lang.String; charAt[int]; char; junit.framework.ComparisonCompactor; findCommonPrefix[]; void; null; fActual>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; findCommonSuffix[]; void; null; fActual>
<java.lang.String; charAt[int]; char; junit.framework.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; charAt[int]; char; junit.framework.ComparisonCompactor; findCommonSuffix[]; void; null; fActual>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; substring[int, int]; java.lang.String; junit.framework.ComparisonCompactor; computeCommonPrefix[]; java.lang.String; null; fExpected>
<java.lang.Math; max[int, int]; int; junit.framework.ComparisonCompactor; computeCommonPrefix[]; java.lang.String; null; Math>
<java.lang.Math; min[int, int]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; Math>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; substring[int, int]; java.lang.String; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; junit.framework.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; equals[java.lang.Object]; boolean; junit.framework.ComparisonCompactor; areStringsEqual[]; boolean; null; fExpected>
<java.util.List; add[junit.framework.TestFailure]; boolean; junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; null; fErrors>
<junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; null; this>
<junit.framework.TestListener; addError[junit.framework.Test, java.lang.Throwable]; void; junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; null; each>
<java.util.List; add[junit.framework.TestFailure]; boolean; junit.framework.TestResult; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; fFailures>
<junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; junit.framework.TestResult; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; this>
<junit.framework.TestListener; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; junit.framework.TestResult; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; each>
<java.util.List; add[junit.framework.TestListener]; boolean; junit.framework.TestResult; addListener[junit.framework.TestListener]; void; null; fListeners>
<java.util.List; remove[java.lang.Object]; boolean; junit.framework.TestResult; removeListener[junit.framework.TestListener]; void; null; fListeners>
<java.util.List; addAll[java.util.Collection<? extends junit.framework.TestListener>]; boolean; junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; null; result>
<junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; junit.framework.TestResult; endTest[junit.framework.Test]; void; null; this>
<junit.framework.TestListener; endTest[junit.framework.Test]; void; junit.framework.TestResult; endTest[junit.framework.Test]; void; null; each>
<java.util.List; size[]; int; junit.framework.TestResult; errorCount[]; int; null; fErrors>
<java.util.Collections; enumeration[java.util.Collection<junit.framework.TestFailure>]; java.util.Enumeration<junit.framework.TestFailure>; junit.framework.TestResult; errors[]; java.util.Enumeration<junit.framework.TestFailure>; null; Collections>
<java.util.List; size[]; int; junit.framework.TestResult; failureCount[]; int; null; fFailures>
<java.util.Collections; enumeration[java.util.Collection<junit.framework.TestFailure>]; java.util.Enumeration<junit.framework.TestFailure>; junit.framework.TestResult; failures[]; java.util.Enumeration<junit.framework.TestFailure>; null; Collections>
<junit.framework.TestResult; startTest[junit.framework.Test]; void; junit.framework.TestResult; run[junit.framework.TestCase]; void; null; this>
<junit.framework.TestCase; runBare[]; void; java.lang.Object; protect[]; void; null; test>
<junit.framework.TestResult; runProtected[junit.framework.Test, junit.framework.Protectable]; void; junit.framework.TestResult; run[junit.framework.TestCase]; void; null; this>
<junit.framework.TestResult; endTest[junit.framework.Test]; void; junit.framework.TestResult; run[junit.framework.TestCase]; void; null; this>
<junit.framework.Protectable; protect[]; void; junit.framework.TestResult; runProtected[junit.framework.Test, junit.framework.Protectable]; void; null; p>
<junit.framework.TestResult; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; junit.framework.TestResult; runProtected[junit.framework.Test, junit.framework.Protectable]; void; null; this>
<junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; junit.framework.TestResult; runProtected[junit.framework.Test, junit.framework.Protectable]; void; null; this>
<junit.framework.Test; countTestCases[]; int; junit.framework.TestResult; startTest[junit.framework.Test]; void; null; test>
<junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; junit.framework.TestResult; startTest[junit.framework.Test]; void; null; this>
<junit.framework.TestListener; startTest[junit.framework.Test]; void; junit.framework.TestResult; startTest[junit.framework.Test]; void; null; each>
<junit.framework.TestResult; failureCount[]; int; junit.framework.TestResult; wasSuccessful[]; boolean; null; this>
<junit.framework.TestResult; errorCount[]; int; junit.framework.TestResult; wasSuccessful[]; boolean; null; this>
<junit.framework.JUnit4TestAdapterCache; getDefault[]; junit.framework.JUnit4TestAdapterCache; junit.framework.JUnit4TestAdapter; JUnit4TestAdapter[java.lang.Class<?>]; void; null; JUnit4TestAdapterCache>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; junit.framework.JUnit4TestAdapter; JUnit4TestAdapter[java.lang.Class<?>, junit.framework.JUnit4TestAdapterCache]; void; null; Request.classWithoutSuiteMethod(newTestClass)>
<org.junit.runner.Request; classWithoutSuiteMethod[java.lang.Class<?>]; org.junit.runner.Request; junit.framework.JUnit4TestAdapter; JUnit4TestAdapter[java.lang.Class<?>, junit.framework.JUnit4TestAdapterCache]; void; getRunner[]; Request>
<org.junit.runner.Runner; testCount[]; int; junit.framework.JUnit4TestAdapter; countTestCases[]; int; null; fRunner>
<org.junit.runner.Runner; run[org.junit.runner.notification.RunNotifier]; void; junit.framework.JUnit4TestAdapter; run[junit.framework.TestResult]; void; null; fRunner>
<junit.framework.JUnit4TestAdapterCache; getNotifier[junit.framework.TestResult, junit.framework.JUnit4TestAdapter]; org.junit.runner.notification.RunNotifier; junit.framework.JUnit4TestAdapter; run[junit.framework.TestResult]; void; null; fCache>
<junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; junit.framework.JUnit4TestAdapter; getTests[]; java.util.List<junit.framework.Test>; null; fCache>
<junit.framework.JUnit4TestAdapter; getDescription[]; org.junit.runner.Description; junit.framework.JUnit4TestAdapter; getTests[]; java.util.List<junit.framework.Test>; null; this>
<org.junit.runner.Runner; getDescription[]; org.junit.runner.Description; junit.framework.JUnit4TestAdapter; getDescription[]; org.junit.runner.Description; null; fRunner>
<junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; junit.framework.JUnit4TestAdapter; getDescription[]; org.junit.runner.Description; null; this>
<junit.framework.JUnit4TestAdapter; isIgnored[org.junit.runner.Description]; boolean; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; this>
<org.junit.runner.Description; childlessCopy[]; org.junit.runner.Description; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; description>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; description>
<junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; this>
<org.junit.runner.Description; isEmpty[]; boolean; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; child>
<org.junit.runner.Description; addChild[org.junit.runner.Description]; void; junit.framework.JUnit4TestAdapter; removeIgnored[org.junit.runner.Description]; org.junit.runner.Description; null; result>
<org.junit.runner.Description; getAnnotation[java.lang.Class<org.junit.Ignore>]; org.junit.Ignore; junit.framework.JUnit4TestAdapter; isIgnored[org.junit.runner.Description]; boolean; null; description>
<java.lang.Class; getName[]; java.lang.String; junit.framework.JUnit4TestAdapter; toString[]; java.lang.String; null; fNewTestClass>
<org.junit.runner.manipulation.Filter; apply[java.lang.Object]; void; junit.framework.JUnit4TestAdapter; filter[org.junit.runner.manipulation.Filter]; void; null; filter>
<org.junit.runner.manipulation.Sorter; apply[java.lang.Object]; void; junit.framework.JUnit4TestAdapter; sort[org.junit.runner.manipulation.Sorter]; void; null; sorter>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.Assert; assertTrue[java.lang.String, boolean]; void; null; this>
<junit.framework.Assert; assertTrue[java.lang.String, boolean]; void; junit.framework.Assert; assertTrue[boolean]; void; null; this>
<junit.framework.Assert; assertTrue[java.lang.String, boolean]; void; junit.framework.Assert; assertFalse[java.lang.String, boolean]; void; null; this>
<junit.framework.Assert; assertFalse[java.lang.String, boolean]; void; junit.framework.Assert; assertFalse[boolean]; void; null; this>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.Assert; fail[]; void; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; expected>
<junit.framework.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; junit.framework.Assert; assertEquals[java.lang.String, java.lang.String, java.lang.String]; void; null; expected>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.String, java.lang.String]; void; junit.framework.Assert; assertEquals[java.lang.String, java.lang.String]; void; null; this>
<java.lang.Double; compare[double, double]; int; junit.framework.Assert; assertEquals[java.lang.String, double, double, double]; void; null; Double>
<java.lang.Math; abs[double]; double; junit.framework.Assert; assertEquals[java.lang.String, double, double, double]; void; null; Math>
<junit.framework.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, double, double, double]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, double, double, double]; void; junit.framework.Assert; assertEquals[double, double, double]; void; null; this>
<java.lang.Float; compare[float, float]; int; junit.framework.Assert; assertEquals[java.lang.String, float, float, float]; void; null; Float>
<java.lang.Math; abs[float]; float; junit.framework.Assert; assertEquals[java.lang.String, float, float, float]; void; null; Math>
<junit.framework.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, float, float, float]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, float, float, float]; void; junit.framework.Assert; assertEquals[float, float, float]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, long, long]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, long, long]; void; junit.framework.Assert; assertEquals[long, long]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, boolean, boolean]; void; null; this>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; junit.framework.Assert; assertEquals[java.lang.String, boolean, boolean]; void; null; Boolean>
<java.lang.Boolean; valueOf[boolean]; java.lang.Boolean; junit.framework.Assert; assertEquals[java.lang.String, boolean, boolean]; void; null; Boolean>
<junit.framework.Assert; assertEquals[java.lang.String, boolean, boolean]; void; junit.framework.Assert; assertEquals[boolean, boolean]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, byte, byte]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, byte, byte]; void; junit.framework.Assert; assertEquals[byte, byte]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, char, char]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, char, char]; void; junit.framework.Assert; assertEquals[char, char]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, short, short]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, short, short]; void; junit.framework.Assert; assertEquals[short, short]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertEquals[java.lang.String, int, int]; void; null; this>
<junit.framework.Assert; assertEquals[java.lang.String, int, int]; void; junit.framework.Assert; assertEquals[int, int]; void; null; this>
<junit.framework.Assert; assertNotNull[java.lang.String, java.lang.Object]; void; junit.framework.Assert; assertNotNull[java.lang.Object]; void; null; this>
<junit.framework.Assert; assertTrue[java.lang.String, boolean]; void; junit.framework.Assert; assertNotNull[java.lang.String, java.lang.Object]; void; null; this>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; junit.framework.Assert; assertNull[java.lang.Object]; void; null; String>
<junit.framework.Assert; assertNull[java.lang.String, java.lang.Object]; void; junit.framework.Assert; assertNull[java.lang.Object]; void; null; this>
<junit.framework.Assert; assertTrue[java.lang.String, boolean]; void; junit.framework.Assert; assertNull[java.lang.String, java.lang.Object]; void; null; this>
<junit.framework.Assert; failNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; assertSame[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertSame[java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; failSame[java.lang.String]; void; junit.framework.Assert; assertNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; assertNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; junit.framework.Assert; assertNotSame[java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.Assert; failSame[java.lang.String]; void; null; this>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.Assert; failNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<junit.framework.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; junit.framework.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.String; length[]; int; junit.framework.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; message>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; junit.framework.TestFailure; toString[]; java.lang.String; null; buffer>
<java.lang.Throwable; getMessage[]; java.lang.String; junit.framework.TestFailure; toString[]; java.lang.String; null; fThrownException>
<java.lang.StringBuffer; toString[]; java.lang.String; junit.framework.TestFailure; toString[]; java.lang.String; null; buffer>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; junit.framework.TestFailure; trace[]; java.lang.String; null; thrownException()>
<junit.framework.TestFailure; thrownException[]; java.lang.Throwable; junit.framework.TestFailure; trace[]; java.lang.String; printStackTrace[java.io.PrintWriter]; this>
<java.io.StringWriter; getBuffer[]; java.lang.StringBuffer; junit.framework.TestFailure; trace[]; java.lang.String; null; stringWriter>
<java.lang.StringBuffer; toString[]; java.lang.String; junit.framework.TestFailure; trace[]; java.lang.String; null; buffer>
<java.lang.Throwable; getMessage[]; java.lang.String; junit.framework.TestFailure; exceptionMessage[]; java.lang.String; null; thrownException()>
<junit.framework.TestFailure; thrownException[]; java.lang.Throwable; junit.framework.TestFailure; exceptionMessage[]; java.lang.String; getMessage[]; this>
<junit.framework.TestFailure; thrownException[]; java.lang.Throwable; junit.framework.TestFailure; isFailure[]; boolean; null; this>
<junit.framework.ComparisonCompactor; compact[java.lang.String]; java.lang.String; junit.framework.ComparisonFailure; getMessage[]; java.lang.String; null; new ComparisonCompactor(MAX_CONTEXT_LENGTH,fExpected,fActual)>
<junit.framework.TestCase; createResult[]; junit.framework.TestResult; junit.framework.TestCase; run[]; junit.framework.TestResult; null; this>
<junit.framework.TestCase; run[junit.framework.TestResult]; void; junit.framework.TestCase; run[]; junit.framework.TestResult; null; this>
<junit.framework.TestResult; run[junit.framework.TestCase]; void; junit.framework.TestCase; run[junit.framework.TestResult]; void; null; result>
<junit.framework.TestCase; setUp[]; void; junit.framework.TestCase; runBare[]; void; null; this>
<junit.framework.TestCase; runTest[]; void; junit.framework.TestCase; runBare[]; void; null; this>
<junit.framework.TestCase; tearDown[]; void; junit.framework.TestCase; runBare[]; void; null; this>
<junit.framework.Assert; assertNotNull[java.lang.String, java.lang.Object]; void; junit.framework.TestCase; runTest[]; void; null; this>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; junit.framework.TestCase; runTest[]; void; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends junit.framework.TestCase>; junit.framework.TestCase; runTest[]; void; getMethod[java.lang.String, java.lang.Class<?>[]]; this>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.TestCase; runTest[]; void; null; this>
<java.lang.reflect.Modifier; isPublic[int]; boolean; junit.framework.TestCase; runTest[]; void; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; junit.framework.TestCase; runTest[]; void; null; runMethod>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.TestCase; runTest[]; void; null; this>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; junit.framework.TestCase; runTest[]; void; null; runMethod>
<java.lang.Throwable; fillInStackTrace[]; java.lang.Throwable; junit.framework.TestCase; runTest[]; void; null; e>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; junit.framework.TestCase; runTest[]; void; null; e>
<java.lang.Throwable; fillInStackTrace[]; java.lang.Throwable; junit.framework.TestCase; runTest[]; void; null; e>
<junit.framework.TestCase; getName[]; java.lang.String; junit.framework.TestCase; toString[]; java.lang.String; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestCase; toString[]; java.lang.String; null; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends junit.framework.TestCase>; junit.framework.TestCase; toString[]; java.lang.String; getName[]; this>
<junit.framework.TestSuite; getTestConstructor[java.lang.Class<?>]; java.lang.reflect.Constructor<?>; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; theClass>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; constructor>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; constructor>
<junit.framework.TestCase; setName[java.lang.String]; void; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; ((TestCase)test)>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; constructor>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<junit.framework.TestSuite; exceptionToString[java.lang.Throwable]; java.lang.String; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<junit.framework.TestSuite; exceptionToString[java.lang.Throwable]; java.lang.String; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; e>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<junit.framework.TestSuite; exceptionToString[java.lang.Throwable]; java.lang.String; junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; null; this>
<java.lang.Class; getConstructor[java.lang.Class<?>[]]; java.lang.reflect.Constructor<>; junit.framework.TestSuite; getTestConstructor[java.lang.Class<?>]; java.lang.reflect.Constructor<?>; null; theClass>
<java.lang.Class; getConstructor[java.lang.Class<?>[]]; java.lang.reflect.Constructor<>; junit.framework.TestSuite; getTestConstructor[java.lang.Class<?>]; java.lang.reflect.Constructor<?>; null; theClass>
<junit.framework.Assert; fail[java.lang.String]; void; junit.framework.TestCase; runTest[]; void; null; this>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; junit.framework.TestSuite; exceptionToString[java.lang.Throwable]; java.lang.String; null; t>
<java.io.StringWriter; toString[]; java.lang.String; junit.framework.TestSuite; exceptionToString[java.lang.Throwable]; java.lang.String; null; stringWriter>
<junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; junit.framework.TestSuite; TestSuite[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; theClass>
<junit.framework.TestSuite; getTestConstructor[java.lang.Class<?>]; java.lang.reflect.Constructor<?>; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; theClass>
<java.lang.reflect.Modifier; isPublic[int]; boolean; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; Modifier>
<java.lang.Class; getModifiers[]; int; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; theClass>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; theClass>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; Test.class>
<java.lang.Class; getDeclaredMethods[]; java.lang.reflect.Method[]; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; superClass>
<junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class<? super >; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; superClass>
<java.util.Vector; size[]; int; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; fTests>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; theClass>
<junit.framework.TestSuite; setName[java.lang.String]; void; junit.framework.TestSuite; TestSuite[java.lang.Class<? extends junit.framework.TestCase>, java.lang.String]; void; null; this>
<junit.framework.TestSuite; setName[java.lang.String]; void; junit.framework.TestSuite; TestSuite[java.lang.String]; void; null; this>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; TestSuite[java.lang.Class<?>[]]; void; null; this>
<junit.framework.TestSuite; testCaseForClass[java.lang.Class<?>]; junit.framework.Test; junit.framework.TestSuite; TestSuite[java.lang.Class<?>[]]; void; null; this>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; junit.framework.TestSuite; testCaseForClass[java.lang.Class<?>]; junit.framework.Test; null; TestCase.class>
<java.lang.Class; asSubclass[java.lang.Class<junit.framework.TestCase>]; java.lang.Class<? extends junit.framework.TestCase>; junit.framework.TestSuite; testCaseForClass[java.lang.Class<?>]; junit.framework.Test; null; each>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; testCaseForClass[java.lang.Class<?>]; junit.framework.Test; null; this>
<java.lang.Class; getCanonicalName[]; java.lang.String; junit.framework.TestSuite; testCaseForClass[java.lang.Class<?>]; junit.framework.Test; null; each>
<junit.framework.TestSuite; setName[java.lang.String]; void; junit.framework.TestSuite; TestSuite[java.lang.Class<? extends junit.framework.TestCase>[], java.lang.String]; void; null; this>
<java.util.Vector; add[junit.framework.Test]; boolean; junit.framework.TestSuite; addTest[junit.framework.Test]; void; null; fTests>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestSuite[java.lang.Class<? extends junit.framework.TestCase>]; void; null; this>
<junit.framework.Test; countTestCases[]; int; junit.framework.TestSuite; countTestCases[]; int; null; each>
<junit.framework.TestResult; shouldStop[]; boolean; junit.framework.TestSuite; run[junit.framework.TestResult]; void; null; result>
<junit.framework.TestSuite; runTest[junit.framework.Test, junit.framework.TestResult]; void; junit.framework.TestSuite; run[junit.framework.TestResult]; void; null; this>
<junit.framework.Test; run[junit.framework.TestResult]; void; junit.framework.TestSuite; runTest[junit.framework.Test, junit.framework.TestResult]; void; null; test>
<java.util.Vector; get[int]; junit.framework.Test; junit.framework.TestSuite; testAt[int]; junit.framework.Test; null; fTests>
<java.util.Vector; size[]; int; junit.framework.TestSuite; testCount[]; int; null; fTests>
<java.util.Vector; elements[]; java.util.Enumeration<junit.framework.Test>; junit.framework.TestSuite; tests[]; java.util.Enumeration<junit.framework.Test>; null; fTests>
<junit.framework.TestSuite; getName[]; java.lang.String; junit.framework.TestSuite; toString[]; java.lang.String; null; this>
<junit.framework.TestSuite; getName[]; java.lang.String; junit.framework.TestSuite; toString[]; java.lang.String; null; this>
<java.lang.reflect.Method; getName[]; java.lang.String; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; m>
<java.util.List; contains[java.lang.Object]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; names>
<junit.framework.TestSuite; isPublicTestMethod[java.lang.reflect.Method]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; warning[java.lang.String]; junit.framework.Test; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<java.lang.reflect.Method; getName[]; java.lang.String; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; m>
<java.lang.Class; getCanonicalName[]; java.lang.String; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; theClass>
<java.util.List; add[java.lang.String]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; names>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; this>
<junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; junit.framework.TestSuite; isPublicTestMethod[java.lang.reflect.Method]; boolean; null; this>
<java.lang.reflect.Modifier; isPublic[int]; boolean; junit.framework.TestSuite; isPublicTestMethod[java.lang.reflect.Method]; boolean; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; junit.framework.TestSuite; isPublicTestMethod[java.lang.reflect.Method]; boolean; null; m>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; null; m>
<java.lang.String; startsWith[java.lang.String]; boolean; junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; null; m.getName()>
<java.lang.reflect.Method; getName[]; java.lang.String; junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; startsWith[java.lang.String]; m>
<java.lang.Object; equals[java.lang.Object]; boolean; junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; null; m.getReturnType()>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; junit.framework.TestSuite; isTestMethod[java.lang.reflect.Method]; boolean; equals[java.lang.Object]; m>
<org.junit.runner.Description; isSuite[]; boolean; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; description>
<junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.HashMap; put[org.junit.runner.Description, junit.framework.Test]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.HashMap; get[java.lang.Object]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<org.junit.runner.Description; isTest[]; boolean; junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; null; description>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; null; description>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; null; description>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; null; suite>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; createTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<org.junit.runner.notification.RunNotifier; addListener[org.junit.runner.notification.RunListener]; void; junit.framework.JUnit4TestAdapterCache; getNotifier[junit.framework.TestResult, junit.framework.JUnit4TestAdapter]; org.junit.runner.notification.RunNotifier; null; notifier>
<junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; null; result>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; null; this>
<org.junit.runner.notification.Failure; getDescription[]; org.junit.runner.Description; org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; null; failure>
<org.junit.runner.notification.Failure; getException[]; java.lang.Throwable; org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; null; failure>
<junit.framework.TestResult; endTest[junit.framework.Test]; void; org.junit.runner.notification.RunListener; testFinished[org.junit.runner.Description]; void; null; result>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; org.junit.runner.notification.RunListener; testFinished[org.junit.runner.Description]; void; null; this>
<junit.framework.TestResult; startTest[junit.framework.Test]; void; org.junit.runner.notification.RunListener; testStarted[org.junit.runner.Description]; void; null; result>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; org.junit.runner.notification.RunListener; testStarted[org.junit.runner.Description]; void; null; this>
<org.junit.runner.Description; isTest[]; boolean; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; description>
<java.util.Arrays; asList[junit.framework.Test[]]; java.util.List<junit.framework.Test>; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; Arrays>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; description>
<java.util.List; add[junit.framework.Test]; boolean; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; returnThis>
<junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; this>
<org.junit.runner.Description; toString[]; java.lang.String; junit.framework.JUnit4TestCaseFacade; toString[]; java.lang.String; null; getDescription()>
<junit.framework.JUnit4TestCaseFacade; getDescription[]; org.junit.runner.Description; junit.framework.JUnit4TestCaseFacade; toString[]; java.lang.String; toString[]; this>
<junit.framework.AssertionFailedError; defaultString[java.lang.String]; java.lang.String; junit.framework.AssertionFailedError; AssertionFailedError[java.lang.String]; void; null; this>
<junit.runner.BaseTestRunner; testStarted[java.lang.String]; void; junit.runner.BaseTestRunner; startTest[junit.framework.Test]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; junit.runner.BaseTestRunner; startTest[junit.framework.Test]; void; null; test>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; null; fPreferences>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; null; fPreferences>
<junit.runner.BaseTestRunner; readPreferences[]; void; junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; null; this>
<junit.runner.BaseTestRunner; getPreferencesFile[]; java.io.File; junit.runner.BaseTestRunner; savePreferences[]; void; null; this>
<java.util.Properties; store[java.io.OutputStream, java.lang.String]; void; junit.runner.BaseTestRunner; savePreferences[]; void; null; getPreferences()>
<junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; junit.runner.BaseTestRunner; savePreferences[]; void; store[java.io.OutputStream, java.lang.String]; this>
<java.io.FileOutputStream; close[]; void; junit.runner.BaseTestRunner; savePreferences[]; void; null; fos>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; setPreference[java.lang.String, java.lang.String]; void; null; getPreferences()>
<junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; junit.runner.BaseTestRunner; setPreference[java.lang.String, java.lang.String]; void; put[java.lang.Object, java.lang.Object]; this>
<junit.runner.BaseTestRunner; testEnded[java.lang.String]; void; junit.runner.BaseTestRunner; endTest[junit.framework.Test]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; junit.runner.BaseTestRunner; endTest[junit.framework.Test]; void; null; test>
<junit.runner.BaseTestRunner; testFailed[int, junit.framework.Test, java.lang.Throwable]; void; junit.runner.BaseTestRunner; addError[junit.framework.Test, java.lang.Throwable]; void; null; this>
<junit.runner.BaseTestRunner; testFailed[int, junit.framework.Test, java.lang.Throwable]; void; junit.runner.BaseTestRunner; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; this>
<java.lang.String; length[]; int; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; suiteClassName>
<junit.runner.BaseTestRunner; clearStatus[]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<junit.runner.BaseTestRunner; loadSuiteClass[java.lang.String]; java.lang.Class<?>; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; e>
<junit.runner.BaseTestRunner; runFailed[java.lang.String]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<junit.runner.BaseTestRunner; runFailed[java.lang.String]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.Throwable; toString[]; java.lang.String; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; e>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; testClass>
<junit.runner.BaseTestRunner; clearStatus[]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.reflect.Modifier; isStatic[int]; boolean; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; suiteMethod>
<junit.runner.BaseTestRunner; runFailed[java.lang.String]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; suiteMethod>
<junit.runner.BaseTestRunner; runFailed[java.lang.String]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.Throwable; toString[]; java.lang.String; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; e.getTargetException()>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; toString[]; e>
<junit.runner.BaseTestRunner; runFailed[java.lang.String]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.lang.Throwable; toString[]; java.lang.String; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; e>
<junit.runner.BaseTestRunner; clearStatus[]; void; junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; null; this>
<java.text.NumberFormat; format[double]; java.lang.String; junit.runner.BaseTestRunner; elapsedTimeAsString[long]; java.lang.String; null; NumberFormat.getInstance()>
<java.text.NumberFormat; getInstance[]; java.text.NumberFormat; junit.runner.BaseTestRunner; elapsedTimeAsString[long]; java.lang.String; format[double]; NumberFormat>
<java.lang.String; equals[java.lang.Object]; boolean; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; args[i]>
<junit.runner.BaseTestRunner; setLoading[boolean]; void; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; args[i]>
<junit.runner.BaseTestRunner; extractClassName[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.runner.BaseTestRunner; processArguments[java.lang.String[]]; java.lang.String; null; System.out>
<java.lang.String; startsWith[java.lang.String]; boolean; junit.runner.BaseTestRunner; extractClassName[java.lang.String]; java.lang.String; null; className>
<java.lang.String; substring[int]; java.lang.String; junit.runner.BaseTestRunner; extractClassName[java.lang.String]; java.lang.String; null; className>
<java.lang.String; lastIndexOf[java.lang.String]; int; junit.runner.BaseTestRunner; extractClassName[java.lang.String]; java.lang.String; null; className>
<java.lang.String; length[]; int; junit.runner.BaseTestRunner; truncate[java.lang.String]; java.lang.String; null; s>
<java.lang.String; substring[int, int]; java.lang.String; junit.runner.BaseTestRunner; truncate[java.lang.String]; java.lang.String; null; s>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; junit.runner.BaseTestRunner; loadSuiteClass[java.lang.String]; java.lang.Class<?>; null; Class>
<java.lang.String; equals[java.lang.Object]; boolean; junit.runner.BaseTestRunner; useReloadingTestSuiteLoader[]; boolean; null; getPreference("loading")>
<junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; useReloadingTestSuiteLoader[]; boolean; equals[java.lang.Object]; this>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; getPreferencesFile[]; java.io.File; null; System>
<junit.runner.BaseTestRunner; getPreferencesFile[]; java.io.File; junit.runner.BaseTestRunner; readPreferences[]; void; null; this>
<junit.runner.BaseTestRunner; setPreferences[java.util.Properties]; void; junit.runner.BaseTestRunner; readPreferences[]; void; null; this>
<junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; junit.runner.BaseTestRunner; readPreferences[]; void; null; this>
<java.util.Properties; load[java.io.InputStream]; void; junit.runner.BaseTestRunner; readPreferences[]; void; null; getPreferences()>
<junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; junit.runner.BaseTestRunner; readPreferences[]; void; load[java.io.InputStream]; this>
<java.io.InputStream; close[]; void; junit.runner.BaseTestRunner; readPreferences[]; void; null; is>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; null; getPreferences()>
<junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; getProperty[java.lang.String]; this>
<junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; getPreference[java.lang.String, int]; int; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; junit.runner.BaseTestRunner; getPreference[java.lang.String, int]; int; null; Integer>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.Throwable]; java.lang.String; null; t>
<java.io.StringWriter; getBuffer[]; java.lang.StringBuffer; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.Throwable]; java.lang.String; null; stringWriter>
<java.lang.StringBuffer; toString[]; java.lang.String; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.Throwable]; java.lang.String; null; buffer>
<junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.Throwable]; java.lang.String; null; BaseTestRunner>
<junit.runner.BaseTestRunner; showStackRaw[]; boolean; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; null; this>
<java.io.BufferedReader; readLine[]; java.lang.String; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; null; br>
<junit.runner.BaseTestRunner; filterLine[java.lang.String]; boolean; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; null; this>
<java.io.PrintWriter; println[java.lang.String]; void; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; null; pw>
<java.io.StringWriter; toString[]; java.lang.String; junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; null; sw>
<java.lang.String; equals[java.lang.Object]; boolean; junit.runner.BaseTestRunner; showStackRaw[]; boolean; null; getPreference("filterstack")>
<junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; showStackRaw[]; boolean; equals[java.lang.Object]; this>
<java.lang.String; indexOf[java.lang.String]; int; junit.runner.BaseTestRunner; filterLine[java.lang.String]; boolean; null; line>
<junit.runner.BaseTestRunner; getPreference[java.lang.String, int]; int; junit.runner.BaseTestRunner; filterLine[java.lang.String]; boolean; null; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.runner.Version; main[java.lang.String[]]; void; null; System.out>
<junit.runner.Version; id[]; java.lang.String; junit.runner.Version; main[java.lang.String[]]; void; null; this>
<junit.textui.ResultPrinter; printHeader[long]; void; junit.textui.ResultPrinter; print[junit.framework.TestResult, long]; void; null; this>
<junit.textui.ResultPrinter; printErrors[junit.framework.TestResult]; void; junit.textui.ResultPrinter; print[junit.framework.TestResult, long]; void; null; this>
<junit.textui.ResultPrinter; printFailures[junit.framework.TestResult]; void; junit.textui.ResultPrinter; print[junit.framework.TestResult, long]; void; null; this>
<junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; junit.textui.ResultPrinter; print[junit.framework.TestResult, long]; void; null; this>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; printWaitPrompt[]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printWaitPrompt[]; void; println[]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printWaitPrompt[]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printWaitPrompt[]; void; println[java.lang.String]; this>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; printHeader[long]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printHeader[long]; void; println[]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printHeader[long]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printHeader[long]; void; println[java.lang.String]; this>
<junit.textui.ResultPrinter; elapsedTimeAsString[long]; java.lang.String; junit.textui.ResultPrinter; printHeader[long]; void; null; this>
<junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; junit.textui.ResultPrinter; printErrors[junit.framework.TestResult]; void; null; this>
<junit.framework.TestResult; errors[]; java.util.Enumeration<junit.framework.TestFailure>; junit.textui.ResultPrinter; printErrors[junit.framework.TestResult]; void; null; result>
<junit.framework.TestResult; errorCount[]; int; junit.textui.ResultPrinter; printErrors[junit.framework.TestResult]; void; null; result>
<junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; junit.textui.ResultPrinter; printFailures[junit.framework.TestResult]; void; null; this>
<junit.framework.TestResult; failures[]; java.util.Enumeration<junit.framework.TestFailure>; junit.textui.ResultPrinter; printFailures[junit.framework.TestResult]; void; null; result>
<junit.framework.TestResult; failureCount[]; int; junit.textui.ResultPrinter; printFailures[junit.framework.TestResult]; void; null; result>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; println[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; println[java.lang.String]; this>
<java.util.Enumeration; hasMoreElements[]; boolean; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; null; booBoos>
<junit.textui.ResultPrinter; printDefect[junit.framework.TestFailure, int]; void; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; null; this>
<java.util.Enumeration; nextElement[]; junit.framework.TestFailure; junit.textui.ResultPrinter; printDefects[java.util.Enumeration<junit.framework.TestFailure>, int, java.lang.String]; void; null; booBoos>
<junit.textui.ResultPrinter; printDefectHeader[junit.framework.TestFailure, int]; void; junit.textui.ResultPrinter; printDefect[junit.framework.TestFailure, int]; void; null; this>
<junit.textui.ResultPrinter; printDefectTrace[junit.framework.TestFailure]; void; junit.textui.ResultPrinter; printDefect[junit.framework.TestFailure, int]; void; null; this>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; printDefectHeader[junit.framework.TestFailure, int]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printDefectHeader[junit.framework.TestFailure, int]; void; print[java.lang.String]; this>
<junit.framework.TestFailure; failedTest[]; junit.framework.Test; junit.textui.ResultPrinter; printDefectHeader[junit.framework.TestFailure, int]; void; null; booBoo>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; printDefectTrace[junit.framework.TestFailure]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printDefectTrace[junit.framework.TestFailure]; void; print[java.lang.String]; this>
<junit.runner.BaseTestRunner; getFilteredTrace[java.lang.String]; java.lang.String; junit.textui.ResultPrinter; printDefectTrace[junit.framework.TestFailure]; void; null; BaseTestRunner>
<junit.framework.TestFailure; trace[]; java.lang.String; junit.textui.ResultPrinter; printDefectTrace[junit.framework.TestFailure]; void; null; booBoo>
<junit.framework.TestResult; wasSuccessful[]; boolean; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[]; this>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; print[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[java.lang.String]; this>
<junit.framework.TestResult; runCount[]; int; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<junit.framework.TestResult; runCount[]; int; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[java.lang.String]; this>
<junit.framework.TestResult; runCount[]; int; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<junit.framework.TestResult; failureCount[]; int; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<junit.framework.TestResult; errorCount[]; int; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; result>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; printFooter[junit.framework.TestResult]; void; println[]; this>
<java.text.NumberFormat; format[double]; java.lang.String; junit.textui.ResultPrinter; elapsedTimeAsString[long]; java.lang.String; null; NumberFormat.getInstance()>
<java.text.NumberFormat; getInstance[]; java.text.NumberFormat; junit.textui.ResultPrinter; elapsedTimeAsString[long]; java.lang.String; format[double]; NumberFormat>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; addError[junit.framework.Test, java.lang.Throwable]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; addError[junit.framework.Test, java.lang.Throwable]; void; print[java.lang.String]; this>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; print[java.lang.String]; this>
<java.io.PrintStream; print[java.lang.String]; void; junit.textui.ResultPrinter; startTest[junit.framework.Test]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; startTest[junit.framework.Test]; void; print[java.lang.String]; this>
<java.io.PrintStream; println[]; void; junit.textui.ResultPrinter; startTest[junit.framework.Test]; void; null; getWriter()>
<junit.textui.ResultPrinter; getWriter[]; java.io.PrintStream; junit.textui.ResultPrinter; startTest[junit.framework.Test]; void; println[]; this>
<junit.textui.TestRunner; run[junit.framework.Test]; junit.framework.TestResult; junit.textui.TestRunner; run[java.lang.Class<? extends junit.framework.TestCase>]; void; null; this>
<junit.textui.TestRunner; doRun[junit.framework.Test]; junit.framework.TestResult; junit.textui.TestRunner; run[junit.framework.Test]; junit.framework.TestResult; null; runner>
<junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; junit.textui.TestRunner; runAndWait[junit.framework.Test]; void; null; aTestRunner>
<junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; junit.textui.TestRunner; doRun[junit.framework.Test]; junit.framework.TestResult; null; this>
<junit.textui.TestRunner; createTestResult[]; junit.framework.TestResult; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; this>
<junit.framework.TestResult; addListener[junit.framework.TestListener]; void; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; result>
<java.lang.System; currentTimeMillis[]; long; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; System>
<junit.framework.Test; run[junit.framework.TestResult]; void; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; suite>
<java.lang.System; currentTimeMillis[]; long; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; System>
<junit.textui.ResultPrinter; print[junit.framework.TestResult, long]; void; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; fPrinter>
<junit.textui.TestRunner; pause[boolean]; void; junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; null; this>
<junit.textui.ResultPrinter; printWaitPrompt[]; void; junit.textui.TestRunner; pause[boolean]; void; null; fPrinter>
<java.io.InputStream; read[]; int; junit.textui.TestRunner; pause[boolean]; void; null; System.in>
<junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; junit.textui.TestRunner; main[java.lang.String[]]; void; null; aTestRunner>
<junit.framework.TestResult; wasSuccessful[]; boolean; junit.textui.TestRunner; main[java.lang.String[]]; void; null; r>
<java.lang.System; exit[int]; void; junit.textui.TestRunner; main[java.lang.String[]]; void; null; System>
<java.lang.System; exit[int]; void; junit.textui.TestRunner; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.TestRunner; main[java.lang.String[]]; void; null; System.err>
<java.lang.Throwable; getMessage[]; java.lang.String; junit.textui.TestRunner; main[java.lang.String[]]; void; null; e>
<java.lang.System; exit[int]; void; junit.textui.TestRunner; main[java.lang.String[]]; void; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; args[i]>
<junit.runner.BaseTestRunner; extractClassName[java.lang.String]; java.lang.String; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; args[i]>
<java.lang.String; lastIndexOf[int]; int; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; arg>
<java.lang.String; substring[int, int]; java.lang.String; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; arg>
<java.lang.String; substring[int]; java.lang.String; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; arg>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; args[i]>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; System.err>
<junit.runner.Version; id[]; java.lang.String; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; Version>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; testCase>
<java.lang.String; equals[java.lang.Object]; boolean; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; method>
<junit.textui.TestRunner; runSingleMethod[java.lang.String, java.lang.String, boolean]; junit.framework.TestResult; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; this>
<junit.runner.BaseTestRunner; getTest[java.lang.String]; junit.framework.Test; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; this>
<junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; junit.textui.TestRunner; start[java.lang.String[]]; junit.framework.TestResult; null; this>
<java.lang.Class; asSubclass[java.lang.Class<junit.framework.TestCase>]; java.lang.Class<? extends junit.framework.TestCase>; junit.textui.TestRunner; runSingleMethod[java.lang.String, java.lang.String, boolean]; junit.framework.TestResult; null; loadSuiteClass(testCase)>
<junit.runner.BaseTestRunner; loadSuiteClass[java.lang.String]; java.lang.Class<?>; junit.textui.TestRunner; runSingleMethod[java.lang.String, java.lang.String, boolean]; junit.framework.TestResult; asSubclass[java.lang.Class<junit.framework.TestCase>]; this>
<junit.framework.TestSuite; createTest[java.lang.Class<?>, java.lang.String]; junit.framework.Test; junit.textui.TestRunner; runSingleMethod[java.lang.String, java.lang.String, boolean]; junit.framework.TestResult; null; TestSuite>
<junit.textui.TestRunner; doRun[junit.framework.Test, boolean]; junit.framework.TestResult; junit.textui.TestRunner; runSingleMethod[java.lang.String, java.lang.String, boolean]; junit.framework.TestResult; null; this>
<java.io.PrintStream; println[java.lang.String]; void; junit.textui.TestRunner; runFailed[java.lang.String]; void; null; System.err>
<java.lang.System; exit[int]; void; junit.textui.TestRunner; runFailed[java.lang.String]; void; null; System>
<junit.extensions.TestSetup; setUp[]; void; java.lang.Object; protect[]; void; null; this>
<junit.extensions.TestDecorator; basicRun[junit.framework.TestResult]; void; java.lang.Object; protect[]; void; null; this>
<junit.extensions.TestSetup; tearDown[]; void; java.lang.Object; protect[]; void; null; this>
<junit.framework.TestResult; runProtected[junit.framework.Test, junit.framework.Protectable]; void; junit.extensions.TestSetup; run[junit.framework.TestResult]; void; null; result>
<junit.extensions.ActiveTestSuite; waitUntilFinished[]; void; junit.extensions.ActiveTestSuite; run[junit.framework.TestResult]; void; null; this>
<junit.framework.Test; run[junit.framework.TestResult]; void; java.lang.Thread; run[]; void; null; test>
<junit.extensions.ActiveTestSuite; runFinished[]; void; java.lang.Thread; run[]; void; null; ActiveTestSuite.this>
<java.lang.Thread; start[]; void; junit.extensions.ActiveTestSuite; runTest[junit.framework.Test, junit.framework.TestResult]; void; null; t>
<junit.framework.TestSuite; testCount[]; int; junit.extensions.ActiveTestSuite; waitUntilFinished[]; void; null; this>
<java.lang.Object; wait[]; void; junit.extensions.ActiveTestSuite; waitUntilFinished[]; void; null; this>
<java.lang.Object; notifyAll[]; void; junit.extensions.ActiveTestSuite; runFinished[]; void; null; this>
<junit.framework.TestResult; shouldStop[]; boolean; junit.extensions.RepeatedTest; run[junit.framework.TestResult]; void; null; result>
<junit.framework.Test; run[junit.framework.TestResult]; void; junit.extensions.TestDecorator; basicRun[junit.framework.TestResult]; void; null; fTest>
<junit.framework.Test; countTestCases[]; int; junit.extensions.TestDecorator; countTestCases[]; int; null; fTest>
<junit.extensions.TestDecorator; basicRun[junit.framework.TestResult]; void; junit.extensions.TestDecorator; run[junit.framework.TestResult]; void; null; this>
<java.lang.Object; toString[]; java.lang.String; junit.extensions.TestDecorator; toString[]; java.lang.String; null; fTest>
<org.junit.rules.TemporaryFolder; create[]; void; org.junit.rules.TemporaryFolder; before[]; void; null; this>
<org.junit.rules.TemporaryFolder; delete[]; void; org.junit.rules.TemporaryFolder; after[]; void; null; this>
<org.junit.rules.TemporaryFolder; newFolder[]; java.io.File; org.junit.rules.TemporaryFolder; create[]; void; null; this>
<org.junit.rules.TemporaryFolder; getRoot[]; java.io.File; org.junit.rules.TemporaryFolder; newFile[java.lang.String]; java.io.File; null; this>
<java.io.File; createNewFile[]; boolean; org.junit.rules.TemporaryFolder; newFile[java.lang.String]; java.io.File; null; file>
<java.io.File; createTempFile[java.lang.String, java.lang.String, java.io.File]; java.io.File; org.junit.rules.TemporaryFolder; newFile[]; java.io.File; null; File>
<org.junit.rules.TemporaryFolder; getRoot[]; java.io.File; org.junit.rules.TemporaryFolder; newFolder[java.lang.String[]]; java.io.File; null; this>
<java.io.File; mkdir[]; boolean; org.junit.rules.TemporaryFolder; newFolder[java.lang.String[]]; java.io.File; null; file>
<java.io.File; createTempFile[java.lang.String, java.lang.String, java.io.File]; java.io.File; org.junit.rules.TemporaryFolder; newFolder[]; java.io.File; null; File>
<java.io.File; delete[]; boolean; org.junit.rules.TemporaryFolder; newFolder[]; java.io.File; null; createdFolder>
<java.io.File; mkdir[]; boolean; org.junit.rules.TemporaryFolder; newFolder[]; java.io.File; null; createdFolder>
<org.junit.rules.TemporaryFolder; recursiveDelete[java.io.File]; void; org.junit.rules.TemporaryFolder; delete[]; void; null; this>
<java.io.File; listFiles[]; java.io.File[]; org.junit.rules.TemporaryFolder; recursiveDelete[java.io.File]; void; null; file>
<org.junit.rules.TemporaryFolder; recursiveDelete[java.io.File]; void; org.junit.rules.TemporaryFolder; recursiveDelete[java.io.File]; void; null; this>
<java.io.File; delete[]; boolean; org.junit.rules.TemporaryFolder; recursiveDelete[java.io.File]; void; null; file>
<org.junit.rules.TestWatchman; starting[org.junit.runners.model.FrameworkMethod]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; base>
<org.junit.rules.TestWatchman; succeeded[org.junit.runners.model.FrameworkMethod]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.rules.TestWatchman; failed[java.lang.Throwable, org.junit.runners.model.FrameworkMethod]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.rules.TestWatchman; finished[org.junit.runners.model.FrameworkMethod]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; base>
<org.junit.rules.Verifier; verify[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runner.Description; getMethodName[]; java.lang.String; org.junit.rules.TestName; starting[org.junit.runner.Description]; void; null; d>
<java.util.Collections; emptyList[]; java.util.List<org.junit.rules.TestRule>; org.junit.rules.TestName; getMethodName[]; java.lang.String; null; Collections>
<org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; org.junit.rules.RuleChain; org.junit.rules.RuleChain; outerRule[org.junit.rules.TestRule]; org.junit.rules.RuleChain; null; emptyRuleChain()>
<org.junit.rules.RuleChain; emptyRuleChain[]; org.junit.rules.RuleChain; org.junit.rules.RuleChain; outerRule[org.junit.rules.TestRule]; org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; this>
<java.util.List; add[org.junit.rules.TestRule]; boolean; org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; org.junit.rules.RuleChain; null; rulesOfNewChain>
<java.util.List; addAll[java.util.Collection<? extends org.junit.rules.TestRule>]; boolean; org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; org.junit.rules.RuleChain; null; rulesOfNewChain>
<org.junit.rules.TestRule; apply[org.junit.runners.model.Statement, org.junit.runner.Description]; org.junit.runners.model.Statement; org.junit.rules.RuleChain; apply[org.junit.runners.model.Statement, org.junit.runner.Description]; org.junit.runners.model.Statement; null; each>
<org.junit.rules.TestWatcher; starting[org.junit.runner.Description]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; base>
<org.junit.rules.TestWatcher; succeeded[org.junit.runner.Description]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.rules.TestWatcher; failed[java.lang.Throwable, org.junit.runner.Description]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.rules.TestWatcher; finished[org.junit.runner.Description]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; org.junit.rules.ErrorCollector; verify[]; void; null; MultipleFailureException>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.rules.ErrorCollector; addError[java.lang.Throwable]; void; null; errors>
<org.junit.rules.ErrorCollector; checkThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; org.junit.rules.ErrorCollector; checkThat[T, org.hamcrest.Matcher<T>]; void; null; this>
<org.junit.rules.ErrorCollector; checkSucceeds[java.util.concurrent.Callable<java.lang.Object>]; java.lang.Object; org.junit.rules.ErrorCollector; checkThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; this>
<org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; java.lang.Object; call[]; java.lang.Object; null; this>
<java.util.concurrent.Callable; call[]; java.lang.Object; org.junit.rules.ErrorCollector; checkSucceeds[java.util.concurrent.Callable<java.lang.Object>]; java.lang.Object; null; callable>
<org.junit.rules.ErrorCollector; addError[java.lang.Throwable]; void; org.junit.rules.ErrorCollector; checkSucceeds[java.util.concurrent.Callable<java.lang.Object>]; java.lang.Object; null; this>
<org.junit.rules.RunRules; applyAll[org.junit.runners.model.Statement, java.lang.Iterable<org.junit.rules.TestRule>, org.junit.runner.Description]; org.junit.runners.model.Statement; org.junit.rules.RunRules; RunRules[org.junit.runners.model.Statement, java.lang.Iterable<org.junit.rules.TestRule>, org.junit.runner.Description]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.rules.RunRules; evaluate[]; void; null; statement>
<org.junit.rules.TestRule; apply[org.junit.runners.model.Statement, org.junit.runner.Description]; org.junit.runners.model.Statement; org.junit.rules.RunRules; applyAll[org.junit.runners.model.Statement, java.lang.Iterable<org.junit.rules.TestRule>, org.junit.runner.Description]; org.junit.runners.model.Statement; null; each>
<org.junit.internal.matchers.CombinableMatcher; and[org.hamcrest.Matcher<? extends java.lang.Object>]; org.junit.internal.matchers.CombinableMatcher<java.lang.Object>; org.junit.rules.ExpectedException; expect[org.hamcrest.Matcher<?>]; void; null; both(fMatcher)>
<org.junit.matchers.JUnitMatchers; both[org.hamcrest.Matcher<java.lang.Object>]; org.junit.internal.matchers.CombinableMatcher<java.lang.Object>; org.junit.rules.ExpectedException; expect[org.hamcrest.Matcher<?>]; void; and[org.hamcrest.Matcher<? extends java.lang.Object>]; this>
<org.junit.rules.ExpectedException; expect[org.hamcrest.Matcher<?>]; void; org.junit.rules.ExpectedException; expect[java.lang.Class<? extends java.lang.Throwable>]; void; null; this>
<org.hamcrest.CoreMatchers; instanceOf[java.lang.Class<?>]; org.hamcrest.Matcher<java.lang.Object>; org.junit.rules.ExpectedException; expect[java.lang.Class<? extends java.lang.Throwable>]; void; null; this>
<org.junit.rules.ExpectedException; expectMessage[org.hamcrest.Matcher<java.lang.String>]; void; org.junit.rules.ExpectedException; expectMessage[java.lang.String]; void; null; this>
<org.junit.matchers.JUnitMatchers; containsString[java.lang.String]; org.hamcrest.Matcher<java.lang.String>; org.junit.rules.ExpectedException; expectMessage[java.lang.String]; void; null; this>
<org.junit.rules.ExpectedException; expect[org.hamcrest.Matcher<?>]; void; org.junit.rules.ExpectedException; expectMessage[org.hamcrest.Matcher<java.lang.String>]; void; null; this>
<org.junit.rules.ExpectedException; hasMessage[org.hamcrest.Matcher<java.lang.String>]; org.hamcrest.Matcher<java.lang.Throwable>; org.junit.rules.ExpectedException; expectMessage[org.hamcrest.Matcher<java.lang.String>]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.rules.ExpectedException.ExpectedExceptionStatement; evaluate[]; void; null; fNext>
<org.junit.Assert; assertThat[java.lang.Object, org.hamcrest.Matcher<java.lang.Object>]; void; org.junit.rules.ExpectedException.ExpectedExceptionStatement; evaluate[]; void; null; Assert>
<org.hamcrest.StringDescription; toString[org.hamcrest.SelfDescribing]; java.lang.String; org.junit.rules.ExpectedException.ExpectedExceptionStatement; evaluate[]; void; null; StringDescription>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.TypeSafeMatcher<java.lang.Throwable>; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Description; appendDescriptionOf[org.hamcrest.SelfDescribing]; org.hamcrest.Description; org.junit.internal.matchers.TypeSafeMatcher<java.lang.Throwable>; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.junit.internal.matchers.TypeSafeMatcher<java.lang.Throwable>; matchesSafely[java.lang.Throwable]; boolean; null; matcher>
<java.lang.Throwable; getMessage[]; java.lang.String; org.junit.internal.matchers.TypeSafeMatcher<java.lang.Throwable>; matchesSafely[java.lang.Throwable]; boolean; null; item>
<org.junit.rules.ExternalResource; statement[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.rules.ExternalResource; apply[org.junit.runners.model.Statement, org.junit.runner.Description]; org.junit.runners.model.Statement; null; this>
<org.junit.rules.ExternalResource; before[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; base>
<org.junit.rules.ExternalResource; after[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[T]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.matchers.JUnitMatchers; hasItem[T]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; IsCollectionContaining>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[org.hamcrest.Matcher<? extends T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.matchers.JUnitMatchers; hasItem[org.hamcrest.Matcher<? extends T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; IsCollectionContaining>
<org.junit.internal.matchers.IsCollectionContaining; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.matchers.JUnitMatchers; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; IsCollectionContaining>
<org.junit.internal.matchers.IsCollectionContaining; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.matchers.JUnitMatchers; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; IsCollectionContaining>
<org.junit.internal.matchers.Each; each[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.matchers.JUnitMatchers; everyItem[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; Each>
<org.junit.internal.matchers.StringContains; containsString[java.lang.String]; org.hamcrest.Matcher<java.lang.String>; org.junit.matchers.JUnitMatchers; containsString[java.lang.String]; org.hamcrest.Matcher<java.lang.String>; null; StringContains>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; assertTrue[java.lang.String, boolean]; void; null; this>
<org.junit.Assert; assertTrue[java.lang.String, boolean]; void; org.junit.Assert; assertTrue[boolean]; void; null; this>
<org.junit.Assert; assertTrue[java.lang.String, boolean]; void; org.junit.Assert; assertFalse[java.lang.String, boolean]; void; null; this>
<org.junit.Assert; assertFalse[java.lang.String, boolean]; void; org.junit.Assert; assertFalse[boolean]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; fail[]; void; null; this>
<org.junit.Assert; isEquals[java.lang.Object, java.lang.Object]; boolean; org.junit.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.Assert; isEquals[java.lang.Object, java.lang.Object]; boolean; null; expected>
<org.junit.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertEquals[java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, java.lang.Object[], java.lang.Object[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, java.lang.Object[], java.lang.Object[]]; void; org.junit.Assert; assertArrayEquals[java.lang.Object[], java.lang.Object[]]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, byte[], byte[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, byte[], byte[]]; void; org.junit.Assert; assertArrayEquals[byte[], byte[]]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, char[], char[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, char[], char[]]; void; org.junit.Assert; assertArrayEquals[char[], char[]]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, short[], short[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, short[], short[]]; void; org.junit.Assert; assertArrayEquals[short[], short[]]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, int[], int[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, int[], int[]]; void; org.junit.Assert; assertArrayEquals[int[], int[]]; void; null; this>
<org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, long[], long[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.String, long[], long[]]; void; org.junit.Assert; assertArrayEquals[long[], long[]]; void; null; this>
<org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, double[], double[], double]; void; null; new InexactComparisonCriteria(delta)>
<org.junit.Assert; assertArrayEquals[java.lang.String, double[], double[], double]; void; org.junit.Assert; assertArrayEquals[double[], double[], double]; void; null; this>
<org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertArrayEquals[java.lang.String, float[], float[], float]; void; null; new InexactComparisonCriteria(delta)>
<org.junit.Assert; assertArrayEquals[java.lang.String, float[], float[], float]; void; org.junit.Assert; assertArrayEquals[float[], float[], float]; void; null; this>
<org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; internalArrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; new ExactComparisonCriteria()>
<java.lang.Double; compare[double, double]; int; org.junit.Assert; assertEquals[java.lang.String, double, double, double]; void; null; Double>
<java.lang.Math; abs[double]; double; org.junit.Assert; assertEquals[java.lang.String, double, double, double]; void; null; Math>
<org.junit.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertEquals[java.lang.String, double, double, double]; void; null; this>
<org.junit.Assert; assertEquals[java.lang.String, long, long]; void; org.junit.Assert; assertEquals[long, long]; void; null; this>
<org.junit.Assert; assertEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertEquals[java.lang.String, long, long]; void; null; this>
<org.junit.Assert; assertEquals[java.lang.String, double, double]; void; org.junit.Assert; assertEquals[double, double]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; assertEquals[java.lang.String, double, double]; void; null; this>
<org.junit.Assert; assertEquals[java.lang.String, double, double, double]; void; org.junit.Assert; assertEquals[double, double, double]; void; null; this>
<org.junit.Assert; assertTrue[java.lang.String, boolean]; void; org.junit.Assert; assertNotNull[java.lang.String, java.lang.Object]; void; null; this>
<org.junit.Assert; assertNotNull[java.lang.String, java.lang.Object]; void; org.junit.Assert; assertNotNull[java.lang.Object]; void; null; this>
<org.junit.Assert; assertTrue[java.lang.String, boolean]; void; org.junit.Assert; assertNull[java.lang.String, java.lang.Object]; void; null; this>
<org.junit.Assert; assertNull[java.lang.String, java.lang.Object]; void; org.junit.Assert; assertNull[java.lang.Object]; void; null; this>
<org.junit.Assert; failNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; assertSame[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertSame[java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; failSame[java.lang.String]; void; org.junit.Assert; assertNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; assertNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.Assert; assertNotSame[java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; failSame[java.lang.String]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; failNotSame[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; org.junit.Assert; failNotEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; message>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; String>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; String>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; expectedString>
<org.junit.Assert; formatClassAndValue[java.lang.Object, java.lang.String]; java.lang.String; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; this>
<org.junit.Assert; formatClassAndValue[java.lang.Object, java.lang.String]; java.lang.String; org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; null; this>
<java.lang.Class; getName[]; java.lang.String; org.junit.Assert; formatClassAndValue[java.lang.Object, java.lang.String]; java.lang.String; null; value.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; org.junit.Assert; formatClassAndValue[java.lang.Object, java.lang.String]; java.lang.String; getName[]; value>
<org.junit.Assert; assertArrayEquals[java.lang.String, java.lang.Object[], java.lang.Object[]]; void; org.junit.Assert; assertEquals[java.lang.String, java.lang.Object[], java.lang.Object[]]; void; null; this>
<org.junit.Assert; assertArrayEquals[java.lang.Object[], java.lang.Object[]]; void; org.junit.Assert; assertEquals[java.lang.Object[], java.lang.Object[]]; void; null; this>
<org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; org.junit.Assert; assertThat[T, org.hamcrest.Matcher<T>]; void; null; this>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; matcher>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<org.hamcrest.Description; appendDescriptionOf[org.hamcrest.SelfDescribing]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<org.hamcrest.Description; appendValue[java.lang.Object]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<java.lang.Object; toString[]; java.lang.String; org.junit.Assert; assertThat[java.lang.String, T, org.hamcrest.Matcher<T>]; void; null; description>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.experimental.theories.PotentialAssignment; toString[]; java.lang.String; null; String>
<org.junit.experimental.theories.ParameterSignature; signatures[java.lang.Class<?>[], java.lang.annotation.Annotation[][]]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Method]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; null; this>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Method]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; null; method>
<java.lang.reflect.Method; getParameterAnnotations[]; java.lang.annotation.Annotation[][]; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Method]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; null; method>
<org.junit.experimental.theories.ParameterSignature; signatures[java.lang.Class<?>[], java.lang.annotation.Annotation[][]]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Constructor<?>]; java.util.List<org.junit.experimental.theories.ParameterSignature>; null; this>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Constructor<?>]; java.util.List<org.junit.experimental.theories.ParameterSignature>; null; constructor>
<java.lang.reflect.Constructor; getParameterAnnotations[]; java.lang.annotation.Annotation[][]; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Constructor<?>]; java.util.List<org.junit.experimental.theories.ParameterSignature>; null; constructor>
<java.util.ArrayList; add[org.junit.experimental.theories.ParameterSignature]; boolean; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.Class<?>[], java.lang.annotation.Annotation[][]]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; null; sigs>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.experimental.theories.ParameterSignature; canAcceptType[java.lang.Class<?>]; boolean; null; type>
<java.util.Arrays; asList[java.lang.annotation.Annotation[]]; java.util.List<java.lang.annotation.Annotation>; org.junit.experimental.theories.ParameterSignature; getAnnotations[]; java.util.List<java.lang.annotation.Annotation>; null; Arrays>
<java.lang.Class; isArray[]; boolean; org.junit.experimental.theories.ParameterSignature; canAcceptArrayType[java.lang.Class<?>]; boolean; null; type>
<org.junit.experimental.theories.ParameterSignature; canAcceptType[java.lang.Class<?>]; boolean; org.junit.experimental.theories.ParameterSignature; canAcceptArrayType[java.lang.Class<?>]; boolean; null; this>
<java.lang.Class; getComponentType[]; java.lang.Class<?>; org.junit.experimental.theories.ParameterSignature; canAcceptArrayType[java.lang.Class<?>]; boolean; null; type>
<org.junit.experimental.theories.ParameterSignature; getAnnotation[java.lang.Class<>]; ; org.junit.experimental.theories.ParameterSignature; hasAnnotation[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; null; this>
<org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.Class<T>]; T; null; this>
<java.lang.Class; isInstance[java.lang.Object]; boolean; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; null; annotationType>
<java.lang.Class; cast[java.lang.Object]; T; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; null; annotationType>
<org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; null; this>
<java.lang.Class; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; null; each.annotationType()>
<java.lang.annotation.Annotation; annotationType[]; java.lang.Class<? extends java.lang.annotation.Annotation>; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; getAnnotations[]; each>
<java.lang.Class; cast[java.lang.Object]; T; org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.annotation.Annotation[], java.lang.Class<T>, int]; T; null; annotationType>
<org.junit.experimental.theories.ParameterSignature; getAnnotations[]; java.util.List<java.lang.annotation.Annotation>; org.junit.experimental.theories.ParameterSignature; getAnnotation[java.lang.Class<T>]; T; null; this>
<java.lang.Class; isInstance[java.lang.Object]; boolean; org.junit.experimental.theories.ParameterSignature; getAnnotation[java.lang.Class<T>]; T; null; annotationType>
<java.lang.Class; cast[java.lang.Object]; T; org.junit.experimental.theories.ParameterSignature; getAnnotation[java.lang.Class<T>]; T; null; annotationType>
<org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Constructor<?>]; java.util.List<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; null; ParameterSignature>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; null; testClass>
<java.util.List; addAll[java.util.Collection<? extends org.junit.experimental.theories.ParameterSignature>]; boolean; org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; null; signatures>
<org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Method]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; addAll[java.util.Collection<? extends org.junit.experimental.theories.ParameterSignature>]; ParameterSignature>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; isComplete[]; boolean; null; fUnassigned>
<java.util.List; get[int]; org.junit.experimental.theories.ParameterSignature; org.junit.experimental.theories.internal.Assignments; nextUnassigned[]; org.junit.experimental.theories.ParameterSignature; null; fUnassigned>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; assigned>
<java.util.List; subList[int, int]; java.util.List<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; fUnassigned>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; fUnassigned>
<org.junit.experimental.theories.PotentialAssignment; getValue[]; java.lang.Object; org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; null; fAssigned.get(i)>
<java.util.List; get[int]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; getValue[]; fAssigned>
<org.junit.experimental.theories.internal.Assignments; nextUnassigned[]; org.junit.experimental.theories.ParameterSignature; org.junit.experimental.theories.internal.Assignments; potentialsForNextUnassigned[]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; this>
<org.junit.experimental.theories.ParameterSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; org.junit.experimental.theories.internal.Assignments; potentialsForNextUnassigned[]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; getSupplier(unassigned)>
<org.junit.experimental.theories.internal.Assignments; getSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; org.junit.experimental.theories.internal.Assignments; potentialsForNextUnassigned[]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; getValueSources[org.junit.experimental.theories.ParameterSignature]; this>
<org.junit.experimental.theories.internal.Assignments; getAnnotatedSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; org.junit.experimental.theories.internal.Assignments; getSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; null; this>
<org.junit.experimental.theories.ParameterSignature; findDeepAnnotation[java.lang.Class<org.junit.experimental.theories.ParametersSuppliedBy>]; org.junit.experimental.theories.ParametersSuppliedBy; org.junit.experimental.theories.internal.Assignments; getAnnotatedSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; null; unassigned>
<java.lang.Class; newInstance[]; ; org.junit.experimental.theories.internal.Assignments; getAnnotatedSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; null; annotation.value()>
<org.junit.experimental.theories.ParametersSuppliedBy; value[]; java.lang.Class<? extends org.junit.experimental.theories.ParameterSupplier>; org.junit.experimental.theories.internal.Assignments; getAnnotatedSupplier[org.junit.experimental.theories.ParameterSignature]; org.junit.experimental.theories.ParameterSupplier; newInstance[]; annotation>
<org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; org.junit.experimental.theories.internal.Assignments; getConstructorArguments[boolean]; java.lang.Object[]; null; this>
<org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; org.junit.experimental.theories.internal.Assignments; getConstructorArguments[boolean]; java.lang.Object[]; null; this>
<org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; org.junit.experimental.theories.internal.Assignments; getMethodArguments[boolean]; java.lang.Object[]; null; this>
<org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; org.junit.experimental.theories.internal.Assignments; getMethodArguments[boolean]; java.lang.Object[]; null; this>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getMethodArguments[boolean]; java.lang.Object[]; null; fAssigned>
<org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; org.junit.experimental.theories.internal.Assignments; getAllArguments[boolean]; java.lang.Object[]; null; this>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getAllArguments[boolean]; java.lang.Object[]; null; fAssigned>
<org.junit.experimental.theories.ParameterSignature; signatures[java.lang.reflect.Constructor<?>]; java.util.List<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; null; ParameterSignature>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; null; fClass>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; null; signatures>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; null; fAssigned>
<org.junit.experimental.theories.PotentialAssignment; getDescription[]; java.lang.String; org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; null; fAssigned.get(i)>
<java.util.List; get[int]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; getDescription[]; fAssigned>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; ParameterizedAssertionError[java.lang.Throwable, java.lang.String, java.lang.Object[]]; void; null; String>
<org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; ParameterizedAssertionError[java.lang.Throwable, java.lang.String, java.lang.Object[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.experimental.theories.internal.ParameterizedAssertionError; equals[java.lang.Object]; boolean; null; toString()>
<java.lang.Throwable; toString[]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<java.lang.Object; toString[]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; equals[java.lang.Object]; boolean; null; obj>
<org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.lang.Object[]]; java.lang.String; null; this>
<java.util.Arrays; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.lang.Object[]]; java.lang.String; null; Arrays>
<java.util.Collection; iterator[]; java.util.Iterator<java.lang.Object>; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; values>
<java.util.Iterator; hasNext[]; boolean; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; iter>
<java.util.Iterator; next[]; java.lang.Object; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; iter>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; buffer>
<org.junit.experimental.theories.internal.ParameterizedAssertionError; stringValueOf[java.lang.Object]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; this>
<java.util.Iterator; hasNext[]; boolean; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; iter>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; buffer>
<java.lang.StringBuffer; toString[]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; buffer>
<java.lang.String; valueOf[java.lang.Object]; java.lang.String; org.junit.experimental.theories.internal.ParameterizedAssertionError; stringValueOf[java.lang.Object]; java.lang.String; null; String>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier.MethodParameterValue; getValue[]; java.lang.Object; null; fMethod>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.experimental.theories.internal.AllMembersSupplier.MethodParameterValue; getDescription[]; java.lang.String; null; fMethod>
<org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; org.junit.experimental.theories.internal.AllMembersSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; this>
<org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; org.junit.experimental.theories.internal.AllMembersSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; this>
<org.junit.experimental.theories.internal.AllMembersSupplier; addMultiPointMethods[java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; org.junit.experimental.theories.internal.AllMembersSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; this>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.experimental.theories.internal.AllMembersSupplier; addMultiPointMethods[java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; fClass>
<org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; org.junit.experimental.theories.internal.AllMembersSupplier; addMultiPointMethods[java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; this>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.experimental.theories.internal.AllMembersSupplier; addMultiPointMethods[java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; dataPointsMethod>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier; addMultiPointMethods[java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; dataPointsMethod>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; fClass>
<org.junit.experimental.theories.ParameterSignature; getType[]; java.lang.Class<?>; org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; sig>
<org.junit.runners.model.FrameworkMethod; producesType[java.lang.reflect.Type]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; dataPointMethod>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; list>
<java.lang.Class; getFields[]; java.lang.reflect.Field[]; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; fClass.getJavaClass()>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; getFields[]; fClass>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; Modifier>
<java.lang.reflect.Field; getModifiers[]; int; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<java.lang.reflect.Field; getType[]; java.lang.Class<?>; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<org.junit.experimental.theories.ParameterSignature; canAcceptArrayType[java.lang.Class<?>]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; sig>
<java.lang.reflect.Field; getAnnotation[java.lang.Class<org.junit.experimental.theories.DataPoints>]; org.junit.experimental.theories.DataPoints; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; this>
<java.lang.reflect.Field; getName[]; java.lang.String; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<org.junit.experimental.theories.internal.AllMembersSupplier; getStaticFieldValue[java.lang.reflect.Field]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; this>
<org.junit.experimental.theories.ParameterSignature; canAcceptType[java.lang.Class<?>]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; sig>
<java.lang.reflect.Field; getAnnotation[java.lang.Class<org.junit.experimental.theories.DataPoint>]; org.junit.experimental.theories.DataPoint; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; list>
<org.junit.experimental.theories.PotentialAssignment; forValue[java.lang.String, java.lang.Object]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; PotentialAssignment>
<java.lang.reflect.Field; getName[]; java.lang.String; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; field>
<org.junit.experimental.theories.internal.AllMembersSupplier; getStaticFieldValue[java.lang.reflect.Field]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; this>
<java.lang.reflect.Array; getLength[java.lang.Object]; int; org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; null; Array>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; null; list>
<org.junit.experimental.theories.PotentialAssignment; forValue[java.lang.String, java.lang.Object]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; null; PotentialAssignment>
<java.lang.reflect.Array; get[java.lang.Object, int]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; null; Array>
<java.lang.reflect.Field; get[java.lang.Object]; java.lang.Object; org.junit.experimental.theories.internal.AllMembersSupplier; getStaticFieldValue[java.lang.reflect.Field]; java.lang.Object; null; field>
<org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; org.junit.experimental.theories.Theories; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.Class; getDeclaredFields[]; java.lang.reflect.Field[]; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; getTestClass().getJavaClass()>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; getDeclaredFields[]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; getJavaClass[]; this>
<java.lang.reflect.Field; getAnnotation[java.lang.Class<org.junit.experimental.theories.DataPoint>]; org.junit.experimental.theories.DataPoint; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; each>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; Modifier>
<java.lang.reflect.Field; getModifiers[]; int; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Field; getName[]; java.lang.String; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; each>
<org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; org.junit.experimental.theories.Theories; validateConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.experimental.theories.Theories; validateTestMethods[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.FrameworkMethod; getAnnotation[java.lang.Class<org.junit.experimental.theories.Theory>]; org.junit.experimental.theories.Theory; org.junit.experimental.theories.Theories; validateTestMethods[java.util.List<java.lang.Throwable>]; void; null; each>
<org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; org.junit.experimental.theories.Theories; validateTestMethods[java.util.List<java.lang.Throwable>]; void; null; each>
<org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; org.junit.experimental.theories.Theories; validateTestMethods[java.util.List<java.lang.Throwable>]; void; null; each>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; this>
<java.util.List; removeAll[java.util.Collection<?>]; boolean; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; testMethods>
<java.util.List; addAll[java.util.Collection<? extends org.junit.runners.model.FrameworkMethod>]; boolean; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; testMethods>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.experimental.theories.Theories; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.experimental.theories.Theories$TheoryAnchor; runWithAssignment[org.junit.experimental.theories.internal.Assignments]; void; org.junit.experimental.theories.Theories.TheoryAnchor; evaluate[]; void; null; this>
<org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; org.junit.experimental.theories.Theories.TheoryAnchor; evaluate[]; void; null; Assignments>
<org.junit.runners.model.FrameworkMethod; getMethod[]; java.lang.reflect.Method; org.junit.experimental.theories.Theories.TheoryAnchor; evaluate[]; void; null; fTestMethod>
<org.junit.experimental.theories.Theories$TheoryAnchor; getTestClass[]; org.junit.runners.model.TestClass; org.junit.experimental.theories.Theories.TheoryAnchor; evaluate[]; void; null; this>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.experimental.theories.Theories.TheoryAnchor; evaluate[]; void; null; Assert>
<org.junit.experimental.theories.internal.Assignments; isComplete[]; boolean; org.junit.experimental.theories.Theories.TheoryAnchor; runWithAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; parameterAssignment>
<org.junit.experimental.theories.Theories$TheoryAnchor; runWithIncompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; org.junit.experimental.theories.Theories.TheoryAnchor; runWithAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; this>
<org.junit.experimental.theories.Theories$TheoryAnchor; runWithCompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; org.junit.experimental.theories.Theories.TheoryAnchor; runWithAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; this>
<org.junit.experimental.theories.internal.Assignments; potentialsForNextUnassigned[]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; org.junit.experimental.theories.Theories.TheoryAnchor; runWithIncompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; incomplete>
<org.junit.experimental.theories.Theories$TheoryAnchor; runWithAssignment[org.junit.experimental.theories.internal.Assignments]; void; org.junit.experimental.theories.Theories.TheoryAnchor; runWithIncompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; this>
<org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; org.junit.experimental.theories.Theories.TheoryAnchor; runWithIncompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; incomplete>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.experimental.theories.Theories.TheoryAnchor; runWithCompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; null; new BlockJUnit4ClassRunner(getTestClass().getJavaClass()){
  @Override protected void collectInitializationErrors(  List<Throwable> errors){
  }
  @Override public Statement methodBlock(  FrameworkMethod method){
    final Statement statement=super.methodBlock(method);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try {
          statement.evaluate();
          handleDataPointSuccess();
        }
 catch (        AssumptionViolatedException e) {
          handleAssumptionViolation(e);
        }
catch (        Throwable e) {
          reportParameterizedError(e,complete.getArgumentStrings(nullsOk()));
        }
      }
    }
;
  }
  @Override protected Statement methodInvoker(  FrameworkMethod method,  Object test){
    return methodCompletesWithParameters(method,complete,test);
  }
  @Override public Object createTest() throws Exception {
    return getTestClass().getOnlyConstructor().newInstance(complete.getConstructorArguments(nullsOk()));
  }
}
.methodBlock(fTestMethod)>
<org.junit.experimental.theories.Theories$TheoryAnchor$1; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; org.junit.experimental.theories.Theories.TheoryAnchor; runWithCompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; evaluate[]; new BlockJUnit4ClassRunner(getTestClass().getJavaClass()){
  @Override protected void collectInitializationErrors(  List<Throwable> errors){
  }
  @Override public Statement methodBlock(  FrameworkMethod method){
    final Statement statement=super.methodBlock(method);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try {
          statement.evaluate();
          handleDataPointSuccess();
        }
 catch (        AssumptionViolatedException e) {
          handleAssumptionViolation(e);
        }
catch (        Throwable e) {
          reportParameterizedError(e,complete.getArgumentStrings(nullsOk()));
        }
      }
    }
;
  }
  @Override protected Statement methodInvoker(  FrameworkMethod method,  Object test){
    return methodCompletesWithParameters(method,complete,test);
  }
  @Override public Object createTest() throws Exception {
    return getTestClass().getOnlyConstructor().newInstance(complete.getConstructorArguments(nullsOk()));
  }
}
>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.experimental.theories.Theories.TheoryAnchor; runWithCompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; methodBlock[org.junit.runners.model.FrameworkMethod]; getTestClass()>
<org.junit.experimental.theories.Theories$TheoryAnchor; getTestClass[]; org.junit.runners.model.TestClass; org.junit.experimental.theories.Theories.TheoryAnchor; runWithCompleteAssignment[org.junit.experimental.theories.internal.Assignments]; void; getJavaClass[]; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; statement>
<org.junit.experimental.theories.Theories$TheoryAnchor; handleDataPointSuccess[]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.experimental.theories.Theories$TheoryAnchor; handleAssumptionViolation[org.junit.internal.AssumptionViolatedException]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.experimental.theories.Theories$TheoryAnchor; reportParameterizedError[java.lang.Throwable, java.lang.Object[]]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; org.junit.runners.model.Statement; evaluate[]; void; null; complete>
<org.junit.experimental.theories.Theories$TheoryAnchor; nullsOk[]; boolean; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.experimental.theories.Theories$TheoryAnchor; methodCompletesWithParameters[org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodInvoker[org.junit.runners.model.FrameworkMethod, java.lang.Object]; org.junit.runners.model.Statement; null; this>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; null; getTestClass().getOnlyConstructor()>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; newInstance[java.lang.Object[]]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; getOnlyConstructor[]; this>
<org.junit.experimental.theories.internal.Assignments; getConstructorArguments[boolean]; java.lang.Object[]; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; null; complete>
<org.junit.experimental.theories.Theories$TheoryAnchor; nullsOk[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; null; this>
<org.junit.experimental.theories.internal.Assignments; getMethodArguments[boolean]; java.lang.Object[]; org.junit.runners.model.Statement; evaluate[]; void; null; complete>
<org.junit.experimental.theories.Theories$TheoryAnchor; nullsOk[]; boolean; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.runners.model.Statement; evaluate[]; void; null; method>
<java.util.List; add[org.junit.internal.AssumptionViolatedException]; boolean; org.junit.experimental.theories.Theories.TheoryAnchor; handleAssumptionViolation[org.junit.internal.AssumptionViolatedException]; void; null; fInvalidParameters>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.experimental.theories.Theories.TheoryAnchor; reportParameterizedError[java.lang.Throwable, java.lang.Object[]]; void; null; fTestMethod>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<org.junit.experimental.theories.Theory>]; org.junit.experimental.theories.Theory; org.junit.experimental.theories.Theories.TheoryAnchor; nullsOk[]; boolean; null; fTestMethod.getMethod()>
<org.junit.runners.model.FrameworkMethod; getMethod[]; java.lang.reflect.Method; org.junit.experimental.theories.Theories.TheoryAnchor; nullsOk[]; boolean; getAnnotation[java.lang.Class<org.junit.experimental.theories.Theory>]; fTestMethod>
<org.junit.experimental.theories.Theory; nullsAccepted[]; boolean; org.junit.experimental.theories.Theories.TheoryAnchor; nullsOk[]; boolean; null; annotation>
<org.junit.experimental.theories.ParameterSignature; getAnnotation[java.lang.Class<org.junit.experimental.theories.suppliers.TestedOn>]; org.junit.experimental.theories.suppliers.TestedOn; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; sig>
<org.junit.experimental.theories.suppliers.TestedOn; ints[]; int[]; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; testedOn>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; list>
<org.junit.experimental.theories.PotentialAssignment; forValue[java.lang.String, java.lang.Object]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; PotentialAssignment>
<java.lang.Object; toString[]; java.lang.String; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; Arrays.asList(ints)>
<java.util.Arrays; asList[int[][]]; java.util.List<int[]>; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; toString[]; Arrays>
<org.junit.experimental.results.PrintableResult; testResult[org.junit.runner.Request]; org.junit.experimental.results.PrintableResult; org.junit.experimental.results.PrintableResult; testResult[java.lang.Class<?>]; org.junit.experimental.results.PrintableResult; null; this>
<org.junit.runner.Request; aClass[java.lang.Class<?>]; org.junit.runner.Request; org.junit.experimental.results.PrintableResult; testResult[java.lang.Class<?>]; org.junit.experimental.results.PrintableResult; null; Request>
<org.junit.runner.JUnitCore; run[org.junit.runner.Request]; org.junit.runner.Result; org.junit.experimental.results.PrintableResult; testResult[org.junit.runner.Request]; org.junit.experimental.results.PrintableResult; null; new JUnitCore()>
<org.junit.experimental.results.FailureList; result[]; org.junit.runner.Result; org.junit.experimental.results.PrintableResult; PrintableResult[java.util.List<org.junit.runner.notification.Failure>]; void; null; new FailureList(failures)>
<org.junit.internal.TextListener; testRunFinished[org.junit.runner.Result]; void; org.junit.experimental.results.PrintableResult; toString[]; java.lang.String; null; new TextListener(new PrintStream(stream))>
<java.io.ByteArrayOutputStream; toString[]; java.lang.String; org.junit.experimental.results.PrintableResult; toString[]; java.lang.String; null; stream>
<java.util.List; size[]; int; org.junit.experimental.results.PrintableResult; failureCount[]; int; null; result.getFailures()>
<org.junit.runner.Result; getFailures[]; java.util.List<org.junit.runner.notification.Failure>; org.junit.experimental.results.PrintableResult; failureCount[]; int; size[]; result>
<org.junit.experimental.results.ResultMatchers; failureCountIs[int]; org.hamcrest.Matcher<org.junit.experimental.results.PrintableResult>; org.junit.experimental.results.ResultMatchers; isSuccessful[]; org.hamcrest.Matcher<org.junit.experimental.results.PrintableResult>; null; this>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.TypeSafeMatcher<org.junit.experimental.results.PrintableResult>; describeTo[org.hamcrest.Description]; void; null; description>
<org.junit.experimental.results.PrintableResult; failureCount[]; int; org.junit.internal.matchers.TypeSafeMatcher<org.junit.experimental.results.PrintableResult>; matchesSafely[org.junit.experimental.results.PrintableResult]; boolean; null; item>
<java.lang.String; contains[java.lang.CharSequence]; boolean; org.hamcrest.BaseMatcher<java.lang.Object>; matches[java.lang.Object]; boolean; null; item.toString()>
<java.lang.Object; toString[]; java.lang.String; org.hamcrest.BaseMatcher<java.lang.Object>; matches[java.lang.Object]; boolean; contains[java.lang.CharSequence]; item>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.hamcrest.BaseMatcher<java.lang.Object>; matches[java.lang.Object]; boolean; null; failureCountIs(1)>
<org.junit.experimental.results.ResultMatchers; failureCountIs[int]; org.hamcrest.Matcher<org.junit.experimental.results.PrintableResult>; org.hamcrest.BaseMatcher<java.lang.Object>; matches[java.lang.Object]; boolean; matches[java.lang.Object]; this>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.hamcrest.BaseMatcher<java.lang.Object>; describeTo[org.hamcrest.Description]; void; null; description>
<java.lang.String; contains[java.lang.CharSequence]; boolean; org.hamcrest.BaseMatcher<org.junit.experimental.results.PrintableResult>; matches[java.lang.Object]; boolean; null; item.toString()>
<java.lang.Object; toString[]; java.lang.String; org.hamcrest.BaseMatcher<org.junit.experimental.results.PrintableResult>; matches[java.lang.Object]; boolean; contains[java.lang.CharSequence]; item>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.hamcrest.BaseMatcher<org.junit.experimental.results.PrintableResult>; describeTo[org.hamcrest.Description]; void; null; description>
<org.junit.runner.Result; createListener[]; org.junit.runner.notification.RunListener; org.junit.experimental.results.FailureList; result[]; org.junit.runner.Result; null; result>
<org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; org.junit.experimental.results.FailureList; result[]; org.junit.runner.Result; null; listener>
<java.lang.Class; getClasses[]; java.lang.Class<?>[]; org.junit.experimental.runners.Enclosed; Enclosed[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; klass>
<org.junit.experimental.max.MaxCore; storedLocally[java.io.File]; org.junit.experimental.max.MaxCore; org.junit.experimental.max.MaxCore; forFolder[java.lang.String]; org.junit.experimental.max.MaxCore; null; this>
<org.junit.experimental.max.MaxHistory; forFolder[java.io.File]; org.junit.experimental.max.MaxHistory; org.junit.experimental.max.MaxCore; MaxCore[java.io.File]; void; null; MaxHistory>
<org.junit.experimental.max.MaxCore; run[org.junit.runner.Request]; org.junit.runner.Result; org.junit.experimental.max.MaxCore; run[java.lang.Class<?>]; org.junit.runner.Result; null; this>
<org.junit.runner.Request; aClass[java.lang.Class<?>]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; run[java.lang.Class<?>]; org.junit.runner.Result; null; Request>
<org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request]; org.junit.runner.Result; null; this>
<org.junit.runner.JUnitCore; addListener[org.junit.runner.notification.RunListener]; void; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; null; core>
<org.junit.experimental.max.MaxHistory; listener[]; org.junit.runner.notification.RunListener; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; null; fHistory>
<org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; null; core>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; null; sortRequest(request)>
<org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; run[org.junit.runner.Request, org.junit.runner.JUnitCore]; org.junit.runner.Result; getRunner[]; this>
<org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; null; this>
<java.util.Collections; sort[java.util.List<org.junit.runner.Description>, java.util.Comparator<? super org.junit.runner.Description>]; void; org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; null; Collections>
<org.junit.experimental.max.MaxHistory; testComparator[]; java.util.Comparator<org.junit.runner.Description>; org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; null; fHistory>
<org.junit.experimental.max.MaxCore; constructLeafRequest[java.util.List<org.junit.runner.Description>]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; null; this>
<java.util.List; add[org.junit.runner.Runner]; boolean; org.junit.experimental.max.MaxCore; constructLeafRequest[java.util.List<org.junit.runner.Description>]; org.junit.runner.Request; null; runners>
<org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; constructLeafRequest[java.util.List<org.junit.runner.Description>]; org.junit.runner.Request; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; each.toString()>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; equals[java.lang.Object]; each>
<org.junit.runners.Suite; emptySuite[]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; Suite>
<java.lang.String; startsWith[java.lang.String]; boolean; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; each.toString()>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; startsWith[java.lang.String]; each>
<org.junit.experimental.max.MaxCore; getMalformedTestClass[org.junit.runner.Description]; java.lang.Class<?>; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; this>
<org.junit.runner.Description; getTestClass[]; java.lang.Class<?>; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; each>
<org.junit.runner.Description; getMethodName[]; java.lang.String; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; each>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; Request.aClass(type)>
<org.junit.runner.Request; aClass[java.lang.Class<?>]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; getRunner[]; Request>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; null; Request.method(type,methodName)>
<org.junit.runner.Request; method[java.lang.Class<?>, java.lang.String]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; buildRunner[org.junit.runner.Description]; org.junit.runner.Runner; getRunner[]; Request>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; org.junit.experimental.max.MaxCore; getMalformedTestClass[org.junit.runner.Description]; java.lang.Class<?>; null; Class>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; org.junit.experimental.max.MaxCore; getMalformedTestClass[org.junit.runner.Description]; java.lang.Class<?>; null; each.toString()>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxCore; getMalformedTestClass[org.junit.runner.Description]; java.lang.Class<?>; replace[java.lang.CharSequence, java.lang.CharSequence]; each>
<org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; org.junit.experimental.max.MaxCore; sortedLeavesForTest[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; null; this>
<org.junit.experimental.max.MaxCore; sortRequest[org.junit.runner.Request]; org.junit.runner.Request; org.junit.experimental.max.MaxCore; sortedLeavesForTest[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; null; this>
<org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; null; this>
<org.junit.runner.Runner; getDescription[]; org.junit.runner.Description; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; null; request.getRunner()>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Request]; java.util.List<org.junit.runner.Description>; getDescription[]; request>
<java.util.ArrayList; isEmpty[]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; description.getChildren()>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; isEmpty[]; description>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; description.toString()>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; equals[java.lang.Object]; description>
<java.util.List; add[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; results>
<org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; Description>
<java.util.List; add[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; results>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; description>
<org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; this>
<java.io.File; exists[]; boolean; org.junit.experimental.max.MaxHistory; forFolder[java.io.File]; org.junit.experimental.max.MaxHistory; null; file>
<org.junit.experimental.max.MaxHistory; readHistory[java.io.File]; org.junit.experimental.max.MaxHistory; org.junit.experimental.max.MaxHistory; forFolder[java.io.File]; org.junit.experimental.max.MaxHistory; null; this>
<java.lang.Throwable; printStackTrace[]; void; org.junit.experimental.max.MaxHistory; forFolder[java.io.File]; org.junit.experimental.max.MaxHistory; null; e>
<java.io.File; delete[]; boolean; org.junit.experimental.max.MaxHistory; forFolder[java.io.File]; org.junit.experimental.max.MaxHistory; null; file>
<java.io.ObjectInputStream; readObject[]; java.lang.Object; org.junit.experimental.max.MaxHistory; readHistory[java.io.File]; org.junit.experimental.max.MaxHistory; null; stream>
<java.io.ObjectInputStream; close[]; void; org.junit.experimental.max.MaxHistory; readHistory[java.io.File]; org.junit.experimental.max.MaxHistory; null; stream>
<java.io.FileInputStream; close[]; void; org.junit.experimental.max.MaxHistory; readHistory[java.io.File]; org.junit.experimental.max.MaxHistory; null; file>
<java.io.ObjectOutputStream; writeObject[java.lang.Object]; void; org.junit.experimental.max.MaxHistory; save[]; void; null; stream>
<java.io.ObjectOutputStream; close[]; void; org.junit.experimental.max.MaxHistory; save[]; void; null; stream>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory; getFailureTimestamp[org.junit.runner.Description]; java.lang.Long; null; fFailureTimestamps>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxHistory; getFailureTimestamp[org.junit.runner.Description]; java.lang.Long; null; key>
<java.util.Map; put[java.lang.String, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory; putTestFailureTimestamp[org.junit.runner.Description, long]; void; null; fFailureTimestamps>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxHistory; putTestFailureTimestamp[org.junit.runner.Description, long]; void; null; key>
<java.util.Map; containsKey[java.lang.Object]; boolean; org.junit.experimental.max.MaxHistory; isNewTest[org.junit.runner.Description]; boolean; null; fDurations>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxHistory; isNewTest[org.junit.runner.Description]; boolean; null; key>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory; getTestDuration[org.junit.runner.Description]; java.lang.Long; null; fDurations>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxHistory; getTestDuration[org.junit.runner.Description]; java.lang.Long; null; key>
<java.util.Map; put[java.lang.String, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory; putTestDuration[org.junit.runner.Description, long]; void; null; fDurations>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.experimental.max.MaxHistory; putTestDuration[org.junit.runner.Description, long]; void; null; description>
<java.lang.System; currentTimeMillis[]; long; org.junit.experimental.max.MaxHistory; putTestDuration[org.junit.runner.Description, long]; void; null; System>
<java.util.Map; put[org.junit.runner.Description, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory.RememberingListener; testStarted[org.junit.runner.Description]; void; null; starts>
<java.lang.System; nanoTime[]; long; org.junit.experimental.max.MaxHistory.RememberingListener; testStarted[org.junit.runner.Description]; void; null; System>
<java.lang.System; nanoTime[]; long; org.junit.experimental.max.MaxHistory.RememberingListener; testFinished[org.junit.runner.Description]; void; null; System>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory.RememberingListener; testFinished[org.junit.runner.Description]; void; null; starts>
<org.junit.experimental.max.MaxHistory; putTestDuration[org.junit.runner.Description, long]; void; org.junit.experimental.max.MaxHistory.RememberingListener; testFinished[org.junit.runner.Description]; void; null; this>
<org.junit.experimental.max.MaxHistory; putTestFailureTimestamp[org.junit.runner.Description, long]; void; org.junit.experimental.max.MaxHistory.RememberingListener; testFailure[org.junit.runner.notification.Failure]; void; null; this>
<org.junit.runner.notification.Failure; getDescription[]; org.junit.runner.Description; org.junit.experimental.max.MaxHistory.RememberingListener; testFailure[org.junit.runner.notification.Failure]; void; null; failure>
<org.junit.experimental.max.MaxHistory; save[]; void; org.junit.experimental.max.MaxHistory.RememberingListener; testRunFinished[org.junit.runner.Result]; void; null; this>
<org.junit.experimental.max.MaxHistory; isNewTest[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; this>
<org.junit.experimental.max.MaxHistory; isNewTest[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; this>
<java.lang.Long; compareTo[java.lang.Long]; int; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; getFailure(o2)>
<org.junit.experimental.max.MaxHistory$TestComparator; getFailure[org.junit.runner.Description]; java.lang.Long; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; compareTo[java.lang.Long]; this>
<org.junit.experimental.max.MaxHistory$TestComparator; getFailure[org.junit.runner.Description]; java.lang.Long; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; this>
<java.lang.Long; compareTo[java.lang.Long]; int; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; getTestDuration(o1)>
<org.junit.experimental.max.MaxHistory; getTestDuration[org.junit.runner.Description]; java.lang.Long; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; compareTo[java.lang.Long]; this>
<org.junit.experimental.max.MaxHistory; getTestDuration[org.junit.runner.Description]; java.lang.Long; org.junit.experimental.max.MaxHistory.TestComparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; this>
<org.junit.experimental.max.MaxHistory; getFailureTimestamp[org.junit.runner.Description]; java.lang.Long; org.junit.experimental.max.MaxHistory.TestComparator; getFailure[org.junit.runner.Description]; java.lang.Long; null; this>
<org.junit.experimental.categories.Categories$CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; shouldRun[org.junit.runner.Description]; boolean; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.categories.Categories.CategoryFilter; shouldRun[org.junit.runner.Description]; boolean; null; description>
<org.junit.experimental.categories.Categories$CategoryFilter; shouldRun[org.junit.runner.Description]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; shouldRun[org.junit.runner.Description]; boolean; null; this>
<org.junit.experimental.categories.Categories$CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; org.junit.experimental.categories.Categories.CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; null; this>
<java.util.List; isEmpty[]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; null; categories>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; null; fExcluded>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; null; fIncluded>
<java.util.ArrayList; addAll[java.util.Collection<? extends java.lang.Class<?>>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; categories>
<java.util.Arrays; asList[java.lang.Class<?>[]]; java.util.List<java.lang.Class<?>>; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; Arrays>
<org.junit.experimental.categories.Categories$CategoryFilter; directCategories[org.junit.runner.Description]; java.lang.Class<?>[]; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; this>
<java.util.ArrayList; addAll[java.util.Collection<? extends java.lang.Class<?>>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; categories>
<java.util.Arrays; asList[java.lang.Class<?>[]]; java.util.List<java.lang.Class<?>>; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; Arrays>
<org.junit.experimental.categories.Categories$CategoryFilter; directCategories[org.junit.runner.Description]; java.lang.Class<?>[]; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; this>
<org.junit.experimental.categories.Categories$CategoryFilter; parentDescription[org.junit.runner.Description]; org.junit.runner.Description; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; this>
<org.junit.runner.Description; getTestClass[]; java.lang.Class<?>; org.junit.experimental.categories.Categories.CategoryFilter; parentDescription[org.junit.runner.Description]; org.junit.runner.Description; null; description>
<org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; org.junit.experimental.categories.Categories.CategoryFilter; parentDescription[org.junit.runner.Description]; org.junit.runner.Description; null; Description>
<org.junit.runner.Description; getAnnotation[java.lang.Class<org.junit.experimental.categories.Category>]; org.junit.experimental.categories.Category; org.junit.experimental.categories.Categories.CategoryFilter; directCategories[org.junit.runner.Description]; java.lang.Class<?>[]; null; description>
<org.junit.experimental.categories.Category; value[]; java.lang.Class<?>[]; org.junit.experimental.categories.Categories.CategoryFilter; directCategories[org.junit.runner.Description]; java.lang.Class<?>[]; null; annotation>
<org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; org.junit.experimental.categories.Categories; Categories[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<org.junit.experimental.categories.Categories; getIncludedCategory[java.lang.Class<?>]; java.lang.Class<?>; org.junit.experimental.categories.Categories; Categories[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<org.junit.experimental.categories.Categories; getExcludedCategory[java.lang.Class<?>]; java.lang.Class<?>; org.junit.experimental.categories.Categories; Categories[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; org.junit.experimental.categories.Categories; Categories[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; org.junit.experimental.categories.Categories; Categories[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<java.lang.Class; getAnnotation[java.lang.Class<org.junit.experimental.categories.Categories.IncludeCategory>]; org.junit.experimental.categories.Categories.IncludeCategory; org.junit.experimental.categories.Categories; getIncludedCategory[java.lang.Class<?>]; java.lang.Class<?>; null; klass>
<org.junit.experimental.categories.Categories$IncludeCategory; value[]; java.lang.Class<?>; org.junit.experimental.categories.Categories; getIncludedCategory[java.lang.Class<?>]; java.lang.Class<?>; null; annotation>
<java.lang.Class; getAnnotation[java.lang.Class<org.junit.experimental.categories.Categories.ExcludeCategory>]; org.junit.experimental.categories.Categories.ExcludeCategory; org.junit.experimental.categories.Categories; getExcludedCategory[java.lang.Class<?>]; java.lang.Class<?>; null; klass>
<org.junit.experimental.categories.Categories$ExcludeCategory; value[]; java.lang.Class<?>; org.junit.experimental.categories.Categories; getExcludedCategory[java.lang.Class<?>]; java.lang.Class<?>; null; annotation>
<org.junit.experimental.categories.Categories; canHaveCategorizedChildren[org.junit.runner.Description]; boolean; org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; null; this>
<org.junit.experimental.categories.Categories; assertNoDescendantsHaveCategoryAnnotations[org.junit.runner.Description]; void; org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; null; description>
<org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; org.junit.experimental.categories.Categories; assertNoCategorizedDescendentsOfUncategorizeableParents[org.junit.runner.Description]; void; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.categories.Categories; assertNoDescendantsHaveCategoryAnnotations[org.junit.runner.Description]; void; null; description>
<org.junit.runner.Description; getAnnotation[java.lang.Class<org.junit.experimental.categories.Category>]; org.junit.experimental.categories.Category; org.junit.experimental.categories.Categories; assertNoDescendantsHaveCategoryAnnotations[org.junit.runner.Description]; void; null; each>
<org.junit.experimental.categories.Categories; assertNoDescendantsHaveCategoryAnnotations[org.junit.runner.Description]; void; org.junit.experimental.categories.Categories; assertNoDescendantsHaveCategoryAnnotations[org.junit.runner.Description]; void; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.experimental.categories.Categories; canHaveCategorizedChildren[org.junit.runner.Description]; boolean; null; description>
<org.junit.runner.Description; getTestClass[]; java.lang.Class<?>; org.junit.experimental.categories.Categories; canHaveCategorizedChildren[org.junit.runner.Description]; boolean; null; each>
<org.junit.runners.ParentRunner; setScheduler[org.junit.runners.model.RunnerScheduler]; void; org.junit.experimental.ParallelComputer; parallelize[org.junit.runner.Runner]; org.junit.runner.Runner; null; ((ParentRunner<?>)runner)>
<java.util.concurrent.Executors; newCachedThreadPool[]; java.util.concurrent.ExecutorService; org.junit.experimental.ParallelComputer; parallelize[org.junit.runner.Runner]; org.junit.runner.Runner; null; Executors>
<java.util.List; add[java.util.concurrent.Future<java.lang.Object>]; boolean; java.lang.Object; schedule[java.lang.Runnable]; void; null; fResults>
<java.util.concurrent.ExecutorService; submit[java.util.concurrent.Callable<java.lang.Object>]; java.util.concurrent.Future<java.lang.Object>; java.lang.Object; schedule[java.lang.Runnable]; void; null; fService>
<java.lang.Runnable; run[]; void; java.lang.Object; call[]; java.lang.Object; null; childStatement>
<java.util.concurrent.Future; get[]; java.lang.Object; java.lang.Object; finished[]; void; null; each>
<java.lang.Throwable; printStackTrace[]; void; java.lang.Object; finished[]; void; null; e>
<org.junit.experimental.ParallelComputer; parallelize[org.junit.runner.Runner]; org.junit.runner.Runner; org.junit.experimental.ParallelComputer; getSuite[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>[]]; org.junit.runner.Runner; null; this>
<org.junit.experimental.ParallelComputer; parallelize[org.junit.runner.Runner]; org.junit.runner.Runner; org.junit.experimental.ParallelComputer; getRunner[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<java.util.Collections; synchronizedList[java.util.List<org.junit.runner.notification.Failure>]; java.util.List<org.junit.runner.notification.Failure>; org.junit.experimental.ParallelComputer; getRunner[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>]; org.junit.runner.Runner; null; Collections>
<java.util.concurrent.atomic.AtomicInteger; get[]; int; org.junit.runner.Result; getRunCount[]; int; null; fCount>
<java.util.List; size[]; int; org.junit.runner.Result; getFailureCount[]; int; null; fFailures>
<java.util.concurrent.atomic.AtomicInteger; get[]; int; org.junit.runner.Result; getIgnoreCount[]; int; null; fIgnoreCount>
<org.junit.runner.Result; getFailureCount[]; int; org.junit.runner.Result; wasSuccessful[]; boolean; null; this>
<java.lang.System; currentTimeMillis[]; long; org.junit.runner.Result.Listener; testRunStarted[org.junit.runner.Description]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; org.junit.runner.Result.Listener; testRunFinished[org.junit.runner.Result]; void; null; System>
<java.util.concurrent.atomic.AtomicInteger; getAndIncrement[]; int; org.junit.runner.Result.Listener; testFinished[org.junit.runner.Description]; void; null; fCount>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.Result.Listener; testFailure[org.junit.runner.notification.Failure]; void; null; fFailures>
<java.util.concurrent.atomic.AtomicInteger; getAndIncrement[]; int; org.junit.runner.Result.Listener; testIgnored[org.junit.runner.Description]; void; null; fIgnoreCount>
<java.lang.String; length[]; int; org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; null; name>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; null; String>
<java.lang.Class; getName[]; java.lang.String; org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; null; clazz>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String]; org.junit.runner.Description; null; this>
<java.lang.Class; getName[]; java.lang.String; org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; null; testClass>
<java.lang.Class; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; null; testClass>
<java.util.ArrayList; add[org.junit.runner.Description]; boolean; org.junit.runner.Description; addChild[org.junit.runner.Description]; void; null; getChildren()>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.runner.Description; addChild[org.junit.runner.Description]; void; add[org.junit.runner.Description]; this>
<org.junit.runner.Description; isTest[]; boolean; org.junit.runner.Description; isSuite[]; boolean; null; this>
<java.util.ArrayList; isEmpty[]; boolean; org.junit.runner.Description; isTest[]; boolean; null; getChildren()>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.runner.Description; isTest[]; boolean; isEmpty[]; this>
<org.junit.runner.Description; isTest[]; boolean; org.junit.runner.Description; testCount[]; int; null; this>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.runner.Description; testCount[]; int; null; this>
<org.junit.runner.Description; testCount[]; int; org.junit.runner.Description; testCount[]; int; null; child>
<java.lang.String; hashCode[]; int; org.junit.runner.Description; hashCode[]; int; null; getDisplayName()>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.Description; hashCode[]; int; hashCode[]; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.runner.Description; equals[java.lang.Object]; boolean; null; getDisplayName()>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.Description; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.Description; equals[java.lang.Object]; boolean; null; d>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.Description; toString[]; java.lang.String; null; this>
<org.junit.runner.Description; equals[java.lang.Object]; boolean; org.junit.runner.Description; isEmpty[]; boolean; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.runner.Description; getAnnotation[java.lang.Class<T>]; T; null; each.annotationType()>
<java.lang.annotation.Annotation; annotationType[]; java.lang.Class<? extends java.lang.annotation.Annotation>; org.junit.runner.Description; getAnnotation[java.lang.Class<T>]; T; equals[java.lang.Object]; each>
<java.lang.Class; cast[java.lang.Object]; T; org.junit.runner.Description; getAnnotation[java.lang.Class<T>]; T; null; annotationType>
<java.util.Arrays; asList[java.lang.annotation.Annotation[]]; java.util.List<java.lang.annotation.Annotation>; org.junit.runner.Description; getAnnotations[]; java.util.Collection<java.lang.annotation.Annotation>; null; Arrays>
<org.junit.runner.Description; getClassName[]; java.lang.String; org.junit.runner.Description; getTestClass[]; java.lang.Class<?>; null; this>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; org.junit.runner.Description; getTestClass[]; java.lang.Class<?>; null; Class>
<org.junit.runner.Description; methodStringMatcher[]; java.util.regex.Matcher; org.junit.runner.Description; getClassName[]; java.lang.String; null; this>
<java.util.regex.Matcher; matches[]; boolean; org.junit.runner.Description; getClassName[]; java.lang.String; null; matcher>
<java.util.regex.Matcher; group[int]; java.lang.String; org.junit.runner.Description; getClassName[]; java.lang.String; null; matcher>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.runner.Description; getClassName[]; java.lang.String; null; this>
<org.junit.runner.Description; parseMethod[]; java.lang.String; org.junit.runner.Description; getMethodName[]; java.lang.String; null; this>
<org.junit.runner.Description; methodStringMatcher[]; java.util.regex.Matcher; org.junit.runner.Description; parseMethod[]; java.lang.String; null; this>
<java.util.regex.Matcher; matches[]; boolean; org.junit.runner.Description; parseMethod[]; java.lang.String; null; matcher>
<java.util.regex.Matcher; group[int]; java.lang.String; org.junit.runner.Description; parseMethod[]; java.lang.String; null; matcher>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; org.junit.runner.Description; methodStringMatcher[]; java.util.regex.Matcher; group[int]; Pattern.compile("(.*)\\((.*)\\)")>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; org.junit.runner.Description; methodStringMatcher[]; java.util.regex.Matcher; matcher[java.lang.CharSequence]; Pattern>
<org.junit.runner.Description; toString[]; java.lang.String; org.junit.runner.Description; methodStringMatcher[]; java.util.regex.Matcher; null; this>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String]; org.junit.runner.Description; org.junit.runner.Request; method[java.lang.Class<?>, java.lang.String]; org.junit.runner.Request; null; Description>
<org.junit.runner.Request; filterWith[org.junit.runner.Description]; org.junit.runner.Request; org.junit.runner.Request; method[java.lang.Class<?>, java.lang.String]; org.junit.runner.Request; null; Request.aClass(clazz)>
<org.junit.runner.Request; aClass[java.lang.Class<?>]; org.junit.runner.Request; org.junit.runner.Request; method[java.lang.Class<?>, java.lang.String]; org.junit.runner.Request; filterWith[org.junit.runner.Description]; Request>
<org.junit.runner.Computer; getSuite[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>[]]; org.junit.runner.Runner; org.junit.runner.Request; classes[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Request; null; computer>
<org.junit.runner.Request; runner[org.junit.runner.Runner]; org.junit.runner.Request; org.junit.runner.Request; classes[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Request; null; this>
<org.junit.runner.Request; classes[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Request; org.junit.runner.Request; classes[java.lang.Class<?>[]]; org.junit.runner.Request; null; this>
<org.junit.runner.JUnitCore; defaultComputer[]; org.junit.runner.Computer; org.junit.runner.Request; classes[java.lang.Class<?>[]]; org.junit.runner.Request; null; JUnitCore>
<org.junit.runner.Request; runner[org.junit.runner.Runner]; org.junit.runner.Request; org.junit.runner.Request; errorReport[java.lang.Class<?>, java.lang.Throwable]; org.junit.runner.Request; null; this>
<org.junit.runner.Request; filterWith[org.junit.runner.manipulation.Filter]; org.junit.runner.Request; org.junit.runner.Request; filterWith[org.junit.runner.Description]; org.junit.runner.Request; null; this>
<org.junit.runner.manipulation.Filter; matchMethodDescription[org.junit.runner.Description]; org.junit.runner.manipulation.Filter; org.junit.runner.Request; filterWith[org.junit.runner.Description]; org.junit.runner.Request; null; Filter>
<org.junit.runner.JUnitCore; runMainAndExit[org.junit.internal.JUnitSystem, java.lang.String[]]; void; org.junit.runner.JUnitCore; main[java.lang.String[]]; void; null; this>
<org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; org.junit.runner.JUnitCore; runMainAndExit[org.junit.internal.JUnitSystem, java.lang.String[]]; void; null; new JUnitCore()>
<org.junit.internal.JUnitSystem; exit[int]; void; org.junit.runner.JUnitCore; runMainAndExit[org.junit.internal.JUnitSystem, java.lang.String[]]; void; null; system>
<org.junit.runner.Result; wasSuccessful[]; boolean; org.junit.runner.JUnitCore; runMainAndExit[org.junit.internal.JUnitSystem, java.lang.String[]]; void; null; result>
<org.junit.runner.JUnitCore; run[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Result; org.junit.runner.JUnitCore; runClasses[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Result; null; new JUnitCore()>
<org.junit.runner.JUnitCore; run[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Result; org.junit.runner.JUnitCore; runClasses[java.lang.Class<?>[]]; org.junit.runner.Result; null; new JUnitCore()>
<org.junit.runner.JUnitCore; defaultComputer[]; org.junit.runner.Computer; org.junit.runner.JUnitCore; runClasses[java.lang.Class<?>[]]; org.junit.runner.Result; null; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; system.out()>
<org.junit.internal.JUnitSystem; out[]; java.io.PrintStream; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; println[java.lang.String]; system>
<junit.runner.Version; id[]; java.lang.String; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; Version>
<java.util.List; add[java.lang.Class<?>]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; classes>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; Class>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; system.out()>
<org.junit.internal.JUnitSystem; out[]; java.io.PrintStream; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; println[java.lang.String]; system>
<org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; Description>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; missingClasses>
<org.junit.runner.JUnitCore; addListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; this>
<org.junit.runner.JUnitCore; run[java.lang.Class<?>[]]; org.junit.runner.Result; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; this>
<java.util.List; toArray[java.lang.Class[]]; java.lang.Class[]; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; classes>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; result.getFailures()>
<org.junit.runner.Result; getFailures[]; java.util.List<org.junit.runner.notification.Failure>; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; add[org.junit.runner.notification.Failure]; result>
<junit.runner.Version; id[]; java.lang.String; org.junit.runner.JUnitCore; getVersion[]; java.lang.String; null; Version>
<org.junit.runner.JUnitCore; run[org.junit.runner.Request]; org.junit.runner.Result; org.junit.runner.JUnitCore; run[java.lang.Class<?>[]]; org.junit.runner.Result; null; this>
<org.junit.runner.Request; classes[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Request; org.junit.runner.JUnitCore; run[java.lang.Class<?>[]]; org.junit.runner.Result; null; Request>
<org.junit.runner.JUnitCore; defaultComputer[]; org.junit.runner.Computer; org.junit.runner.JUnitCore; run[java.lang.Class<?>[]]; org.junit.runner.Result; null; this>
<org.junit.runner.JUnitCore; run[org.junit.runner.Request]; org.junit.runner.Result; org.junit.runner.JUnitCore; run[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Result; null; this>
<org.junit.runner.Request; classes[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Request; org.junit.runner.JUnitCore; run[org.junit.runner.Computer, java.lang.Class<?>[]]; org.junit.runner.Result; null; Request>
<org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; org.junit.runner.JUnitCore; run[org.junit.runner.Request]; org.junit.runner.Result; null; this>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.runner.JUnitCore; run[org.junit.runner.Request]; org.junit.runner.Result; null; request>
<org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; org.junit.runner.JUnitCore; run[junit.framework.Test]; org.junit.runner.Result; null; this>
<org.junit.runner.Result; createListener[]; org.junit.runner.notification.RunListener; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; result>
<org.junit.runner.notification.RunNotifier; addFirstListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; fNotifier>
<org.junit.runner.notification.RunNotifier; fireTestRunStarted[org.junit.runner.Description]; void; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; fNotifier>
<org.junit.runner.Runner; getDescription[]; org.junit.runner.Description; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; runner>
<org.junit.runner.Runner; run[org.junit.runner.notification.RunNotifier]; void; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; getDescription[]; runner>
<org.junit.runner.notification.RunNotifier; fireTestRunFinished[org.junit.runner.Result]; void; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; fNotifier>
<org.junit.runner.JUnitCore; removeListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.JUnitCore; run[org.junit.runner.Runner]; org.junit.runner.Result; null; this>
<org.junit.runner.notification.RunNotifier; addListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.JUnitCore; addListener[org.junit.runner.notification.RunListener]; void; null; fNotifier>
<org.junit.runner.notification.RunNotifier; removeListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.JUnitCore; removeListener[org.junit.runner.notification.RunListener]; void; null; fNotifier>
<org.junit.runner.manipulation.Sortable; sort[org.junit.runner.manipulation.Sorter]; void; org.junit.runner.manipulation.Sorter; apply[java.lang.Object]; void; null; sortable>
<java.util.Comparator; compare[org.junit.runner.Description, org.junit.runner.Description]; int; org.junit.runner.manipulation.Sorter; compare[org.junit.runner.Description, org.junit.runner.Description]; int; null; fComparator>
<org.junit.runner.Description; isTest[]; boolean; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; description>
<org.junit.runner.Description; equals[java.lang.Object]; boolean; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; desiredDescription>
<org.junit.runner.Description; getChildren[]; java.util.ArrayList<org.junit.runner.Description>; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; description>
<org.junit.runner.manipulation.Filter$2; shouldRun[org.junit.runner.Description]; boolean; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runner.manipulation.Filter; describe[]; java.lang.String; null; String>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.manipulation.Filter; describe[]; java.lang.String; null; desiredDescription>
<org.junit.runner.manipulation.Filterable; filter[org.junit.runner.manipulation.Filter]; void; org.junit.runner.manipulation.Filter; apply[java.lang.Object]; void; null; filterable>
<org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; first>
<org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; null; second>
<org.junit.runner.manipulation.Filter; describe[]; java.lang.String; org.junit.runner.manipulation.Filter; describe[]; java.lang.String; null; first>
<org.junit.runner.manipulation.Filter; describe[]; java.lang.String; org.junit.runner.manipulation.Filter; describe[]; java.lang.String; null; second>
<org.junit.runner.Computer; getRunner[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>]; org.junit.runner.Runner; org.junit.runners.model.RunnerBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.runners.model.RunnerBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; org.junit.runner.Computer; getRunner[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>]; org.junit.runner.Runner; null; builder>
<org.junit.runner.Description; testCount[]; int; org.junit.runner.Runner; testCount[]; int; null; getDescription()>
<org.junit.runner.Runner; getDescription[]; org.junit.runner.Description; org.junit.runner.Runner; testCount[]; int; testCount[]; this>
<java.util.Collections; synchronizedList[java.util.List<org.junit.runner.notification.RunListener>]; java.util.List<org.junit.runner.notification.RunListener>; org.junit.runner.Runner; testCount[]; int; null; Collections>
<java.util.List; add[org.junit.runner.notification.RunListener]; boolean; org.junit.runner.notification.RunNotifier; addListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<java.util.List; remove[java.lang.Object]; boolean; org.junit.runner.notification.RunNotifier; removeListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<java.util.List; iterator[]; java.util.Iterator<org.junit.runner.notification.RunListener>; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; fListeners>
<java.util.Iterator; hasNext[]; boolean; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; all>
<org.junit.runner.notification.RunNotifier$SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; this>
<java.util.Iterator; next[]; org.junit.runner.notification.RunListener; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; all>
<java.util.Iterator; remove[]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; all>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; this>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestRunStarted[org.junit.runner.Description]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testRunStarted(description);
  }
}
>
<org.junit.runner.notification.RunListener; testRunStarted[org.junit.runner.Description]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestRunFinished[org.junit.runner.Result]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testRunFinished(result);
  }
}
>
<org.junit.runner.notification.RunListener; testRunFinished[org.junit.runner.Result]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testStarted(description);
  }
}
>
<org.junit.runner.notification.RunListener; testStarted[org.junit.runner.Description]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testFailure(failure);
  }
}
>
<org.junit.runner.notification.RunListener; testFailure[org.junit.runner.notification.Failure]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestAssumptionFailed[org.junit.runner.notification.Failure]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testAssumptionFailure(failure);
  }
}
>
<org.junit.runner.notification.RunListener; testAssumptionFailure[org.junit.runner.notification.Failure]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestIgnored[org.junit.runner.Description]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testIgnored(description);
  }
}
>
<org.junit.runner.notification.RunListener; testIgnored[org.junit.runner.Description]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<org.junit.runner.notification.RunNotifier$SafeNotifier; run[]; void; org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; null; new SafeNotifier(){
  @Override protected void notifyListener(  RunListener each) throws Exception {
    each.testFinished(description);
  }
}
>
<org.junit.runner.notification.RunListener; testFinished[org.junit.runner.Description]; void; org.junit.runner.notification.RunNotifier.SafeNotifier; notifyListener[org.junit.runner.notification.RunListener]; void; run[]; each>
<java.util.List; add[int, org.junit.runner.notification.RunListener]; void; org.junit.runner.notification.RunNotifier; addFirstListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<org.junit.runner.Description; getDisplayName[]; java.lang.String; org.junit.runner.notification.Failure; getTestHeader[]; java.lang.String; null; fDescription>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; org.junit.runner.notification.Failure; toString[]; java.lang.String; null; buffer>
<org.junit.runner.notification.Failure; getTestHeader[]; java.lang.String; org.junit.runner.notification.Failure; toString[]; java.lang.String; null; this>
<java.lang.Throwable; getMessage[]; java.lang.String; org.junit.runner.notification.Failure; toString[]; java.lang.String; null; fThrownException>
<java.lang.StringBuffer; toString[]; java.lang.String; org.junit.runner.notification.Failure; toString[]; java.lang.String; null; buffer>
<java.lang.Throwable; printStackTrace[java.io.PrintWriter]; void; org.junit.runner.notification.Failure; getTrace[]; java.lang.String; null; getException()>
<org.junit.runner.notification.Failure; getException[]; java.lang.Throwable; org.junit.runner.notification.Failure; getTrace[]; java.lang.String; printStackTrace[java.io.PrintWriter]; this>
<java.io.StringWriter; getBuffer[]; java.lang.StringBuffer; org.junit.runner.notification.Failure; getTrace[]; java.lang.String; null; stringWriter>
<java.lang.StringBuffer; toString[]; java.lang.String; org.junit.runner.notification.Failure; getTrace[]; java.lang.String; null; buffer>
<java.lang.Throwable; getMessage[]; java.lang.String; org.junit.runner.notification.Failure; getMessage[]; java.lang.String; null; getException()>
<org.junit.runner.notification.Failure; getException[]; java.lang.Throwable; org.junit.runner.notification.Failure; getMessage[]; java.lang.String; getMessage[]; this>
<org.junit.ComparisonFailure$ComparisonCompactor; compact[java.lang.String]; java.lang.String; org.junit.ComparisonFailure; getMessage[]; java.lang.String; null; new ComparisonCompactor(MAX_CONTEXT_LENGTH,fExpected,fActual)>
<org.junit.ComparisonFailure$ComparisonCompactor; areStringsEqual[]; boolean; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; Assert>
<org.junit.ComparisonFailure$ComparisonCompactor; findCommonPrefix[]; void; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<org.junit.ComparisonFailure$ComparisonCompactor; findCommonSuffix[]; void; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<org.junit.ComparisonFailure$ComparisonCompactor; compactString[java.lang.String]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<org.junit.ComparisonFailure$ComparisonCompactor; compactString[java.lang.String]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; this>
<org.junit.Assert; format[java.lang.String, java.lang.Object, java.lang.Object]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compact[java.lang.String]; java.lang.String; null; Assert>
<java.lang.String; substring[int, int]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; source>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; source>
<org.junit.ComparisonFailure$ComparisonCompactor; computeCommonPrefix[]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; this>
<org.junit.ComparisonFailure$ComparisonCompactor; computeCommonSuffix[]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; compactString[java.lang.String]; java.lang.String; null; this>
<java.lang.Math; min[int, int]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonPrefix[]; void; null; Math>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonPrefix[]; void; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonPrefix[]; void; null; fActual>
<java.lang.String; charAt[int]; char; org.junit.ComparisonFailure.ComparisonCompactor; findCommonPrefix[]; void; null; fExpected>
<java.lang.String; charAt[int]; char; org.junit.ComparisonFailure.ComparisonCompactor; findCommonPrefix[]; void; null; fActual>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonSuffix[]; void; null; fActual>
<java.lang.String; charAt[int]; char; org.junit.ComparisonFailure.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; charAt[int]; char; org.junit.ComparisonFailure.ComparisonCompactor; findCommonSuffix[]; void; null; fActual>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; findCommonSuffix[]; void; null; fExpected>
<java.lang.String; substring[int, int]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonPrefix[]; java.lang.String; null; fExpected>
<java.lang.Math; max[int, int]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonPrefix[]; java.lang.String; null; Math>
<java.lang.Math; min[int, int]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; Math>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; substring[int, int]; java.lang.String; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; length[]; int; org.junit.ComparisonFailure.ComparisonCompactor; computeCommonSuffix[]; java.lang.String; null; fExpected>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.ComparisonFailure.ComparisonCompactor; areStringsEqual[]; boolean; null; fExpected>
<java.lang.Runnable; run[]; void; java.lang.Object; schedule[java.lang.Runnable]; void; null; childStatement>
<org.junit.runners.ParentRunner; validate[]; void; org.junit.runners.ParentRunner; ParentRunner[java.lang.Class<?>]; void; null; this>
<org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; validateClassRules[java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; this>
<org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; null; eachTestMethod>
<org.junit.internal.runners.rules.RuleFieldValidator; validate[org.junit.runners.model.TestClass, java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; validateClassRules[java.util.List<java.lang.Throwable>]; void; null; CLASS_RULE_VALIDATOR>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.ParentRunner; validateClassRules[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; childrenInvoker[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; org.junit.runners.ParentRunner; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.ParentRunner; withBeforeClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.ParentRunner; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.ParentRunner; withAfterClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.ParentRunner; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.ParentRunner; withClassRules[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.ParentRunner; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.ParentRunner; withBeforeClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; fTestClass>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withBeforeClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; befores>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.ParentRunner; withAfterClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; fTestClass>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withAfterClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; afters>
<org.junit.runners.ParentRunner; classRules[]; java.util.List<org.junit.rules.TestRule>; org.junit.runners.ParentRunner; withClassRules[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withClassRules[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; classRules>
<org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; org.junit.runners.ParentRunner; withClassRules[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<org.junit.rules.TestRule>]; java.util.List<org.junit.rules.TestRule>; org.junit.runners.ParentRunner; classRules[]; java.util.List<org.junit.rules.TestRule>; null; fTestClass>
<org.junit.runners.ParentRunner; runChildren[org.junit.runner.notification.RunNotifier]; void; org.junit.runners.model.Statement; evaluate[]; void; null; this>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; runChildren[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runners.model.RunnerScheduler; schedule[java.lang.Runnable]; void; org.junit.runners.ParentRunner; runChildren[org.junit.runner.notification.RunNotifier]; void; null; fScheduler>
<org.junit.runners.ParentRunner; runChild[T, org.junit.runner.notification.RunNotifier]; void; java.lang.Object; run[]; void; null; ParentRunner.this>
<org.junit.runners.model.RunnerScheduler; finished[]; void; org.junit.runners.ParentRunner; runChildren[org.junit.runner.notification.RunNotifier]; void; null; fScheduler>
<org.junit.runners.model.TestClass; getName[]; java.lang.String; org.junit.runners.ParentRunner; getName[]; java.lang.String; null; fTestClass>
<org.junit.internal.runners.model.EachTestNotifier; fireTestStarted[]; void; org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; null; eachNotifier>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; null; statement>
<org.junit.internal.runners.model.EachTestNotifier; addFailedAssumption[org.junit.internal.AssumptionViolatedException]; void; org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; null; eachNotifier>
<org.junit.internal.runners.model.EachTestNotifier; addFailure[java.lang.Throwable]; void; org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; null; eachNotifier>
<org.junit.internal.runners.model.EachTestNotifier; fireTestFinished[]; void; org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; null; eachNotifier>
<org.junit.runners.model.TestClass; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.ParentRunner; getRunnerAnnotations[]; java.lang.annotation.Annotation[]; null; fTestClass>
<org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; Description>
<org.junit.runners.ParentRunner; getName[]; java.lang.String; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runners.ParentRunner; getRunnerAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runner.Description; addChild[org.junit.runner.Description]; void; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; description>
<org.junit.runners.ParentRunner; describeChild[T]; org.junit.runner.Description; org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runners.ParentRunner; getDescription[]; org.junit.runner.Description; org.junit.runners.ParentRunner; run[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runners.ParentRunner; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; org.junit.runners.ParentRunner; run[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.runners.ParentRunner; run[org.junit.runner.notification.RunNotifier]; void; null; statement>
<org.junit.internal.runners.model.EachTestNotifier; fireTestIgnored[]; void; org.junit.runners.ParentRunner; run[org.junit.runner.notification.RunNotifier]; void; null; testNotifier>
<org.junit.internal.runners.model.EachTestNotifier; addFailure[java.lang.Throwable]; void; org.junit.runners.ParentRunner; run[org.junit.runner.notification.RunNotifier]; void; null; testNotifier>
<java.util.List; iterator[]; java.util.Iterator<T>; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; getFilteredChildren()>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; iterator[]; this>
<java.util.Iterator; hasNext[]; boolean; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<java.util.Iterator; next[]; T; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<org.junit.runners.ParentRunner; shouldRun[org.junit.runner.manipulation.Filter, T]; boolean; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<org.junit.runner.manipulation.Filter; apply[java.lang.Object]; void; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; filter>
<java.util.Iterator; remove[]; void; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<java.util.Iterator; remove[]; void; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; getFilteredChildren()>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; isEmpty[]; this>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<org.junit.runners.ParentRunner; sortChild[T]; void; org.junit.runners.ParentRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<java.util.Collections; sort[java.util.List<T>, java.util.Comparator<? super T>]; void; org.junit.runners.ParentRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; Collections>
<org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<org.junit.runners.ParentRunner; comparator[]; java.util.Comparator<? super T>; org.junit.runners.ParentRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<org.junit.runners.ParentRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; org.junit.runners.ParentRunner; validate[]; void; null; this>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; validate[]; void; null; errors>
<org.junit.runners.ParentRunner; getChildren[]; java.util.List<T>; org.junit.runners.ParentRunner; getFilteredChildren[]; java.util.List<T>; null; this>
<org.junit.runner.manipulation.Sorter; apply[java.lang.Object]; void; org.junit.runners.ParentRunner; sortChild[T]; void; null; fSorter>
<org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; org.junit.runners.ParentRunner; shouldRun[org.junit.runner.manipulation.Filter, T]; boolean; null; filter>
<org.junit.runners.ParentRunner; describeChild[T]; org.junit.runner.Description; org.junit.runners.ParentRunner; shouldRun[org.junit.runner.manipulation.Filter, T]; boolean; null; this>
<org.junit.runner.manipulation.Sorter; compare[org.junit.runner.Description, org.junit.runner.Description]; int; java.lang.Object; compare[T, T]; int; null; fSorter>
<org.junit.runners.ParentRunner; describeChild[T]; org.junit.runner.Description; java.lang.Object; compare[T, T]; int; null; this>
<org.junit.runners.ParentRunner; describeChild[T]; org.junit.runner.Description; java.lang.Object; compare[T, T]; int; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; org.junit.runners.BlockJUnit4ClassRunner; runChild[org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runners.model.FrameworkMethod; getAnnotation[java.lang.Class<org.junit.Ignore>]; org.junit.Ignore; org.junit.runners.BlockJUnit4ClassRunner; runChild[org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier]; void; null; method>
<org.junit.runner.notification.RunNotifier; fireTestIgnored[org.junit.runner.Description]; void; org.junit.runners.BlockJUnit4ClassRunner; runChild[org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier]; void; null; notifier>
<org.junit.runners.ParentRunner; runLeaf[org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier]; void; org.junit.runners.BlockJUnit4ClassRunner; runChild[org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; runChild[org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; null; Description>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; getJavaClass[]; this>
<org.junit.runners.BlockJUnit4ClassRunner; testName[org.junit.runners.model.FrameworkMethod]; java.lang.String; org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; null; this>
<org.junit.runners.model.FrameworkMethod; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; null; method>
<org.junit.runners.BlockJUnit4ClassRunner; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.BlockJUnit4ClassRunner; getChildren[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; this>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.BlockJUnit4ClassRunner; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateConstructor[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateFields[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; collectInitializationErrors[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.TestClass; isANonStaticInnerClass[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; isANonStaticInnerClass[]; this>
<org.junit.runners.model.TestClass; getName[]; java.lang.String; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; getName[]; this>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; null; errors>
<org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; hasOneConstructor[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; null; errors>
<org.junit.runners.model.TestClass; isANonStaticInnerClass[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; isANonStaticInnerClass[]; this>
<org.junit.runners.BlockJUnit4ClassRunner; hasOneConstructor[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.Constructor; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; null; getTestClass().getOnlyConstructor()>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; getParameterTypes[]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; getOnlyConstructor[]; this>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.Class; getConstructors[]; java.lang.reflect.Constructor<?>[]; org.junit.runners.BlockJUnit4ClassRunner; hasOneConstructor[]; boolean; null; getTestClass().getJavaClass()>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.runners.BlockJUnit4ClassRunner; hasOneConstructor[]; boolean; getConstructors[]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; hasOneConstructor[]; boolean; getJavaClass[]; this>
<org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; validateTestMethods[java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; this>
<java.util.List; size[]; int; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; computeTestMethods()>
<org.junit.runners.BlockJUnit4ClassRunner; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; size[]; this>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; errors>
<org.junit.internal.runners.rules.RuleFieldValidator; validate[org.junit.runners.model.TestClass, java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateFields[java.util.List<java.lang.Throwable>]; void; null; RULE_VALIDATOR>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; validateFields[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; validatePublicVoidNoArgMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.BlockJUnit4ClassRunner; validateTestMethods[java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; null; getTestClass().getOnlyConstructor()>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; newInstance[java.lang.Object[]]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; getOnlyConstructor[]; this>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.runners.BlockJUnit4ClassRunner; testName[org.junit.runners.model.FrameworkMethod]; java.lang.String; null; method>
<org.junit.internal.runners.model.ReflectiveCallable; run[]; java.lang.Object; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; new ReflectiveCallable(){
  @Override protected Object runReflectiveCall() throws Throwable {
    return createTest();
  }
}
>
<org.junit.runners.BlockJUnit4ClassRunner; createTest[]; java.lang.Object; org.junit.internal.runners.model.ReflectiveCallable; runReflectiveCall[]; java.lang.Object; run[]; this>
<org.junit.runners.BlockJUnit4ClassRunner; methodInvoker[org.junit.runners.model.FrameworkMethod, java.lang.Object]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; possiblyExpectingExceptions[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; withPotentialTimeout[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; withBefores[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; withAfters[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; withRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; methodBlock[org.junit.runners.model.FrameworkMethod]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.model.FrameworkMethod; getAnnotation[java.lang.Class<org.junit.Test>]; org.junit.Test; org.junit.runners.BlockJUnit4ClassRunner; possiblyExpectingExceptions[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; method>
<org.junit.runners.BlockJUnit4ClassRunner; expectsException[org.junit.Test]; boolean; org.junit.runners.BlockJUnit4ClassRunner; possiblyExpectingExceptions[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; getExpectedException[org.junit.Test]; java.lang.Class<? extends java.lang.Throwable>; org.junit.runners.BlockJUnit4ClassRunner; possiblyExpectingExceptions[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; getTimeout[org.junit.Test]; long; org.junit.runners.BlockJUnit4ClassRunner; withPotentialTimeout[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.model.FrameworkMethod; getAnnotation[java.lang.Class<org.junit.Test>]; org.junit.Test; org.junit.runners.BlockJUnit4ClassRunner; withPotentialTimeout[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; method>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.BlockJUnit4ClassRunner; withBefores[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; withBefores[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; this>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withBefores[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; befores>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.BlockJUnit4ClassRunner; withAfters[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; withAfters[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; this>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withAfters[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; afters>
<org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; withRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; withTestRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; withRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; getTestRules[java.lang.Object]; java.util.List<org.junit.rules.TestRule>; org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.BlockJUnit4ClassRunner; getMethodRules[java.lang.Object]; java.util.List<org.junit.rules.MethodRule>; org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<java.util.List; contains[java.lang.Object]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; testRules>
<org.junit.rules.MethodRule; apply[org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object]; org.junit.runners.model.Statement; org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; each>
<org.junit.runners.BlockJUnit4ClassRunner; rules[java.lang.Object]; java.util.List<org.junit.rules.MethodRule>; org.junit.runners.BlockJUnit4ClassRunner; getMethodRules[java.lang.Object]; java.util.List<org.junit.rules.MethodRule>; null; this>
<org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<org.junit.rules.MethodRule>]; java.util.List<org.junit.rules.MethodRule>; org.junit.runners.BlockJUnit4ClassRunner; rules[java.lang.Object]; java.util.List<org.junit.rules.MethodRule>; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; rules[java.lang.Object]; java.util.List<org.junit.rules.MethodRule>; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<org.junit.rules.MethodRule>]; this>
<org.junit.runners.BlockJUnit4ClassRunner; getTestRules[java.lang.Object]; java.util.List<org.junit.rules.TestRule>; org.junit.runners.BlockJUnit4ClassRunner; withTestRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withTestRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; testRules>
<org.junit.runners.BlockJUnit4ClassRunner; describeChild[org.junit.runners.model.FrameworkMethod]; org.junit.runner.Description; org.junit.runners.BlockJUnit4ClassRunner; withTestRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; this>
<org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<org.junit.rules.TestRule>]; java.util.List<org.junit.rules.TestRule>; org.junit.runners.BlockJUnit4ClassRunner; getTestRules[java.lang.Object]; java.util.List<org.junit.rules.TestRule>; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.BlockJUnit4ClassRunner; getTestRules[java.lang.Object]; java.util.List<org.junit.rules.TestRule>; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<org.junit.rules.TestRule>]; this>
<org.junit.Test; expected[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.runners.BlockJUnit4ClassRunner; getExpectedException[org.junit.Test]; java.lang.Class<? extends java.lang.Throwable>; null; annotation>
<org.junit.Test; expected[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.runners.BlockJUnit4ClassRunner; getExpectedException[org.junit.Test]; java.lang.Class<? extends java.lang.Throwable>; null; annotation>
<org.junit.runners.BlockJUnit4ClassRunner; getExpectedException[org.junit.Test]; java.lang.Class<? extends java.lang.Throwable>; org.junit.runners.BlockJUnit4ClassRunner; expectsException[org.junit.Test]; boolean; null; this>
<org.junit.Test; timeout[]; long; org.junit.runners.BlockJUnit4ClassRunner; getTimeout[org.junit.Test]; long; null; annotation>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.runners.Parameterized.TestClassRunnerForParameters; createTest[]; java.lang.Object; null; getTestClass().getOnlyConstructor()>
<org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; org.junit.runners.Parameterized.TestClassRunnerForParameters; createTest[]; java.lang.Object; newInstance[java.lang.Object[]]; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.Parameterized.TestClassRunnerForParameters; createTest[]; java.lang.Object; getOnlyConstructor[]; this>
<org.junit.runners.Parameterized$TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; org.junit.runners.Parameterized.TestClassRunnerForParameters; createTest[]; java.lang.Object; null; this>
<java.util.List; get[int]; java.lang.Object[]; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; fParameterList>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; String>
<org.junit.runners.model.TestClass; getName[]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; getName[]; this>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; getParametersMethod(getTestClass())>
<org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; getName[]; this>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; getName[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; testName[org.junit.runners.model.FrameworkMethod]; java.lang.String; null; String>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.runners.Parameterized.TestClassRunnerForParameters; testName[org.junit.runners.model.FrameworkMethod]; java.lang.String; null; method>
<org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; org.junit.runners.Parameterized.TestClassRunnerForParameters; validateConstructor[java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.ParentRunner; childrenInvoker[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; org.junit.runners.Parameterized.TestClassRunnerForParameters; classBlock[org.junit.runner.notification.RunNotifier]; org.junit.runners.model.Statement; null; this>
<java.util.Collections; emptyList[]; java.util.List<org.junit.runner.Runner>; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; Collections>
<org.junit.runners.Parameterized; getParametersList[org.junit.runners.model.TestClass]; java.util.List<java.lang.Object[]>; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; this>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; this>
<java.util.List; size[]; int; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; parametersList>
<java.util.ArrayList; add[org.junit.runner.Runner]; boolean; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; runners>
<org.junit.runners.model.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; getTestClass()>
<org.junit.runners.ParentRunner; getTestClass[]; org.junit.runners.model.TestClass; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; getJavaClass[]; this>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.runners.Parameterized; getParametersList[org.junit.runners.model.TestClass]; java.util.List<java.lang.Object[]>; null; getParametersMethod(klass)>
<org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; org.junit.runners.Parameterized; getParametersList[org.junit.runners.model.TestClass]; java.util.List<java.lang.Object[]>; invokeExplosively[java.lang.Object, java.lang.Object[]]; this>
<org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; null; testClass>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; null; each.getMethod()>
<org.junit.runners.model.FrameworkMethod; getMethod[]; java.lang.reflect.Method; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; getModifiers[]; each>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; null; Modifier>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; null; Modifier>
<org.junit.runners.model.TestClass; getName[]; java.lang.String; org.junit.runners.Parameterized; getParametersMethod[org.junit.runners.model.TestClass]; org.junit.runners.model.FrameworkMethod; null; testClass>
<java.lang.Class; getAnnotation[java.lang.Class<org.junit.runners.Suite.SuiteClasses>]; org.junit.runners.Suite.SuiteClasses; org.junit.runners.Suite; getAnnotatedClasses[java.lang.Class<?>]; java.lang.Class<?>[]; null; klass>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.Suite; getAnnotatedClasses[java.lang.Class<?>]; java.lang.Class<?>[]; null; String>
<java.lang.Class; getName[]; java.lang.String; org.junit.runners.Suite; getAnnotatedClasses[java.lang.Class<?>]; java.lang.Class<?>[]; null; klass>
<org.junit.runners.Suite$SuiteClasses; value[]; java.lang.Class<?>[]; org.junit.runners.Suite; getAnnotatedClasses[java.lang.Class<?>]; java.lang.Class<?>[]; null; annotation>
<org.junit.runners.Suite; getAnnotatedClasses[java.lang.Class<?>]; java.lang.Class<?>[]; org.junit.runners.Suite; Suite[java.lang.Class<?>, org.junit.runners.model.RunnerBuilder]; void; null; this>
<org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; org.junit.runners.Suite; Suite[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>[]]; void; null; builder>
<org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; org.junit.runners.Suite; Suite[org.junit.runners.model.RunnerBuilder, java.lang.Class<?>, java.lang.Class<?>[]]; void; null; builder>
<org.junit.runner.Runner; getDescription[]; org.junit.runner.Description; org.junit.runners.Suite; describeChild[org.junit.runner.Runner]; org.junit.runner.Description; null; child>
<org.junit.runner.Runner; run[org.junit.runner.notification.RunNotifier]; void; org.junit.runners.Suite; runChild[org.junit.runner.Runner, org.junit.runner.notification.RunNotifier]; void; null; runner>
<org.junit.internal.runners.model.ReflectiveCallable; run[]; java.lang.Object; org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; run[org.junit.runner.notification.RunNotifier]; new ReflectiveCallable(){
  @Override protected Object runReflectiveCall() throws Throwable {
    return fMethod.invoke(target,params);
  }
}
>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.model.ReflectiveCallable; runReflectiveCall[]; java.lang.Object; run[]; fMethod>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; null; fMethod>
<org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; Modifier>
<java.lang.Class; getModifiers[]; int; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod.getDeclaringClass()>
<java.lang.reflect.Method; getDeclaringClass[]; java.lang.Class<?>; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; getModifiers[]; fMethod>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.Class; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod.getDeclaringClass()>
<java.lang.reflect.Method; getDeclaringClass[]; java.lang.Class<?>; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; getName[]; fMethod>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<org.junit.runners.model.NoGenericTypeParametersValidator; validate[java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.FrameworkMethod; validateNoTypeParametersOnArgs[java.util.List<java.lang.Throwable>]; void; null; new NoGenericTypeParametersValidator(fMethod)>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; other.getName()>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; equals[java.lang.Object]; other>
<org.junit.runners.model.FrameworkMethod; getName[]; java.lang.String; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; this>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; other>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; this>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; other>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; other.getParameterTypes()[i]>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; equals[java.lang.Object]; other>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; isShadowedBy[org.junit.runners.model.FrameworkMethod]; boolean; null; this>
<java.lang.Class; isInstance[java.lang.Object]; boolean; org.junit.runners.model.FrameworkMethod; equals[java.lang.Object]; boolean; null; FrameworkMethod.class>
<java.lang.reflect.Method; equals[java.lang.Object]; boolean; org.junit.runners.model.FrameworkMethod; equals[java.lang.Object]; boolean; null; ((FrameworkMethod)obj).fMethod>
<java.lang.reflect.Method; hashCode[]; int; org.junit.runners.model.FrameworkMethod; hashCode[]; int; null; fMethod>
<org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; producesType[java.lang.reflect.Type]; boolean; null; this>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.runners.model.FrameworkMethod; producesType[java.lang.reflect.Type]; boolean; null; ((Class<?>)type)>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; org.junit.runners.model.FrameworkMethod; producesType[java.lang.reflect.Type]; boolean; null; fMethod>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.runners.model.FrameworkMethod; getParameterTypes[]; java.lang.Class<?>[]; null; fMethod>
<java.lang.reflect.AccessibleObject; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.model.FrameworkMethod; getAnnotations[]; java.lang.annotation.Annotation[]; null; fMethod>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<T>]; T; org.junit.runners.model.FrameworkMethod; getAnnotation[java.lang.Class<T>]; T; null; fMethod>
<org.junit.runners.model.RunnerBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; org.junit.runners.model.RunnerBuilder; safeRunnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<java.util.Set; add[java.lang.Class<?>]; boolean; org.junit.runners.model.RunnerBuilder; addParent[java.lang.Class<?>]; java.lang.Class<?>; null; parents>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.model.RunnerBuilder; addParent[java.lang.Class<?>]; java.lang.Class<?>; null; String>
<java.lang.Class; getName[]; java.lang.String; org.junit.runners.model.RunnerBuilder; addParent[java.lang.Class<?>]; java.lang.Class<?>; null; parent>
<java.util.Set; remove[java.lang.Object]; boolean; org.junit.runners.model.RunnerBuilder; removeParent[java.lang.Class<?>]; void; null; parents>
<org.junit.runners.model.RunnerBuilder; addParent[java.lang.Class<?>]; java.lang.Class<?>; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; this>
<org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; this>
<org.junit.runners.model.RunnerBuilder; removeParent[java.lang.Class<?>]; void; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; this>
<org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.util.List<java.lang.Class<?>>]; java.util.List<org.junit.runner.Runner>; null; this>
<java.util.List; toArray[java.lang.Class<?>[]]; java.lang.Class<?>[]; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.util.List<java.lang.Class<?>>]; java.util.List<org.junit.runner.Runner>; null; children>
<org.junit.runners.model.RunnerBuilder; safeRunnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; this>
<java.util.ArrayList; add[org.junit.runner.Runner]; boolean; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; runners>
<java.lang.Class; getConstructors[]; java.lang.reflect.Constructor<?>[]; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; klass>
<org.junit.runners.model.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getDeclaredMethods[]; java.lang.reflect.Method[]; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; eachClass>
<org.junit.runners.model.TestClass; addToAnnotationLists[org.junit.runners.model.FrameworkMethod, java.util.Map<java.lang.Class<?>,java.util.List<org.junit.runners.model.FrameworkMethod>>]; void; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getDeclaredFields[]; java.lang.reflect.Field[]; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; eachClass>
<org.junit.runners.model.TestClass; addToAnnotationLists[org.junit.runners.model.FrameworkField, java.util.Map<java.lang.Class<?>,java.util.List<org.junit.runners.model.FrameworkField>>]; void; org.junit.runners.model.TestClass; TestClass[java.lang.Class<?>]; void; null; this>
<org.junit.runners.model.FrameworkMember; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; member>
<java.lang.annotation.Annotation; annotationType[]; java.lang.Class<? extends java.lang.annotation.Annotation>; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; each>
<org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; this>
<org.junit.runners.model.FrameworkMember; isShadowedBy[java.util.List<T>]; boolean; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; member>
<org.junit.runners.model.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; this>
<java.util.List; add[int, T]; void; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; members>
<java.util.List; add[T]; boolean; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; members>
<org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<org.junit.runners.model.FrameworkMethod>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; org.junit.runners.model.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; this>
<org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<org.junit.runners.model.FrameworkField>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkField>; org.junit.runners.model.TestClass; getAnnotatedFields[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkField>; null; this>
<java.util.Map; containsKey[java.lang.Object]; boolean; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.util.Map; put[java.lang.Class<?>, java.util.List<T>]; java.util.List<T>; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.util.Map; get[java.lang.Object]; java.util.List<T>; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.runners.model.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; null; annotation>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.runners.model.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; null; annotation>
<java.util.ArrayList; add[java.lang.Class<?>]; boolean; org.junit.runners.model.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; results>
<java.lang.Class; getSuperclass[]; java.lang.Class<? super >; org.junit.runners.model.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; current>
<java.lang.Class; getName[]; java.lang.String; org.junit.runners.model.TestClass; getName[]; java.lang.String; null; fClass>
<java.lang.Class; getConstructors[]; java.lang.reflect.Constructor<?>[]; org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; null; fClass>
<org.junit.Assert; assertEquals[long, long]; void; org.junit.runners.model.TestClass; getOnlyConstructor[]; java.lang.reflect.Constructor<?>; null; Assert>
<java.lang.Class; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.model.TestClass; getAnnotations[]; java.lang.annotation.Annotation[]; null; fClass>
<org.junit.runners.model.TestClass; getAnnotatedFields[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkField>; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; this>
<org.junit.runners.model.FrameworkField; get[java.lang.Object]; java.lang.Object; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; each>
<java.lang.Class; isInstance[java.lang.Object]; boolean; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; valueClass>
<java.util.List; add[T]; boolean; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; results>
<java.lang.Class; cast[java.lang.Object]; T; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; valueClass>
<java.lang.Class; isMemberClass[]; boolean; org.junit.runners.model.TestClass; isANonStaticInnerClass[]; boolean; null; fClass>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.runners.model.TestClass; isANonStaticInnerClass[]; boolean; null; this>
<java.lang.Class; getModifiers[]; int; org.junit.runners.model.TestClass; isANonStaticInnerClass[]; boolean; null; fClass>
<java.util.Arrays; asList[java.lang.Throwable[]]; java.util.List<java.lang.Throwable>; org.junit.runners.model.InitializationError; InitializationError[java.lang.Throwable]; void; null; Arrays>
<java.lang.reflect.Field; getName[]; java.lang.String; org.junit.runners.model.FrameworkField; getName[]; java.lang.String; null; getField()>
<org.junit.runners.model.FrameworkField; getField[]; java.lang.reflect.Field; org.junit.runners.model.FrameworkField; getName[]; java.lang.String; getName[]; this>
<java.lang.reflect.AccessibleObject; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.runners.model.FrameworkField; getAnnotations[]; java.lang.annotation.Annotation[]; null; fField>
<java.lang.reflect.Field; getModifiers[]; int; org.junit.runners.model.FrameworkField; isPublic[]; boolean; null; fField>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.runners.model.FrameworkField; isPublic[]; boolean; null; Modifier>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.runners.model.FrameworkField; isShadowedBy[org.junit.runners.model.FrameworkField]; boolean; null; otherMember.getName()>
<org.junit.runners.model.FrameworkField; getName[]; java.lang.String; org.junit.runners.model.FrameworkField; isShadowedBy[org.junit.runners.model.FrameworkField]; boolean; equals[java.lang.Object]; otherMember>
<org.junit.runners.model.FrameworkField; getName[]; java.lang.String; org.junit.runners.model.FrameworkField; isShadowedBy[org.junit.runners.model.FrameworkField]; boolean; null; this>
<java.lang.reflect.Field; getModifiers[]; int; org.junit.runners.model.FrameworkField; isStatic[]; boolean; null; fField>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.runners.model.FrameworkField; isStatic[]; boolean; null; Modifier>
<java.lang.reflect.Field; getType[]; java.lang.Class<?>; org.junit.runners.model.FrameworkField; getType[]; java.lang.Class<?>; null; fField>
<java.lang.reflect.Field; get[java.lang.Object]; java.lang.Object; org.junit.runners.model.FrameworkField; get[java.lang.Object]; java.lang.Object; null; fField>
<java.lang.reflect.Method; getGenericParameterTypes[]; java.lang.reflect.Type[]; org.junit.runners.model.NoGenericTypeParametersValidator; validate[java.util.List<java.lang.Throwable>]; void; null; fMethod>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validate[java.util.List<java.lang.Throwable>]; void; null; this>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; fMethod>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnParameterizedType[java.lang.reflect.ParameterizedType, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnWildcardType[java.lang.reflect.WildcardType, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnGenericArrayType[java.lang.reflect.GenericArrayType, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.ParameterizedType; getActualTypeArguments[]; java.lang.reflect.Type[]; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnParameterizedType[java.lang.reflect.ParameterizedType, java.util.List<java.lang.Throwable>]; void; null; parameterized>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnParameterizedType[java.lang.reflect.ParameterizedType, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.WildcardType; getUpperBounds[]; java.lang.reflect.Type[]; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnWildcardType[java.lang.reflect.WildcardType, java.util.List<java.lang.Throwable>]; void; null; wildcard>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnWildcardType[java.lang.reflect.WildcardType, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.WildcardType; getLowerBounds[]; java.lang.reflect.Type[]; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnWildcardType[java.lang.reflect.WildcardType, java.util.List<java.lang.Throwable>]; void; null; wildcard>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnWildcardType[java.lang.reflect.WildcardType, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnGenericArrayType[java.lang.reflect.GenericArrayType, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.reflect.GenericArrayType; getGenericComponentType[]; java.lang.reflect.Type; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnGenericArrayType[java.lang.reflect.GenericArrayType, java.util.List<java.lang.Throwable>]; void; null; arrayType>
<java.util.Collections; unmodifiableList[java.util.List<? extends java.lang.Throwable>]; java.util.List<java.lang.Throwable>; org.junit.runners.model.MultipleFailureException; getFailures[]; java.util.List<java.lang.Throwable>; null; Collections>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; String>
<java.util.List; size[]; int; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; fErrors>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; sb>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; String>
<java.lang.Class; getName[]; java.lang.String; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; getName[]; e>
<java.lang.Throwable; getMessage[]; java.lang.String; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; e>
<java.lang.StringBuilder; toString[]; java.lang.String; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; sb>
<java.util.List; isEmpty[]; boolean; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; size[]; int; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; get[int]; java.lang.Throwable; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<org.junit.runners.model.FrameworkMember; isShadowedBy[T]; boolean; org.junit.runners.model.FrameworkMember; isShadowedBy[java.util.List<T>]; boolean; null; this>
<org.junit.Assume; assumeThat[java.lang.Boolean, org.hamcrest.Matcher<java.lang.Boolean>]; void; org.junit.Assume; assumeTrue[boolean]; void; null; this>
<org.hamcrest.CoreMatchers; is[java.lang.Boolean]; org.hamcrest.Matcher<java.lang.Boolean>; org.junit.Assume; assumeTrue[boolean]; void; assumeThat[java.lang.Boolean, org.hamcrest.Matcher<java.lang.Boolean>]; this>
<org.junit.Assume; assumeThat[java.lang.Iterable<java.lang.Object>, org.hamcrest.Matcher<java.lang.Iterable<java.lang.Object>>]; void; org.junit.Assume; assumeNotNull[java.lang.Object[]]; void; null; this>
<java.util.Arrays; asList[java.lang.Object[]]; java.util.List<java.lang.Object>; org.junit.Assume; assumeNotNull[java.lang.Object[]]; void; null; this>
<org.junit.internal.matchers.Each; each[org.hamcrest.Matcher<java.lang.Object>]; org.hamcrest.Matcher<java.lang.Iterable<java.lang.Object>>; org.junit.Assume; assumeNotNull[java.lang.Object[]]; void; null; Each>
<org.hamcrest.CoreMatchers; notNullValue[]; org.hamcrest.Matcher<java.lang.Object>; org.junit.Assume; assumeNotNull[java.lang.Object[]]; void; null; this>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.junit.Assume; assumeThat[T, org.hamcrest.Matcher<T>]; void; null; matcher>
<org.junit.Assume; assumeThat[java.lang.Throwable, org.hamcrest.Matcher<java.lang.Throwable>]; void; org.junit.Assume; assumeNoException[java.lang.Throwable]; void; null; this>
<org.hamcrest.CoreMatchers; nullValue[]; org.hamcrest.Matcher<java.lang.Throwable>; org.junit.Assume; assumeNoException[java.lang.Throwable]; void; null; this>
<java.lang.System; exit[int]; void; org.junit.internal.RealSystem; exit[int]; void; null; System>
<org.hamcrest.CoreMatchers; not[org.hamcrest.Matcher<java.lang.Iterable<T>>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.Each; each[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[org.hamcrest.Matcher<? extends T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.Each; each[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.CoreMatchers; not[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<T>; org.junit.internal.matchers.Each; each[org.hamcrest.Matcher<T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.hamcrest.BaseMatcher<java.lang.Iterable<T>>; matches[java.lang.Object]; boolean; null; allItemsAre>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.hamcrest.BaseMatcher<java.lang.Iterable<T>>; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.SelfDescribing; describeTo[org.hamcrest.Description]; void; org.hamcrest.BaseMatcher<java.lang.Iterable<T>>; describeTo[org.hamcrest.Description]; void; null; individual>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.junit.internal.matchers.IsCollectionContaining; matchesSafely[java.lang.Iterable<T>]; boolean; null; elementMatcher>
<org.hamcrest.Description; appendDescriptionOf[org.hamcrest.SelfDescribing]; org.hamcrest.Description; org.junit.internal.matchers.IsCollectionContaining; describeTo[org.hamcrest.Description]; void; null; description.appendText("a collection containing ")>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.IsCollectionContaining; describeTo[org.hamcrest.Description]; void; appendDescriptionOf[org.hamcrest.SelfDescribing]; description>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[org.hamcrest.Matcher<? extends T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.IsCollectionContaining; hasItem[T]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.core.IsEqual; equalTo[T]; org.hamcrest.Matcher<T>; org.junit.internal.matchers.IsCollectionContaining; hasItem[T]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<java.util.Collection; add[org.hamcrest.Matcher<? extends java.lang.Iterable<T>>]; boolean; org.junit.internal.matchers.IsCollectionContaining; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; all>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[org.hamcrest.Matcher<? extends T>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.IsCollectionContaining; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.core.AllOf; allOf[java.lang.Iterable<org.hamcrest.Matcher<? extends java.lang.Iterable<T>>>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.IsCollectionContaining; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<java.util.Collection; add[org.hamcrest.Matcher<? extends java.lang.Iterable<T>>]; boolean; org.junit.internal.matchers.IsCollectionContaining; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; all>
<org.junit.internal.matchers.IsCollectionContaining; hasItem[T]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.IsCollectionContaining; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.core.AllOf; allOf[java.lang.Iterable<org.hamcrest.Matcher<? extends java.lang.Iterable<T>>>]; org.hamcrest.Matcher<java.lang.Iterable<T>>; org.junit.internal.matchers.IsCollectionContaining; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; this>
<org.hamcrest.Matcher; matches[java.lang.Object]; boolean; org.junit.internal.matchers.CombinableMatcher; matches[java.lang.Object]; boolean; null; fMatcher>
<org.hamcrest.Description; appendDescriptionOf[org.hamcrest.SelfDescribing]; org.hamcrest.Description; org.junit.internal.matchers.CombinableMatcher; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.CoreMatchers; allOf[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<T>; org.junit.internal.matchers.CombinableMatcher; and[org.hamcrest.Matcher<? extends T>]; org.junit.internal.matchers.CombinableMatcher<T>; null; this>
<org.hamcrest.CoreMatchers; anyOf[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<T>; org.junit.internal.matchers.CombinableMatcher; or[org.hamcrest.Matcher<? extends T>]; org.junit.internal.matchers.CombinableMatcher<T>; null; this>
<java.lang.String; indexOf[java.lang.String]; int; org.junit.internal.matchers.StringContains; evalSubstringOf[java.lang.String]; boolean; null; s>
<org.junit.internal.matchers.SubstringMatcher; evalSubstringOf[java.lang.String]; boolean; org.junit.internal.matchers.SubstringMatcher; matchesSafely[java.lang.String]; boolean; null; this>
<org.hamcrest.Description; appendValue[java.lang.Object]; org.hamcrest.Description; org.junit.internal.matchers.SubstringMatcher; describeTo[org.hamcrest.Description]; void; null; description.appendText("a string ").appendText(relationship()).appendText(" ")>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.SubstringMatcher; describeTo[org.hamcrest.Description]; void; appendValue[java.lang.Object]; description.appendText("a string ").appendText(relationship())>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.SubstringMatcher; describeTo[org.hamcrest.Description]; void; appendText[java.lang.String]; description.appendText("a string ")>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.matchers.SubstringMatcher; describeTo[org.hamcrest.Description]; void; appendText[java.lang.String]; description>
<org.junit.internal.matchers.SubstringMatcher; relationship[]; java.lang.String; org.junit.internal.matchers.SubstringMatcher; describeTo[org.hamcrest.Description]; void; null; this>
<org.junit.internal.matchers.TypeSafeMatcher; findExpectedType[java.lang.Class<?>]; java.lang.Class<?>; org.junit.internal.matchers.TypeSafeMatcher; TypeSafeMatcher[]; void; null; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends org.junit.internal.matchers.TypeSafeMatcher>; org.junit.internal.matchers.TypeSafeMatcher; TypeSafeMatcher[]; void; null; this>
<java.lang.Class; getSuperclass[]; java.lang.Class<? super >; org.junit.internal.matchers.TypeSafeMatcher; findExpectedType[java.lang.Class<?>]; java.lang.Class<?>; null; c>
<java.lang.Class; getDeclaredMethods[]; java.lang.reflect.Method[]; org.junit.internal.matchers.TypeSafeMatcher; findExpectedType[java.lang.Class<?>]; java.lang.Class<?>; null; c>
<org.junit.internal.matchers.TypeSafeMatcher; isMatchesSafelyMethod[java.lang.reflect.Method]; boolean; org.junit.internal.matchers.TypeSafeMatcher; findExpectedType[java.lang.Class<?>]; java.lang.Class<?>; null; this>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.matchers.TypeSafeMatcher; findExpectedType[java.lang.Class<?>]; java.lang.Class<?>; null; method>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.internal.matchers.TypeSafeMatcher; isMatchesSafelyMethod[java.lang.reflect.Method]; boolean; null; method.getName()>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.matchers.TypeSafeMatcher; isMatchesSafelyMethod[java.lang.reflect.Method]; boolean; equals[java.lang.Object]; method>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.matchers.TypeSafeMatcher; isMatchesSafelyMethod[java.lang.reflect.Method]; boolean; null; method>
<java.lang.reflect.Method; isSynthetic[]; boolean; org.junit.internal.matchers.TypeSafeMatcher; isMatchesSafelyMethod[java.lang.reflect.Method]; boolean; null; method>
<java.lang.Class; isInstance[java.lang.Object]; boolean; org.junit.internal.matchers.TypeSafeMatcher; matches[java.lang.Object]; boolean; null; expectedType>
<org.junit.internal.matchers.TypeSafeMatcher; matchesSafely[T]; boolean; org.junit.internal.matchers.TypeSafeMatcher; matches[java.lang.Object]; boolean; null; this>
<org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.reflect.Array; get[java.lang.Object, int]; java.lang.Object; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; Array>
<java.lang.reflect.Array; get[java.lang.Object, int]; java.lang.Object; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; Array>
<org.junit.internal.ComparisonCriteria; isArray[java.lang.Object]; boolean; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.internal.ComparisonCriteria; isArray[java.lang.Object]; boolean; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<org.junit.internal.ArrayComparisonFailure; addDimension[int]; void; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; e>
<org.junit.internal.ComparisonCriteria; assertElementsEqual[java.lang.Object, java.lang.Object]; void; org.junit.internal.ComparisonCriteria; arrayEquals[java.lang.String, java.lang.Object, java.lang.Object]; void; null; this>
<java.lang.Class; isArray[]; boolean; org.junit.internal.ComparisonCriteria; isArray[java.lang.Object]; boolean; null; expected.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Object>; org.junit.internal.ComparisonCriteria; isArray[java.lang.Object]; boolean; isArray[]; expected>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; null; Assert>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; null; Assert>
<java.lang.reflect.Array; getLength[java.lang.Object]; int; org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; null; Array>
<java.lang.reflect.Array; getLength[java.lang.Object]; int; org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; null; Array>
<org.junit.Assert; fail[java.lang.String]; void; org.junit.internal.ComparisonCriteria; assertArraysAreSameLength[java.lang.Object, java.lang.Object, java.lang.String]; int; null; Assert>
<org.junit.internal.ArrayComparisonFailure; addDimension[int]; void; org.junit.internal.ArrayComparisonFailure; ArrayComparisonFailure[java.lang.String, java.lang.AssertionError, int]; void; null; this>
<java.util.List; add[int, java.lang.Integer]; void; org.junit.internal.ArrayComparisonFailure; addDimension[int]; void; null; fIndices>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[int]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<java.lang.Throwable; getMessage[]; java.lang.String; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; fCause>
<java.lang.StringBuilder; toString[]; java.lang.String; org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; null; builder>
<org.junit.internal.ArrayComparisonFailure; getMessage[]; java.lang.String; org.junit.internal.ArrayComparisonFailure; toString[]; java.lang.String; null; this>
<java.lang.Class; getAnnotation[java.lang.Class<org.junit.runner.RunWith>]; org.junit.runner.RunWith; org.junit.internal.builders.AnnotatedBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; testClass>
<org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; org.junit.internal.builders.AnnotatedBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.runner.RunWith; value[]; java.lang.Class<? extends org.junit.runner.Runner>; org.junit.internal.builders.AnnotatedBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; annotation>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; null; runnerClass.getConstructor(Class.class)>
<java.lang.Class; getConstructor[java.lang.Class<?>[]]; java.lang.reflect.Constructor<>; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; newInstance[java.lang.Object[]]; runnerClass>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; null; runnerClass.getConstructor(Class.class,RunnerBuilder.class)>
<java.lang.Class; getConstructor[java.lang.Class<?>[]]; java.lang.reflect.Constructor<>; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; newInstance[java.lang.Object[]]; runnerClass>
<java.lang.Class; getSimpleName[]; java.lang.String; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; null; runnerClass>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.internal.builders.AnnotatedBuilder; buildRunner[java.lang.Class<? extends org.junit.runner.Runner>, java.lang.Class<?>]; org.junit.runner.Runner; null; String>
<org.junit.runner.notification.RunNotifier; fireTestIgnored[org.junit.runner.Description]; void; org.junit.internal.builders.IgnoredClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; notifier>
<org.junit.internal.builders.IgnoredClassRunner; getDescription[]; org.junit.runner.Description; org.junit.internal.builders.IgnoredClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; org.junit.internal.builders.IgnoredClassRunner; getDescription[]; org.junit.runner.Description; null; Description>
<org.junit.internal.builders.JUnit3Builder; isPre4Test[java.lang.Class<?>]; boolean; org.junit.internal.builders.JUnit3Builder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.internal.builders.JUnit3Builder; isPre4Test[java.lang.Class<?>]; boolean; null; junit.framework.TestCase.class>
<java.lang.Class; getAnnotation[java.lang.Class<org.junit.Ignore>]; org.junit.Ignore; org.junit.internal.builders.IgnoredBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; testClass>
<java.util.Arrays; asList[org.junit.runners.model.RunnerBuilder[]]; java.util.List<org.junit.runners.model.RunnerBuilder>; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; Arrays>
<org.junit.internal.builders.AllDefaultPossibilitiesBuilder; ignoredBuilder[]; org.junit.internal.builders.IgnoredBuilder; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.internal.builders.AllDefaultPossibilitiesBuilder; annotatedBuilder[]; org.junit.internal.builders.AnnotatedBuilder; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.internal.builders.AllDefaultPossibilitiesBuilder; suiteMethodBuilder[]; org.junit.runners.model.RunnerBuilder; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.internal.builders.AllDefaultPossibilitiesBuilder; junit3Builder[]; org.junit.internal.builders.JUnit3Builder; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.internal.builders.AllDefaultPossibilitiesBuilder; junit4Builder[]; org.junit.internal.builders.JUnit4Builder; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<org.junit.runners.model.RunnerBuilder; safeRunnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; org.junit.internal.builders.AllDefaultPossibilitiesBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; each>
<org.junit.internal.builders.SuiteMethodBuilder; hasSuiteMethod[java.lang.Class<?>]; boolean; org.junit.internal.builders.SuiteMethodBuilder; runnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; null; this>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; org.junit.internal.builders.SuiteMethodBuilder; hasSuiteMethod[java.lang.Class<?>]; boolean; null; testClass>
<org.junit.runners.model.TestClass; getAnnotatedFields[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<org.junit.runners.model.FrameworkField>; org.junit.internal.runners.rules.RuleFieldValidator; validate[org.junit.runners.model.TestClass, java.util.List<java.lang.Throwable>]; void; null; target>
<org.junit.internal.runners.rules.RuleFieldValidator; validateField[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; org.junit.internal.runners.rules.RuleFieldValidator; validate[org.junit.runners.model.TestClass, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; optionallyValidateStatic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; org.junit.internal.runners.rules.RuleFieldValidator; validateField[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; validatePublic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; org.junit.internal.runners.rules.RuleFieldValidator; validateField[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; validateTestRuleOrMethodRule[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; org.junit.internal.runners.rules.RuleFieldValidator; validateField[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.FrameworkField; isStatic[]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; optionallyValidateStatic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; field>
<org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; org.junit.internal.runners.rules.RuleFieldValidator; optionallyValidateStatic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.runners.model.FrameworkField; isPublic[]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; validatePublic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; field>
<org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; org.junit.internal.runners.rules.RuleFieldValidator; validatePublic[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; isMethodRule[org.junit.runners.model.FrameworkField]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; validateTestRuleOrMethodRule[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; isTestRule[org.junit.runners.model.FrameworkField]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; validateTestRuleOrMethodRule[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; org.junit.internal.runners.rules.RuleFieldValidator; validateTestRuleOrMethodRule[org.junit.runners.model.FrameworkField, java.util.List<java.lang.Throwable>]; void; null; this>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; isTestRule[org.junit.runners.model.FrameworkField]; boolean; null; TestRule.class>
<org.junit.runners.model.FrameworkField; getType[]; java.lang.Class<?>; org.junit.internal.runners.rules.RuleFieldValidator; isTestRule[org.junit.runners.model.FrameworkField]; boolean; null; target>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; isMethodRule[org.junit.runners.model.FrameworkField]; boolean; null; org.junit.rules.MethodRule.class>
<org.junit.runners.model.FrameworkField; getType[]; java.lang.Class<?>; org.junit.internal.runners.rules.RuleFieldValidator; isMethodRule[org.junit.runners.model.FrameworkField]; boolean; null; target>
<java.lang.Class; getSimpleName[]; java.lang.String; org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; null; fAnnotation>
<org.junit.runners.model.FrameworkField; getName[]; java.lang.String; org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; null; field>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; null; errors>
<java.lang.Runnable; run[]; void; org.junit.internal.runners.ClassRoadie; runUnprotected[]; void; null; fRunnable>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.ClassRoadie; addFailure[java.lang.Throwable]; void; null; fNotifier>
<org.junit.internal.runners.ClassRoadie; runBefores[]; void; org.junit.internal.runners.ClassRoadie; runProtected[]; void; null; this>
<org.junit.internal.runners.ClassRoadie; runUnprotected[]; void; org.junit.internal.runners.ClassRoadie; runProtected[]; void; null; this>
<org.junit.internal.runners.ClassRoadie; runAfters[]; void; org.junit.internal.runners.ClassRoadie; runProtected[]; void; null; this>
<org.junit.internal.runners.TestClass; getBefores[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.ClassRoadie; runBefores[]; void; null; fTestClass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.ClassRoadie; runBefores[]; void; null; before>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.ClassRoadie; runBefores[]; void; null; e>
<org.junit.internal.runners.ClassRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.ClassRoadie; runBefores[]; void; null; this>
<org.junit.internal.runners.TestClass; getAfters[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.ClassRoadie; runAfters[]; void; null; fTestClass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.ClassRoadie; runAfters[]; void; null; after>
<org.junit.internal.runners.ClassRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.ClassRoadie; runAfters[]; void; null; this>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.ClassRoadie; runAfters[]; void; null; e>
<org.junit.internal.runners.ClassRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.ClassRoadie; runAfters[]; void; null; this>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.TestClass; getTestMethods[]; java.util.List<java.lang.reflect.Method>; null; this>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.TestClass; getBefores[]; java.util.List<java.lang.reflect.Method>; null; this>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.TestClass; getAfters[]; java.util.List<java.lang.reflect.Method>; null; this>
<org.junit.internal.runners.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; this>
<java.lang.Class; getDeclaredMethods[]; java.lang.reflect.Method[]; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; eachClass>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<>]; ; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; eachMethod>
<org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.util.List<java.lang.reflect.Method>]; boolean; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; this>
<java.util.List; add[java.lang.reflect.Method]; boolean; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; results>
<org.junit.internal.runners.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; this>
<java.util.Collections; reverse[java.util.List<?>]; void; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; Collections>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.internal.runners.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; null; annotation>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.internal.runners.TestClass; runsTopToBottom[java.lang.Class<? extends java.lang.annotation.Annotation>]; boolean; null; annotation>
<org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.util.List<java.lang.reflect.Method>]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; previous.getName()>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; equals[java.lang.Object]; previous>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; current>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; previous>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; current>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; previous>
<java.lang.Object; equals[java.lang.Object]; boolean; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; previous.getParameterTypes()[i]>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; equals[java.lang.Object]; previous>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.TestClass; isShadowed[java.lang.reflect.Method, java.lang.reflect.Method]; boolean; null; current>
<java.util.ArrayList; add[java.lang.Class<?>]; boolean; org.junit.internal.runners.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; results>
<java.lang.Class; getSuperclass[]; java.lang.Class<? super >; org.junit.internal.runners.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; current>
<java.lang.Class; getConstructor[java.lang.Class<?>[]]; java.lang.reflect.Constructor<>; org.junit.internal.runners.TestClass; getConstructor[]; java.lang.reflect.Constructor<?>; null; fClass>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.TestClass; getName[]; java.lang.String; null; fClass>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<org.junit.Ignore>]; org.junit.Ignore; org.junit.internal.runners.TestMethod; isIgnored[]; boolean; null; fMethod>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<org.junit.Test>]; org.junit.Test; org.junit.internal.runners.TestMethod; getTimeout[]; long; null; fMethod>
<org.junit.Test; timeout[]; long; org.junit.internal.runners.TestMethod; getTimeout[]; long; null; annotation>
<java.lang.reflect.Method; getAnnotation[java.lang.Class<org.junit.Test>]; org.junit.Test; org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; null; fMethod>
<org.junit.Test; expected[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; null; annotation>
<org.junit.Test; expected[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; null; annotation>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.internal.runners.TestMethod; isUnexpected[java.lang.Throwable]; boolean; null; getExpectedException()>
<org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.TestMethod; isUnexpected[java.lang.Throwable]; boolean; isAssignableFrom[java.lang.Class<?>]; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.TestMethod; isUnexpected[java.lang.Throwable]; boolean; null; exception>
<org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.TestMethod; expectsException[]; boolean; null; this>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.TestMethod; getBefores[]; java.util.List<java.lang.reflect.Method>; null; fTestClass>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.TestMethod; getAfters[]; java.util.List<java.lang.reflect.Method>; null; fTestClass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.TestMethod; invoke[java.lang.Object]; void; null; fMethod>
<org.junit.internal.runners.TestMethod; isIgnored[]; boolean; org.junit.internal.runners.MethodRoadie; run[]; void; null; fTestMethod>
<org.junit.runner.notification.RunNotifier; fireTestIgnored[org.junit.runner.Description]; void; org.junit.internal.runners.MethodRoadie; run[]; void; null; fNotifier>
<org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; org.junit.internal.runners.MethodRoadie; run[]; void; null; fNotifier>
<org.junit.internal.runners.TestMethod; getTimeout[]; long; org.junit.internal.runners.MethodRoadie; run[]; void; null; fTestMethod>
<org.junit.internal.runners.MethodRoadie; runWithTimeout[long]; void; org.junit.internal.runners.MethodRoadie; run[]; void; null; this>
<org.junit.internal.runners.MethodRoadie; runTest[]; void; org.junit.internal.runners.MethodRoadie; run[]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; org.junit.internal.runners.MethodRoadie; run[]; void; null; fNotifier>
<org.junit.internal.runners.MethodRoadie; runBeforesThenTestThenAfters[java.lang.Runnable]; void; org.junit.internal.runners.MethodRoadie; runWithTimeout[long]; void; null; this>
<java.util.concurrent.Executors; newSingleThreadExecutor[]; java.util.concurrent.ExecutorService; java.lang.Object; run[]; void; null; Executors>
<org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; java.lang.Object; call[]; java.lang.Object; null; this>
<java.util.concurrent.ExecutorService; submit[java.util.concurrent.Callable<java.lang.Object>]; java.util.concurrent.Future<java.lang.Object>; java.lang.Object; run[]; void; null; service>
<java.util.concurrent.ExecutorService; shutdown[]; void; java.lang.Object; run[]; void; null; service>
<java.util.concurrent.ExecutorService; awaitTermination[long, java.util.concurrent.TimeUnit]; boolean; java.lang.Object; run[]; void; null; service>
<java.util.concurrent.ExecutorService; shutdownNow[]; java.util.List<java.lang.Runnable>; java.lang.Object; run[]; void; null; service>
<java.util.concurrent.Future; get[long, java.util.concurrent.TimeUnit]; java.lang.Object; java.lang.Object; run[]; void; null; result>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; java.lang.Object; run[]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; java.lang.Object; run[]; void; null; String>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; java.lang.Object; run[]; void; null; this>
<org.junit.internal.runners.MethodRoadie; runBeforesThenTestThenAfters[java.lang.Runnable]; void; org.junit.internal.runners.MethodRoadie; runTest[]; void; null; this>
<org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; java.lang.Object; run[]; void; null; this>
<org.junit.internal.runners.MethodRoadie; runBefores[]; void; org.junit.internal.runners.MethodRoadie; runBeforesThenTestThenAfters[java.lang.Runnable]; void; null; this>
<java.lang.Runnable; run[]; void; org.junit.internal.runners.MethodRoadie; runBeforesThenTestThenAfters[java.lang.Runnable]; void; null; test>
<org.junit.internal.runners.MethodRoadie; runAfters[]; void; org.junit.internal.runners.MethodRoadie; runBeforesThenTestThenAfters[java.lang.Runnable]; void; null; this>
<org.junit.internal.runners.TestMethod; invoke[java.lang.Object]; void; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod>
<org.junit.internal.runners.TestMethod; expectsException[]; boolean; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; this>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod.getExpectedException()>
<org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; getName[]; fTestMethod>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; e>
<org.junit.internal.runners.TestMethod; expectsException[]; boolean; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; this>
<org.junit.internal.runners.TestMethod; isUnexpected[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; fTestMethod.getExpectedException()>
<org.junit.internal.runners.TestMethod; getExpectedException[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; getName[]; fTestMethod>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; actual.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; getName[]; actual>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; this>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runTestMethod[]; void; null; this>
<org.junit.internal.runners.TestMethod; getBefores[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.MethodRoadie; runBefores[]; void; null; fTestMethod>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.MethodRoadie; runBefores[]; void; null; before>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.MethodRoadie; runBefores[]; void; null; e>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runBefores[]; void; null; this>
<org.junit.internal.runners.TestMethod; getAfters[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.MethodRoadie; runAfters[]; void; null; fTestMethod>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.MethodRoadie; runAfters[]; void; null; after>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runAfters[]; void; null; this>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.MethodRoadie; runAfters[]; void; null; e>
<org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.MethodRoadie; runAfters[]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.MethodRoadie; addFailure[java.lang.Throwable]; void; null; fNotifier>
<java.util.Arrays; asList[java.lang.Throwable[]]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.InitializationError; InitializationError[java.lang.Throwable[]]; void; null; Arrays>
<org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; org.junit.internal.runners.SuiteMethod; SuiteMethod[java.lang.Class<?>]; void; null; this>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; klass>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; suiteMethod>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; klass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; suiteMethod>
<java.lang.reflect.InvocationTargetException; getCause[]; java.lang.Throwable; org.junit.internal.runners.SuiteMethod; testFromSuiteMethod[java.lang.Class<?>]; junit.framework.Test; null; e>
<org.junit.internal.runners.JUnit4ClassRunner; getTestMethods[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.JUnit4ClassRunner; JUnit4ClassRunner[java.lang.Class<?>]; void; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; validate[]; void; org.junit.internal.runners.JUnit4ClassRunner; JUnit4ClassRunner[java.lang.Class<?>]; void; null; this>
<org.junit.internal.runners.TestClass; getTestMethods[]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.JUnit4ClassRunner; getTestMethods[]; java.util.List<java.lang.reflect.Method>; null; fTestClass>
<org.junit.internal.runners.MethodValidator; validateMethodsForDefaultRunner[]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.JUnit4ClassRunner; validate[]; void; null; methodValidator>
<org.junit.internal.runners.MethodValidator; assertValid[]; void; org.junit.internal.runners.JUnit4ClassRunner; validate[]; void; null; methodValidator>
<org.junit.internal.runners.ClassRoadie; runProtected[]; void; org.junit.internal.runners.JUnit4ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; new ClassRoadie(notifier,fTestClass,getDescription(),new Runnable(){
  public void run(){
    runMethods(notifier);
  }
}
)>
<org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; runProtected[]; this>
<org.junit.internal.runners.JUnit4ClassRunner; runMethods[org.junit.runner.notification.RunNotifier]; void; java.lang.Object; run[]; void; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; org.junit.internal.runners.JUnit4ClassRunner; runMethods[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; null; Description>
<org.junit.internal.runners.JUnit4ClassRunner; getName[]; java.lang.String; org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; classAnnotations[]; java.lang.annotation.Annotation[]; org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runner.Description; addChild[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; null; spec>
<org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; getDescription[]; org.junit.runner.Description; null; this>
<java.lang.Class; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.internal.runners.JUnit4ClassRunner; classAnnotations[]; java.lang.annotation.Annotation[]; null; fTestClass.getJavaClass()>
<org.junit.internal.runners.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.internal.runners.JUnit4ClassRunner; classAnnotations[]; java.lang.annotation.Annotation[]; getAnnotations[]; fTestClass>
<org.junit.internal.runners.TestClass; getName[]; java.lang.String; org.junit.internal.runners.JUnit4ClassRunner; getName[]; java.lang.String; null; getTestClass()>
<org.junit.internal.runners.JUnit4ClassRunner; getTestClass[]; org.junit.internal.runners.TestClass; org.junit.internal.runners.JUnit4ClassRunner; getName[]; java.lang.String; getName[]; this>
<java.lang.reflect.Constructor; newInstance[java.lang.Object[]]; ; org.junit.internal.runners.JUnit4ClassRunner; createTest[]; java.lang.Object; null; getTestClass().getConstructor()>
<org.junit.internal.runners.TestClass; getConstructor[]; java.lang.reflect.Constructor<?>; org.junit.internal.runners.JUnit4ClassRunner; createTest[]; java.lang.Object; newInstance[java.lang.Object[]]; getTestClass()>
<org.junit.internal.runners.JUnit4ClassRunner; getTestClass[]; org.junit.internal.runners.TestClass; org.junit.internal.runners.JUnit4ClassRunner; createTest[]; java.lang.Object; getConstructor[]; this>
<org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; createTest[]; java.lang.Object; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; testAborted[org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable]; void; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; this>
<java.lang.reflect.InvocationTargetException; getCause[]; java.lang.Throwable; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; e>
<org.junit.internal.runners.JUnit4ClassRunner; testAborted[org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable]; void; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; wrapMethod[java.lang.reflect.Method]; org.junit.internal.runners.TestMethod; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.internal.runners.MethodRoadie; run[]; void; org.junit.internal.runners.JUnit4ClassRunner; invokeTestMethod[java.lang.reflect.Method, org.junit.runner.notification.RunNotifier]; void; null; new MethodRoadie(test,testMethod,notifier,description)>
<org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit4ClassRunner; testAborted[org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable]; void; null; notifier>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.JUnit4ClassRunner; testAborted[org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable]; void; null; notifier>
<org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit4ClassRunner; testAborted[org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable]; void; null; notifier>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.JUnit4ClassRunner; testName[java.lang.reflect.Method]; java.lang.String; null; method>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; null; Description>
<org.junit.internal.runners.TestClass; getJavaClass[]; java.lang.Class<?>; org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; null; getTestClass()>
<org.junit.internal.runners.JUnit4ClassRunner; getTestClass[]; org.junit.internal.runners.TestClass; org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; getJavaClass[]; this>
<org.junit.internal.runners.JUnit4ClassRunner; testName[java.lang.reflect.Method]; java.lang.String; org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; testAnnotations[java.lang.reflect.Method]; java.lang.annotation.Annotation[]; org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; null; this>
<java.lang.reflect.AccessibleObject; getAnnotations[]; java.lang.annotation.Annotation[]; org.junit.internal.runners.JUnit4ClassRunner; testAnnotations[java.lang.reflect.Method]; java.lang.annotation.Annotation[]; null; method>
<java.util.List; iterator[]; java.util.Iterator<java.lang.reflect.Method>; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; fTestMethods>
<java.util.Iterator; hasNext[]; boolean; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<java.util.Iterator; next[]; java.lang.reflect.Method; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; filter>
<org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<java.util.Iterator; remove[]; void; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; iter>
<java.util.List; isEmpty[]; boolean; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; fTestMethods>
<java.util.Collections; sort[java.util.List<java.lang.reflect.Method>, java.util.Comparator<? super java.lang.reflect.Method>]; void; org.junit.internal.runners.JUnit4ClassRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; Collections>
<org.junit.runner.manipulation.Sorter; compare[org.junit.runner.Description, org.junit.runner.Description]; int; java.lang.Object; compare[java.lang.reflect.Method, java.lang.reflect.Method]; int; null; sorter>
<org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; java.lang.Object; compare[java.lang.reflect.Method, java.lang.reflect.Method]; int; null; this>
<org.junit.internal.runners.JUnit4ClassRunner; methodDescription[java.lang.reflect.Method]; org.junit.runner.Description; java.lang.Object; compare[java.lang.reflect.Method, java.lang.reflect.Method]; int; null; this>
<org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; endTest[junit.framework.Test]; void; null; fNotifier>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; endTest[junit.framework.Test]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; startTest[junit.framework.Test]; void; null; fNotifier>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; startTest[junit.framework.Test]; void; null; this>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; addError[junit.framework.Test, java.lang.Throwable]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; addError[junit.framework.Test, java.lang.Throwable]; void; null; fNotifier>
<org.junit.runner.Describable; getDescription[]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; null; facade>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; null; Description>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; getEffectiveClass[junit.framework.Test]; java.lang.Class<? extends junit.framework.Test>; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; null; this>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; getName[junit.framework.Test]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; asDescription[junit.framework.Test]; org.junit.runner.Description; null; this>
<java.lang.Object; getClass[]; java.lang.Class<? extends junit.framework.Test>; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; getEffectiveClass[junit.framework.Test]; java.lang.Class<? extends junit.framework.Test>; null; test>
<junit.framework.TestCase; getName[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; getName[junit.framework.Test]; java.lang.String; null; ((TestCase)test)>
<java.lang.Object; toString[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; getName[junit.framework.Test]; java.lang.String; null; test>
<org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener; addError[junit.framework.Test, java.lang.Throwable]; void; org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; this>
<java.lang.Class; asSubclass[java.lang.Class<junit.framework.TestCase>]; java.lang.Class<? extends junit.framework.TestCase>; org.junit.internal.runners.JUnit38ClassRunner; JUnit38ClassRunner[java.lang.Class<?>]; void; null; klass>
<org.junit.internal.runners.JUnit38ClassRunner; setTest[junit.framework.Test]; void; org.junit.internal.runners.JUnit38ClassRunner; JUnit38ClassRunner[junit.framework.Test]; void; null; this>
<junit.framework.TestResult; addListener[junit.framework.TestListener]; void; org.junit.internal.runners.JUnit38ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; result>
<org.junit.internal.runners.JUnit38ClassRunner; createAdaptingListener[org.junit.runner.notification.RunNotifier]; junit.framework.TestListener; org.junit.internal.runners.JUnit38ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; this>
<junit.framework.Test; run[junit.framework.TestResult]; void; org.junit.internal.runners.JUnit38ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; null; getTest()>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; run[org.junit.runner.notification.RunNotifier]; void; run[junit.framework.TestResult]; this>
<org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; Description>
<java.lang.Object; getClass[]; java.lang.Class<? extends junit.framework.TestCase>; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; tc>
<junit.framework.TestCase; getName[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; tc>
<junit.framework.TestSuite; getName[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; ts>
<org.junit.internal.runners.JUnit38ClassRunner; createSuiteDescription[junit.framework.TestSuite]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; this>
<junit.framework.TestSuite; getName[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; ts>
<org.junit.runner.Description; createSuiteDescription[java.lang.String, java.lang.annotation.Annotation[]]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; Description>
<junit.framework.TestSuite; testCount[]; int; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; ts>
<org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; this>
<junit.framework.TestSuite; testAt[int]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; ts>
<org.junit.runner.Description; addChild[org.junit.runner.Description]; void; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; description>
<org.junit.runner.Describable; getDescription[]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; adapter>
<org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; this>
<junit.extensions.TestDecorator; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; decorator>
<org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; Description>
<java.lang.Object; getClass[]; java.lang.Class<? extends junit.framework.Test>; org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; null; test>
<junit.framework.TestSuite; countTestCases[]; int; org.junit.internal.runners.JUnit38ClassRunner; createSuiteDescription[junit.framework.TestSuite]; java.lang.String; null; ts>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; createSuiteDescription[junit.framework.TestSuite]; java.lang.String; null; String>
<junit.framework.TestSuite; testAt[int]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; createSuiteDescription[junit.framework.TestSuite]; java.lang.String; null; ts>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; createSuiteDescription[junit.framework.TestSuite]; java.lang.String; null; String>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<org.junit.runner.manipulation.Filterable; filter[org.junit.runner.manipulation.Filter]; void; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; adapter>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<junit.framework.TestSuite; getName[]; java.lang.String; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; suite>
<junit.framework.TestSuite; testCount[]; int; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; suite>
<junit.framework.TestSuite; testAt[int]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; suite>
<org.junit.runner.manipulation.Filter; shouldRun[org.junit.runner.Description]; boolean; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; filter>
<org.junit.internal.runners.JUnit38ClassRunner; makeDescription[junit.framework.Test]; org.junit.runner.Description; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<junit.framework.TestSuite; addTest[junit.framework.Test]; void; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; filtered>
<org.junit.internal.runners.JUnit38ClassRunner; setTest[junit.framework.Test]; void; org.junit.internal.runners.JUnit38ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; this>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<org.junit.internal.runners.JUnit38ClassRunner; getTest[]; junit.framework.Test; org.junit.internal.runners.JUnit38ClassRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; this>
<org.junit.runner.manipulation.Sortable; sort[org.junit.runner.manipulation.Sorter]; void; org.junit.internal.runners.JUnit38ClassRunner; sort[org.junit.runner.manipulation.Sorter]; void; null; adapter>
<org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; this>
<org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; this>
<org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; this>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; fTestClass>
<java.util.List; size[]; int; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; methods>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; fErrors>
<org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; org.junit.internal.runners.MethodValidator; validateStaticMethods[]; void; null; this>
<org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; org.junit.internal.runners.MethodValidator; validateStaticMethods[]; void; null; this>
<org.junit.internal.runners.MethodValidator; validateNoArgConstructor[]; void; org.junit.internal.runners.MethodValidator; validateMethodsForDefaultRunner[]; java.util.List<java.lang.Throwable>; null; this>
<org.junit.internal.runners.MethodValidator; validateStaticMethods[]; void; org.junit.internal.runners.MethodValidator; validateMethodsForDefaultRunner[]; java.util.List<java.lang.Throwable>; null; this>
<org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; org.junit.internal.runners.MethodValidator; validateMethodsForDefaultRunner[]; java.util.List<java.lang.Throwable>; null; this>
<java.util.List; isEmpty[]; boolean; org.junit.internal.runners.MethodValidator; assertValid[]; void; null; fErrors>
<org.junit.internal.runners.TestClass; getConstructor[]; java.lang.reflect.Constructor<?>; org.junit.internal.runners.MethodValidator; validateNoArgConstructor[]; void; null; fTestClass>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateNoArgConstructor[]; void; null; fErrors>
<org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fTestClass>
<java.lang.reflect.Modifier; isStatic[int]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; Modifier>
<java.lang.Class; getModifiers[]; int; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each.getDeclaringClass()>
<java.lang.reflect.Method; getDeclaringClass[]; java.lang.Class<?>; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; getModifiers[]; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each.getDeclaringClass()>
<java.lang.reflect.Method; getDeclaringClass[]; java.lang.Class<?>; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; getName[]; each>
<java.lang.reflect.Modifier; isPublic[int]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; Modifier>
<java.lang.reflect.Method; getModifiers[]; int; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.lang.reflect.Method; getReturnType[]; java.lang.Class<?>; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.lang.reflect.Method; getParameterTypes[]; java.lang.Class<?>[]; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.lang.reflect.Method; getName[]; java.lang.String; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; each>
<org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.ErrorReportingRunner; ErrorReportingRunner[java.lang.Class<?>, java.lang.Throwable]; void; null; this>
<org.junit.runner.Description; createSuiteDescription[java.lang.Class<?>]; org.junit.runner.Description; org.junit.internal.runners.ErrorReportingRunner; getDescription[]; org.junit.runner.Description; null; Description>
<org.junit.runner.Description; addChild[org.junit.runner.Description]; void; org.junit.internal.runners.ErrorReportingRunner; getDescription[]; org.junit.runner.Description; null; description>
<org.junit.internal.runners.ErrorReportingRunner; describeCause[java.lang.Throwable]; org.junit.runner.Description; org.junit.internal.runners.ErrorReportingRunner; getDescription[]; org.junit.runner.Description; null; this>
<org.junit.internal.runners.ErrorReportingRunner; runCause[java.lang.Throwable, org.junit.runner.notification.RunNotifier]; void; org.junit.internal.runners.ErrorReportingRunner; run[org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; null; this>
<java.lang.Throwable; getCause[]; java.lang.Throwable; org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; null; cause>
<org.junit.runners.model.InitializationError; getCauses[]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; null; ((InitializationError)cause)>
<org.junit.internal.runners.InitializationError; getCauses[]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; null; ((org.junit.internal.runners.InitializationError)cause)>
<java.util.Arrays; asList[java.lang.Throwable[]]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.ErrorReportingRunner; getCauses[java.lang.Throwable]; java.util.List<java.lang.Throwable>; null; Arrays>
<org.junit.runner.Description; createTestDescription[java.lang.Class<?>, java.lang.String]; org.junit.runner.Description; org.junit.internal.runners.ErrorReportingRunner; describeCause[java.lang.Throwable]; org.junit.runner.Description; null; Description>
<org.junit.internal.runners.ErrorReportingRunner; describeCause[java.lang.Throwable]; org.junit.runner.Description; org.junit.internal.runners.ErrorReportingRunner; runCause[java.lang.Throwable, org.junit.runner.notification.RunNotifier]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; org.junit.internal.runners.ErrorReportingRunner; runCause[java.lang.Throwable, org.junit.runner.notification.RunNotifier]; void; null; notifier>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.ErrorReportingRunner; runCause[java.lang.Throwable, org.junit.runner.notification.RunNotifier]; void; null; notifier>
<org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; org.junit.internal.runners.ErrorReportingRunner; runCause[java.lang.Throwable, org.junit.runner.notification.RunNotifier]; void; null; notifier>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; fNext>
<java.lang.Class; isAssignableFrom[java.lang.Class<?>]; boolean; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; fExpected>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; e>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; fExpected>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; e.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends java.lang.Throwable>; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; getName[]; e>
<java.lang.Class; getName[]; java.lang.String; org.junit.internal.runners.statements.ExpectException; evaluate[]; void; null; fExpected>
<org.junit.internal.runners.statements.FailOnTimeout; evaluateStatement[]; org.junit.internal.runners.statements.FailOnTimeout.StatementThread; org.junit.internal.runners.statements.FailOnTimeout; evaluate[]; void; null; this>
<org.junit.internal.runners.statements.FailOnTimeout; throwExceptionForUnfinishedThread[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; org.junit.internal.runners.statements.FailOnTimeout; evaluate[]; void; null; this>
<java.lang.Thread; start[]; void; org.junit.internal.runners.statements.FailOnTimeout; evaluateStatement[]; org.junit.internal.runners.statements.FailOnTimeout.StatementThread; null; thread>
<java.lang.Thread; join[long]; void; org.junit.internal.runners.statements.FailOnTimeout; evaluateStatement[]; org.junit.internal.runners.statements.FailOnTimeout.StatementThread; null; thread>
<java.lang.Thread; interrupt[]; void; org.junit.internal.runners.statements.FailOnTimeout; evaluateStatement[]; org.junit.internal.runners.statements.FailOnTimeout.StatementThread; null; thread>
<org.junit.internal.runners.statements.FailOnTimeout; throwTimeoutException[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; org.junit.internal.runners.statements.FailOnTimeout; throwExceptionForUnfinishedThread[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.internal.runners.statements.FailOnTimeout; throwTimeoutException[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; null; String>
<java.lang.Throwable; setStackTrace[java.lang.StackTraceElement[]]; void; org.junit.internal.runners.statements.FailOnTimeout; throwTimeoutException[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; null; exception>
<java.lang.Thread; getStackTrace[]; java.lang.StackTraceElement[]; org.junit.internal.runners.statements.FailOnTimeout; throwTimeoutException[org.junit.internal.runners.statements.FailOnTimeout.StatementThread]; void; null; thread>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.internal.runners.statements.FailOnTimeout.StatementThread; run[]; void; null; fStatement>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.statements.InvokeMethod; evaluate[]; void; null; fTestMethod>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; fNext>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; errors>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; each>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; errors>
<org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; MultipleFailureException>
<org.junit.runners.model.FrameworkMethod; invokeExplosively[java.lang.Object, java.lang.Object[]]; java.lang.Object; org.junit.internal.runners.statements.RunBefores; evaluate[]; void; null; before>
<org.junit.runners.model.Statement; evaluate[]; void; org.junit.internal.runners.statements.RunBefores; evaluate[]; void; null; fNext>
<org.junit.internal.runners.model.ReflectiveCallable; runReflectiveCall[]; java.lang.Object; org.junit.internal.runners.model.ReflectiveCallable; run[]; java.lang.Object; null; this>
<java.lang.reflect.InvocationTargetException; getTargetException[]; java.lang.Throwable; org.junit.internal.runners.model.ReflectiveCallable; run[]; java.lang.Object; null; e>
<org.junit.internal.runners.model.EachTestNotifier; addMultipleFailureException[org.junit.runners.model.MultipleFailureException]; void; org.junit.internal.runners.model.EachTestNotifier; addFailure[java.lang.Throwable]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestFailure[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.model.EachTestNotifier; addFailure[java.lang.Throwable]; void; null; fNotifier>
<org.junit.runners.model.MultipleFailureException; getFailures[]; java.util.List<java.lang.Throwable>; org.junit.internal.runners.model.EachTestNotifier; addMultipleFailureException[org.junit.runners.model.MultipleFailureException]; void; null; mfe>
<org.junit.internal.runners.model.EachTestNotifier; addFailure[java.lang.Throwable]; void; org.junit.internal.runners.model.EachTestNotifier; addMultipleFailureException[org.junit.runners.model.MultipleFailureException]; void; null; this>
<org.junit.runner.notification.RunNotifier; fireTestAssumptionFailed[org.junit.runner.notification.Failure]; void; org.junit.internal.runners.model.EachTestNotifier; addFailedAssumption[org.junit.internal.AssumptionViolatedException]; void; null; fNotifier>
<org.junit.runner.notification.RunNotifier; fireTestFinished[org.junit.runner.Description]; void; org.junit.internal.runners.model.EachTestNotifier; fireTestFinished[]; void; null; fNotifier>
<org.junit.runner.notification.RunNotifier; fireTestStarted[org.junit.runner.Description]; void; org.junit.internal.runners.model.EachTestNotifier; fireTestStarted[]; void; null; fNotifier>
<org.junit.runner.notification.RunNotifier; fireTestIgnored[org.junit.runner.Description]; void; org.junit.internal.runners.model.EachTestNotifier; fireTestIgnored[]; void; null; fNotifier>
<org.junit.Assert; assertEquals[double, double, double]; void; org.junit.internal.InexactComparisonCriteria; assertElementsEqual[java.lang.Object, java.lang.Object]; void; null; Assert>
<org.junit.Assert; assertEquals[double, double, double]; void; org.junit.internal.InexactComparisonCriteria; assertElementsEqual[java.lang.Object, java.lang.Object]; void; null; Assert>
<org.hamcrest.StringDescription; asString[org.hamcrest.SelfDescribing]; java.lang.String; org.junit.internal.AssumptionViolatedException; getMessage[]; java.lang.String; null; StringDescription>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.AssumptionViolatedException; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Description; appendValue[java.lang.Object]; org.hamcrest.Description; org.junit.internal.AssumptionViolatedException; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.AssumptionViolatedException; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Description; appendDescriptionOf[org.hamcrest.SelfDescribing]; org.hamcrest.Description; org.junit.internal.AssumptionViolatedException; describeTo[org.hamcrest.Description]; void; null; description>
<org.hamcrest.Description; appendText[java.lang.String]; org.hamcrest.Description; org.junit.internal.AssumptionViolatedException; describeTo[org.hamcrest.Description]; void; null; description>
<org.junit.Assert; assertEquals[java.lang.Object, java.lang.Object]; void; org.junit.internal.ExactComparisonCriteria; assertElementsEqual[java.lang.Object, java.lang.Object]; void; null; Assert>
<org.junit.internal.JUnitSystem; out[]; java.io.PrintStream; org.junit.internal.TextListener; TextListener[org.junit.internal.JUnitSystem]; void; null; system>
<org.junit.internal.TextListener; printHeader[long]; void; org.junit.internal.TextListener; testRunFinished[org.junit.runner.Result]; void; null; this>
<org.junit.runner.Result; getRunTime[]; long; org.junit.internal.TextListener; testRunFinished[org.junit.runner.Result]; void; null; result>
<org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; org.junit.internal.TextListener; testRunFinished[org.junit.runner.Result]; void; null; this>
<org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; org.junit.internal.TextListener; testRunFinished[org.junit.runner.Result]; void; null; this>
<java.io.PrintStream; append[char]; java.io.PrintStream; org.junit.internal.TextListener; testStarted[org.junit.runner.Description]; void; null; fWriter>
<java.io.PrintStream; append[char]; java.io.PrintStream; org.junit.internal.TextListener; testFailure[org.junit.runner.notification.Failure]; void; null; fWriter>
<java.io.PrintStream; append[char]; java.io.PrintStream; org.junit.internal.TextListener; testIgnored[org.junit.runner.Description]; void; null; fWriter>
<java.io.PrintStream; println[]; void; org.junit.internal.TextListener; printHeader[long]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printHeader[long]; void; println[]; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printHeader[long]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printHeader[long]; void; println[java.lang.String]; this>
<org.junit.internal.TextListener; elapsedTimeAsString[long]; java.lang.String; org.junit.internal.TextListener; printHeader[long]; void; null; this>
<org.junit.runner.Result; getFailures[]; java.util.List<org.junit.runner.notification.Failure>; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; result>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; println[java.lang.String]; this>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; println[java.lang.String]; this>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; println[java.lang.String]; this>
<org.junit.runner.notification.Failure; getTestHeader[]; java.lang.String; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; null; each>
<java.io.PrintStream; print[java.lang.String]; void; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; print[java.lang.String]; this>
<org.junit.runner.notification.Failure; getTrace[]; java.lang.String; org.junit.internal.TextListener; printFailure[org.junit.runner.notification.Failure, java.lang.String]; void; null; each>
<org.junit.runner.Result; wasSuccessful[]; boolean; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; result>
<java.io.PrintStream; println[]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[]; this>
<java.io.PrintStream; print[java.lang.String]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; print[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[java.lang.String]; this>
<org.junit.runner.Result; getRunCount[]; int; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; result>
<org.junit.runner.Result; getRunCount[]; int; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; result>
<java.io.PrintStream; println[]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[]; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[java.lang.String]; this>
<java.io.PrintStream; println[java.lang.String]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[java.lang.String]; this>
<org.junit.runner.Result; getRunCount[]; int; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; result>
<org.junit.runner.Result; getFailureCount[]; int; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; result>
<java.io.PrintStream; println[]; void; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; null; getWriter()>
<org.junit.internal.TextListener; getWriter[]; java.io.PrintStream; org.junit.internal.TextListener; printFooter[org.junit.runner.Result]; void; println[]; this>
<java.text.NumberFormat; format[double]; java.lang.String; org.junit.internal.TextListener; elapsedTimeAsString[long]; java.lang.String; null; NumberFormat.getInstance()>
<java.text.NumberFormat; getInstance[]; java.text.NumberFormat; org.junit.internal.TextListener; elapsedTimeAsString[long]; java.lang.String; format[double]; NumberFormat>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.internal.requests.SortingRequest; getRunner[]; org.junit.runner.Runner; null; fRequest>
<org.junit.runner.manipulation.Sorter; apply[java.lang.Object]; void; org.junit.internal.requests.SortingRequest; getRunner[]; org.junit.runner.Runner; null; new Sorter(fComparator)>
<org.junit.runners.model.RunnerBuilder; safeRunnerForClass[java.lang.Class<?>]; org.junit.runner.Runner; org.junit.internal.requests.ClassRequest; getRunner[]; org.junit.runner.Runner; null; new AllDefaultPossibilitiesBuilder(fCanUseSuiteMethod)>
<org.junit.runner.Request; getRunner[]; org.junit.runner.Runner; org.junit.internal.requests.FilterRequest; getRunner[]; org.junit.runner.Runner; null; fRequest>
<org.junit.runner.manipulation.Filter; apply[java.lang.Object]; void; org.junit.internal.requests.FilterRequest; getRunner[]; org.junit.runner.Runner; null; fFilter>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.junit.internal.requests.FilterRequest; getRunner[]; org.junit.runner.Runner; null; String>
<org.junit.runner.manipulation.Filter; describe[]; java.lang.String; org.junit.internal.requests.FilterRequest; getRunner[]; org.junit.runner.Runner; null; fFilter>
<java.lang.Object; toString[]; java.lang.String; org.junit.internal.requests.FilterRequest; getRunner[]; org.junit.runner.Runner; null; fRequest>


Calls That Belongs To JCF (139)

<java.util.List; add[junit.framework.TestFailure]; boolean; junit.framework.TestResult; addError[junit.framework.Test, java.lang.Throwable]; void; null; fErrors>
<java.util.List; add[junit.framework.TestFailure]; boolean; junit.framework.TestResult; addFailure[junit.framework.Test, junit.framework.AssertionFailedError]; void; null; fFailures>
<java.util.List; add[junit.framework.TestListener]; boolean; junit.framework.TestResult; addListener[junit.framework.TestListener]; void; null; fListeners>
<java.util.List; remove[java.lang.Object]; boolean; junit.framework.TestResult; removeListener[junit.framework.TestListener]; void; null; fListeners>
<java.util.List; addAll[java.util.Collection<? extends junit.framework.TestListener>]; boolean; junit.framework.TestResult; cloneListeners[]; java.util.List<junit.framework.TestListener>; null; result>
<java.util.List; size[]; int; junit.framework.TestResult; errorCount[]; int; null; fErrors>
<java.util.List; size[]; int; junit.framework.TestResult; failureCount[]; int; null; fFailures>
<java.util.Vector; size[]; int; junit.framework.TestSuite; addTestsFromTestCase[java.lang.Class<?>]; void; null; fTests>
<java.util.Vector; add[junit.framework.Test]; boolean; junit.framework.TestSuite; addTest[junit.framework.Test]; void; null; fTests>
<java.util.Vector; get[int]; junit.framework.Test; junit.framework.TestSuite; testAt[int]; junit.framework.Test; null; fTests>
<java.util.Vector; size[]; int; junit.framework.TestSuite; testCount[]; int; null; fTests>
<java.util.Vector; elements[]; java.util.Enumeration<junit.framework.Test>; junit.framework.TestSuite; tests[]; java.util.Enumeration<junit.framework.Test>; null; fTests>
<java.util.List; contains[java.lang.Object]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; names>
<java.util.List; add[java.lang.String]; boolean; junit.framework.TestSuite; addTestMethod[java.lang.reflect.Method, java.util.List<java.lang.String>, java.lang.Class<?>]; void; null; names>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.HashMap; put[org.junit.runner.Description, junit.framework.Test]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.HashMap; get[java.lang.Object]; junit.framework.Test; junit.framework.JUnit4TestAdapterCache; asTest[org.junit.runner.Description]; junit.framework.Test; null; this>
<java.util.List; add[junit.framework.Test]; boolean; junit.framework.JUnit4TestAdapterCache; asTestList[org.junit.runner.Description]; java.util.List<junit.framework.Test>; null; returnThis>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; null; fPreferences>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; getPreferences[]; java.util.Properties; null; fPreferences>
<java.util.Properties; store[java.io.OutputStream, java.lang.String]; void; junit.runner.BaseTestRunner; savePreferences[]; void; null; getPreferences()>
<java.util.Properties; put[java.lang.Object, java.lang.Object]; java.lang.Object; junit.runner.BaseTestRunner; setPreference[java.lang.String, java.lang.String]; void; null; getPreferences()>
<java.util.Properties; load[java.io.InputStream]; void; junit.runner.BaseTestRunner; readPreferences[]; void; null; getPreferences()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; junit.runner.BaseTestRunner; getPreference[java.lang.String]; java.lang.String; null; getPreferences()>
<java.util.List; add[org.junit.rules.TestRule]; boolean; org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; org.junit.rules.RuleChain; null; rulesOfNewChain>
<java.util.List; addAll[java.util.Collection<? extends org.junit.rules.TestRule>]; boolean; org.junit.rules.RuleChain; around[org.junit.rules.TestRule]; org.junit.rules.RuleChain; null; rulesOfNewChain>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.rules.ErrorCollector; addError[java.lang.Throwable]; void; null; errors>
<java.util.ArrayList; add[org.junit.experimental.theories.ParameterSignature]; boolean; org.junit.experimental.theories.ParameterSignature; signatures[java.lang.Class<?>[], java.lang.annotation.Annotation[][]]; java.util.ArrayList<org.junit.experimental.theories.ParameterSignature>; null; sigs>
<java.util.List; addAll[java.util.Collection<? extends org.junit.experimental.theories.ParameterSignature>]; boolean; org.junit.experimental.theories.internal.Assignments; allUnassigned[java.lang.reflect.Method, org.junit.runners.model.TestClass]; org.junit.experimental.theories.internal.Assignments; null; signatures>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; isComplete[]; boolean; null; fUnassigned>
<java.util.List; get[int]; org.junit.experimental.theories.ParameterSignature; org.junit.experimental.theories.internal.Assignments; nextUnassigned[]; org.junit.experimental.theories.ParameterSignature; null; fUnassigned>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; assigned>
<java.util.List; subList[int, int]; java.util.List<org.junit.experimental.theories.ParameterSignature>; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; fUnassigned>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; assignNext[org.junit.experimental.theories.PotentialAssignment]; org.junit.experimental.theories.internal.Assignments; null; fUnassigned>
<java.util.List; get[int]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.Assignments; getActualValues[int, int, boolean]; java.lang.Object[]; getValue[]; fAssigned>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getMethodArguments[boolean]; java.lang.Object[]; null; fAssigned>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getAllArguments[boolean]; java.lang.Object[]; null; fAssigned>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getConstructorParameterCount[]; int; null; signatures>
<java.util.List; size[]; int; org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; null; fAssigned>
<java.util.List; get[int]; org.junit.experimental.theories.PotentialAssignment; org.junit.experimental.theories.internal.Assignments; getArgumentStrings[boolean]; java.lang.Object[]; getDescription[]; fAssigned>
<java.util.Collection; iterator[]; java.util.Iterator<java.lang.Object>; org.junit.experimental.theories.internal.ParameterizedAssertionError; join[java.lang.String, java.util.Collection<java.lang.Object>]; java.lang.String; null; values>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addSinglePointMethods[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; list>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addFields[org.junit.experimental.theories.ParameterSignature, java.util.List<org.junit.experimental.theories.PotentialAssignment>]; void; null; list>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.internal.AllMembersSupplier; addArrayValues[java.lang.String, java.util.List<org.junit.experimental.theories.PotentialAssignment>, java.lang.Object]; void; null; list>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.experimental.theories.Theories; validateDataPointFields[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; removeAll[java.util.Collection<?>]; boolean; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; testMethods>
<java.util.List; addAll[java.util.Collection<? extends org.junit.runners.model.FrameworkMethod>]; boolean; org.junit.experimental.theories.Theories; computeTestMethods[]; java.util.List<org.junit.runners.model.FrameworkMethod>; null; testMethods>
<java.util.List; add[org.junit.internal.AssumptionViolatedException]; boolean; org.junit.experimental.theories.Theories.TheoryAnchor; handleAssumptionViolation[org.junit.internal.AssumptionViolatedException]; void; null; fInvalidParameters>
<java.util.List; add[org.junit.experimental.theories.PotentialAssignment]; boolean; org.junit.experimental.theories.suppliers.TestedOnSupplier; getValueSources[org.junit.experimental.theories.ParameterSignature]; java.util.List<org.junit.experimental.theories.PotentialAssignment>; null; list>
<java.util.List; size[]; int; org.junit.experimental.results.PrintableResult; failureCount[]; int; null; result.getFailures()>
<java.util.List; add[org.junit.runner.Runner]; boolean; org.junit.experimental.max.MaxCore; constructLeafRequest[java.util.List<org.junit.runner.Description>]; org.junit.runner.Request; null; runners>
<java.util.ArrayList; isEmpty[]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; description.getChildren()>
<java.util.List; add[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; results>
<java.util.List; add[org.junit.runner.Description]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; results>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory; getFailureTimestamp[org.junit.runner.Description]; java.lang.Long; null; fFailureTimestamps>
<java.util.Map; put[java.lang.String, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory; putTestFailureTimestamp[org.junit.runner.Description, long]; void; null; fFailureTimestamps>
<java.util.Map; containsKey[java.lang.Object]; boolean; org.junit.experimental.max.MaxHistory; isNewTest[org.junit.runner.Description]; boolean; null; fDurations>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory; getTestDuration[org.junit.runner.Description]; java.lang.Long; null; fDurations>
<java.util.Map; put[java.lang.String, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory; putTestDuration[org.junit.runner.Description, long]; void; null; fDurations>
<java.util.Map; put[org.junit.runner.Description, java.lang.Long]; java.lang.Long; org.junit.experimental.max.MaxHistory.RememberingListener; testStarted[org.junit.runner.Description]; void; null; starts>
<java.util.Map; get[java.lang.Object]; java.lang.Long; org.junit.experimental.max.MaxHistory.RememberingListener; testFinished[org.junit.runner.Description]; void; null; starts>
<java.util.List; isEmpty[]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; hasCorrectCategoryAnnotation[org.junit.runner.Description]; boolean; null; categories>
<java.util.ArrayList; addAll[java.util.Collection<? extends java.lang.Class<?>>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; categories>
<java.util.ArrayList; addAll[java.util.Collection<? extends java.lang.Class<?>>]; boolean; org.junit.experimental.categories.Categories.CategoryFilter; categories[org.junit.runner.Description]; java.util.List<java.lang.Class<?>>; null; categories>
<java.util.List; add[java.util.concurrent.Future<java.lang.Object>]; boolean; java.lang.Object; schedule[java.lang.Runnable]; void; null; fResults>
<java.util.List; size[]; int; org.junit.runner.Result; getFailureCount[]; int; null; fFailures>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.Result.Listener; testFailure[org.junit.runner.notification.Failure]; void; null; fFailures>
<java.util.ArrayList; add[org.junit.runner.Description]; boolean; org.junit.runner.Description; addChild[org.junit.runner.Description]; void; null; getChildren()>
<java.util.ArrayList; isEmpty[]; boolean; org.junit.runner.Description; isTest[]; boolean; null; getChildren()>
<java.util.List; add[java.lang.Class<?>]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; classes>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; missingClasses>
<java.util.List; toArray[java.lang.Class[]]; java.lang.Class[]; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; classes>
<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; result.getFailures()>
<java.util.List; add[org.junit.runner.notification.RunListener]; boolean; org.junit.runner.notification.RunNotifier; addListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<java.util.List; remove[java.lang.Object]; boolean; org.junit.runner.notification.RunNotifier; removeListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<java.util.List; iterator[]; java.util.Iterator<org.junit.runner.notification.RunListener>; org.junit.runner.notification.RunNotifier.SafeNotifier; run[]; void; null; fListeners>
<java.util.List; add[int, org.junit.runner.notification.RunListener]; void; org.junit.runner.notification.RunNotifier; addFirstListener[org.junit.runner.notification.RunListener]; void; null; fListeners>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withBeforeClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; befores>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withAfterClasses[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; afters>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; withClassRules[org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; classRules>
<java.util.List; iterator[]; java.util.Iterator<T>; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; getFilteredChildren()>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; filter[org.junit.runner.manipulation.Filter]; void; null; getFilteredChildren()>
<java.util.List; isEmpty[]; boolean; org.junit.runners.ParentRunner; validate[]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateNoNonStaticInnerClass[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateOnlyOneConstructor[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateZeroArgConstructor[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; size[]; int; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; computeTestMethods()>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.BlockJUnit4ClassRunner; validateInstanceMethods[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withBefores[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; befores>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withAfters[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; afters>
<java.util.List; contains[java.lang.Object]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withMethodRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; testRules>
<java.util.List; isEmpty[]; boolean; org.junit.runners.BlockJUnit4ClassRunner; withTestRules[org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement]; org.junit.runners.model.Statement; null; testRules>
<java.util.List; get[int]; java.lang.Object[]; org.junit.runners.Parameterized.TestClassRunnerForParameters; computeParams[]; java.lang.Object[]; null; fParameterList>
<java.util.List; size[]; int; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; parametersList>
<java.util.ArrayList; add[org.junit.runner.Runner]; boolean; org.junit.runners.Parameterized; Parameterized[java.lang.Class<?>]; void; null; runners>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoidNoArg[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.FrameworkMethod; validatePublicVoid[boolean, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.Set; add[java.lang.Class<?>]; boolean; org.junit.runners.model.RunnerBuilder; addParent[java.lang.Class<?>]; java.lang.Class<?>; null; parents>
<java.util.Set; remove[java.lang.Object]; boolean; org.junit.runners.model.RunnerBuilder; removeParent[java.lang.Class<?>]; void; null; parents>
<java.util.List; toArray[java.lang.Class<?>[]]; java.lang.Class<?>[]; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>, java.util.List<java.lang.Class<?>>]; java.util.List<org.junit.runner.Runner>; null; children>
<java.util.ArrayList; add[org.junit.runner.Runner]; boolean; org.junit.runners.model.RunnerBuilder; runners[java.lang.Class<?>[]]; java.util.List<org.junit.runner.Runner>; null; runners>
<java.util.List; add[int, T]; void; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; members>
<java.util.List; add[T]; boolean; org.junit.runners.model.TestClass; addToAnnotationLists[T, java.util.Map<java.lang.Class<?>,java.util.List<T>>]; void; null; members>
<java.util.Map; containsKey[java.lang.Object]; boolean; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.util.Map; put[java.lang.Class<?>, java.util.List<T>]; java.util.List<T>; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.util.Map; get[java.lang.Object]; java.util.List<T>; org.junit.runners.model.TestClass; getAnnotatedMembers[java.util.Map<java.lang.Class<?>,java.util.List<T>>, java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<T>; null; map>
<java.util.ArrayList; add[java.lang.Class<?>]; boolean; org.junit.runners.model.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; results>
<java.util.List; add[T]; boolean; org.junit.runners.model.TestClass; getAnnotatedFieldValues[java.lang.Object, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<T>]; java.util.List<T>; null; results>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.runners.model.NoGenericTypeParametersValidator; validateNoTypeParameterOnType[java.lang.reflect.Type, java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; size[]; int; org.junit.runners.model.MultipleFailureException; getMessage[]; java.lang.String; null; fErrors>
<java.util.List; isEmpty[]; boolean; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; size[]; int; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.List; get[int]; java.lang.Throwable; org.junit.runners.model.MultipleFailureException; assertEmpty[java.util.List<java.lang.Throwable>]; void; null; errors>
<java.util.Collection; add[org.hamcrest.Matcher<? extends java.lang.Iterable<T>>]; boolean; org.junit.internal.matchers.IsCollectionContaining; hasItems[org.hamcrest.Matcher<? extends T>[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; all>
<java.util.Collection; add[org.hamcrest.Matcher<? extends java.lang.Iterable<T>>]; boolean; org.junit.internal.matchers.IsCollectionContaining; hasItems[T[]]; org.hamcrest.Matcher<java.lang.Iterable<T>>; null; all>
<java.util.List; add[int, java.lang.Integer]; void; org.junit.internal.ArrayComparisonFailure; addDimension[int]; void; null; fIndices>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.rules.RuleFieldValidator; addError[java.util.List<java.lang.Throwable>, org.junit.runners.model.FrameworkField, java.lang.String]; void; null; errors>
<java.util.List; add[java.lang.reflect.Method]; boolean; org.junit.internal.runners.TestClass; getAnnotatedMethods[java.lang.Class<? extends java.lang.annotation.Annotation>]; java.util.List<java.lang.reflect.Method>; null; results>
<java.util.ArrayList; add[java.lang.Class<?>]; boolean; org.junit.internal.runners.TestClass; getSuperClasses[java.lang.Class<?>]; java.util.List<java.lang.Class<?>>; null; results>
<java.util.List; iterator[]; java.util.Iterator<java.lang.reflect.Method>; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; fTestMethods>
<java.util.List; isEmpty[]; boolean; org.junit.internal.runners.JUnit4ClassRunner; filter[org.junit.runner.manipulation.Filter]; void; null; fTestMethods>
<java.util.List; size[]; int; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; methods>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateInstanceMethods[]; void; null; fErrors>
<java.util.List; isEmpty[]; boolean; org.junit.internal.runners.MethodValidator; assertValid[]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateNoArgConstructor[]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.MethodValidator; validateTestMethods[java.lang.Class<? extends java.lang.annotation.Annotation>, boolean]; void; null; fErrors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; errors>
<java.util.List; add[java.lang.Throwable]; boolean; org.junit.internal.runners.statements.RunAfters; evaluate[]; void; null; errors>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>
<java.util.List; size[]; int; org.junit.internal.TextListener; printFailures[org.junit.runner.Result]; void; null; failures>


Calls That Are Candidatas (3)

<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; result.getFailures()>
<java.util.ArrayList; isEmpty[]; boolean; org.junit.experimental.max.MaxCore; findLeaves[org.junit.runner.Description, org.junit.runner.Description, java.util.List<org.junit.runner.Description>]; void; null; description.getChildren()>
<java.util.List; size[]; int; org.junit.experimental.results.PrintableResult; failureCount[]; int; null; result.getFailures()>


Calls That Broken Confinement (1)

<java.util.List; add[org.junit.runner.notification.Failure]; boolean; org.junit.runner.JUnitCore; runMain[org.junit.internal.JUnitSystem, java.lang.String[]]; org.junit.runner.Result; null; result.getFailures()>
