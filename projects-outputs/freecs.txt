All Method Calls (10630)

<freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.System; gc[]; void; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; System>
<java.lang.Thread; sleep[long]; void; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Thread>
<freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.Server; getVersion[]; java.lang.String; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.System; currentTimeMillis[]; long; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; System>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; umgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.UserManager; getHighWaterMark[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; umgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; gmgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.GroupManager; getHighWaterMark[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; gmgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.RequestReader; activeReaders[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; RequestReader>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.core.RequestReader; getOveralUsage[]; double[]; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; RequestReader>
<java.lang.StringBuffer; append[double]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Runtime>
<java.lang.Runtime; freeMemory[]; long; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; r>
<java.lang.Runtime; totalMemory[]; long; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; r>
<java.lang.Runtime; maxMemory[]; long; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; r>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb.append("<br />LogQueue: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; append[int]; sb>
<freecs.util.ObjectBuffer; size[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogWriter.instance.logQueue>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb.append(" of ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; append[int]; sb>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogWriter.instance.logQueue>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb.append("<br />LogWriter priority: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; append[int]; sb>
<java.lang.Thread; getPriority[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogWriter.instance>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb.append("<br />LogDestinations:")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; append[int]; sb>
<java.util.HashMap; size[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogCleaner.instance.getLogDestinations()>
<freecs.util.logger.LogCleaner; getLogDestinations[]; java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; size[]; LogCleaner.instance>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb.append("<br />LogCleaner priority: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; append[int]; sb>
<java.lang.Thread; getPriority[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogCleaner.instance>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; null; sb>
<freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; null; this>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; Server.srv.templatemanager>
<freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; ts>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; Server>
<freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; freecs.external.StateRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; tpl>
<freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "xml">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; as>
<freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; UserlistManager.mgr>
<java.lang.StringBuffer; trimToSize[]; void; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.UserlistRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "removeuser">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "removeright">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "giveright">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "unpunish">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "changestate">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "refreshgp">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "removeban">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "removeaction">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "sendmessage">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "sendmessagetouser">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "sendmessagetogroup">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "grouplist">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "userlist">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; renderUserlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "searchuser">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "searchgroup">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "banlist">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "actionstorelist">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "configoverview">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; "shutdown">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; action>
<freecs.external.AbstractRequestHandler; slevel[]; int; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.interfaces.IRequest; getKey[]; java.nio.channels.SelectionKey; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; key>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sc.socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getInetAddress[]; sc>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<java.net.InetAddress; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ia>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ia>
<java.lang.System; exit[int]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server.srv.templatemanager>
<freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ts>
<freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sb>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.WebadminRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; standartIndex[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; file>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; file>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; group>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; file>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; file>
<java.io.File; exists[]; boolean; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; f>
<freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append("File:").append(file)>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("File:")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.StringBuffer]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; refreshGp[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.util.Properties; load[java.io.InputStream]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props>
<java.io.FileInputStream; close[]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; in>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; iterator[]; props>
<java.util.Iterator; hasNext[]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; i>
<java.lang.Object; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; i.next()>
<java.util.Iterator; next[]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; toString[]; i>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; key>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "timelock">
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Integer>
<freecs.core.Group; setTimelockSec[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "membershiproom">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setMembershipRoom[freecs.core.Membership[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "autosulist">
<freecs.core.Group; unsetAutoSu[]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<freecs.core.Group; setAutoSu[java.lang.String[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "autosumembershiplist">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setAutoSuMembership[freecs.core.Membership[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "lockprotected">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "autosu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "allowsu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "nosufirst">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "minuserrolesu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "vip">
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "moderator">
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "admin">
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "membershipsu">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setMembershipSu[freecs.core.Membership[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "soundprooffor">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; split[java.lang.String]; val>
<java.lang.String; trim[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; roles[j]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "vip">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "guest">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "moderator">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "admin">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "user">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "suforbidden">
<freecs.core.Group; setSuForbiddenMembership[java.lang.String]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "memberroom">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setMemberRoom[freecs.core.Membership[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "allowusebbcodes">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "allowusebbcodes">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "allowusesmiley">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "allowusesmiley">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "deactivatehitdice">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "sucanban">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "sucanban">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "sucansettheme">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "sucansettheme">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "cansetpunishable">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "notallowjoinunreg">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; low>
<java.lang.String; substring[int]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; low>
<java.lang.String; indexOf[java.lang.String]; int; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; namespace>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<java.lang.String; substring[int]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; namespace>
<java.lang.String; substring[int, int]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; namespace>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; p>
<java.util.HashMap; size[]; int; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; iterator[]; map>
<java.util.Iterator; hasNext[]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; i>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; p>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; GroupManager.pluginStore>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Class>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; piClass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; getInstance>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; GroupManager.pluginStore>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<java.util.Vector; add[freecs.interfaces.IGroupPlugin]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; plugins>
<freecs.interfaces.IGroupPlugin; instanceForGroup[java.lang.String, freecs.core.Group, java.util.Properties]; freecs.interfaces.IGroupPlugin; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; ((IGroupPlugin)o)>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; Server>
<freecs.core.Group; setPlugins[freecs.interfaces.IGroupPlugin[]]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.interfaces.IGroupPlugin[]]; freecs.interfaces.IGroupPlugin[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; plugins>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; getTimelockSec[]; int; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setTimelockSec[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; getTimelockSec[]; int; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setTimelockSec[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.Group; setMinRightSu[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; state>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; changeState[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; takePermission[int]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; takePermission[int]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.external.AbstractRequestHandler; slevel[]; int; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<freecs.core.User; setNewPermission[int]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; givePermission[int]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; right>
<freecs.core.User; givePermission[int]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; giveRight[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<freecs.core.User; setPunish[boolean]; void; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; unpunishUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ur>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; "true">
<freecs.core.UserManager$UserStore; removeUser[freecs.core.User]; void; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr.ustr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.Server; removeBan[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.Server; removeBan[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeBan[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.Integer; intValue[]; int; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; new Integer(action)>
<freecs.Server; removeStore[java.lang.Object, int]; boolean; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; removeActionstore[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.AdminCore; messageToAll[java.lang.String]; boolean; freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; AdminCore>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessage[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; AdminCore>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessageToUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; AdminCore>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; sendMessageToGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderUserlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.core.UserManager$UserStore; toArray[]; freecs.core.User[]; freecs.external.WebadminRequestHandler; renderUserlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr.ustr>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; renderUserlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; UserManager.mgr>
<freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchUser[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr>
<freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append("<br>group (").append(group)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<br>group (")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; searchGroup[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getRawName()>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; toLowerCase[]; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=lockprotected&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=lockprotected&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=lockprotected&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=lockprotected&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=allowsu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=allowsu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=allowsu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=allowsu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasMinRightSu[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=vip\">").append("USER")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=vip\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<freecs.core.Group; hasMinRightSu[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=admin\">").append("VIP")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=admin\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<freecs.core.Group; hasMinRightSu[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=moderator\">").append("ADMIN")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=moderator\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<freecs.core.Group; hasMinRightSu[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=user\">").append("MOD")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname).append("&right=user\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=minuserrolesu&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasMinRight[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; hasMinRight[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasMinRight[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasMinRight[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasMinRight[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getMembershipRoom[]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getMembershipRoom[]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinmembershiplocked&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinmembershiplocked&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=refreshgp&&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=refreshgp&&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusebbcodes&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusebbcodes&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusebbcodes&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusebbcodes&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=hitdice&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=hitdice&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=hitdice&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=hitdice&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=nosufirst&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=nosufirst&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=nosufirst&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=nosufirst&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=sucansettheme&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=sucansettheme&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=sucansettheme&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=sucansettheme&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=sucanban&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=sucanban&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=sucanban&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=sucanban&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getAutoSuList[]; java.util.Vector<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.util.Vector; size[]; int; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<freecs.core.Group; getAutoSuList[]; java.util.Vector<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; size[]; g>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<freecs.core.Group; getAutoSuList[]; java.util.Vector<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; elements[]; g>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; e>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getAutoSuMembership[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; getAutoSuMembership[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; getAutoSuMembership[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; UserManager.mgr>
<freecs.core.Group; getOpener[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; u>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; u.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; toString[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; getNoFadeColorUsername[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; EntityDecoder>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<i>").append(g.getOpener())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<i>")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<freecs.core.Group; getOpener[]; java.lang.String; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=cansetpunishable&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=cansetpunishable&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=cansetpunishable&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=cansetpunishable&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=moderated&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=moderated&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=moderated&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=moderated&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusesmiley&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a href=\"/ADMIN?do=changestate&state=allowusesmiley&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=allowusesmiley&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=allowusesmiley&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getTimelockSec[]; int; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a style=\"text-decoration:none\" href=\"/ADMIN?do=changestate&state=timelocksub&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a style=\"text-decoration:none\" href=\"/ADMIN?do=changestate&state=timelocksub&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("<a style=\"text-decoration:none\" href=\"/ADMIN?do=changestate&state=timelockadd&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("<a style=\"text-decoration:none\" href=\"/ADMIN?do=changestate&state=timelockadd&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinunreg&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinunreg&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinunreg&group=").append(groupname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=changestate&state=joinunreg&group=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; toLowerCase[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; getCookie[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; toLowerCase[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; getCookie[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; isPunished[]; boolean; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb.append("\r\n<a href=\"/ADMIN?do=unpunish&name=").append(u.getName().toLowerCase())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=unpunish&name=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; toLowerCase[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; displayUser[freecs.core.User, java.lang.StringBuffer]; void; null; sb>
<freecs.Server; getBanList[]; freecs.content.BanObject[]; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; v>
<java.util.Vector; add[freecs.content.BanObject]; boolean; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; v>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; InetAddress>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.net.InetAddress; getHostName[]; java.lang.String; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<freecs.content.ActionstoreObject; rendererActionState[]; java.lang.String; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; curr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; ub>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; hb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderActionstorelist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderGrouplist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv.pluginStore.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; iterator[]; Server.srv.pluginStore>
<java.util.Iterator; hasNext[]; boolean; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr.getGroupPlugins().keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; iterator[]; GroupManager.mgr.getGroupPlugins()>
<freecs.core.GroupManager; getGroupPlugins[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; keySet[]; GroupManager.mgr>
<java.util.Iterator; hasNext[]; boolean; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append(Server.srv.MAX_SU_BAN_DURATION)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append(Server.srv.PUNISH_DURATION / 1000)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append(Server.srv.MAX_FLOCK_DURATION)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv.props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sgroups>
<java.lang.String; indexOf[java.lang.String]; int; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sgNames[i]>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sgNames[i]>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; c[0].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; toLowerCase[]; c[0]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; key>
<freecs.interfaces.IServerPlugin; convertGroupname[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; svp[s]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.String; substring[int]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sgNames[i]>
<freecs.interfaces.IServerPlugin; convertGroutheme[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; svp[s]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append("(").append(gTheme)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("(")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb.append("(").append(theme)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb.append("(")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; null; sb>
<freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String, java.lang.StringBuffer]; void; null; this>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; Server.srv.templatemanager>
<freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; ts>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; Server>
<freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; freecs.external.WebadminRequestHandler; renderTemplate[freecs.interfaces.IRequest, java.lang.String]; java.lang.String; null; tpl>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; may_set_Theme[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; may_use_Smiley[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; may_call_Memberships[freecs.core.User]; java.lang.String; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; rname>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<java.lang.String; toUpperCase[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; displayName>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb.append("\r\n<a href=\"/ADMIN?do=removeright&right=").append(rname).append("&name=").append(u.getName().toLowerCase())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=removeright&right=").append(rname).append("&name=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=removeright&right=").append(rname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=removeright&right=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; toLowerCase[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb.append("\r\n<a href=\"/ADMIN?do=giveright&right=").append(rname).append("&name=").append(u.getName().toLowerCase())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=giveright&right=").append(rname).append("&name=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=giveright&right=").append(rname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb.append("\r\n<a href=\"/ADMIN?do=giveright&right=")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; append[java.lang.String]; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; toLowerCase[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; has_Right[freecs.core.User, int, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.WebadminRequestHandler; has_RightAsshole[freecs.core.User, int]; java.lang.String; null; sb>
<freecs.interfaces.IRequest; getAction[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; file>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; file>
<java.lang.String; substring[int]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file>
<java.lang.String; indexOf[java.lang.String]; int; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.substring(1)>
<java.lang.String; substring[int]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; indexOf[java.lang.String]; file>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; file>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; file>
<java.util.HashMap; get[java.lang.Object]; freecs.external.StaticRequestHandler.FileProperties; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fileCache>
<java.io.File; exists[]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fp.f>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.io.File; lastModified[]; long; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fp.f>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; setContent[byte[]]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.lang.String; indexOf[java.lang.String]; int; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; new StringBuilder(Server.BASE_PATH)>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; dirpath>
<java.io.File; listFiles[]; java.io.File[]; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sFile>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.io.File; exists[]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; f>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.io.File; isDirectory[]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fList[i]>
<java.lang.StringBuilder; append[java.lang.Object]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; filepath>
<java.io.File; exists[]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; f>
<java.io.File; exists[]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; f>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; file.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; endsWith[java.lang.String]; file>
<java.io.File; length[]; long; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; f>
<java.io.InputStream; read[]; int; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; is>
<java.util.HashMap; put[java.lang.String, freecs.external.StaticRequestHandler.FileProperties]; freecs.external.StaticRequestHandler.FileProperties; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fileCache>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; setContent[byte[]]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<java.io.File; lastModified[]; long; freecs.external.StaticRequestHandler.FileProperties; FileProperties[java.io.File, byte[], java.lang.String]; void; null; f>
<freecs.external.xmlrpc.freecsXmlRpcHandler; checkVersion[]; freecs.external.xmlrpc.freecsXmlRpcHandler; freecs.external.xmlrpc.freecsXmlRpcHandler; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; checkVersion[]; freecs.external.xmlrpc.freecsXmlRpcHandler; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; checkVersion[]; freecs.external.xmlrpc.freecsXmlRpcHandler; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; checkVersion[]; freecs.external.xmlrpc.freecsXmlRpcHandler; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.freecsXmlRpcHandler; checkVersion[]; freecs.external.xmlrpc.freecsXmlRpcHandler; null; Server>
<freecs.external.AdminCore; kick[java.lang.String, long, boolean, java.lang.String]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; kick[java.lang.String, long, boolean]; boolean; null; AdminCore>
<freecs.external.AdminCore; removeUser[java.lang.String]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; removeUser[java.lang.String]; boolean; null; AdminCore>
<freecs.external.AdminCore; messageToAll[java.lang.String]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; messageToAll[java.lang.String]; boolean; null; AdminCore>
<freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; messageToGroup[java.lang.String, java.lang.String]; boolean; null; AdminCore>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.freecsXmlRpcHandler; messageToUser[java.lang.String, java.lang.String]; boolean; null; Server>
<freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; messageToUser[java.lang.String, java.lang.String]; boolean; null; AdminCore>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<freecs.core.RequestReader; activeReaders[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; RequestReader>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<freecs.core.UserManager; getHighWaterMark[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; UserManager.mgr>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; UserManager.mgr>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Runtime>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.lang.Math; round[float]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Math>
<java.lang.Runtime; freeMemory[]; long; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; r>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.lang.Math; round[float]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Math>
<java.lang.Runtime; totalMemory[]; long; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; r>
<freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; this>
<java.util.Hashtable; putAll[java.util.Map<? extends java.lang.Object,? extends java.lang.Object>]; void; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.lang.Runtime; exec[java.lang.String]; java.lang.Process; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; r>
<java.lang.Process; waitFor[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; p>
<java.lang.Process; getInputStream[]; java.io.InputStream; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; p>
<java.io.InputStream; read[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; os>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; out>
<java.io.InputStream; read[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; os>
<java.lang.Process; getErrorStream[]; java.io.InputStream; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; p>
<java.io.InputStream; read[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; os>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; err>
<java.io.InputStream; read[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; os>
<java.lang.StringBuffer; length[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; err>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; err>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; err>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; out>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; st.nextToken().trim()>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; split[java.lang.String]; st.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; trim[]; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; st>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; trim[]; vst>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; props[i]>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Integer>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; st>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; trim[]; vst>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Integer>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; vst>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; st>
<java.lang.String; indexOf[java.lang.String]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; line>
<java.lang.String; substring[int, int]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; line>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; Integer>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; line.substring(idx + 1,line.length() - 3)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; trim[]; line>
<java.lang.String; length[]; int; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; line>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<freecs.external.xmlrpc.XmlRpcManager; start[]; void; freecs.external.xmlrpc.XmlRpcManager; startManager[]; void; null; mgr>
<not found; setParanoid[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; webServer>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; tok>
<java.lang.String; trim[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; tok.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; trim[]; tok>
<not found; acceptClient[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; webServer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; sb>
<not found; getXmlRpcServer[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; webServer>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; handler.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; iterator[]; handler>
<java.util.Iterator; hasNext[]; boolean; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; i>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; handler>
<not found; addHandler[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; phm>
<java.lang.Object; getClass[]; java.lang.Class<? extends freecs.interfaces.IXmlRpcHandler>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; hdl>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<java.lang.Class; toString[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; hdl.getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends freecs.interfaces.IXmlRpcHandler>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; toString[]; hdl>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<not found; toString[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; e>
<not found; addHandler[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; phm>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<not found; toString[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; e>
<not found; setHandlerMapping[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; xmlRpcServer>
<not found; getConfig[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; xmlRpcServer>
<not found; setEnabledForExtensions[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; serverConfig>
<not found; setContentLengthOptional[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; serverConfig>
<not found; start[]; not found; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; webServer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; e>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; Server>
<java.lang.String; substring[int, int]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; sb.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; substring[int, int]; sb>
<java.lang.String; length[]; int; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; sb.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.xmlrpc.XmlRpcManager; start[]; void; length[]; sb>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; UserManager.mgr>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req.getValue("confirm")>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.core.MessageParser; getMessageState[]; freecs.content.MessageState; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; mpr>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<freecs.core.MessageParser; getMessageState[]; freecs.content.MessageState; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; mpr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; command.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; equals[java.lang.Object]; command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ic>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; p>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; msgState.sender>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.CmdConfirmHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.AdminCore; kick[java.lang.String, long, boolean, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.external.AdminCore; kick[java.lang.String, long, boolean, java.lang.String]; boolean; null; Server.srv>
<freecs.Server; banHost[java.net.InetAddress, long, java.lang.String]; void; freecs.external.AdminCore; kick[java.lang.String, long, boolean, java.lang.String]; boolean; null; Server.srv>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.AdminCore; removeUser[java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.external.AdminCore; removeUser[java.lang.String]; boolean; null; usr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.external.AdminCore; messageToAll[java.lang.String]; boolean; null; mpr>
<freecs.core.MessageParser; setMessage[java.lang.String]; void; freecs.external.AdminCore; messageToAll[java.lang.String]; boolean; null; mpr>
<freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; freecs.external.AdminCore; messageToAll[java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; null; mpr>
<freecs.core.MessageParser; setMessage[java.lang.String]; void; freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; null; mpr>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.external.AdminCore; messageToGroup[java.lang.String, java.lang.String]; boolean; null; grp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; null; mpr>
<freecs.core.MessageParser; setMessage[java.lang.String]; void; freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; null; mpr>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.external.AdminCore; messageToUser[java.lang.String, java.lang.String]; boolean; null; usr>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.content.ContentContainer; setContentType[java.lang.String]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; c>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; "allusers">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; show>
<freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; GroupManager.mgr>
<freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.external.UserlistManager; renderGroupUsersAsXml[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.external.UserlistManager; renderGroupUsersAsText[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; "allgroups">
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; show>
<freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; GroupManager.mgr>
<freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; req>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; GroupManager.mgr>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; req>
<freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.external.UserlistManager; renderGroupUsersAsXml[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.external.UserlistManager; renderGroupUsersAsText[java.lang.StringBuffer, freecs.core.Group]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; UserManager.mgr>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; req>
<freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; this>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; UserManager.mgr>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; getUserlist[java.lang.StringBuffer, freecs.content.ContentContainer, freecs.interfaces.IRequest, boolean]; java.lang.StringBuffer; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; "">
<java.lang.String; trim[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; theme>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<freecs.interfaces.IServerPlugin; canConvert[freecs.core.Group]; boolean; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGroupname[java.lang.String]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; Server>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; HtmlEncoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; convert>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<freecs.interfaces.IServerPlugin; canConvert[freecs.core.Group]; boolean; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGroutheme[java.lang.String]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; Server>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; HtmlEncoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; convert>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<freecs.core.Group; hasState[int]; boolean; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderGroupAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; hasRole[int]; boolean; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; usrIsSu[freecs.core.User]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getChattime[]; long; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; getRawName[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; isAway[]; boolean; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; HtmlEncoder>
<freecs.core.User; getName[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getID[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; getRawName[]; u>
<freecs.interfaces.IServerPlugin; canConvert[freecs.core.User]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGroupname[java.lang.String]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; Server>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; HtmlEncoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; convert>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; lastActive[]; long; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; isAway[]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<freecs.core.User; isAway[]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<freecs.interfaces.IServerPlugin; canConvert[freecs.core.User]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertAwaymessage[java.lang.String]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; Server>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; HtmlEncoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; convert>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getChattime[]; long; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; isPunished[]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; hasRole[int]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; usrIsSu[freecs.core.User]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<freecs.core.Group; hasState[int]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; hasState[int]; u>
<freecs.core.User; hasRight[int]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getColCode[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; HtmlEncoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; u.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; toString[]; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; null; sb>
<freecs.core.Group; getUserArray[]; freecs.core.User[]; freecs.external.UserlistManager; renderGroupUsersAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<freecs.external.UserlistManager; renderUserAsText[java.lang.StringBuffer, freecs.core.User]; void; freecs.external.UserlistManager; renderGroupUsersAsText[java.lang.StringBuffer, freecs.core.Group]; void; null; this>
<freecs.core.Group; getUserArray[]; freecs.core.User[]; freecs.external.UserlistManager; renderGroupUsersAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; g>
<freecs.external.UserlistManager; renderUserAsXml[java.lang.StringBuffer, freecs.core.User]; void; freecs.external.UserlistManager; renderGroupUsersAsXml[java.lang.StringBuffer, freecs.core.Group]; void; null; this>
<freecs.interfaces.IRequest; getKey[]; java.nio.channels.SelectionKey; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; key>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; sc.socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; getInetAddress[]; sc>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<java.net.InetAddress; toString[]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ia>
<freecs.Server; isAdminHost[java.net.InetAddress]; boolean; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server.srv>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<freecs.external.AbstractRequestHandler; getHandlerName[]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; this>
<java.net.InetAddress; toString[]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessIp[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; ia>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Server>
<freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; HttpAuth>
<freecs.interfaces.IRequest; getProperty[java.lang.String]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<freecs.content.ContentContainer; setResCode[short]; void; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; auth.username>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; auth.password>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; level[i]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; level[i]>
<java.lang.Integer; intValue[]; int; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; Integer.valueOf(level[i])>
<java.lang.Integer; valueOf[java.lang.String]; java.lang.Integer; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; intValue[]; Integer>
<freecs.content.ContentContainer; setResCode[short]; void; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; c>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.external.AbstractRequestHandler; checkAccessAuth[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; req>
<java.lang.String; length[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; name>
<java.lang.String; length[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; name>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; Integer>
<java.awt.Color; getRed[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; startcolor>
<java.awt.Color; getGreen[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; startcolor>
<java.awt.Color; getBlue[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; startcolor>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; Integer>
<java.awt.Color; getRed[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; endcolor>
<java.awt.Color; getGreen[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; endcolor>
<java.awt.Color; getBlue[]; int; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; endcolor>
<java.util.ArrayList; add[java.lang.StringBuffer]; boolean; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; fadecolor>
<freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; this>
<freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; this>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; Integer>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; Integer>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; Integer>
<java.lang.String; length[]; int; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; red.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; length[]; red>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; new StringBuffer("0")>
<java.lang.StringBuffer; length[]; int; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; green>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; new StringBuffer("0")>
<java.lang.StringBuffer; length[]; int; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; blue>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; new StringBuffer("0")>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; null; new StringBuffer(red).append(green)>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; rgbToHex[int, int, int]; java.lang.StringBuffer; append[java.lang.StringBuffer]; new StringBuffer(red)>
<java.lang.String; length[]; int; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; name>
<java.lang.String; length[]; int; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; name>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; EntityDecoder>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; name>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link.append(stcolor)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; append[java.lang.String]; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.util.ArrayList; iterator[]; java.util.Iterator<java.lang.StringBuffer>; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; fadecolor>
<java.util.Iterator; hasNext[]; boolean; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.util.Iterator; next[]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link.append(color)>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; append[java.lang.String]; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link.append(ecolor)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; append[java.lang.String]; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; link>
<java.security.MessageDigest; getInstance[java.lang.String]; java.security.MessageDigest; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; MessageDigest>
<java.security.MessageDigest; update[byte[]]; void; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; md>
<java.lang.String; getBytes[java.lang.String]; byte[]; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; source>
<java.security.MessageDigest; digest[]; byte[]; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; md>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; hexString>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; hexString>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; Integer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; null; hexString>
<freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; this>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; System>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<freecs.util.logger.LogFile; backupLogFile[]; void; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; this>
<freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogFile; getChannel[]; java.nio.channels.WritableByteChannel; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogFile; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; null; System>
<freecs.util.logger.LogFile; closeChannel[]; void; freecs.util.logger.LogFile; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; null; this>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; System>
<java.io.File; exists[]; boolean; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; f>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<java.io.File; lastModified[]; long; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; f>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<freecs.util.logger.LogFile; backupLogFile[]; void; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; System>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; LogWriter.instance.cal>
<java.io.FileOutputStream; getChannel[]; java.nio.channels.FileChannel; freecs.util.logger.LogFile; createNewLogFile[]; java.nio.channels.WritableByteChannel; null; fos>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.util.logger.LogFile; backupLogFile[]; void; null; LogWriter.instance.cal>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogFile; backupLogFile[]; void; null; System>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.logger.LogFile; backupLogFile[]; void; null; path>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.logger.LogFile; backupLogFile[]; void; null; path>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.util.logger.LogFile; backupLogFile[]; void; null; path>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; freecs.util.logger.LogFile; backupLogFile[]; void; null; date>
<java.util.Calendar; getTime[]; java.util.Date; freecs.util.logger.LogFile; backupLogFile[]; void; null; LogWriter.instance.cal>
<java.lang.String; substring[int]; java.lang.String; freecs.util.logger.LogFile; backupLogFile[]; void; null; path>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.util.logger.LogFile; backupLogFile[]; void; null; path>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; freecs.util.logger.LogFile; backupLogFile[]; void; null; date>
<java.util.Calendar; getTime[]; java.util.Date; freecs.util.logger.LogFile; backupLogFile[]; void; null; LogWriter.instance.cal>
<java.io.OutputStream; flush[]; void; freecs.util.logger.LogFile; backupLogFile[]; void; null; fos>
<java.nio.channels.Channel; close[]; void; freecs.util.logger.LogFile; backupLogFile[]; void; null; fc>
<java.io.FileOutputStream; close[]; void; freecs.util.logger.LogFile; backupLogFile[]; void; null; fos>
<java.io.File; renameTo[java.io.File]; boolean; freecs.util.logger.LogFile; backupLogFile[]; void; null; f>
<java.lang.Thread; start[]; void; freecs.util.logger.LogFile; backupLogFile[]; void; null; new LogFileShrinker(backupFile)>
<java.io.OutputStream; flush[]; void; freecs.util.logger.LogFile; closeChannel[]; void; null; fos>
<java.nio.channels.Channel; close[]; void; freecs.util.logger.LogFile; closeChannel[]; void; null; fc>
<java.io.FileOutputStream; close[]; void; freecs.util.logger.LogFile; closeChannel[]; void; null; fos>
<java.io.File; exists[]; boolean; freecs.util.logger.LogFile; closeChannel[]; void; null; f>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogFile; closeChannel[]; void; null; Server>
<java.io.File; delete[]; boolean; freecs.util.logger.LogFile; closeChannel[]; void; null; f>
<java.lang.Thread; start[]; void; freecs.util.logger.LogFile; main[java.lang.String[]]; void; null; lfs>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogFile; main[java.lang.String[]]; void; null; System.out>
<java.lang.Thread; join[]; void; freecs.util.logger.LogFile; main[java.lang.String[]]; void; null; lfs>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogFile; main[java.lang.String[]]; void; null; System.out>
<java.io.File; getAbsolutePath[]; java.lang.String; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; toZip>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; Server>
<java.io.File; getAbsolutePath[]; java.lang.String; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; toZip>
<freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; LogCleaner.instance>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; addPath>
<java.io.File; exists[]; boolean; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; zipped>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; zippath.append("[new").append(i)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; append[java.lang.String]; zippath.append("[new")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; append[int]; zippath>
<freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; LogCleaner.instance>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; path>
<java.io.File; exists[]; boolean; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; zipped>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; Server>
<java.io.FileInputStream; read[]; int; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; fis>
<java.util.zip.DeflaterOutputStream; write[int]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; gzos>
<java.util.zip.DeflaterOutputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; gzos>
<java.io.FileOutputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; fos>
<java.io.FileInputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; fis>
<java.io.File; delete[]; boolean; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; toZip>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; Server>
<java.io.FileInputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; fis>
<java.util.zip.DeflaterOutputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; gzos>
<java.io.FileOutputStream; close[]; void; freecs.util.logger.LogFile.LogFileShrinker; run[]; void; null; fos>
<java.lang.Thread; isAlive[]; boolean; freecs.util.logger.LogCleaner; startLogCleaner[]; void; null; instance>
<java.lang.Thread; setName[java.lang.String]; void; freecs.util.logger.LogCleaner; startLogCleaner[]; void; null; instance>
<java.lang.Thread; setPriority[int]; void; freecs.util.logger.LogCleaner; startLogCleaner[]; void; null; instance>
<java.lang.Thread; start[]; void; freecs.util.logger.LogCleaner; startLogCleaner[]; void; null; instance>
<freecs.Server; isRunning[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; Server.srv>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.util.logger.LogCleaner; run[]; void; null; LogWriter.instance.cal>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogCleaner; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogCleaner; run[]; void; null; System>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; null; ldWorkingCopy.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; iterator[]; ldWorkingCopy>
<java.util.Iterator; hasNext[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; it>
<java.util.Vector; add[java.lang.String]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; obj>
<java.util.Iterator; next[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; it>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; null; obj>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; e>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogCleaner; run[]; void; null; System>
<java.util.HashMap; get[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; run[]; void; null; ldWorkingCopy>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogCleaner; run[]; void; null; LogWriter.instance.cal>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; null; ld>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogCleaner; run[]; void; null; LogWriter.instance.cal>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; null; ld>
<java.nio.channels.Channel; isOpen[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; ld.getCloseChannel(true)>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; isOpen[]; ld>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; null; ld>
<java.nio.channels.Channel; isOpen[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; ld.getCloseChannel(true)>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; isOpen[]; ld>
<freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; freecs.util.logger.LogCleaner; run[]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<freecs.util.logger.LogDestination; getCloseChannel[boolean]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogCleaner; run[]; void; null; ld>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<java.util.Calendar; get[int]; int; freecs.util.logger.LogCleaner; run[]; void; null; LogWriter.instance.cal>
<java.lang.String; length[]; int; freecs.util.logger.LogCleaner; run[]; void; null; path.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; length[]; path>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<java.io.File; lastModified[]; long; freecs.util.logger.LogCleaner; run[]; void; null; f>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogCleaner; run[]; void; null; System>
<java.io.File; exists[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; f>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.io.File; delete[]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; f>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; freecs.util.logger.LogCleaner; run[]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; run[]; void; null; path>
<java.lang.Thread; sleep[long]; void; freecs.util.logger.LogCleaner; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.logger.LogCleaner; run[]; void; null; Server>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; ldWorkingCopy>
<java.lang.String; toString[]; java.lang.String; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; path>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; logDestinations>
<java.lang.String; toString[]; java.lang.String; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; path>
<freecs.util.logger.LogWriter; removeLogDestinations[java.lang.String]; void; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; LogWriter.instance>
<java.lang.String; toString[]; java.lang.String; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; path>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; ldWorkingCopy>
<java.lang.String; toString[]; java.lang.String; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; path>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; logDestinations>
<java.lang.String; toString[]; java.lang.String; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; path>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; logDestinations>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; zippath>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; logDestinations>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; zippath>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; Server>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.util.logger.LogCleaner; addLogDestination[java.lang.String, freecs.util.logger.LogDestination]; void; null; logDestinations>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; addLogDestination[java.lang.String, freecs.util.logger.LogDestination]; void; null; logDestinations>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogCleaner; addLogDestination[java.lang.String, freecs.util.logger.LogDestination]; void; put[java.lang.String, freecs.util.logger.LogDestination]; Server>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; curr>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; substring[int]; java.lang.String; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; curr>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; curr>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; substring[int]; java.lang.String; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; curr>
<java.lang.ThreadGroup; setDaemon[boolean]; void; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; tg>
<java.lang.Thread; start[]; void; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; t>
<java.lang.Thread; sleep[long]; void; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; Thread>
<freecs.util.logger.LogWriter; stopLogging[]; void; freecs.util.logger.LogWriterBenchmark; main[java.lang.String[]]; void; null; LogWriter.instance>
<java.lang.Math; round[float]; int; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Math>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogWriterBenchmark; run[]; void; null; System>
<java.lang.Math; round[double]; long; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Math>
<java.lang.Math; random[]; double; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Math>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; freecs.util.logger.LogWriterBenchmark; run[]; void; null; LogWriter.instance>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriterBenchmark; run[]; void; null; sb>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogWriterBenchmark; run[]; void; null; System>
<java.lang.Thread; sleep[long]; void; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Thread>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Charset>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.util.logger.LogWriterBenchmark; run[]; void; null; System>
<java.util.Calendar; getInstance[]; java.util.Calendar; freecs.util.logger.LogWriterBenchmark; run[]; void; null; Calendar>
<java.lang.Thread; setPriority[int]; void; freecs.util.logger.LogWriter; LogWriter[]; void; null; this>
<java.lang.Thread; start[]; void; freecs.util.logger.LogWriter; LogWriter[]; void; null; this>
<java.util.HashMap; get[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; null; logDestinations>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; null; logDestinations>
<freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; this>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.System; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; System>
<java.nio.charset.Charset; encode[java.lang.String]; java.nio.ByteBuffer; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; cs>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; sb>
<freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; freecs.util.logger.LogWriter; addLogMessage[java.lang.String, java.lang.String]; void; null; this>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; messageState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; getRawName[]; messageState.sender>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; r_new.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; replace[java.lang.CharSequence, java.lang.CharSequence]; r_new>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; messageState.sender.getGroup().getRawName()>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; equals[java.lang.Object]; messageState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; getRawName[]; messageState.sender>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; r_new>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; Server>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; messageState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; getRawName[]; messageState.sender>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; r_new>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; dest.append(messageState.sender.getGroup().getRawName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; append[java.lang.String]; dest>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; messageState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; getRawName[]; messageState.sender>
<freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; dest>
<java.nio.charset.Charset; encode[java.lang.String]; java.nio.ByteBuffer; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; cs>
<freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; null; this>
<freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; addLogMessage[int, java.lang.String]; void; null; this>
<java.nio.charset.Charset; encode[java.lang.String]; java.nio.ByteBuffer; freecs.util.logger.LogWriter; addLogMessage[int, java.lang.String]; void; null; cs>
<freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; freecs.util.logger.LogWriter; addLogMessage[int, java.lang.String]; void; null; this>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; null; logQueue>
<java.lang.Object; notifyAll[]; void; freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; null; this>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; null; System.out>
<java.lang.Object; toString[]; java.lang.String; freecs.util.logger.LogWriter; addLogElement[freecs.util.logger.LogWriter.LogEntry]; void; null; le>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; removeLogDestinations[java.lang.String]; void; null; logDestinations>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.logger.LogWriter; run[]; void; null; logQueue>
<java.lang.Object; wait[long]; void; freecs.util.logger.LogWriter; run[]; void; null; this>
<java.lang.Object; notifyAll[]; void; freecs.util.logger.LogWriter; run[]; void; null; this>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.logger.LogWriter; run[]; void; null; workingCopy>
<freecs.util.ObjectBuffer; get[]; java.lang.Object; freecs.util.logger.LogWriter; run[]; void; null; workingCopy>
<freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; freecs.util.logger.LogWriter; run[]; void; null; this>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.util.logger.LogWriter; run[]; void; null; workingCopy>
<freecs.util.ObjectBuffer; clear[]; void; freecs.util.logger.LogWriter; run[]; void; null; workingCopy>
<java.lang.Thread; toString[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.Throwable; getCause[]; java.lang.Throwable; freecs.util.logger.LogWriter; run[]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.Throwable; getStackTrace[]; java.lang.StackTraceElement[]; freecs.util.logger.LogWriter; run[]; void; null; e>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StackTraceElement; getClassName[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StackTraceElement; getMethodName[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.lang.StackTraceElement; getLineNumber[]; int; freecs.util.logger.LogWriter; run[]; void; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogWriter; run[]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; sb>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogWriter; run[]; void; null; System.out>
<java.lang.Object; toString[]; java.lang.String; freecs.util.logger.LogWriter; run[]; void; null; le>
<java.lang.Throwable; printStackTrace[]; void; freecs.util.logger.LogWriter; run[]; void; null; e>
<java.lang.Thread; sleep[long]; void; freecs.util.logger.LogWriter; run[]; void; null; Thread>
<java.nio.channels.WritableByteChannel; write[java.nio.ByteBuffer]; int; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; le.ld.getChannel()>
<freecs.util.logger.LogDestination; getChannel[]; java.nio.channels.WritableByteChannel; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; write[java.nio.ByteBuffer]; le.ld>
<java.nio.Buffer; hasRemaining[]; boolean; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; le.buf>
<java.lang.Thread; toString[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; ioe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getCause[]; java.lang.Throwable; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; ioe>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getStackTrace[]; java.lang.StackTraceElement[]; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; ioe>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getClassName[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getMethodName[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getLineNumber[]; int; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Thread; toString[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getCause[]; java.lang.Throwable; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.Throwable; getStackTrace[]; java.lang.StackTraceElement[]; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; e>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getClassName[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getMethodName[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.lang.StackTraceElement; getLineNumber[]; int; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; st[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.logger.LogWriter; writeToChannel[freecs.util.logger.LogWriter.LogEntry]; boolean; null; sb>
<freecs.util.HttpDateParser; constructSdf[java.lang.String]; java.text.SimpleDateFormat; freecs.util.logger.LogWriter.LogEntry; LogEntry[freecs.util.logger.LogDestination, java.nio.ByteBuffer]; void; null; HttpDateParser>
<freecs.util.HttpDateParser; constructSdf[java.lang.String]; java.text.SimpleDateFormat; freecs.util.logger.LogWriter.LogEntry; LogEntry[freecs.util.logger.LogDestination, java.nio.ByteBuffer]; void; null; HttpDateParser>
<freecs.util.HttpDateParser; constructSdf[java.lang.String]; java.text.SimpleDateFormat; freecs.util.logger.LogWriter.LogEntry; LogEntry[freecs.util.logger.LogDestination, java.nio.ByteBuffer]; void; null; HttpDateParser>
<java.text.DateFormat; setTimeZone[java.util.TimeZone]; void; freecs.util.HttpDateParser; constructSdf[java.lang.String]; java.text.SimpleDateFormat; null; sdf>
<java.util.TimeZone; getTimeZone[java.lang.String]; java.util.TimeZone; freecs.util.HttpDateParser; constructSdf[java.lang.String]; java.text.SimpleDateFormat; null; TimeZone>
<java.util.Date; getTime[]; long; freecs.util.HttpDateParser; parseDate[java.lang.String]; long; null; formats[i].parse(dateStrg)>
<java.text.DateFormat; parse[java.lang.String]; java.util.Date; freecs.util.HttpDateParser; parseDate[java.lang.String]; long; getTime[]; formats[i]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.HttpDateParser; parseDate[java.lang.String]; long; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.HttpDateParser; parseDate[java.lang.String]; long; null; Server>
<freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; freecs.util.EntityDecoder; entityToChar[java.lang.String]; java.lang.String; null; this>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.util.EntityDecoder; entityToHtml[java.lang.String]; java.lang.String; null; this>
<freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; freecs.util.EntityDecoder; entityToHtml[java.lang.String]; java.lang.String; null; this>
<freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; freecs.util.EntityDecoder; htmlToChar[java.lang.String]; java.lang.String; null; this>
<freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; this>
<java.lang.String; toCharArray[]; char[]; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; raw>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; null; encoded>
<freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; this>
<java.lang.String; toCharArray[]; char[]; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; raw>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; null; encoded>
<java.lang.String; replace[char, char]; java.lang.String; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; raw>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; st>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; token>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; substring[int]; java.lang.String; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; token>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; token>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; token>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; token>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.EntityDecoder; entityTo[java.lang.String, java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; substring[int]; java.lang.String; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; result>
<java.lang.String; length[]; int; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; from[i]>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.EntityDecoder; convert[java.lang.String, java.lang.String[], java.lang.String[]]; java.lang.String; null; sb>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; sb>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; sb>
<java.lang.String; substring[int]; java.lang.String; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; result>
<java.lang.String; length[]; int; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; from[i]>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.ObjectBuffer; ObjectBuffer[int]; void; null; Server>
<freecs.util.ObjectBuffer; isFull[]; boolean; freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; null; this>
<freecs.util.ObjectBuffer; resizeTo[int]; void; freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; null; this>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.util.ObjectBuffer; contains[java.lang.Object]; boolean; null; elements[j]>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.ObjectBuffer; get[]; java.lang.Object; null; this>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.ObjectBuffer; pop[]; java.lang.Object; null; this>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.util.ObjectBuffer; inhale[freecs.util.ObjectBuffer]; void; null; ob>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.ObjectBuffer; inhale[freecs.util.ObjectBuffer]; void; null; ob>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.util.ObjectBuffer; inhale[freecs.util.ObjectBuffer]; void; null; this>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.util.ObjectBuffer; inhale[freecs.util.ObjectBuffer]; void; null; ob>
<freecs.util.ObjectBuffer; size[]; int; freecs.util.ObjectBuffer; resizeTo[int]; void; null; this>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.util.ObjectBuffer; resizeTo[int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; freecs.util.ObjectBuffer; resizeTo[int]; void; null; System>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.util.ObjectBuffer; resizeTo[int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; freecs.util.ObjectBuffer; resizeTo[int]; void; null; System>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.util.ObjectBuffer; resizeTo[int]; void; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; freecs.util.ObjectBuffer; resizeTo[int]; void; null; System>
<freecs.util.ObjectBuffer; size[]; int; freecs.util.ObjectBuffer; resizeTo[int]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.ObjectBuffer; finalize[]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; "">
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; auth>
<freecs.util.HttpAuth; decode[char[]]; byte[]; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; this>
<java.lang.String; toCharArray[]; char[]; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; (auth.substring(6))>
<java.lang.String; substring[int]; java.lang.String; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; toCharArray[]; auth>
<freecs.util.HttpAuth; decode[char[]]; byte[]; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; this>
<java.lang.String; toCharArray[]; char[]; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; auth>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; tok>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.util.HttpAuth; parse[java.lang.String]; freecs.util.HttpAuth; null; tok>
<java.lang.String; toCharArray[]; char[]; freecs.util.HttpAuth; decode[char[]]; byte[]; null; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=">
<java.lang.Thread; isAlive[]; boolean; freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; null; fm>
<java.lang.Thread; setName[java.lang.String]; void; freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; null; fm>
<java.lang.Thread; setPriority[int]; void; freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; null; fm>
<java.lang.Thread; start[]; void; freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; null; fm>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; null; watchlist>
<java.util.Vector; addElement[freecs.interfaces.IReloadable]; void; freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; null; watchlist>
<freecs.Server; isRunning[]; boolean; freecs.util.FileMonitor; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.util.FileMonitor; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.FileMonitor; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.util.FileMonitor; run[]; void; null; System>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.interfaces.IReloadable>; freecs.util.FileMonitor; run[]; void; null; watchlist>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.util.FileMonitor; run[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.util.FileMonitor; run[]; void; null; e>
<freecs.interfaces.IReloadable; getFile[]; java.io.File; freecs.util.FileMonitor; run[]; void; null; cr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.FileMonitor; run[]; void; null; new StringBuffer(": IReloadable has no file! ")>
<java.lang.Object; toString[]; java.lang.String; freecs.util.FileMonitor; run[]; void; null; cr>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.FileMonitor; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.FileMonitor; run[]; void; null; tsb>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.util.FileMonitor; run[]; void; null; watchlist>
<freecs.interfaces.IReloadable; filePresent[]; boolean; freecs.util.FileMonitor; run[]; void; null; cr>
<java.io.File; exists[]; boolean; freecs.util.FileMonitor; run[]; void; null; cf>
<freecs.interfaces.IReloadable; removed[]; void; freecs.util.FileMonitor; run[]; void; null; cr>
<freecs.util.FileMonitor; removeMonitor[java.lang.Object]; void; freecs.util.FileMonitor; run[]; void; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.FileMonitor; run[]; void; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.util.FileMonitor; run[]; void; null; cf>
<java.io.File; exists[]; boolean; freecs.util.FileMonitor; run[]; void; null; cf>
<freecs.interfaces.IReloadable; created[]; void; freecs.util.FileMonitor; run[]; void; null; cr>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.FileMonitor; run[]; void; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.util.FileMonitor; run[]; void; null; cf>
<java.io.File; lastModified[]; long; freecs.util.FileMonitor; run[]; void; null; cf>
<freecs.interfaces.IReloadable; lastModified[]; long; freecs.util.FileMonitor; run[]; void; null; cr>
<freecs.interfaces.IReloadable; changed[]; void; freecs.util.FileMonitor; run[]; void; null; cr>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.FileMonitor; run[]; void; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.util.FileMonitor; run[]; void; null; cf>
<java.lang.Thread; sleep[long]; void; freecs.util.FileMonitor; run[]; void; null; Thread>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.util.FileMonitor; removeMonitor[java.lang.Object]; void; null; this.watchlist>
<java.lang.String; length[]; int; freecs.util.CookieGenerator; checkValidity[java.lang.String]; boolean; null; cookie>
<java.lang.StringBuffer; length[]; int; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; c>
<java.lang.Math; ceil[double]; double; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; Math>
<java.lang.Math; random[]; double; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; Math>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; c>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; c>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.util.CookieGenerator; generateCookie[]; java.lang.String; null; UserManager.mgr>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; System.out>
<java.lang.System; currentTimeMillis[]; long; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; System>
<freecs.util.CookieGenerator; generateCookie[]; java.lang.String; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; new StringBuffer("spent ").append((System.currentTimeMillis() - start))>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.util.CookieGenerator; main[java.lang.String[]]; void; append[java.lang.String]; new StringBuffer("spent ")>
<java.lang.System; currentTimeMillis[]; long; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; tsb>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.CookieGenerator; main[java.lang.String[]]; void; null; System.out>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.GroupUserList; GroupUserList[]; void; null; Server>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; u>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; ht>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; v>
<java.util.HashMap; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; ht>
<java.util.Collection; iterator[]; java.util.Iterator; freecs.util.GroupUserList; iterator[]; java.util.Iterator; null; ht.values()>
<java.util.HashMap; values[]; java.util.Collection; freecs.util.GroupUserList; iterator[]; java.util.Iterator; iterator[]; ht>
<java.util.List; add[java.lang.Object]; boolean; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; l>
<java.util.List; add[java.lang.Object]; boolean; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; l>
<java.util.Set; iterator[]; java.util.Iterator; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; ht.keySet()>
<java.util.HashMap; keySet[]; java.util.Set; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; iterator[]; ht>
<java.util.Iterator; hasNext[]; boolean; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; i>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; ht>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; get[int]; java.lang.Object; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; g>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; g>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.GroupUserList; finalize[]; void; null; Server>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; freecs.util.GroupUserList; finalize[]; void; null; System>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String]; java.lang.String; null; str>
<java.lang.Math; round[float]; int; freecs.util.HtmlEncoder; encode[java.lang.String]; java.lang.String; null; Math>
<freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; freecs.util.HtmlEncoder; encode[java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HtmlEncoder; encode[java.lang.String]; java.lang.String; null; ret>
<freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer]; void; null; this>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.StringBuffer; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.Character; isLetterOrDigit[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str.substring(tagStart,j)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; toLowerCase[]; str>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; "code">
<java.util.Set; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; allowedTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; allTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; internalTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; blockTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; semiBlockTags>
<java.util.Stack; search[java.lang.Object]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; emptyTags>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; push[java.lang.Object]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; "code">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; "pre">
<java.lang.Character; isWhitespace[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.StringBuffer; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; length[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.Character; isDigit[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.Character; isLetterOrDigit[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; str>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.Character; isLetterOrDigit[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.Character; isLetterOrDigit[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.Character; isWhitespace[char]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; Character>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.util.Vector; size[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; emptyTags>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; ret>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encodeFormValue[java.lang.String]; java.lang.String; null; str>
<java.lang.Math; round[float]; int; freecs.util.HtmlEncoder; encodeFormValue[java.lang.String]; java.lang.String; null; Math>
<freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; freecs.util.HtmlEncoder; encodeFormValue[java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HtmlEncoder; encodeFormValue[java.lang.String]; java.lang.String; null; ret>
<freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; freecs.util.HtmlEncoder; encodeFormValue[java.lang.String, java.lang.StringBuffer]; void; null; this>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encodeAll[java.lang.String]; java.lang.String; null; str>
<java.lang.Math; round[float]; int; freecs.util.HtmlEncoder; encodeAll[java.lang.String]; java.lang.String; null; Math>
<freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; freecs.util.HtmlEncoder; encodeAll[java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HtmlEncoder; encodeAll[java.lang.String]; java.lang.String; null; ret>
<freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer]; void; null; this>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeAll[java.lang.String, java.lang.StringBuffer, boolean]; void; null; ret>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encodeXml[java.lang.String]; java.lang.String; null; str>
<java.lang.Math; round[float]; int; freecs.util.HtmlEncoder; encodeXml[java.lang.String]; java.lang.String; null; Math>
<freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; freecs.util.HtmlEncoder; encodeXml[java.lang.String]; java.lang.String; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HtmlEncoder; encodeXml[java.lang.String]; java.lang.String; null; ret>
<java.lang.String; length[]; int; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; str>
<java.lang.String; charAt[int]; char; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; str>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; encodeXml[java.lang.String, java.lang.StringBuffer]; void; null; ret>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.HtmlEncoder; printCharRange[int, int]; java.lang.String; null; response>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.HtmlEncoder; main[java.lang.String[]]; void; null; System.err>
<freecs.util.HtmlEncoder; encode[java.lang.String]; java.lang.String; freecs.util.HtmlEncoder; main[java.lang.String[]]; void; null; this>
<java.lang.Thread; isAlive[]; boolean; freecs.util.TrafficMonitor; startTrafficMonitor[]; void; null; tm>
<java.lang.Thread; setName[java.lang.String]; void; freecs.util.TrafficMonitor; startTrafficMonitor[]; void; null; tm>
<java.lang.Thread; start[]; void; freecs.util.TrafficMonitor; startTrafficMonitor[]; void; null; tm>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; addr>
<java.util.Hashtable; put[java.net.InetAddress, freecs.util.TrafficMonitor.AddressState]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; addr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; sb>
<java.net.InetAddress; toString[]; java.lang.String; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; sb>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; System>
<freecs.Server; isAdminHost[java.net.InetAddress]; boolean; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; Server.srv>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; addr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<java.net.InetAddress; toString[]; java.lang.String; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<java.net.InetAddress; toString[]; java.lang.String; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; sb>
<freecs.Server; isRunning[]; boolean; freecs.util.TrafficMonitor; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.util.TrafficMonitor; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor; run[]; void; null; System>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.net.InetAddress>; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.util.TrafficMonitor; run[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.util.TrafficMonitor; run[]; void; null; e>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.util.Hashtable; remove[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.lang.Thread; sleep[long]; void; freecs.util.TrafficMonitor; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.util.TrafficMonitor; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.util.TrafficMonitor.AddressState; AddressState[]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.lang.System; exit[int]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System>
<java.lang.String; length[]; int; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; args[1]>
<java.util.Properties; load[java.io.InputStream]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.io.FileInputStream; close[]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; fis>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.lang.Throwable; printStackTrace[]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; e>
<java.io.File; exists[]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; basef>
<java.io.File; isDirectory[]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; basef>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.lang.System; exit[int]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<freecs.util.MessageTemplateFinder; search[java.io.File]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; this>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.util.TreeSet; iterator[]; java.util.Iterator; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.Iterator; hasNext[]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; e>
<java.util.Iterator; next[]; java.lang.Object; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; e>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.lang.String; length[]; int; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; cs>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; e>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.lang.String; length[]; int; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; k>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; System.out>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; System.out>
<java.io.File; isDirectory[]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; System.out>
<java.io.File; getName[]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<java.io.File; listFiles[]; java.io.File[]; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<freecs.util.MessageTemplateFinder; search[java.io.File]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; this>
<java.io.File; isFile[]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<java.io.PrintStream; print[java.lang.String]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; System.out>
<java.io.File; getName[]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<java.io.File; length[]; long; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; f>
<java.io.Reader; read[char[]]; int; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; fr>
<java.lang.String; copyValueOf[char[]]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; String>
<java.lang.Throwable; printStackTrace[]; void; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; e>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.lang.String; trim[]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt.substring(idx + 12)>
<java.lang.String; substring[int]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; trim[]; cntnt>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.lang.String; trim[]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt.substring(1)>
<java.lang.String; substring[int]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; trim[]; cntnt>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.lang.String; substring[int]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.lang.String; indexOf[java.lang.String]; int; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.lang.String; substring[int, int]; java.lang.String; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; cntnt>
<java.util.TreeSet; contains[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; v>
<freecs.commands.CmdAway; checkVersion[]; freecs.commands.CmdAway; freecs.commands.CmdAway; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdAway; checkVersion[]; freecs.commands.CmdAway; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdAway; checkVersion[]; freecs.commands.CmdAway; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdAway; checkVersion[]; freecs.commands.CmdAway; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdAway; checkVersion[]; freecs.commands.CmdAway; null; Server>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isAwayLocked[freecs.content.MessageState]; boolean; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.lang.String; length[]; int; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setAway[boolean]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; setAwayMessage[java.lang.String]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setAwayMessage[java.lang.String]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; grp>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAway; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; invitedTo[]; freecs.core.Group; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.invitedBy()>
<freecs.core.User; invitedBy[]; freecs.core.User; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; hasRight[int]; msgState.sender>
<freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; invitedBy[]; freecs.core.User; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsPresent[freecs.core.User]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsBaned[freecs.core.User]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; unsetInvitedTo[]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; unsetInvitedTo[]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAccept; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.CmdListBan; checkVersion[]; freecs.commands.CmdListBan; freecs.commands.CmdListBan; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdListBan; checkVersion[]; freecs.commands.CmdListBan; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdListBan; checkVersion[]; freecs.commands.CmdListBan; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdListBan; checkVersion[]; freecs.commands.CmdListBan; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdListBan; checkVersion[]; freecs.commands.CmdListBan; null; Server>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; bannedUsers[]; java.util.Vector<java.lang.String>; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; bl>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; tsb>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; length[]; int; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CmdJoin; checkVersion[]; freecs.commands.CmdJoin; freecs.commands.CmdJoin; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoin; checkVersion[]; freecs.commands.CmdJoin; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdJoin; checkVersion[]; freecs.commands.CmdJoin; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdJoin; checkVersion[]; freecs.commands.CmdJoin; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdJoin; checkVersion[]; freecs.commands.CmdJoin; null; Server>
<java.lang.String; length[]; int; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos + 1)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; length[]; int; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup.getRawName()>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; equalsIgnoreCase[java.lang.String]; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrMayJoinPunished[freecs.core.User]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; incrementJoinPunishedCounter[]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; resetJoinPunishedCounter[]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; usrIsBaned[java.lang.String]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User]; freecs.core.Group; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; setThemeCreator[freecs.core.User]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; size[]; int; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoin; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeFriend[java.lang.String]; void; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRemoveFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdClear; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos + 1)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; length[]; int; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; joinGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; joinGroup>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; joinGroup>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; joinGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User]; freecs.core.Group; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; setThemeCreator[freecs.core.User]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; usrMayLock[freecs.core.User]; boolean; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; unsetState[int]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSepa; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.commands.AbstractCommand; createToStringValue[]; java.lang.String; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("[").append(msgState.sender.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("[")>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; hasState[int]; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("Think:")>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("SetTheme:")>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ").append(cu.getGroup().getRawName()).append(") ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ").append(cu.getGroup().getRawName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ")>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; getRawName[]; cu>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<freecs.core.User; isAway[]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender.getAwayMessage()>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; length[]; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("AwayReason: ")>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("Think:")>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("SetTheme:")>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Command>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ").append(cu.getGroup().getRawName()).append(") ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ").append(cu.getGroup().getRawName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName()).append("] (room: ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[").append(cu.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ").append("[")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; append[java.lang.String]; new StringBuffer("whisper to ")>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; getRawName[]; cu>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<freecs.core.User; isAway[]; boolean; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender.getAwayMessage()>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; length[]; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; new StringBuffer("AwayReason: ")>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; name>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; log>
<freecs.core.User; isPunished[]; boolean; freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; null; msgState.sender>
<freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; null; msgState.usercontext.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; hasState[int]; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.AbstractCommand; canSuBan[freecs.content.MessageState]; boolean; null; msgState.targetGroup>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; null; UserManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; null; msgState.sender>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; msgState.sender>
<freecs.core.User; invitedBy[]; freecs.core.User; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; cu>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; msgState.targetGroup>
<freecs.core.User; invitedTo[]; freecs.core.Group; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; msgState.sender>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; msgState.targetGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; equals[java.lang.Object]; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; msgState.sender>
<freecs.core.User; invitedFrom[freecs.core.User]; boolean; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.Group; usrIsMember[freecs.core.User]; boolean; freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; g>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; g>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; u>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; g>
<freecs.core.Group; usrIsMember[freecs.core.User]; boolean; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; g>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; null; g>
<freecs.core.Group; isMembershipRoom[freecs.core.User]; boolean; freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; isMembershipLocked[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<freecs.commands.CommandSet; getCommandSetProps[]; java.util.Properties; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; getProperty[java.lang.String]; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; getCommandSetProps[]; CommandSet>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; hasState[int]; msgState.sender>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<freecs.commands.CommandSet; getCommandSetProps[]; java.util.Properties; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; getProperty[java.lang.String]; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; getCommandSetProps[]; CommandSet>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<freecs.commands.CommandSet; getCommandSetProps[]; java.util.Properties; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; getProperty[java.lang.String]; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; getCommandSetProps[]; CommandSet>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; null; msgState.sender>
<freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; null; this>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; null; s>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; null; msgState.sender.getTemplateSet()>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; getMessageTemplate[java.lang.String]; msgState.sender>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; null; MessageRenderer>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; TemplateManager.mgr>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; sb>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; MessageRenderer>
<freecs.core.Group; getUserArray[]; freecs.core.User[]; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; g>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; MessageRenderer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; msgState.usercontext>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; null; sb>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; null; s>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; usrs[i]>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; UserManager.mgr>
<freecs.Server; isPunishable[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; Server.srv>
<freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; Server.srv>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; usrs[i]>
<java.util.Vector; add[java.lang.String]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; get[int]; java.lang.String; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; usrs[i]>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; UserManager.mgr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; usrs[i]>
<java.util.Vector; add[java.lang.String]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; get[int]; java.lang.String; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; msgState.sender>
<freecs.core.User; setPrivateUser[freecs.core.User]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.User; setForeignPrivateUser[freecs.core.User]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; isAway[]; boolean; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; getWhipserSize[]; int; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<java.lang.Object; toString[]; java.lang.String; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; size>
<freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; isAway[]; boolean; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; addWhisper[java.lang.Object]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; cu>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; null; msgState.sender>
<freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; null; cu>
<freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; null; cug>
<freecs.core.Group; addToSusers[freecs.core.User]; boolean; freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; null; cug>
<freecs.core.Group; removeFromSusers[freecs.core.User]; void; freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; null; cug>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.String; length[]; int; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.String; charAt[int]; char; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; Integer>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; Integer>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; Integer>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; null; col>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; null; msgState.param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; toLowerCase[]; msgState.param>
<freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; null; this>
<freecs.commands.CmdInviteAll; checkVersion[]; freecs.commands.CmdInviteAll; freecs.commands.CmdInviteAll; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdInviteAll; checkVersion[]; freecs.commands.CmdInviteAll; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdInviteAll; checkVersion[]; freecs.commands.CmdInviteAll; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdInviteAll; checkVersion[]; freecs.commands.CmdInviteAll; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdInviteAll; checkVersion[]; freecs.commands.CmdInviteAll; null; Server>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager$UserStore; toArray[]; freecs.core.User[]; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr.ustr>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; invitedBy[]; freecs.core.User; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; invitedTo[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; getUserArray[]; freecs.core.User[]; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInviteAll; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratedMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; hasState[int]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; moderator>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; moderator>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msg>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msg>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; getCommand[java.lang.String]; CommandSet>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msg>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ic>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msg.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; msg>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAck; execute[freecs.content.MessageState, java.lang.String]; boolean; null; moderator>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListAllFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratorMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdThink; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<java.util.Vector; size[]; int; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; freecs.core.User; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isFriendsOnly[]; boolean; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setFriendsOnly[boolean]; void; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setFriendsOnly[boolean]; void; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFriendsOnly; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; action>
<freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; action>
<freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; action>
<freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdLockChangeForeignAction; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos2)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; lastIndexOf[java.lang.String]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; setColCode[java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setCollock[boolean]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos2)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; lastIndexOf[java.lang.String]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; isAway[]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; setAwayMessage[java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setAwaylock[boolean]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos2)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; lastIndexOf[java.lang.String]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setActlock[boolean]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.commands.CmdShowIp; checkVersion[]; freecs.commands.CmdShowIp; freecs.commands.CmdShowIp; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdShowIp; checkVersion[]; freecs.commands.CmdShowIp; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdShowIp; checkVersion[]; freecs.commands.CmdShowIp; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdShowIp; checkVersion[]; freecs.commands.CmdShowIp; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdShowIp; checkVersion[]; freecs.commands.CmdShowIp; null; Server>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; parts[1]>
<java.util.Vector; size[]; int; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr.anoProxyUserList()>
<freecs.core.UserManager; anoProxyUserList[]; java.util.Vector<java.lang.Object>; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; size[]; UserManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; anoProxyUser[]; java.util.Enumeration<java.lang.Object>; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; anoUser>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; anoUser>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; anoUser>
<freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.Server; checkLogLvl[short, short]; boolean; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.Group; getSuForbiddenMembership[]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; usrIsSu[freecs.core.User]; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; hasState[int]; cu>
<freecs.core.Group; suUserCount[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; getRawName[]; cu>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdMyCol; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdMyCol; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; parts[1]>
<freecs.core.User; getLastCalledMembership[]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Membership; sendHistory[freecs.core.User]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getLastCalledMembership()>
<freecs.core.User; getLastCalledMembership[]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; sendHistory[freecs.core.User]; msgState.sender>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; MembershipManager.instance>
<freecs.core.User; hasMembership[java.lang.String]; boolean; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.Membership; getName[]; java.lang.String; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.core.User; setLastCalledMembership[freecs.core.Membership]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Membership; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.core.User; getLastCalledMembership[]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; MembershipManager.instance>
<freecs.core.User; getLastCalledMembership[]; freecs.core.Membership; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Membership; getName[]; java.lang.String; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.core.Membership; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; freecs.commands.CmdCallMemberships; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cms>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; setPunish[boolean]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; hasState[int]; cu>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.lang.System; currentTimeMillis[]; long; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; System>
<freecs.core.UserManager; scheduleAction[short, long, freecs.core.User, freecs.core.User]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.usercontext>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.User; getForeignPrivateUser[]; freecs.core.User; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isLoggedOut[]; boolean; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setPrivateUser[freecs.core.User]; void; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdReplyMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isColLocked[freecs.content.MessageState]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; hasState[int]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; colCode>
<java.lang.String; length[]; int; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; length[]; msgState.sender>
<freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isColorCodeValid[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; changeColCode[java.lang.String]; boolean; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setFadeColorUsername[java.lang.StringBuffer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; FadeColor>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeColor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.CmdJoinClosed; checkVersion[]; freecs.commands.CmdJoinClosed; freecs.commands.CmdJoinClosed; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoinClosed; checkVersion[]; freecs.commands.CmdJoinClosed; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdJoinClosed; checkVersion[]; freecs.commands.CmdJoinClosed; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdJoinClosed; checkVersion[]; freecs.commands.CmdJoinClosed; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdJoinClosed; checkVersion[]; freecs.commands.CmdJoinClosed; null; Server>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; length[]; int; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; groupname>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup.getRawName()>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; equalsIgnoreCase[java.lang.String]; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.commands.AbstractCommand; sendReason[java.lang.String, freecs.content.MessageState]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrMayJoinPunished[freecs.core.User]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; incrementJoinPunishedCounter[]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; resetJoinPunishedCounter[]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; usrIsBaned[java.lang.String]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; size[]; int; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinClosed; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; usrMayLock[freecs.core.User]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; setState[int]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnlock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; canSuBan[freecs.content.MessageState]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; lastIndexOf[java.lang.String]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; getCommand[java.lang.String]; CommandSet>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.content.MessageState; clone[]; java.lang.Object; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.content.MessageState; inhale[freecs.content.MessageState]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState>
<freecs.core.Group; canSetBanForUser[java.lang.String]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup.bannedUsers()>
<freecs.core.Group; bannedUsers[]; java.util.Vector<java.lang.String>; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; contains[java.lang.Object]; msgState.targetGroup>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; toLowerCase[]; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.content.MessageState; inhale[freecs.content.MessageState]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; cu>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ic>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.content.MessageState; inhale[freecs.content.MessageState]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState>
<freecs.content.MessageState; inhale[freecs.content.MessageState]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CmdJoinUser; checkVersion[]; freecs.commands.CmdJoinUser; freecs.commands.CmdJoinUser; instanceForSystem[]; java.lang.Object; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoinUser; checkVersion[]; freecs.commands.CmdJoinUser; null; Server.getVersion()>
<freecs.Server; getVersion[]; java.lang.String; freecs.commands.CmdJoinUser; checkVersion[]; freecs.commands.CmdJoinUser; substring[int, int]; Server>
<java.lang.Integer; intValue[]; int; freecs.commands.CmdJoinUser; checkVersion[]; freecs.commands.CmdJoinUser; null; new Integer(freecsversion)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdJoinUser; checkVersion[]; freecs.commands.CmdJoinUser; null; Server>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ic>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdJoinUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; usrIsSu[freecs.core.User]; cu>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; setSuRight[freecs.content.MessageState, freecs.core.User, boolean]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; getRawName[]; cu>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.usercontext>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.lang.String; length[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; numberOfIgnoredUser[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; userIsIgnored[java.lang.String]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; toLowerCase[]; u>
<freecs.core.User; userIsIgnored[java.lang.String]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; toLowerCase[]; u>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; toLowerCase[]; u>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Iterator; next[]; java.lang.Object; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; new StringBuffer("User ").append(msgState.sender.getName()).append(" is respecting ").append(uname)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; append[java.lang.String]; new StringBuffer("User ").append(msgState.sender.getName()).append(" is respecting ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; append[java.lang.String]; new StringBuffer("User ").append(msgState.sender.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; append[java.lang.String]; new StringBuffer("User ")>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; tsb>
<freecs.core.User; respectUser[java.lang.String]; void; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isMeLocked[freecs.content.MessageState]; boolean; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratorMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAct; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; resetQuestionCounter[]; void; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdResetQuestioncounter; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; usrIsSu[freecs.core.User]; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; usrIsSu[freecs.core.User]; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.commands.AbstractCommand; setInvited[freecs.content.MessageState, freecs.core.User]; boolean; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Iterator; remove[]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Vector; size[]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; getTheme[]; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup().getTheme()>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; length[]; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; getTheme[]; msgState.sender>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; getTheme[]; msgState.sender>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; getTheme[]; msgState.sender>
<freecs.core.Group; setTheme[java.lang.String, freecs.core.User]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; setTheme[java.lang.String, freecs.core.User]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; setTheme[java.lang.String, freecs.core.User]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdSetTheme; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; setPunish[boolean]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; isEntrancePunished[]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; removePunish[]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.usercontext>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.lang.String; length[]; int; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; getPrivateUser[]; freecs.core.User; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isLoggedIn[]; boolean; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setPrivateUser[freecs.core.User]; void; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdRepeatedPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; removeFromSusers[freecs.core.User]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Vector; size[]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowUserDetail; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos2)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; lastIndexOf[java.lang.String]; param>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos1)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Long>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(0,pos1)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRole[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRole[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<java.util.Vector; size[]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server.srv>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu.getGroup().getRawName()>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; equalsIgnoreCase[java.lang.String]; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; getRawName[]; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Iterator; remove[]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; i>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; removeFromSusers[freecs.core.User]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.util.GroupUserList; addUser[freecs.core.User]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sourceGroup>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; gul>
<freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; substring[int, int]; java.lang.String; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; cantHearYou[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; trim[]; param>
<freecs.commands.AbstractCommand; sendPrivateMessage[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdPrivateMessage; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; containsConfirmAction[java.lang.String]; boolean; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; addConfirmAction[java.lang.String]; void; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; removeConfirmAction[java.lang.String]; void; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; isPunished[]; boolean; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.commands.CmdQuit; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CommandSet; initAllCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; CommandSet[]; void; null; this>
<freecs.commands.CommandSet; initAvailableCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; CommandSet[]; void; null; this>
<freecs.commands.CommandSet; initAllCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; checkCommendSet[]; void; null; this>
<freecs.commands.CommandSet; initAvailableCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; checkCommendSet[]; void; null; this>
<freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; initAvailableCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; this>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.commands.CommandSet; initAvailableCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.commands.CommandSet; initAvailableCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.io.File; exists[]; boolean; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; cfgFile>
<java.io.File; isFile[]; boolean; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; cfgFile>
<java.io.File; lastModified[]; long; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; cfgFile>
<java.util.Properties; load[java.io.InputStream]; void; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.io.FileInputStream; close[]; void; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; in>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; Server>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; allCmds.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; iterator[]; allCmds>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; i>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; curr.substring(1)>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; toLowerCase[]; curr>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; curr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; curr>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; new StringBuilder("/")>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; allCmds>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; cmdKey>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; available>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; cmdKey>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; null; allCmds>
<freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String]; byte; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String]; byte; null; Server>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; msgState.cb>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; cmd>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; cmd>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; param_temp>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; availableCmds>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; cmd>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; cmdObj>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CommandSet; changed[]; void; null; Server>
<freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; changed[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CommandSet; removed[]; void; null; Server>
<freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; removed[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CommandSet; created[]; void; null; Server>
<freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; freecs.commands.CommandSet; created[]; void; null; this>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; incrementQuestionCounter[]; void; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; incrementQuestionCounter[]; void; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratorMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdQuestion; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Integer>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Integer>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.Math; round[double]; long; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Math>
<java.lang.Math; random[]; double; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Math>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<java.lang.Math; round[double]; long; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Math>
<java.lang.Math; random[]; double; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Math>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdHitDice; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; parts[1]>
<java.lang.String; length[]; int; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; "false">
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getTemplateSet()>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; getMessageTemplate[java.lang.String]; msgState.sender>
<freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.Group; isValid[]; boolean; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; g>
<freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.commands.AbstractCommand; getUserList[freecs.content.MessageState, boolean, boolean]; java.lang.String; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; MessageRenderer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; sb>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; sendUserList[freecs.content.MessageState, boolean]; boolean; freecs.commands.CmdListUsers; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; onlineVips[]; java.util.Enumeration<java.lang.Object>; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.UserManager; notListedAsOnlineVips[]; java.util.Enumeration<java.lang.Object>; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.UserManager; onlineVipList[]; java.util.Vector<java.lang.Object>; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<java.util.Vector; size[]; int; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Iterator; hasNext[]; boolean; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Iterator; next[]; freecs.core.User; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<java.util.Iterator; remove[]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; new StringBuffer("User ").append(msgState.sender.getName()).append(" is ignoring ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; append[java.lang.String]; new StringBuffer("User ").append(msgState.sender.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; append[java.lang.String]; new StringBuffer("User ")>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; cu>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; tsb>
<freecs.core.User; ignoreUser[freecs.core.User]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrMayLock[freecs.core.User]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; unsetState[int]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdLock; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; new StringBuilder("funcommand.")>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ts>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; me>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; me>
<freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratorMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdFun; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.commands.AbstractCommand; getUser[freecs.content.MessageState, java.lang.String]; freecs.core.User; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; compareRoleTo[freecs.core.User]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; compareRoleTo[freecs.core.User]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; compareRoleTo[freecs.core.User]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; getPermissionMap[]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; getDefaultPermissionMap[]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; resetPermission[]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; givePermission[int]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; takePermission[int]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<java.lang.String; substring[int]; java.lang.String; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; part>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager>
<freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; setNewPermission[int]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; usrIsSu[freecs.core.User]; u>
<freecs.core.Group; removeFromSusers[freecs.core.User]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; removeFromSusers[freecs.core.User]; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; u>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdRightChange; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRole[int]; boolean; freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; null; donatingUser>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; null; donatingUser>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdRightChange; allowedToChangeRight[int, freecs.core.User]; boolean; null; donatingUser>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.auth.AuthManager; isValidName[java.lang.String]; boolean; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; AuthManager.instance>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; equalsIgnoreCase[java.lang.String]; msgState.sender>
<freecs.core.User; addFriend[java.lang.String]; void; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; valueOf[int]; java.lang.String; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; String>
<freecs.core.User; numberOfFriends[]; int; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdAddFriend; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShowTime; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ts>
<freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<java.lang.String; length[]; int; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; bgColCode>
<freecs.commands.CmdChangeBgcolor; isBgColorCodeValid[freecs.content.MessageState]; boolean; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.User; setBgColCode[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; setBgColCode[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; getCommand[java.lang.String]; CommandSet>
<freecs.interfaces.ICommand; execute[freecs.content.MessageState, java.lang.String]; boolean; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; ic>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdChangeBgcolor; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isBgColorCodeValid[freecs.content.MessageState]; boolean; null; msgState.param.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isBgColorCodeValid[freecs.content.MessageState]; boolean; toLowerCase[]; msgState.param>
<freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; freecs.commands.CmdChangeBgcolor; isBgColorCodeValid[freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; ts>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; val>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; toLowerCase[]; values[i]>
<java.util.Vector; addElement[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; toLowerCase[]; values[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; ts>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; val>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; toLowerCase[]; values[i]>
<java.util.Vector; addElement[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; toLowerCase[]; values[i]>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; sb>
<java.lang.String; toUpperCase[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; color>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; sb>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; GroupManager.mgr>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; isVip[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.commands.AbstractCommand; isSu[freecs.core.User, freecs.core.Group, freecs.content.MessageState]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; getMemberships[]; freecs.core.Membership[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; indexOf[java.lang.String]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; hasRight[int]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; length[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr>
<freecs.core.Group; usrIsBaned[java.lang.String]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.core.User; getName[]; java.lang.String; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<freecs.core.User; isEntranceBanned[]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; removeBan[]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.usercontext>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; equals[java.lang.Object]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup>
<freecs.commands.AbstractCommand; isPunished[freecs.content.MessageState]; boolean; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<java.lang.String; length[]; int; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; param>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; this>
<freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; sendModeratorMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<java.lang.System; currentTimeMillis[]; long; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; System>
<java.util.Calendar; getInstance[]; java.util.Calendar; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Calendar>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; Charset>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.commands.CmdShout; execute[freecs.content.MessageState, java.lang.String]; boolean; null; defaultCs>
<java.net.InetAddress; getLocalHost[]; java.net.InetAddress; freecs.Server; Server[]; void; null; InetAddress>
<java.io.PrintStream; println[java.lang.String]; void; freecs.Server; Server[]; void; null; System.out>
<java.lang.Throwable; getCause[]; java.lang.Throwable; freecs.Server; Server[]; void; null; uhe>
<java.lang.Throwable; printStackTrace[]; void; freecs.Server; Server[]; void; null; uhe>
<java.lang.System; exit[int]; void; freecs.Server; Server[]; void; null; System>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; substring[int]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; args[0]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; main[java.lang.String[]]; void; null; args[i]>
<java.io.PrintStream; println[java.lang.String]; void; freecs.Server; main[java.lang.String[]]; void; null; System.out>
<java.util.SortedMap; keySet[]; java.util.Set<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; Charset.availableCharsets()>
<java.nio.charset.Charset; availableCharsets[]; java.util.SortedMap<java.lang.String,java.nio.charset.Charset>; freecs.Server; main[java.lang.String[]]; void; keySet[]; Charset>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; ks>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; main[java.lang.String[]]; void; null; it>
<java.io.PrintStream; print[java.lang.String]; void; freecs.Server; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; freecs.Server; main[java.lang.String[]]; void; null; System.out>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; it>
<java.lang.System; exit[int]; void; freecs.Server; main[java.lang.String[]]; void; null; System>
<freecs.Server; readConfig[]; void; freecs.Server; main[java.lang.String[]]; void; null; srv>
<freecs.Server; initServer[]; void; freecs.Server; main[java.lang.String[]]; void; null; srv>
<freecs.Server; startThreads[]; void; freecs.Server; main[java.lang.String[]]; void; null; srv>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<freecs.Server; isRunning[]; boolean; freecs.Server; main[java.lang.String[]]; void; null; srv>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; main[java.lang.String[]]; void; null; System>
<freecs.core.RequestReader; getWorkingSince[]; long[][]; freecs.Server; main[java.lang.String[]]; void; null; RequestReader>
<freecs.core.RequestReader; getAliveState[]; boolean[]; freecs.Server; main[java.lang.String[]]; void; null; RequestReader>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<freecs.core.RequestReader; getCurrCommant[int]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; RequestReader>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb.append(" (").append(cmd)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; append[java.lang.String]; sb.append(" (")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; freecs.Server; main[java.lang.String[]]; void; null; Runtime>
<java.lang.Runtime; freeMemory[]; long; freecs.Server; main[java.lang.String[]]; void; null; r>
<java.lang.Runtime; totalMemory[]; long; freecs.Server; main[java.lang.String[]]; void; null; r>
<java.lang.Runtime; maxMemory[]; long; freecs.Server; main[java.lang.String[]]; void; null; r>
<java.lang.Runtime; totalMemory[]; long; freecs.Server; main[java.lang.String[]]; void; null; r>
<java.lang.Runtime; freeMemory[]; long; freecs.Server; main[java.lang.String[]]; void; null; r>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb.append(max)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb.append(total)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb.append(free)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; main[java.lang.String[]]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; e>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; main[java.lang.String[]]; void; null; bObj.bannedBy>
<freecs.Server; checkLogLvl[short, short]; boolean; freecs.Server; main[java.lang.String[]]; void; null; this>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; new StringBuffer("Server: removing ban for ")>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; main[java.lang.String[]]; void; null; srv.storeList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; main[java.lang.String[]]; void; null; e>
<java.util.Enumeration; nextElement[]; freecs.content.ActionstoreObject; freecs.Server; main[java.lang.String[]]; void; null; e>
<freecs.Server; checkLogLvl[short, short]; boolean; freecs.Server; main[java.lang.String[]]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; main[java.lang.String[]]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; main[java.lang.String[]]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; sb>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; srv.storeList>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; main[java.lang.String[]]; void; null; sObj>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.Server; main[java.lang.String[]]; void; null; GroupManager.mgr>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; main[java.lang.String[]]; void; null; UserManager.mgr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.Server; main[java.lang.String[]]; void; null; mp>
<freecs.core.MessageParser; setTargetGroup[freecs.core.Group]; void; freecs.Server; main[java.lang.String[]]; void; null; mp>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.Server; main[java.lang.String[]]; void; null; u>
<freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; freecs.Server; main[java.lang.String[]]; void; null; g>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; u>
<freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; freecs.Server; main[java.lang.String[]]; void; null; g>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; main[java.lang.String[]]; void; null; sObj>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; main[java.lang.String[]]; void; null; UserManager.mgr>
<freecs.core.User; setCollock[boolean]; void; freecs.Server; main[java.lang.String[]]; void; null; u>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; main[java.lang.String[]]; void; null; sObj>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; main[java.lang.String[]]; void; null; UserManager.mgr>
<freecs.core.User; setAwaylock[boolean]; void; freecs.Server; main[java.lang.String[]]; void; null; u>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; main[java.lang.String[]]; void; null; sObj>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; main[java.lang.String[]]; void; null; UserManager.mgr>
<freecs.core.User; setActlock[boolean]; void; freecs.Server; main[java.lang.String[]]; void; null; u>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; main[java.lang.String[]]; void; null; sObj>
<java.lang.Thread; sleep[long]; void; freecs.Server; main[java.lang.String[]]; void; null; Thread>
<freecs.core.UserManager; startUserManager[]; void; freecs.Server; startThreads[]; void; null; UserManager>
<freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; freecs.Server; startThreads[]; void; null; RequestReader>
<freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; freecs.Server; startThreads[]; void; null; RequestReader>
<freecs.core.CentralSelector; startCentralSelector[]; void; freecs.Server; startThreads[]; void; null; CentralSelector>
<freecs.core.Responder; startResponder[]; void; freecs.Server; startThreads[]; void; null; Responder>
<freecs.core.Listener; startListener[]; void; freecs.Server; startThreads[]; void; null; Listener>
<freecs.util.logger.LogCleaner; startLogCleaner[]; void; freecs.Server; startThreads[]; void; null; LogCleaner>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; startThreads[]; void; null; Server>
<freecs.util.TrafficMonitor; startTrafficMonitor[]; void; freecs.Server; startThreads[]; void; null; TrafficMonitor>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; startThreads[]; void; null; Server>
<freecs.external.xmlrpc.XmlRpcManager; startManager[]; void; freecs.Server; startThreads[]; void; null; XmlRpcManager>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; startThreads[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; readConfig[]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; readConfig[]; void; null; new StringBuffer(BASE_PATH)>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; readConfig[]; void; null; sb>
<java.io.File; exists[]; boolean; freecs.Server; readConfig[]; void; null; cFile>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; readConfig[]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; readConfig[]; void; null; new StringBuffer(BASE_PATH)>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; readConfig[]; void; null; sb>
<java.io.File; exists[]; boolean; freecs.Server; readConfig[]; void; null; cFile>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; readConfig[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; readConfig[]; void; null; sb>
<java.util.Properties; load[java.io.InputStream]; void; freecs.Server; readConfig[]; void; null; props>
<java.io.FileInputStream; close[]; void; freecs.Server; readConfig[]; void; null; in>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; readConfig[]; void; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; readConfig[]; void; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; readConfig[]; void; null; Server>
<freecs.Server; checkForConfigValues[]; void; freecs.Server; readConfig[]; void; null; this>
<java.io.File; lastModified[]; long; freecs.Server; readConfig[]; void; null; cFile>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.Server; readConfig[]; void; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.Server; readConfig[]; void; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; freecs.Server; checkForConfigValues[]; void; null; GroupManager.mgr>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; sgroups>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; LOGFILE[MSG_MESSAGE]>
<java.io.File; exists[]; boolean; freecs.Server; checkForConfigValues[]; void; null; f>
<java.io.File; mkdirs[]; boolean; freecs.Server; checkForConfigValues[]; void; null; f>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.Throwable; printStackTrace[]; void; freecs.Server; checkForConfigValues[]; void; null; e>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; ndcs>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.Server; checkForConfigValues[]; void; null; Charset>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.Server; checkForConfigValues[]; void; null; defaultCs>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; cookiedomain>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; cookie.append(cd[i].trim().toLowerCase())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; append[java.lang.String]; cookie>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; cd[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; cd[i]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; cd[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; cd[i]>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; servername>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; server>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; sv[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; sv[i]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; sv[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; sv[i]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; httpUname>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; httpPassword>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; sLevel>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, int]; int; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; checkProperty[java.lang.String, boolean]; boolean; freecs.Server; checkForConfigValues[]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; plugins>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; pluginUrl>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i]>
<freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; resetPluginStore[]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.Server; resetPluginStore[]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; url>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i]>
<freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<freecs.commands.CommandSet; checkCommendSet[]; void; freecs.Server; checkForConfigValues[]; void; null; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.Server; checkForConfigValues[]; void; checkCommendSet[]; CommandSet>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; xmlRpcHandlerUrl>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i]>
<freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; names>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; values[i]>
<freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; GroupManager.mgr>
<freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; GroupManager.mgr>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; values[i]>
<freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; values[i]>
<freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; values[i]>
<freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; values[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; toLowerCase[]; values[i]>
<freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.Server; checkForConfigValues[]; void; null; InetAddress>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; hsts[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; tsb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tsb>
<java.util.Vector; clone[]; java.lang.Object; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; remove>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; addAll[java.util.Collection<? extends java.net.InetAddress>]; boolean; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.Server; checkForConfigValues[]; void; null; tempAdmins>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; checkForConfigValues[]; void; null; tp>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tp>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; checkForConfigValues[]; void; null; UserManager.mgr>
<freecs.Server; addTempAdminhost[freecs.core.User]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.Server; checkForConfigValues[]; void; null; InetAddress>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; hsts[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; tsb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tsb>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; length[]; int; freecs.Server; checkForConfigValues[]; void; null; TIMEZONE>
<java.util.TimeZone; getDefault[]; java.util.TimeZone; freecs.Server; checkForConfigValues[]; void; null; TimeZone>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.util.TimeZone; getID[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tz>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; tz>
<java.util.Calendar; getTimeZone[]; java.util.TimeZone; freecs.Server; checkForConfigValues[]; void; null; cal>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; oldTimeZone>
<java.util.TimeZone; getTimeZone[java.lang.String]; java.util.TimeZone; freecs.Server; checkForConfigValues[]; void; null; TimeZone>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; tz>
<java.util.Calendar; getTimeZone[]; java.util.TimeZone; freecs.Server; checkForConfigValues[]; void; null; cal>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; tz.getID()>
<java.util.TimeZone; getID[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; equals[java.lang.Object]; tz>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.util.TimeZone; getID[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tz>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.util.TimeZone; getAvailableIDs[]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; TimeZone>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; sb>
<java.util.TimeZone; getID[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tz>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; sb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.util.Calendar; setTimeZone[java.util.TimeZone]; void; freecs.Server; checkForConfigValues[]; void; null; cal>
<freecs.core.Listener; updateSscRecieveBuffer[int]; void; freecs.Server; checkForConfigValues[]; void; null; Listener>
<freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.Server; checkForConfigValues[]; void; null; val>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.Server; checkForConfigValues[]; void; null; InetAddress>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; hsts[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; checkForConfigValues[]; void; null; tsb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkForConfigValues[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; tsb>
<java.util.Vector; clone[]; java.lang.Object; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; remove>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Vector; addAll[java.util.Collection<? extends java.net.InetAddress>]; boolean; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; logVal>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; logVal>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.lang.Short; parseShort[java.lang.String, int]; short; freecs.Server; checkForConfigValues[]; void; null; Short>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.jar.JarFile; entries[]; java.util.Enumeration<java.util.jar.JarEntry>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; new JarFile(jUrl)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; entries>
<java.util.Enumeration; nextElement[]; java.util.jar.JarEntry; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; entries>
<java.lang.String; matches[java.lang.String]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; jarEntry.getName()>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; matches[java.lang.String]; jarEntry>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; jarEntry>
<java.lang.String; indexOf[java.lang.String]; int; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; indexOf[java.lang.String]; url>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url.substring(0,i).toString()>
<java.lang.String; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; replaceAll[java.lang.String, java.lang.String]; url.substring(0,i)>
<java.lang.AbstractStringBuilder; substring[int, int]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; toString[]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandUrl>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; jarEntry>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.lang.String; length[]; int; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; length[]; url>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandsStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; getInstance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandsStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.interfaces.ICommand; getCmd[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; ((ICommand)o)>
<freecs.interfaces.ICommand; getVersion[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; ((ICommand)o)>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; version>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; allCommands>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; allCommands>
<freecs.interfaces.ICommand; getCmd[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; ((ICommand)o)>
<freecs.interfaces.ICommand; instanceForSystem[]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; ((ICommand)o)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.jar.JarFile; entries[]; java.util.Enumeration<java.util.jar.JarEntry>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; new JarFile(jUrl)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; entries>
<java.util.Enumeration; nextElement[]; java.util.jar.JarEntry; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; entries>
<java.lang.String; matches[java.lang.String]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; jarEntry.getName()>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; matches[java.lang.String]; jarEntry>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; jarEntry>
<java.lang.String; indexOf[java.lang.String]; int; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; indexOf[java.lang.String]; url>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.substring(0,i).toString()>
<java.lang.String; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; replaceAll[java.lang.String, java.lang.String]; url.substring(0,i)>
<java.lang.AbstractStringBuilder; substring[int, int]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; toString[]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcUrl>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; jarEntry>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.lang.String; length[]; int; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; length[]; url>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; getInstance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.interfaces.IXmlRpcHandler; getHandlername[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; ((IXmlRpcHandler)o)>
<freecs.interfaces.IXmlRpcHandler; getVersion[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; ((IXmlRpcHandler)o)>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; version>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcHandler>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcHandler>
<freecs.interfaces.IXmlRpcHandler; getHandlername[]; java.lang.String; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; ((IXmlRpcHandler)o)>
<freecs.interfaces.IXmlRpcHandler; instanceForSystem[]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; ((IXmlRpcHandler)o)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.lang.String; length[]; int; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; length[]; url>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; getInstance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginStore>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; url>
<java.util.Vector; add[freecs.interfaces.IServerPlugin]; boolean; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; plugins>
<freecs.interfaces.IServerPlugin; instanceForSystem[]; freecs.interfaces.IServerPlugin; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; ((IServerPlugin)o)>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Vector; toArray[freecs.interfaces.IServerPlugin[]]; freecs.interfaces.IServerPlugin[]; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; plugins>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, boolean]; boolean; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.Server; checkProperty[java.lang.String, boolean]; boolean; null; pval>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, long]; long; null; props>
<java.lang.Long; parseLong[java.lang.String, int]; long; freecs.Server; checkProperty[java.lang.String, long]; long; null; Long>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkProperty[java.lang.String, long]; long; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, int]; int; null; props>
<java.lang.Integer; parseInt[java.lang.String, int]; int; freecs.Server; checkProperty[java.lang.String, int]; int; null; Integer>
<java.lang.String; trim[]; java.lang.String; freecs.Server; checkProperty[java.lang.String, int]; int; null; pval>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; checkProperty[java.lang.String, int]; int; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; null; props>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; initServer[]; void; null; Server>
<freecs.auth.AuthManager; init[]; void; freecs.Server; initServer[]; void; null; auth>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; freecs.Server; initServer[]; void; null; Runtime>
<java.lang.Runtime; addShutdownHook[java.lang.Thread]; void; freecs.Server; initServer[]; void; null; rt>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; removeToken[java.lang.String]; void; null; tokenStore>
<java.util.Hashtable; get[java.lang.Object]; java.lang.String; freecs.Server; isTokenValid[java.lang.String, java.lang.String]; boolean; null; tokenStore>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isTokenValid[java.lang.String, java.lang.String]; boolean; null; t>
<java.util.Hashtable; put[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; addToken[java.lang.String, java.lang.String]; void; null; tokenStore>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; isAdminHost[java.net.InetAddress]; boolean; null; adminHosts>
<freecs.Server; mayTempAdminhost[java.lang.String]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; this>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; adminHosts>
<freecs.core.User; setAsTempadminhost[]; void; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; nu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; new StringBuffer("[").append(nu.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; addTempAdminhost[freecs.core.User]; void; append[java.lang.String]; new StringBuffer("[")>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; nu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; sb.append(nu.conn.clientIp)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; addTempAdminhost[freecs.core.User]; void; append[java.lang.String]; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; sb>
<java.util.Vector; add[java.net.InetAddress]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; adminHosts>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; toLowerCase[]; nu>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; addTempAdminhost[freecs.core.User]; void; toLowerCase[]; nu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; toLowerCase[]; nu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; new StringBuffer("[").append(nu.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; removeTempAdminhost[freecs.core.User]; void; append[java.lang.String]; new StringBuffer("[")>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; nu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; sb.append(nu.conn.clientIp)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; removeTempAdminhost[freecs.core.User]; void; append[java.lang.String]; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; sb>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; adminHosts>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; removeTempAdminhost[freecs.core.User]; void; toLowerCase[]; nu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; mayTempAdminhost[java.lang.String]; boolean; null; ia>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; mayTempAdminhost[java.lang.String]; boolean; null; ia>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.Server; mayTempAdminhost[java.lang.String]; boolean; null; ia>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; mayTempAdminhost[java.lang.String]; boolean; null; ia>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getProperty[java.lang.String]; java.lang.String; null; props>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; getUrl[]; java.lang.String; null; sb>
<java.net.InetAddress; getCanonicalHostName[]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; lh>
<java.util.Vector; firstElement[]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; SERVER_NAME>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; getUrl[]; java.lang.String; null; "80">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; getUrl[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; getUrl[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; sb>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; mp>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; mp>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; u>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; mp>
<freecs.core.Group; removeUser[freecs.core.User]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; g>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; g>
<freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; null; this>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; null; v>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; null; e>
<java.util.Enumeration; nextElement[]; freecs.core.User; freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; null; e>
<freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.core.User; getCookie[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; System>
<freecs.core.User; getCookie[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.String; trim[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u.getName().toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; trim[]; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; toLowerCase[]; u>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; bo.email.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; toLowerCase[]; bo.email>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<freecs.content.Connection; isBanable[]; boolean; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u.conn>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; bo.con>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<freecs.content.Connection; isBanable[]; boolean; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; conn>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; System>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; bo.con>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; sb>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.Server; removeBan[java.lang.String]; boolean; null; bo.con>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; size[]; int; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; banList>
<java.util.Hashtable; elements[]; java.util.Enumeration<freecs.content.BanObject>; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; banList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; e>
<java.util.Enumeration; nextElement[]; freecs.content.BanObject; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; e>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; v>
<java.util.Vector; toArray[freecs.content.BanObject[]]; freecs.content.BanObject[]; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; v>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; banHost[java.net.InetAddress, long, java.lang.String]; void; null; ia>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banHost[java.net.InetAddress, long, java.lang.String]; void; null; banList>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; ia>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; banList>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.net.InetAddress; getHostName[]; java.lang.String; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.net.InetAddress; getHostName[]; java.lang.String; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; isBanned[java.lang.Object]; boolean; null; ((String)o)>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<freecs.content.Connection; isBanable[]; boolean; freecs.Server; isBanned[java.lang.Object]; boolean; null; conn>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.Server; isBanned[java.lang.Object]; boolean; null; conn>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; isBanned[java.lang.Object]; boolean; null; ia>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isBanned[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; ((String)o)>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<freecs.content.Connection; isBanable[]; boolean; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; conn>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; conn>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; ia>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; ce>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; banList>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; ia>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; b.bannedBy>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; b.hostban>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; ia>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; banList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.Server; storeUser[java.util.Vector<java.lang.Object>, int, java.lang.String, long, java.lang.String]; void; null; v>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; storeUser[java.util.Vector<java.lang.Object>, int, java.lang.String, long, java.lang.String]; void; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; storeUser[java.util.Vector<java.lang.Object>, int, java.lang.String, long, java.lang.String]; void; null; e>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.Server; storeUser[java.util.Vector<java.lang.Object>, int, java.lang.String, long, java.lang.String]; void; null; this>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; UserManager.mgr>
<freecs.core.Group; getName[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; UserManager.mgr.getUserByName(storedBy).getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; getName[]; UserManager.mgr.getUserByName(storedBy)>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; getGroup[]; UserManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.core.User; getCookie[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; sb>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; System>
<freecs.content.Connection; isBanable[]; boolean; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u.conn>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; po>
<freecs.core.User; getCookie[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u>
<java.lang.String; trim[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; u.getName().toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; trim[]; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; toLowerCase[]; u>
<java.util.Hashtable; put[freecs.content.ActionstoreObject, java.lang.String]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; storeList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; e>
<java.util.Enumeration; nextElement[]; freecs.content.ActionstoreObject; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; e>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Vector; toArray[freecs.content.ActionstoreObject[]]; freecs.content.ActionstoreObject[]; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; srv.storeList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; so.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; so>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; UserManager.mgr>
<freecs.core.User; setCollock[boolean]; void; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; u>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; so>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; UserManager.mgr>
<freecs.core.User; setAwaylock[boolean]; void; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; u>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; so>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; UserManager.mgr>
<freecs.core.User; setActlock[boolean]; void; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; u>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; srv.storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; so>
<java.util.Hashtable; size[]; int; freecs.Server; isPunished[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isPunished[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isPunished[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isPunished[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isPunished[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isPunished[java.lang.Object]; boolean; null; p.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isPunished[java.lang.Object]; boolean; null; p>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isPunished[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunished[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isPunished[java.lang.Object]; boolean; null; p>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isPunished[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunished[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isPunished[java.lang.Object]; boolean; null; p>
<java.util.Hashtable; size[]; int; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; p.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; p>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; p>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; p>
<java.util.Hashtable; size[]; int; freecs.Server; isCollocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isCollocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isCollocked[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isCollocked[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isCollocked[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isCollocked[java.lang.Object]; boolean; null; l.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isCollocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isCollocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isCollocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isCollocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isCollocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isCollocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isCollocked[java.lang.Object]; boolean; null; l>
<java.util.Hashtable; size[]; int; freecs.Server; isActlocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isActlocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isActlocked[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isActlocked[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isActlocked[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isActlocked[java.lang.Object]; boolean; null; l.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isActlocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isActlocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isActlocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isActlocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isActlocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isActlocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isActlocked[java.lang.Object]; boolean; null; l>
<java.util.Hashtable; size[]; int; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; l.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; storeList>
<freecs.content.ActionstoreObject; clearObject[]; void; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; l>
<java.util.Hashtable; size[]; int; freecs.Server; isPunishable[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isPunishable[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isPunishable[java.lang.Object]; boolean; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; isPunishable[java.lang.Object]; boolean; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; isPunishable[java.lang.Object]; boolean; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; isPunishable[java.lang.Object]; boolean; null; l.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; isPunishable[java.lang.Object]; boolean; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isPunishable[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunishable[java.lang.Object]; boolean; null; storeList>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; isPunishable[java.lang.Object]; boolean; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunishable[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; st>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; l.usr>
<freecs.content.ActionstoreObject; equalsActionState[int]; boolean; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; l>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; storeList>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; System>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; storeList>
<java.lang.Short; intValue[]; int; freecs.Server; checkLogLvl[short, short]; boolean; null; LOG_MASK[type]>
<java.lang.Short; intValue[]; int; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOG_MASK[type]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.Object; toString[]; java.lang.String; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; o>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_CONFIG]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_AUTH]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_STATE]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_TRAFFIC]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_ERROR]>
<java.io.PrintStream; print[java.lang.String]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<freecs.util.logger.LogWriter; addLogMessage[int, java.lang.String]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; LogWriter.instance>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.System; exit[int]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; System.err>
<java.io.PrintStream; print[java.lang.String]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; System.err>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.Throwable; printStackTrace[]; void; freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; null; e>
<java.lang.Short; intValue[]; int; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; LOG_MASK[type]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.Object; toString[]; java.lang.String; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; o>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_MESSAGE]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; LOGFILE[MSG_MESSAGE]>
<java.io.PrintStream; print[java.lang.String]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; System.out>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<freecs.util.logger.LogWriter; addMessageLogMessage[freecs.content.MessageState, int, java.lang.String]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; LogWriter.instance>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.System; exit[int]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; System>
<java.io.PrintStream; println[java.lang.String]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; System.err>
<java.io.PrintStream; print[java.lang.String]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; System.err>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; sb>
<java.lang.Throwable; printStackTrace[]; void; freecs.Server; logMessage[freecs.content.MessageState, java.lang.Object, java.lang.String, short, short]; void; null; e>
<java.lang.Short; intValue[]; int; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; LOG_MASK[type]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.Throwable; toString[]; java.lang.String; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; t>
<java.lang.Throwable; getStackTrace[]; java.lang.StackTraceElement[]; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; t>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StackTraceElement; getClassName[]; java.lang.String; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; ste[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StackTraceElement; getFileName[]; java.lang.String; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; ste[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.lang.StackTraceElement; getLineNumber[]; int; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; ste[i]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; null; sb>
<java.util.Properties; load[java.io.InputStream]; void; freecs.Server; changed[]; void; null; tprop>
<java.io.FileInputStream; close[]; void; freecs.Server; changed[]; void; null; fis>
<freecs.Server; checkForConfigValues[]; void; freecs.Server; changed[]; void; null; this>
<java.io.File; lastModified[]; long; freecs.Server; changed[]; void; null; configFile>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; changed[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.Server; changed[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.Server; removed[]; void; null; Server>
<freecs.Server; changed[]; void; freecs.Server; created[]; void; null; this>
<freecs.Server; formatTimeStamp[long, java.lang.String]; java.lang.String; freecs.Server; getFormatedTime[java.lang.String]; java.lang.String; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.Server; getFormatedTime[java.lang.String]; java.lang.String; null; System>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; null; cal>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; null; defaultDateFormat>
<java.util.Calendar; getTime[]; java.util.Date; freecs.Server; formatDefaultTimeStamp[long]; java.lang.String; null; cal>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.Server; formatTimeStamp[long, java.lang.String]; java.lang.String; null; cal>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; freecs.Server; formatTimeStamp[long, java.lang.String]; java.lang.String; null; sdf>
<java.util.Calendar; getTime[]; java.util.Date; freecs.Server; formatTimeStamp[long, java.lang.String]; java.lang.String; null; cal>
<java.util.Calendar; setTimeInMillis[long]; void; freecs.Server; formatTimeStamp[long, java.text.SimpleDateFormat]; java.lang.String; null; cal>
<java.text.DateFormat; format[java.util.Date]; java.lang.String; freecs.Server; formatTimeStamp[long, java.text.SimpleDateFormat]; java.lang.String; null; sdf>
<java.util.Calendar; getTime[]; java.util.Date; freecs.Server; formatTimeStamp[long, java.text.SimpleDateFormat]; java.lang.String; null; cal>
<java.io.File; getParentFile[]; java.io.File; freecs.Server; getConfigDir[]; java.io.File; null; configFile>
<java.util.Map; put[java.lang.String, freecs.core.Group]; freecs.core.Group; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<freecs.core.Group; getKey[]; java.lang.String; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; g>
<java.lang.System; currentTimeMillis[]; long; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; System>
<java.util.Map; size[]; int; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<java.util.Map; size[]; int; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<java.lang.System; currentTimeMillis[]; long; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; System>
<freecs.core.Group; invalidate[]; void; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; g>
<java.util.Map; remove[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; grps>
<freecs.core.Group; getKey[]; java.lang.String; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; g>
<freecs.core.Group; getPlugins[]; freecs.interfaces.IGroupPlugin[]; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; g>
<freecs.interfaces.IGroupPlugin; remove[]; void; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; Server>
<freecs.core.Group; setPlugins[freecs.interfaces.IGroupPlugin[]]; void; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; g>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; null; grps>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; null; gName.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; trim[]; gName>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; null; grps>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; null; gName.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; trim[]; gName>
<freecs.core.Group; hasState[int]; boolean; freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; null; g>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User]; freecs.core.Group; null; this>
<java.lang.String; length[]; int; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; groupname>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; opener>
<java.util.HashMap; get[java.lang.Object]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; startGroupThemes>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; groupname.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; toLowerCase[]; groupname>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; moderatedGroups>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; groupname.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; toLowerCase[]; groupname>
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; rUser>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; rUser>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; opener>
<freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; opener>
<freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; rUser>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; groupname>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; sb>
<java.io.File; exists[]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; f>
<freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; isMembershipRoom[freecs.core.User]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.GroupManager; addGroup[freecs.core.Group]; void; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; this>
<java.util.Properties; load[java.io.InputStream]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props>
<java.io.FileInputStream; close[]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; in>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; iterator[]; props>
<java.util.Iterator; hasNext[]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; i>
<java.lang.Object; toString[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; i.next()>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; toString[]; i>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; key>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "moderated">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; rUser>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "timelock">
<freecs.core.Group; hasState[int]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Integer>
<freecs.core.Group; setTimelockSec[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "minuserrole">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "vip">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "moderator">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "admin">
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; rUser>
<freecs.core.Group; setMinRight[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "membershiproom">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setMembershipRoom[freecs.core.Membership[]]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "autosulist">
<freecs.core.Group; setAutoSu[java.lang.String[]]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; val>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "autosumembershiplist">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setAutoSuMembership[freecs.core.Membership[]]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "lockprotected">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; hasState[int]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "autosu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "allowsu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "nosufirst">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "minuserrolesu">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "vip">
<freecs.core.Group; setMinRightSu[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "moderator">
<freecs.core.Group; setMinRightSu[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "admin">
<freecs.core.Group; setMinRightSu[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "soundprooffor">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; split[java.lang.String]; val>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; roles[j]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "vip">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "guest">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "moderator">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "admin">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "user">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "suforbidden">
<freecs.core.Group; setSuForbiddenMembership[java.lang.String]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "memberroom">
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; val.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; split[java.lang.String]; val>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; MembershipManager.instance>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<freecs.core.Group; setMemberRoom[freecs.core.Membership[]]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "allowusebbcodes">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "allowusebbcodes">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "allowusesmiley">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "allowusesmiley">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "deactivatehitdice">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "sucanban">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "sucanban">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "sucansettheme">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "sucansettheme">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "false">
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "cansetpunishable">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "notallowjoinunreg">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "joinmembershiplocked">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; "true">
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; low>
<java.lang.String; substring[int]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; low>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; namespace>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<java.lang.String; substring[int]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; namespace>
<java.lang.String; substring[int, int]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; namespace>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; p>
<java.util.HashMap; size[]; int; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; iterator[]; map>
<java.util.Iterator; hasNext[]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; i>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; p>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; pluginStore>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Class>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; piClass>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; getInstance>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; pluginStore>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<java.util.Vector; add[freecs.interfaces.IGroupPlugin]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; plugins>
<freecs.interfaces.IGroupPlugin; instanceForGroup[java.lang.String, freecs.core.Group, java.util.Properties]; freecs.interfaces.IGroupPlugin; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; ((IGroupPlugin)o)>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; Server>
<freecs.core.Group; setPlugins[freecs.interfaces.IGroupPlugin[]]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; g>
<java.util.Vector; toArray[freecs.interfaces.IGroupPlugin[]]; freecs.interfaces.IGroupPlugin[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; plugins>
<java.util.Map; size[]; int; freecs.core.GroupManager; openGroupsCount[]; int; null; grps>
<java.util.Collection; toArray[freecs.core.Group[]]; freecs.core.Group[]; freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; null; grps.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.Group>; freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; toArray[freecs.core.Group[]]; grps>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; sgNames[i]>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; sgNames[i]>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; c[0].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; toLowerCase[]; c[0]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; key>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; c[0]>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updtToLowerCase>
<java.util.HashMap; put[java.lang.String, java.lang.String]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupThemes>
<java.lang.String; substring[int]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; sgNames[i]>
<java.util.HashMap; remove[java.lang.Object]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupThemes>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; curr>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; currToLowerCase>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updtToLowerCase>
<java.util.Vector; addAll[java.util.Collection<? extends java.lang.Object>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; addAll[java.util.Collection<? extends java.lang.Object>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.util.Iterator; hasNext[]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; i>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; grps>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; g>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; curr>
<java.util.Iterator; hasNext[]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; i>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; grps>
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; g>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; mg>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; this>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; g>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; this>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; g>
<freecs.core.Group; unsetState[int]; void; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; g>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; moderatedGroups>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; groupname.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; toLowerCase[]; groupname>
<freecs.core.User; hasRight[int]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; rUser>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; opener>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; this>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<freecs.core.Group; setState[int]; void; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; groupname>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; sb>
<java.io.File; exists[]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; f>
<freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<freecs.core.Group; isMembershipRoom[freecs.core.User]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; g>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; startGroups>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; groupname.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; equals[java.lang.Object]; groupname>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; grp>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; null; startGroupsToLowerCase>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; null; grp.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; toLowerCase[]; grp>
<java.lang.System; currentTimeMillis[]; long; freecs.core.GroupManager; updateGroupListLastModified[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; RequestReader[short]; void; null; Server>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; Server>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<freecs.core.RequestQueue; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; r.reqQueue>
<freecs.core.RequestReader; isSuspending[]; boolean; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; r>
<freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; RequestReader>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<freecs.core.RequestQueue; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; r.reqQueue>
<freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; minReader.reqQueue>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; restart[]; void; null; Server>
<java.lang.Thread; start[]; void; freecs.core.RequestReader; restart[]; void; null; this>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getAliveState[]; boolean[]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getAliveState[]; boolean[]; null; reqReaders>
<java.lang.Thread; isAlive[]; boolean; freecs.core.RequestReader; getAliveState[]; boolean[]; null; r>
<freecs.core.RequestReader; restart[]; void; freecs.core.RequestReader; getAliveState[]; boolean[]; null; r>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getWorkingSince[]; long[][]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getWorkingSince[]; long[][]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getCurrCommant[int]; java.lang.String; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getOveralUsage[]; double[]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getOveralUsage[]; double[]; null; reqReaders>
<freecs.core.RequestQueue; getUsage[]; double; freecs.core.RequestReader; getOveralUsage[]; double[]; null; r.reqQueue>
<freecs.core.RequestReader; activeReaders[]; int; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; this>
<java.util.Vector; add[freecs.core.RequestReader]; boolean; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReader>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; tsb>
<java.util.Vector; size[]; int; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; tsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; tsb>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReader>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; new StringBuffer("Thread START: (").append(reqReaders.size())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; append[java.lang.String]; new StringBuffer("Thread START: (")>
<java.util.Vector; size[]; int; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; tsb>
<java.lang.Thread; start[]; void; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReader>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; reqReaders>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; new StringBuffer("Thread STOP: (").append(reqReaders.size())>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; append[java.lang.String]; new StringBuffer("Thread STOP: (")>
<java.util.Vector; size[]; int; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; reqReaders>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; tsb>
<java.util.Vector; size[]; int; freecs.core.RequestReader; activeReaders[]; int; null; reqReaders>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.RequestReader; run[]; void; null; ByteBuffer>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<freecs.Server; isRunning[]; boolean; freecs.core.RequestReader; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<freecs.core.RequestReader; activeReaders[]; int; freecs.core.RequestReader; run[]; void; null; this>
<freecs.core.RequestQueue; size[]; int; freecs.core.RequestReader; run[]; void; null; reqQueue>
<freecs.util.ObjectBuffer; size[]; int; freecs.core.RequestReader; run[]; void; null; CentralSelector.cSel.reqQueue>
<java.lang.Object; wait[long]; void; freecs.core.RequestReader; run[]; void; null; CentralSelector.cSel.reqQueue>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.core.RequestReader; run[]; void; null; CentralSelector.cSel.reqQueue>
<java.lang.Object; notify[]; void; freecs.core.RequestReader; run[]; void; null; CentralSelector.cSel.reqQueue>
<freecs.core.RequestQueue; popKey[long]; java.nio.channels.SelectionKey; freecs.core.RequestReader; run[]; void; null; reqQueue>
<java.lang.Thread; sleep[long]; void; freecs.core.RequestReader; run[]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.RequestReader; run[]; void; null; sk>
<freecs.core.RequestReader; evaluate[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; freecs.core.RequestReader; run[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.RequestReader; run[]; void; null; Server>
<java.lang.Thread; sleep[long]; void; freecs.core.RequestReader; run[]; void; null; Thread>
<freecs.core.RequestMonitor; removeMonitor[java.lang.Thread]; void; freecs.core.RequestReader; run[]; void; null; RequestMonitor.instance>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestReader; run[]; void; null; System>
<freecs.Server; checkLogLvl[short, short]; boolean; freecs.core.RequestReader; run[]; void; null; Server>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; run[]; void; null; sb>
<java.lang.Object; toString[]; java.lang.String; freecs.core.RequestReader; run[]; void; null; currentRequest>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; run[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestReader; run[]; void; null; sb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.RequestReader; run[]; void; null; Server>
<freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; freecs.core.RequestReader; run[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; evaluate[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.RequestReader; evaluate[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; cb>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestReader; evaluate[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; CentralSelector>
<freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; freecs.core.RequestReader; evaluate[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; evaluator>
<freecs.core.RequestReader; getID[]; short; freecs.core.RequestReader; equals[freecs.core.RequestReader]; boolean; null; r>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestReader; toString[]; java.lang.String; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestReader; finalize[]; void; null; Server>
<freecs.core.MembershipManager; init[]; void; freecs.core.MembershipManager; MembershipManager[]; void; null; this>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.core.MembershipManager; MembershipManager[]; void; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.core.MembershipManager; MembershipManager[]; void; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<freecs.Server; getConfigDir[]; java.io.File; freecs.core.MembershipManager; getDefaultConfigFile[]; java.io.File; null; Server.srv>
<freecs.core.MembershipManager; init[java.io.File]; void; freecs.core.MembershipManager; init[]; void; null; this>
<freecs.core.MembershipManager; getDefaultConfigFile[]; java.io.File; freecs.core.MembershipManager; init[]; void; null; this>
<java.io.File; lastModified[]; long; freecs.core.MembershipManager; init[java.io.File]; void; null; configFile>
<java.io.File; exists[]; boolean; freecs.core.MembershipManager; init[java.io.File]; void; null; configFile>
<java.util.Properties; load[java.io.InputStream]; void; freecs.core.MembershipManager; init[java.io.File]; void; null; props>
<java.io.FileInputStream; close[]; void; freecs.core.MembershipManager; init[java.io.File]; void; null; in>
<freecs.core.MembershipManager; init[java.util.Properties]; void; freecs.core.MembershipManager; init[java.io.File]; void; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MembershipManager; init[java.io.File]; void; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.core.MembershipManager; init[java.io.File]; void; null; e>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.MembershipManager; init[java.util.Properties]; void; iterator[]; props>
<java.util.Iterator; hasNext[]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.MembershipManager; init[java.util.Properties]; void; null; i>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MembershipManager; init[java.util.Properties]; void; null; currKey>
<java.lang.String; substring[int, int]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; props>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.core.MembershipManager; init[java.util.Properties]; void; null; p>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; currKey>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; iterator[]; hm>
<java.util.Iterator; hasNext[]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; i>
<java.util.Iterator; next[]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; i>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<freecs.core.Membership; update[java.util.Properties]; void; freecs.core.MembershipManager; init[java.util.Properties]; void; null; m>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; newMemberships>
<java.util.HashMap; put[java.lang.String, freecs.core.Membership]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; tempMap>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; tempMap>
<java.util.Set; removeAll[java.util.Collection<?>]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; old>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; old>
<java.util.Iterator; hasNext[]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; i>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; ((String)i.next()).trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; toLowerCase[]; ((String)i.next())>
<java.util.Iterator; next[]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; trim[]; i>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<freecs.core.Membership; cleanup[]; void; freecs.core.MembershipManager; init[java.util.Properties]; void; null; m>
<freecs.core.UserManager$UserStore; toArray[]; freecs.core.User[]; freecs.core.MembershipManager; init[java.util.Properties]; void; null; UserManager.mgr.ustr>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.Membership>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; newMemberships>
<java.util.Iterator; hasNext[]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; j>
<java.util.Iterator; next[]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; j>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; u>
<freecs.core.User; addMembership[java.lang.String, freecs.core.Membership]; void; freecs.core.MembershipManager; init[java.util.Properties]; void; null; u>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; null; memberships>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; null; key.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; toLowerCase[]; key>
<freecs.core.MembershipManager; init[java.io.File]; void; freecs.core.MembershipManager; changed[]; void; null; this>
<freecs.core.MembershipManager; init[java.util.Properties]; void; freecs.core.MembershipManager; removed[]; void; null; this>
<freecs.core.MembershipManager; init[java.io.File]; void; freecs.core.MembershipManager; created[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.Membership; Membership[java.lang.String, java.util.Properties]; void; null; key>
<freecs.core.Membership; init[java.util.Properties]; void; freecs.core.Membership; Membership[java.lang.String, java.util.Properties]; void; null; this>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; init[java.util.Properties]; void; null; p.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.Membership; init[java.util.Properties]; void; iterator[]; p>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.Membership; init[java.util.Properties]; void; null; i>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.Membership; init[java.util.Properties]; void; null; val>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.core.Membership; init[java.util.Properties]; void; null; UserManager>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.Membership; init[java.util.Properties]; void; null; val>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.core.Membership; init[java.util.Properties]; void; null; UserManager>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.Membership; init[java.util.Properties]; void; null; val>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.core.Membership; init[java.util.Properties]; void; null; UserManager>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.Membership; init[java.util.Properties]; void; null; val>
<freecs.core.UserManager; resolveState[java.lang.String]; int; freecs.core.Membership; init[java.util.Properties]; void; null; UserManager>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; p.getProperty(currKey)>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; p.getProperty(currKey)>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; p.getProperty(currKey)>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.Integer; longValue[]; long; freecs.core.Membership; init[java.util.Properties]; void; null; o>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; init[java.util.Properties]; void; null; Server>
<freecs.core.Membership; getName[]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Membership; init[java.util.Properties]; void; null; currKey>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.lang.Integer; intValue[]; int; freecs.core.Membership; init[java.util.Properties]; void; null; o>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; init[java.util.Properties]; void; null; Server>
<freecs.core.Membership; getName[]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; this>
<freecs.core.Membership; init[java.util.Properties]; void; freecs.core.Membership; update[java.util.Properties]; void; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; update[java.util.Properties]; void; null; members>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Membership; update[java.util.Properties]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.Membership; update[java.util.Properties]; void; null; i>
<freecs.core.User; rebuildMemberships[]; void; freecs.core.Membership; update[java.util.Properties]; void; null; u>
<freecs.core.User; addMembership[java.lang.String, freecs.core.Membership]; void; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; getPermissionMap[]; int; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; add[freecs.core.User]; void; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; setPermission[int]; void; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; getDefaultMembershipPermissionMap[]; int; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; add[freecs.core.User]; void; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; setDefaultMembershipPermission[int]; void; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; add[freecs.core.User]; void; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; setDefaultPermissionMap[int]; void; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<freecs.core.User; mayUseTemplateset[java.lang.String]; void; freecs.core.Membership; add[freecs.core.User]; void; null; u>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Membership; remove[freecs.core.User]; void; null; members>
<java.util.Vector; size[]; int; freecs.core.Membership; remove[freecs.core.User]; void; null; members>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Membership; remove[freecs.core.User]; void; null; Server>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Membership; addToList[freecs.core.User]; void; null; members>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.Membership; addToList[freecs.core.User]; void; null; members>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; cleanup[]; void; null; members>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Membership; cleanup[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.Membership; cleanup[]; void; null; i>
<freecs.core.User; removeMembership[java.lang.String]; void; freecs.core.Membership; cleanup[]; void; null; u>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Membership; sendMessage[freecs.interfaces.IContainer]; void; null; members>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Membership; sendMessage[freecs.interfaces.IContainer]; void; null; uArr[i]>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.CallMembershipObject>; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; callKey>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; c>
<java.util.Iterator; next[]; freecs.content.CallMembershipObject; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; c>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; mp>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; mp>
<freecs.core.MessageParser; setMessage[java.lang.String]; void; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; mp>
<freecs.core.MessageParser; setParam[java.lang.String]; void; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; mp>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; u>
<java.util.Vector; add[freecs.content.CallMembershipObject]; boolean; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; size[]; int; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.CallMembershipObject>; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; tmp>
<java.util.Iterator; next[]; freecs.content.CallMembershipObject; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; c>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; users[]; java.util.Iterator<java.lang.Object>; null; members>
<java.lang.String; hashCode[]; int; freecs.core.Membership; hashCode[]; int; null; key>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.Membership; equals[java.lang.Object]; boolean; null; foreign.key>
<freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, java.lang.String]; void; null; EntityDecoder>
<java.lang.String; trim[]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, java.lang.String]; void; null; name.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, java.lang.String]; void; trim[]; name>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, java.lang.String]; void; null; EntityDecoder>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Group; Group[java.lang.String, java.lang.String, java.lang.String]; void; null; Server>
<freecs.util.EntityDecoder; groupnameCharToHtml[java.lang.String]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, int, java.lang.String]; void; null; EntityDecoder>
<java.lang.String; trim[]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, int, java.lang.String]; void; null; name.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, int, java.lang.String]; void; trim[]; name>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.Group; Group[java.lang.String, java.lang.String, int, java.lang.String]; void; null; EntityDecoder>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Group; Group[java.lang.String, java.lang.String, int, java.lang.String]; void; null; Server>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.Group; setTheme[java.lang.String, freecs.core.User]; void; null; EntityDecoder>
<freecs.core.GroupManager; updateGroupListLastModified[]; void; freecs.core.Group; addUser[freecs.core.User]; boolean; null; GroupManager.mgr>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; freecs.core.Group; addUser[freecs.core.User]; boolean; null; this>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; usr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; usr>
<freecs.core.User; setGroup[freecs.core.Group]; boolean; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; u>
<freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; this>
<freecs.core.Group; addToSusers[freecs.core.User]; boolean; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; this>
<freecs.interfaces.IGroupPlugin; usrJoin[freecs.core.User]; void; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; Server>
<freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User]; boolean; null; this>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; u>
<java.util.Vector; isEmpty[]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; autoSuList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; toLowerCase[]; u>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<freecs.core.Group; addToSusers[freecs.core.User]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; this>
<freecs.core.User; setGroup[freecs.core.Group]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; u>
<freecs.core.User; isLoggedIn[]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; u>
<freecs.interfaces.IGroupPlugin; usrJoin[freecs.core.User]; void; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; Server>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<java.util.Vector; size[]; int; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; GroupManager.mgr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; this>
<freecs.core.Group; setState[int]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; this>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; mp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; mp>
<freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; this>
<freecs.interfaces.IGroupPlugin; usrLeaving[freecs.core.User]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; removeUser[freecs.core.User]; void; null; Server>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; susers>
<java.util.Vector; addElement[freecs.core.User]; void; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; removeFromSusers[freecs.core.User]; void; null; susers>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.Group; removeFromSusers[freecs.core.User]; void; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; null; autoSuList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; toLowerCase[]; u>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; null; u>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; null; u>
<java.util.Vector; size[]; int; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; usr>
<java.util.List; contains[java.lang.Object]; boolean; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; exclude>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; cu>
<freecs.interfaces.IGroupPlugin; usrAction[freecs.core.MessageParser]; void; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; Server>
<java.util.Vector; size[]; int; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; usr>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; ((MessageParser)mc)>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; cu>
<freecs.core.Group; sendMsg[freecs.interfaces.IContainer]; void; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Group; sendMsg[freecs.interfaces.IContainer]; void; null; cu>
<freecs.interfaces.IGroupPlugin; usrAction[freecs.core.MessageParser]; void; freecs.core.Group; sendMsg[freecs.interfaces.IContainer]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; sendMsg[freecs.interfaces.IContainer]; void; null; Server>
<java.util.Vector; size[]; int; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; usr>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; ((MessageParser)mc)>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; cu>
<freecs.interfaces.IGroupPlugin; usrAction[freecs.core.MessageParser]; void; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; plugins[i]>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; Server>
<java.util.Vector; size[]; int; freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; null; usr>
<freecs.core.Group; sendMsg[freecs.interfaces.IContainer]; void; freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; null; this>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Group; users[]; java.util.Iterator<java.lang.Object>; null; usr>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; susers>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; toLowerCase[]; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; banList>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; null; u>
<freecs.core.Group; usrIsMember[freecs.core.User]; boolean; freecs.core.Group; usrMaySetSu[freecs.core.User]; boolean; null; this>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.Group; usrHasMembership[freecs.core.User]; boolean; null; u>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.Group; usrHasMembership[freecs.core.User]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; isMembershipRoom[freecs.core.User]; boolean; null; u>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.Group; isMembershipRoom[freecs.core.User]; boolean; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; getMembershipRoom[]; java.lang.StringBuffer; null; membership.append(this.membershipRoom[i].key)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; getMembershipRoom[]; java.lang.StringBuffer; append[java.lang.String]; membership>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; getMembershipRoom[]; java.lang.StringBuffer; null; membership>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.Group; usrIsMember[freecs.core.User]; boolean; null; u>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; susers>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; u>
<freecs.core.Group; hasState[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; u>
<freecs.core.Group; usrIsMember[freecs.core.User]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; this>
<freecs.core.Group; isValid[]; boolean; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<freecs.core.Group; isValid[]; boolean; freecs.core.Group; canSetBanForUser[java.lang.String]; boolean; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; canSetBanForUser[java.lang.String]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; canSetBanForUser[java.lang.String]; boolean; null; banList>
<freecs.core.Group; isValid[]; boolean; freecs.core.Group; getBanForUser[java.lang.String]; boolean; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; getBanForUser[java.lang.String]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; getBanForUser[java.lang.String]; boolean; null; banList>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.Group; bannedUsers[]; java.util.Vector<java.lang.String>; null; banList>
<freecs.core.Group; usrIsBaned[java.lang.String]; boolean; freecs.core.Group; usrIsBaned[freecs.core.User]; boolean; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.Group; usrIsBaned[freecs.core.User]; boolean; null; u>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; usrIsBaned[java.lang.String]; boolean; null; u>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsBaned[java.lang.String]; boolean; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsPresent[freecs.core.User]; boolean; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsSu[freecs.core.User]; boolean; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; suUserCount[]; int; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; size[]; int; null; usr>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.Group; setAutoSu[java.lang.String[]]; void; null; usrs[i].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.Group; setAutoSu[java.lang.String[]]; void; toLowerCase[]; usrs[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; setAutoSu[java.lang.String[]]; void; null; autoSuList>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.Group; setAutoSu[java.lang.String[]]; void; null; autoSuList>
<freecs.core.Group; getKey[]; java.lang.String; freecs.core.Group; equals[java.lang.Object]; boolean; null; ((Group)g)>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.Group; equals[java.lang.Object]; boolean; null; n>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.Group; toString[]; java.lang.String; null; sb>
<java.lang.String; hashCode[]; int; freecs.core.Group; hasCode[]; int; null; this.key>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Group; finalize[]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.Group; setLastXmlrpcMessage[java.lang.String]; void; null; lastXmlrpcMessage>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.core.MessageParser; MessageParser[]; void; null; CommandSet>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; MessageParser[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.MessageParser; MessageParser[]; void; null; Server>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.core.MessageParser; MessageParser[freecs.core.RequestReader]; void; null; CommandSet>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; MessageParser[freecs.core.RequestReader]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.MessageParser; MessageParser[freecs.core.RequestReader]; void; null; Server>
<freecs.content.MessageState; clear[]; void; freecs.core.MessageParser; clear[]; void; null; msgState>
<java.util.HashMap; clear[]; void; freecs.core.MessageParser; clear[]; void; null; renderCache>
<java.lang.String; trim[]; java.lang.String; freecs.core.MessageParser; setRawMessage[java.lang.String]; void; null; msg>
<java.nio.Buffer; rewind[]; java.nio.Buffer; freecs.core.MessageParser; getByteBuffer[]; java.nio.ByteBuffer; null; bBuff>
<java.nio.Buffer; limit[]; int; freecs.core.MessageParser; hasContent[]; boolean; null; bBuff>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; u>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; new StringBuffer(ts.getName()).append("/").append(msgState.msgTemplate).append("/")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; append[boolean]; new StringBuffer(ts.getName()).append("/").append(msgState.msgTemplate)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; append[java.lang.String]; new StringBuffer(ts.getName()).append("/")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; append[java.lang.String]; new StringBuffer(ts.getName())>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; append[java.lang.String]; ts>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; tsb>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.param.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; indexOf[java.lang.String]; msgState.param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.param.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; indexOf[java.lang.String]; msgState.param>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgTpl.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; indexOf[java.lang.String]; msgTpl>
<java.lang.String; length[]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgTpl>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; new StringBuffer("Message-Template ").append(msgState.msgTemplate)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; append[java.lang.String]; new StringBuffer("Message-Template ")>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Server>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; ts>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; ts>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; showTime>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; showTime>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; MessageRenderer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<freecs.Server; getFormatedTime[java.lang.String]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; MessageRenderer>
<java.util.HashMap; put[java.lang.String, java.lang.StringBuffer]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<java.util.HashMap; get[java.lang.Object]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<java.lang.StringBuffer; length[]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; CharBuffer>
<java.nio.CharBuffer; length[]; int; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cbuf>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<freecs.core.User; removeNow[]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.sender>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; CentralSelector>
<freecs.core.User; getKey[]; java.nio.channels.SelectionKey; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; u>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Charset.forName(Server.srv.DEFAULT_CHARSET).newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; encode[java.nio.CharBuffer]; Charset.forName(Server.srv.DEFAULT_CHARSET)>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; newEncoder[]; Charset>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Charset.forName(Server.srv.DEFAULT_CHARSET).newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; encode[java.nio.CharBuffer]; Charset.forName(Server.srv.DEFAULT_CHARSET)>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; newEncoder[]; Charset>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Server>
<java.lang.String; getBytes[]; byte[]; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; result.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; getBytes[]; result>
<java.nio.ByteBuffer; wrap[byte[]]; java.nio.ByteBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; ByteBuffer>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; msgState.msgTemplate>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; cb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; Server>
<java.lang.String; length[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.cb>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; hasState[int]; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; hasState[int]; msgState.sender>
<java.lang.String; length[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg>
<freecs.core.User; hasMessageFloodLenght[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; Server.srv>
<freecs.core.User; setMessageFloodLenght[boolean]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; hasMessageFloodLenght[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; setMessageFloodLenght[boolean]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; isAway[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; sg>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; setAway[boolean]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; whisper[]; java.util.Vector<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; e>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; addu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundName>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundName>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.whisper()>
<freecs.core.User; whisper[]; java.util.Vector<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; size[]; msgState.sender>
<java.lang.Object; toString[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; size>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; sendMessageHistory[int]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; getStoreFriendNotification[]; java.util.Vector<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; storeFriendNotification>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.MessageParser; parseAndSendMessage[]; void; null; UserManager.mgr>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; a>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; null; a>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; get[int]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg>
<freecs.core.User; isPunished[]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.Group; getTimelockSec[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; sg>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; hasState[int]; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<java.lang.System; currentTimeMillis[]; long; freecs.core.MessageParser; parseAndSendMessage[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.MessageParser; parseAndSendMessage[]; void; null; System>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.MessageParser; parseAndSendMessage[]; void; null; System>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; AbstractCommand>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.MessageParser; parseAndSendMessage[]; void; null; System>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageParser; parseAndSendMessage[]; void; sendMessage[freecs.interfaces.IContainer]; msgState.sender>
<freecs.commands.AbstractCommand; messageLog[freecs.content.MessageState, freecs.core.User, java.lang.String]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; AbstractCommand>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg.substring(0,pos)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; toLowerCase[]; msgState.msg>
<java.lang.String; trim[]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; trim[]; msgState.msg>
<java.lang.String; length[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cmd>
<freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String]; byte; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cs>
<freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String]; byte; freecs.core.MessageParser; parseAndSendMessage[]; void; null; cs>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.msg>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.cb>
<freecs.core.MessageParser; clear[]; void; freecs.core.MessageParser; parseAndSendMessage[]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; toString[]; java.lang.String; null; sb>
<freecs.core.RequestReader; toString[]; java.lang.String; freecs.core.MessageParser; toString[]; java.lang.String; null; this.req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageParser; toString[]; java.lang.String; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.MessageParser; finalize[]; void; null; Server>
<java.nio.channels.spi.SelectorProvider; openSelector[]; java.nio.channels.spi.AbstractSelector; freecs.core.Listener; Listener[]; void; null; SelectorProvider.provider()>
<java.nio.channels.spi.SelectorProvider; provider[]; java.nio.channels.spi.SelectorProvider; freecs.core.Listener; Listener[]; void; openSelector[]; SelectorProvider>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; Listener[]; void; null; Server>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; l.ia2ssc.values()>
<java.util.HashMap; values[]; java.util.Collection<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; updateSscRecieveBuffer[int]; void; iterator[]; l.ia2ssc>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; i>
<java.util.Iterator; next[]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; i>
<java.net.ServerSocket; getReceiveBufferSize[]; int; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; ssc.socket()>
<java.nio.channels.ServerSocketChannel; socket[]; java.net.ServerSocket; freecs.core.Listener; updateSscRecieveBuffer[int]; void; getReceiveBufferSize[]; ssc>
<java.net.ServerSocket; setReceiveBufferSize[int]; void; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; ssc.socket()>
<java.nio.channels.ServerSocketChannel; socket[]; java.net.ServerSocket; freecs.core.Listener; updateSscRecieveBuffer[int]; void; setReceiveBufferSize[int]; ssc>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; Server>
<freecs.core.Listener; initSSC[]; void; freecs.core.Listener; startListener[]; void; null; l>
<java.lang.Thread; isAlive[]; boolean; freecs.core.Listener; startListener[]; void; null; l>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.Listener; startListener[]; void; null; l>
<java.lang.Thread; start[]; void; freecs.core.Listener; startListener[]; void; null; l>
<java.util.HashMap; get[java.lang.Object]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ia2ssc>
<java.nio.channels.ServerSocketChannel; open[]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ServerSocketChannel>
<java.nio.channels.ServerSocketChannel; socket[]; java.net.ServerSocket; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssc>
<java.net.ServerSocket; setReceiveBufferSize[int]; void; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssoc>
<java.net.ServerSocket; setReuseAddress[boolean]; void; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssoc>
<java.nio.channels.spi.AbstractSelectableChannel; configureBlocking[boolean]; java.nio.channels.SelectableChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssc>
<java.net.ServerSocket; bind[java.net.SocketAddress]; void; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssc.socket()>
<java.nio.channels.ServerSocketChannel; socket[]; java.net.ServerSocket; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; bind[java.net.SocketAddress]; ssc>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; Integer>
<freecs.Server; getProperty[java.lang.String]; java.lang.String; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; Server.srv>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; Server.srv.allowedLoginHosts>
<java.nio.channels.SelectableChannel; register[java.nio.channels.Selector, int]; java.nio.channels.SelectionKey; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ssc>
<java.util.HashMap; put[java.net.InetAddress, java.nio.channels.ServerSocketChannel]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ia2ssc>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; reinitSSC[]; void; null; ia2ssc.values()>
<java.util.HashMap; values[]; java.util.Collection<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; reinitSSC[]; void; iterator[]; ia2ssc>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Listener; reinitSSC[]; void; null; i>
<java.util.Iterator; next[]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; reinitSSC[]; void; null; i>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.Listener; reinitSSC[]; void; null; ssc>
<freecs.core.Listener; initSSC[]; void; freecs.core.Listener; reinitSSC[]; void; null; this>
<freecs.Server; getProperty[java.lang.String]; java.lang.String; freecs.core.Listener; initSSC[]; void; null; Server.srv>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.Listener; initSSC[]; void; null; Server.srv.getProperty("bindIp")>
<freecs.Server; getProperty[java.lang.String]; java.lang.String; freecs.core.Listener; initSSC[]; void; split[java.lang.String]; Server.srv>
<freecs.core.Listener; bindSSC[java.net.InetAddress]; void; freecs.core.Listener; initSSC[]; void; null; this>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.core.Listener; initSSC[]; void; null; InetAddress>
<java.net.NetworkInterface; getNetworkInterfaces[]; java.util.Enumeration<java.net.NetworkInterface>; freecs.core.Listener; initSSC[]; void; null; NetworkInterface>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.Listener; initSSC[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.net.NetworkInterface; freecs.core.Listener; initSSC[]; void; null; e>
<java.net.NetworkInterface; getInetAddresses[]; java.util.Enumeration<java.net.InetAddress>; freecs.core.Listener; initSSC[]; void; null; ni>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.Listener; initSSC[]; void; null; ee>
<freecs.core.Listener; bindSSC[java.net.InetAddress]; void; freecs.core.Listener; initSSC[]; void; null; this>
<java.util.Enumeration; nextElement[]; java.net.InetAddress; freecs.core.Listener; initSSC[]; void; null; ee>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; initSSC[]; void; null; Server>
<freecs.Server; isRunning[]; boolean; freecs.core.Listener; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.Listener; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.Listener; run[]; void; null; System>
<java.nio.channels.Selector; selectNow[]; int; freecs.core.Listener; run[]; void; null; sel>
<java.lang.Thread; sleep[long]; void; freecs.core.Listener; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<freecs.core.Listener; reinitSSC[]; void; freecs.core.Listener; run[]; void; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.selectedKeys()>
<java.nio.channels.Selector; selectedKeys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; iterator[]; sel>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Listener; run[]; void; null; i>
<java.util.Iterator; next[]; java.nio.channels.SelectionKey; freecs.core.Listener; run[]; void; null; i>
<java.util.Iterator; remove[]; void; freecs.core.Listener; run[]; void; null; i>
<java.nio.channels.SelectionKey; isAcceptable[]; boolean; freecs.core.Listener; run[]; void; null; ck>
<freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; freecs.core.Listener; run[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<java.lang.Object; toString[]; java.lang.String; freecs.core.Listener; run[]; void; null; ck>
<java.lang.Thread; sleep[long]; void; freecs.core.Listener; run[]; void; null; Thread>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.keys()>
<java.nio.channels.Selector; keys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; iterator[]; sel>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Listener; run[]; void; null; i>
<java.util.Iterator; next[]; java.nio.channels.SelectionKey; freecs.core.Listener; run[]; void; null; i>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.Listener; run[]; void; null; ck.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.Listener; run[]; void; close[]; ck>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.Listener; run[]; void; null; ck>
<java.util.Iterator; remove[]; void; freecs.core.Listener; run[]; void; null; i>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; run[]; void; null; Server>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; sk>
<java.nio.channels.ServerSocketChannel; accept[]; java.nio.channels.SocketChannel; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; ssc>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; sc.socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; getInetAddress[]; sc>
<freecs.Server; isAdminHost[java.net.InetAddress]; boolean; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; Server.srv>
<freecs.Server; isTrafficBanned[java.lang.Object]; boolean; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; Server.srv>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; sc>
<freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; TrafficMonitor.tm>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; sc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.net.InetAddress; getHostName[]; java.lang.String; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; ia>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<freecs.Server; banHost[java.net.InetAddress, long, java.lang.String]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; System>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; tsb>
<freecs.core.CentralSelector; registerSC[java.nio.channels.SocketChannel, int]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; CentralSelector.cSel>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Listener; accept[java.nio.channels.SelectionKey]; void; null; Server>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.CleanupClass; run[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.Server; startShutdown[]; void; freecs.core.CleanupClass; run[]; void; null; Server.srv>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.CleanupClass; run[]; void; null; mpr>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.CleanupClass; run[]; void; null; UserManager.mgr>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CleanupClass; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CleanupClass; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<java.io.PrintStream; print[java.lang.String]; void; freecs.core.CleanupClass; run[]; void; null; System.out>
<java.lang.Thread; sleep[long]; void; freecs.core.CleanupClass; run[]; void; null; Thread>
<freecs.core.UserManager; users[]; java.util.Iterator<java.lang.Object>; freecs.core.CleanupClass; run[]; void; null; UserManager.mgr>
<java.util.Iterator; hasNext[]; boolean; freecs.core.CleanupClass; run[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.CleanupClass; run[]; void; null; i>
<java.util.Iterator; remove[]; void; freecs.core.CleanupClass; run[]; void; null; i>
<freecs.core.User; removeNow[]; void; freecs.core.CleanupClass; run[]; void; null; u>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.auth.AuthManager; shutdown[]; void; freecs.core.CleanupClass; run[]; void; null; Server.srv.auth>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CleanupClass; run[]; void; null; Server>
<java.nio.channels.spi.SelectorProvider; openSelector[]; java.nio.channels.spi.AbstractSelector; freecs.core.Responder; Responder[]; void; null; SelectorProvider.provider()>
<java.nio.channels.spi.SelectorProvider; provider[]; java.nio.channels.spi.SelectorProvider; freecs.core.Responder; Responder[]; void; openSelector[]; SelectorProvider>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Responder; Responder[]; void; null; Server>
<java.lang.Thread; isAlive[]; boolean; freecs.core.Responder; startResponder[]; void; null; res>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.Responder; startResponder[]; void; null; res>
<java.lang.Thread; start[]; void; freecs.core.Responder; startResponder[]; void; null; res>
<java.lang.Thread; setPriority[int]; void; freecs.core.Responder; startResponder[]; void; null; res>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; cb>
<java.nio.channels.spi.AbstractSelectableChannel; keyFor[java.nio.channels.Selector]; java.nio.channels.SelectionKey; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; sc>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; Server>
<java.nio.channels.spi.AbstractSelectableChannel; register[java.nio.channels.Selector, int, java.lang.Object]; java.nio.channels.SelectionKey; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; sc>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; null; this>
<freecs.Server; isRunning[]; boolean; freecs.core.Responder; run[]; void; null; Server.srv>
<java.lang.Thread; isAlive[]; boolean; freecs.core.Responder; run[]; void; null; CentralSelector.cSel>
<java.lang.System; currentTimeMillis[]; long; freecs.core.Responder; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.Responder; run[]; void; null; System>
<java.nio.channels.Selector; selectNow[]; int; freecs.core.Responder; run[]; void; null; sel>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<java.lang.Thread; sleep[long]; void; freecs.core.Responder; run[]; void; null; Thread>
<java.nio.channels.Selector; selectedKeys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.Responder; run[]; void; null; sel>
<java.util.Set; isEmpty[]; boolean; freecs.core.Responder; run[]; void; null; ks>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Responder; run[]; void; null; ks>
<java.util.Iterator; hasNext[]; boolean; freecs.core.Responder; run[]; void; null; i>
<java.util.Iterator; next[]; java.nio.channels.SelectionKey; freecs.core.Responder; run[]; void; null; i>
<java.util.Iterator; remove[]; void; freecs.core.Responder; run[]; void; null; i>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.Responder; run[]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.Responder; run[]; void; null; this>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.Responder; run[]; void; null; ck>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.Responder; run[]; void; null; ck>
<freecs.core.ConnectionBuffer; getWriteQueue[]; freecs.util.ObjectBuffer; freecs.core.Responder; run[]; void; null; cb>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.core.Responder; run[]; void; null; ob>
<freecs.util.ObjectBuffer; get[]; java.lang.Object; freecs.core.Responder; run[]; void; null; ob>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.core.Responder; run[]; void; null; ob>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.Responder; run[]; void; null; ck>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.Responder; run[]; void; null; ck.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.Responder; run[]; void; close[]; ck>
<freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.Responder; run[]; void; null; this>
<freecs.core.ConnectionBuffer; updateKeepAliveTimeout[]; void; freecs.core.Responder; run[]; void; null; cb>
<freecs.interfaces.IContainer; getByteBuffer[]; java.nio.ByteBuffer; freecs.core.Responder; run[]; void; null; ((IContainer)o)>
<freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; freecs.core.Responder; run[]; void; null; this>
<freecs.interfaces.IContainer; closeSocket[]; boolean; freecs.core.Responder; run[]; void; null; ((IContainer)o)>
<freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.Responder; run[]; void; null; this>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.core.Responder; run[]; void; null; ob>
<java.lang.Thread; sleep[long]; void; freecs.core.Responder; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.Responder; run[]; void; null; Server>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; null; sk>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; freecs.core.Responder; dropKey[java.nio.channels.SelectionKey]; void; null; CentralSelector>
<java.nio.channels.spi.AbstractSelectableChannel; keyFor[java.nio.channels.Selector]; java.nio.channels.SelectionKey; freecs.core.Responder; dropChannel[java.nio.channels.SocketChannel]; void; null; sc>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.Responder; dropChannel[java.nio.channels.SocketChannel]; void; null; sk>
<java.nio.channels.SocketChannel; write[java.nio.ByteBuffer]; int; freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; null; sc>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; null; Server>
<freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; null; Server>
<java.nio.Buffer; remaining[]; int; freecs.core.Responder; writeContent[java.nio.channels.SocketChannel, java.nio.ByteBuffer]; boolean; null; bb>
<freecs.core.RequestReader; getID[]; short; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; r>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; Server.srv.props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; jarUrl>
<freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; this>
<freecs.interfaces.IRequest; getKey[]; java.nio.channels.SelectionKey; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server>
<freecs.interfaces.IRequest; getConnectionBuffer[]; freecs.core.ConnectionBuffer; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; CentralSelector>
<freecs.interfaces.IRequest; getAction[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.interfaces.IRequest; getMethod[]; byte; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.content.HTTPRequest; isHTTP11[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; ((HTTPRequest)cReq)>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.interfaces.IRequest; getUserAgent[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; UserManager.mgr>
<freecs.content.HTTPRequest; isHTTP11[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; ((HTTPRequest)cReq)>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server.srv.templatemanager>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; u>
<freecs.content.ContentContainer; setHTTP11[boolean]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; ((ContentContainer)c)>
<freecs.content.ContentContainer; useTemplateSet[freecs.layout.TemplateSet]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.content.ContentContainer; setCookie[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.util.CookieGenerator; generateCookie[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; CookieGenerator>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/SEND">
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.interfaces.IRequest; foundReferer[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; this>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; startsWith[java.lang.String]; action>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; equals[java.lang.Object]; action>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; equals[java.lang.Object]; action>
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<freecs.external.IRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; reqHandler>
<freecs.external.AccessForbiddenException; hidePage[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; noAccess>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action>
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action>
<freecs.external.IRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; reqHandler>
<freecs.external.AccessForbiddenException; hidePage[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; noAccess>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/">
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/LOGIN">
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; this>
<freecs.core.User; getKey[]; java.nio.channels.SelectionKey; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; u>
<freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; UserManager.mgr>
<freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; u>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.core.User; setTemplateSet[freecs.layout.TemplateSet]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; u>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; AuthManager.instance>
<freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/INPUT">
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/MESSAGES">
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/DUMMY">
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; cReq>
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server.srv.templatemanager>
<java.lang.String; length[]; int; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; tname>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; action.substring(1)>
<java.lang.String; substring[int]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; toLowerCase[]; action>
<java.lang.StringBuffer; length[]; int; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; tname>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; tname>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; RequestMonitor.instance>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; "/LOGIN">
<freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; this>
<freecs.core.User; getKey[]; java.nio.channels.SelectionKey; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; u>
<freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; AuthManager.instance>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.content.ContentContainer; prepareForSending[freecs.interfaces.IRequest]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; CentralSelector>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.content.ContentContainer; getByteBuffer[]; java.nio.ByteBuffer; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.content.ContentContainer; closeSocket[]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; c>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; CentralSelector>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; Server>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; rb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; e>
<freecs.core.User; isJoining[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.core.User; isLoggedIn[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.core.User; isRemoving[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.interfaces.IRequest; getConnectionObject[]; freecs.content.Connection; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; cReq>
<freecs.core.User; wasActive[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; CentralSelector>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.ConnectionBuffer; setIsMessageFrame[boolean]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.User; getKey[]; java.nio.channels.SelectionKey; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; this>
<freecs.core.User; setHTTP11[boolean]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.content.ContentContainer; setNoCache[]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; setNoStore[]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; setIsMessages[]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; prepareForSending[freecs.interfaces.IRequest]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; CentralSelector>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.content.ContentContainer; getByteBuffer[]; java.nio.ByteBuffer; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; closeSocket[]; boolean; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; rb>
<freecs.core.User; sendScheduledMessages[]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.core.RequestEvaluator; handleMessagesConnection[freecs.content.ContentContainer, freecs.core.User, freecs.interfaces.IRequest, java.nio.channels.SelectionKey, boolean, freecs.core.ConnectionBuffer]; void; null; c>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; CentralSelector>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.User; isLoggedIn[]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; CentralSelector>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.User; wasActive[]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; Server.srv>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp.getSender()>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; sendQuitMessage[boolean, java.lang.String]; mp>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<freecs.Server; addTempAdminhost[freecs.core.User]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; Server.srv>
<freecs.interfaces.IRequest; getUserAgent[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; cReq>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp.getSender()>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; sendQuitMessage[boolean, java.lang.String]; mp>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; agent>
<freecs.core.User; getUserAgent[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.core.User; getUserAgent[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; sb>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp.getSender()>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; sendQuitMessage[boolean, java.lang.String]; mp>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; cReq>
<java.lang.String; length[]; int; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; msg>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; Server>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; rb>
<freecs.core.MessageParser; clear[]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.MessageParser; setConnectionBuffer[freecs.core.ConnectionBuffer]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.MessageParser; setRawMessage[java.lang.String]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.MessageParser; setHTTP11[boolean]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.MessageParser; parseAndSendMessage[]; void; freecs.core.RequestEvaluator; handleSend[freecs.core.User, freecs.core.ConnectionBuffer, java.nio.channels.SelectionKey, freecs.interfaces.IRequest, boolean]; boolean; null; mp>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; CentralSelector>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.ConnectionBuffer; setUser[freecs.core.User]; void; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; cb>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; u.getTemplateSet()>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; getMessageTemplate[java.lang.String]; u>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; MessageRenderer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; sb>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; MessageRenderer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; sb>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.RequestEvaluator; softCloseMessagesConnection[freecs.core.User, java.nio.channels.SelectionKey]; void; null; cb>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.jar.JarFile; entries[]; java.util.Enumeration<java.util.jar.JarEntry>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; new JarFile(jUrl)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; entries>
<java.util.Enumeration; nextElement[]; java.util.jar.JarEntry; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; entries>
<java.lang.String; matches[java.lang.String]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; jarEntry.getName()>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; matches[java.lang.String]; jarEntry>
<java.util.zip.ZipEntry; getName[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; jarEntry>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; indexOf[java.lang.String]; url>
<java.lang.StringBuffer; substring[int, int]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; replaceAll[java.lang.String, java.lang.String]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; equals[java.lang.Object]; url>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerUrl>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerUrl>
<java.util.Iterator; hasNext[]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.util.Iterator; next[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; iterator>
<java.lang.String; length[]; int; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; url>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Class>
<java.lang.Class; getMethod[java.lang.String, java.lang.Class<?>[]]; java.lang.reflect.Method; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; piClass>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.reflect.Method; invoke[java.lang.Object, java.lang.Object[]]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; getHandlerInstance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.external.IRequestHandler; getHandler[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; ((IRequestHandler)o)>
<freecs.external.IRequestHandler; getVersion[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; ((IRequestHandler)o)>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; version>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; requestHandlers>
<freecs.external.IRequestHandler; getHandler[]; java.lang.String; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; ((IRequestHandler)o)>
<freecs.external.IRequestHandler; instanceForSystem[]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; ((IRequestHandler)o)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.RequestEvaluator; toString[]; java.lang.String; null; new StringBuffer("[RequestEvaluator ").append(parserID)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.RequestEvaluator; toString[]; java.lang.String; append[java.lang.String]; new StringBuffer("[RequestEvaluator ")>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.RequestEvaluator; toString[]; java.lang.String; null; tsb>
<freecs.core.RequestEvaluator; getID[]; short; freecs.core.RequestEvaluator; equals[freecs.core.RequestEvaluator]; boolean; null; rp>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestQueue; RequestQueue[freecs.core.RequestReader]; void; null; Server>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.core.RequestQueue; getUsage[]; double; null; requests>
<freecs.util.ObjectBuffer; size[]; int; freecs.core.RequestQueue; getUsage[]; double; null; requests>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; Server>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; requests>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; Server>
<java.lang.Object; notify[]; void; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; requests>
<java.lang.Object; wait[long]; void; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; requests>
<java.lang.Object; notify[]; void; freecs.core.RequestQueue; addKey[java.nio.channels.SelectionKey]; boolean; null; requests>
<freecs.util.ObjectBuffer; size[]; int; freecs.core.RequestQueue; size[]; int; null; requests>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; System>
<freecs.util.ObjectBuffer; get[]; java.lang.Object; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; requests>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; System>
<java.lang.Object; wait[long]; void; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; requests>
<freecs.util.ObjectBuffer; get[]; java.lang.Object; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; requests>
<java.lang.Object; notify[]; void; freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; null; requests>
<freecs.core.RequestQueue; getKey[long]; java.nio.channels.SelectionKey; freecs.core.RequestQueue; popKey[long]; java.nio.channels.SelectionKey; null; this>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.core.RequestQueue; popKey[long]; java.nio.channels.SelectionKey; null; requests>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.core.RequestQueue; popKey[long]; java.nio.channels.SelectionKey; null; requests>
<java.lang.Object; notify[]; void; freecs.core.RequestQueue; popKey[long]; java.nio.channels.SelectionKey; null; requests>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestQueue; finalize[]; void; null; Server>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.RequestQueue; finalize[]; void; null; ByteBuffer>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestQueue; finalize[]; void; null; System>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; ConnectionBuffer[int]; void; null; ByteBuffer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; ConnectionBuffer[int]; void; null; Server>
<java.nio.Buffer; flip[]; java.nio.Buffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; rBuf>
<java.nio.Buffer; remaining[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; remaining[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; rBuf>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; ByteBuffer>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; remaining[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; rBuf>
<java.nio.Buffer; flip[]; java.nio.Buffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; put[java.nio.ByteBuffer]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; tbuf>
<java.nio.ByteBuffer; put[java.nio.ByteBuffer]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; clear[]; java.nio.Buffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; rBuf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; capacity[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; capacity[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; capacity[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; sb>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; Integer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; sb>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; ByteBuffer>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.ByteBuffer; put[byte]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; tBuf>
<java.nio.ByteBuffer; get[int]; byte; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[int]; java.nio.Buffer; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<java.nio.Buffer; position[]; int; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; null; this>
<java.nio.Buffer; flip[]; java.nio.Buffer; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; this.buf>
<freecs.core.ConnectionBuffer; reset[]; void; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; this>
<freecs.interfaces.IRequest; parse[]; void; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; req>
<freecs.interfaces.IRequest; getConnectionObject[]; freecs.content.Connection; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; req>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; ((SocketChannel)sk.channel()).socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; getInetAddress[]; ((SocketChannel)sk.channel())>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; socket[]; sk>
<freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; TrafficMonitor.tm>
<freecs.core.ConnectionBuffer; reset[]; void; freecs.core.ConnectionBuffer; parse[]; freecs.interfaces.IRequest; null; this>
<java.nio.Buffer; capacity[]; int; freecs.core.ConnectionBuffer; reset[]; void; null; buf>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; reset[]; void; null; ByteBuffer>
<java.nio.Buffer; clear[]; java.nio.Buffer; freecs.core.ConnectionBuffer; reset[]; void; null; buf>
<java.nio.ByteBuffer; put[java.nio.ByteBuffer]; java.nio.ByteBuffer; freecs.core.ConnectionBuffer; reset[]; void; null; buf>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.ConnectionBuffer; setKey[java.nio.channels.SelectionKey]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; setKey[java.nio.channels.SelectionKey]; void; null; Server>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; Server>
<freecs.util.ObjectBuffer; isFull[]; boolean; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; writeBuffer>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; writeBuffer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; Server>
<java.lang.Object; toString[]; java.lang.String; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; Server>
<java.lang.Object; toString[]; java.lang.String; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; this>
<freecs.util.ObjectBuffer; resizeTo[int]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; writeBuffer>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; writeBuffer>
<freecs.core.ConnectionBuffer; writeToLog[]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; this>
<freecs.core.Responder; addToWrite[java.nio.channels.SocketChannel, freecs.core.ConnectionBuffer]; void; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; Responder.res>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; null; sk>
<java.lang.System; currentTimeMillis[]; long; freecs.core.ConnectionBuffer; updateKeepAliveTimeout[]; void; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; null; lsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; addLog[java.lang.String]; void; null; lsb>
<java.lang.StringBuffer; length[]; int; freecs.core.ConnectionBuffer; writeToLog[]; void; null; lsb>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; writeToLog[]; void; null; lsb>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.core.ConnectionBuffer; writeToLog[]; void; null; conn.peerAddress>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; writeToLog[]; void; null; lsb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.core.ConnectionBuffer; writeToLog[]; void; null; conn>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; writeToLog[]; void; null; lsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; writeToLog[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.ConnectionBuffer; writeToLog[]; void; null; lsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; conn.peerAddress>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; conn>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.ConnectionBuffer; logError[java.lang.String]; void; null; lsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ConnectionBuffer; finalize[]; void; null; Server>
<freecs.core.CentralSelector; initCsel[]; boolean; freecs.core.CentralSelector; CentralSelector[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; CentralSelector[]; void; null; Server>
<java.nio.channels.Selector; isOpen[]; boolean; freecs.core.CentralSelector; initCsel[]; boolean; null; sel>
<java.nio.channels.spi.SelectorProvider; openSelector[]; java.nio.channels.spi.AbstractSelector; freecs.core.CentralSelector; initCsel[]; boolean; null; SelectorProvider.provider()>
<java.nio.channels.spi.SelectorProvider; provider[]; java.nio.channels.spi.SelectorProvider; freecs.core.CentralSelector; initCsel[]; boolean; openSelector[]; SelectorProvider>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; initCsel[]; boolean; null; Server>
<java.nio.channels.Selector; isOpen[]; boolean; freecs.core.CentralSelector; initCsel[]; boolean; null; sel>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.CentralSelector; startCentralSelector[]; void; null; cSel>
<java.lang.Thread; isAlive[]; boolean; freecs.core.CentralSelector; startCentralSelector[]; void; null; cSel>
<java.lang.Thread; start[]; void; freecs.core.CentralSelector; startCentralSelector[]; void; null; cSel>
<java.nio.channels.Selector; keys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.CentralSelector; keyCount[]; int; null; sel>
<java.util.Set; size[]; int; freecs.core.CentralSelector; keyCount[]; int; null; keys>
<java.nio.channels.spi.AbstractSelectableChannel; configureBlocking[boolean]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector; registerSC[java.nio.channels.SocketChannel, int]; void; null; sc>
<freecs.core.ConnectionBuffer; setKey[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; registerSC[java.nio.channels.SocketChannel, int]; void; null; cb>
<java.nio.channels.spi.AbstractSelectableChannel; register[java.nio.channels.Selector, int, java.lang.Object]; java.nio.channels.SelectionKey; freecs.core.CentralSelector; registerSC[java.nio.channels.SocketChannel, int]; void; null; sc>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.lang.Thread; start[]; void; freecs.core.CentralSelector; run[]; void; null; katc>
<freecs.Server; isRunning[]; boolean; freecs.core.CentralSelector; run[]; void; null; Server.srv>
<java.util.Set; size[]; int; freecs.core.CentralSelector; run[]; void; null; sel.keys()>
<java.nio.channels.Selector; keys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.CentralSelector; run[]; void; size[]; sel>
<freecs.Server; isRunning[]; boolean; freecs.core.CentralSelector; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.util.Set; size[]; int; freecs.core.CentralSelector; run[]; void; null; sel.keys()>
<java.nio.channels.Selector; keys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.CentralSelector; run[]; void; size[]; sel>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; run[]; void; null; System>
<freecs.util.ObjectBuffer; isEmpty[]; boolean; freecs.core.CentralSelector; run[]; void; null; dropKeys>
<freecs.util.ObjectBuffer; pop[]; java.lang.Object; freecs.core.CentralSelector; run[]; void; null; dropKeys>
<java.lang.Object; notify[]; void; freecs.core.CentralSelector; run[]; void; null; dropKeys>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; run[]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; run[]; void; null; System>
<java.nio.channels.Selector; selectNow[]; int; freecs.core.CentralSelector; run[]; void; null; sel>
<java.lang.Thread; sleep[long]; void; freecs.core.CentralSelector; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.nio.channels.Selector; selectedKeys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.CentralSelector; run[]; void; null; sel>
<java.util.Set; isEmpty[]; boolean; freecs.core.CentralSelector; run[]; void; null; keys>
<java.util.Set; iterator[]; java.util.Iterator; freecs.core.CentralSelector; run[]; void; null; keys>
<java.util.Iterator; hasNext[]; boolean; freecs.core.CentralSelector; run[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.CentralSelector; run[]; void; null; i>
<java.util.Iterator; remove[]; void; freecs.core.CentralSelector; run[]; void; null; i>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.CentralSelector; run[]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.nio.channels.SelectionKey; isReadable[]; boolean; freecs.core.CentralSelector; run[]; void; null; ck>
<freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; run[]; void; null; this>
<java.lang.Thread; sleep[long]; void; freecs.core.CentralSelector; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.lang.Thread; interrupt[]; void; freecs.core.CentralSelector; run[]; void; null; katc>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<java.nio.channels.Selector; close[]; void; freecs.core.CentralSelector; run[]; void; null; sel>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; run[]; void; null; Server>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; Server>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; sk>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; sk>
<java.nio.channels.SocketChannel; read[java.nio.ByteBuffer]; int; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; sc>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; Server>
<freecs.core.ConnectionBuffer; updateKeepAliveTimeout[]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.ConnectionBuffer; append[]; freecs.interfaces.IRequest; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; Server>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; this>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; cb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; ioe>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; Server>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; this>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; cb>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.core.CentralSelector; readIn[java.nio.channels.SelectionKey]; void; null; e>
<freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; this>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; System>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; cb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; RequestReader>
<freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; System>
<freecs.core.ConnectionBuffer; logError[java.lang.String]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; cb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; addRequest[java.nio.channels.SelectionKey, freecs.core.ConnectionBuffer]; void; null; Server>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.ConnectionBuffer; getUser[]; freecs.core.User; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; cb>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.User; getKey[]; java.nio.channels.SelectionKey; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; u>
<freecs.core.User; isRemoving[]; boolean; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; u>
<freecs.core.User; isLoggedOut[]; boolean; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; new StringBuffer("implCloseChannel: droped key for user ")>
<freecs.core.User; getName[]; java.lang.String; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sb>
<freecs.core.User; scheduleToRemove[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; u>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.Responder; dropChannel[java.nio.channels.SocketChannel]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; Responder.res>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sc>
<java.net.Socket; close[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; s>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sc>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; Server>
<java.nio.channels.SelectionKey; cancel[]; void; freecs.core.CentralSelector; implCloseChannel[java.nio.channels.SelectionKey]; void; null; sk>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; null; this>
<java.nio.channels.spi.AbstractSelectableChannel; keyFor[java.nio.channels.Selector]; java.nio.channels.SelectionKey; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; sc>
<java.nio.channels.spi.AbstractInterruptibleChannel; close[]; void; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; sc>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; Server>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; sk>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; cb>
<freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; dropChannel[java.nio.channels.SocketChannel]; void; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; System>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; cSel.dropKeys>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; System>
<java.lang.Object; wait[long]; void; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; cSel.dropKeys>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; cSel.dropKeys>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; Server>
<java.lang.Object; notify[]; void; freecs.core.CentralSelector; addToDropKeys[java.nio.channels.SelectionKey]; void; null; cSel.dropKeys>
<freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; null; this>
<freecs.core.CentralSelector; equals[java.lang.Object]; boolean; freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; null; cSel>
<java.nio.channels.SelectionKey; selector[]; java.nio.channels.Selector; freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; null; sk>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; null; this>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; sk>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; cb>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; sk>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; isOpen[]; sk>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; cb>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; ((SocketChannel)sk.channel())>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; socket[]; sk>
<java.net.Socket; isInputShutdown[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; s>
<java.net.Socket; isOutputShutdown[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; s>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; cb>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; cb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; chkSk[java.nio.channels.SelectionKey]; boolean; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; System>
<freecs.util.ObjectBuffer; contains[java.lang.Object]; boolean; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; reqQueue>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; reqQueue>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; System>
<java.lang.Object; wait[long]; void; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; this.reqQueue>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; System>
<freecs.util.ObjectBuffer; put[java.lang.Object]; boolean; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; reqQueue>
<java.lang.Object; notify[]; void; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; this.reqQueue>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; Server>
<freecs.util.ObjectBuffer; size[]; int; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; reqQueue>
<freecs.util.ObjectBuffer; capacity[]; int; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; this.reqQueue>
<freecs.core.RequestReader; activeReaders[]; int; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; RequestReader>
<freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; freecs.core.CentralSelector; addRequestToQueue[java.nio.channels.SelectionKey]; boolean; null; RequestReader>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.CentralSelector; equals[java.lang.Object]; boolean; null; o>
<freecs.Server; isRunning[]; boolean; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; System>
<java.lang.Math; max[long, long]; long; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Math>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.lang.Thread; sleep[long]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Thread>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.nio.channels.Selector; isOpen[]; boolean; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; CentralSelector.cSel.sel>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.nio.channels.Selector; keys[]; java.util.Set<java.nio.channels.SelectionKey>; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; CentralSelector.cSel.sel>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.util.Set; toArray[java.lang.Object[]]; java.lang.Object[]; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; keyset>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; sk>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; isOpen[]; sk>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; sk>
<freecs.core.ConnectionBuffer; getKeepAliveTimeout[long]; long; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; cb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; System>
<freecs.core.UserManager$UserStore; state[]; java.lang.String; freecs.core.UserManager; ustrState[]; java.lang.String; null; ustr>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.core.UserManager; UserManager[]; void; null; CharBuffer>
<java.nio.ByteBuffer; array[]; byte[]; freecs.core.UserManager; UserManager[]; void; null; Charset.forName(Server.srv.DEFAULT_CHARSET).newEncoder().encode(cb)>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.core.UserManager; UserManager[]; void; array[]; Charset.forName(Server.srv.DEFAULT_CHARSET).newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.core.UserManager; UserManager[]; void; encode[java.nio.CharBuffer]; Charset.forName(Server.srv.DEFAULT_CHARSET)>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.core.UserManager; UserManager[]; void; newEncoder[]; Charset>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.UserManager; UserManager[]; void; null; Server>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.UserManager; UserManager[]; void; null; this>
<java.lang.Thread; setName[java.lang.String]; void; freecs.core.UserManager; startUserManager[]; void; null; mgr>
<java.lang.Thread; setPriority[int]; void; freecs.core.UserManager; startUserManager[]; void; null; mgr>
<java.lang.Thread; start[]; void; freecs.core.UserManager; startUserManager[]; void; null; mgr>
<freecs.core.UserManager$UserStore; size[]; int; freecs.core.UserManager; getActiveUserCount[]; int; null; ustr>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; uname.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; trim[]; uname>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; req.currentRequest>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; u.getCookie()>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; equals[java.lang.Object]; u>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; req.currentRequest>
<freecs.core.User; check[long]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; u>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; System>
<java.lang.String; length[]; int; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; uname>
<freecs.auth.AuthManager; isValidName[java.lang.String]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; AuthManager.instance>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; this>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; req.currentRequest>
<java.lang.String; length[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; req.currentRequest.getCookie()>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; length[]; req.currentRequest>
<java.lang.String; length[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; grp>
<freecs.core.UserManager$UserStore; getUserName[java.lang.String]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; ustr>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; uname>
<freecs.core.UserManager$UserStore; getUserCookie[java.lang.String]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; ustr>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; req.currentRequest>
<freecs.core.User; hasRole[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.core.User; hasRole[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mp>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mp.getSender()>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; sendQuitMessage[boolean, java.lang.String]; mp>
<freecs.core.User; removeNow[]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; un>
<freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server.srv.auth>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; req.currentRequest>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server.srv>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; setUserAgent[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.interfaces.IRequest; getUserAgent[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; req.currentRequest>
<freecs.core.User; hasRole[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu.getName().trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; toLowerCase[]; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; trim[]; nu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; admins>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; vips>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; moderators>
<freecs.core.User; addIsModerator[]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; guests>
<freecs.core.User; addIsGuest[]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.UserManager$UserStore; size[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; ustr>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<freecs.core.Group; hasState[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.core.Group; usrIsBaned[java.lang.String]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.core.Group; hasState[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.core.Group; hasState[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.core.User; hasRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User]; freecs.core.Group; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<java.util.HashMap; get[java.lang.Object]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr.startGroupThemes>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; grp.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; toLowerCase[]; grp>
<freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr>
<freecs.content.Connection; hasAnoProxy[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu.conn>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; anoProxyUser>
<freecs.core.User; addToMembershiplist[]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; isEntrancePunished[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; setPunish[boolean]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mprj>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mprj>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.core.UserManager; addUser[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; this>
<freecs.core.Group; addLoginUser[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; g>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; Server>
<freecs.core.User; notifyFriends[]; short; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fshipList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; toLowerCase[]; nu>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fshipList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; toLowerCase[]; nu>
<java.util.List; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; allFriends>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; i>
<java.util.Iterator; next[]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; i>
<freecs.core.User; isFriend[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.List; add[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fn>
<freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; this>
<freecs.core.User; setTemplateSet[freecs.layout.TemplateSet]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; hasRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.Membership; listedAsOnlinevip[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; defaultMembership>
<freecs.core.User; hasRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineVips>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; notListedAsOnlineVips>
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; this>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.MessageParser; setParam[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; String>
<java.util.Vector; size[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; e>
<java.util.Enumeration; nextElement[]; freecs.core.User; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; e>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; cu>
<freecs.core.MessageParser; setTargetGroup[freecs.core.Group]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; mpr>
<freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; nu>
<freecs.core.UserManager$UserStore; addUser[freecs.core.User]; void; freecs.core.UserManager; addUser[freecs.core.User]; void; null; ustr>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; addUser[freecs.core.User]; void; null; System>
<freecs.core.UserManager$UserStore; size[]; int; freecs.core.UserManager; addUser[freecs.core.User]; void; null; ustr>
<freecs.core.UserManager$UserStore; size[]; int; freecs.core.UserManager; addUser[freecs.core.User]; void; null; ustr>
<freecs.core.UserManager$UserStore; removeUser[freecs.core.User]; void; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; ustr>
<freecs.core.User; clearPrivatMessageStore[]; void; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; u>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; System>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; onlineVips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; onlineVips>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; notListedAsOnlineVips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; notListedAsOnlineVips>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; anoProxyUser>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; anoProxyUser>
<freecs.core.UserManager$UserStore; getUserCookie[java.lang.String]; freecs.core.User; freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; null; ustr>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; null; n>
<freecs.util.EntityDecoder; htmlToChar[java.lang.String]; java.lang.String; freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; null; EntityDecoder>
<freecs.core.UserManager$UserStore; getUserName[java.lang.String]; freecs.core.User; freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; null; ustr>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.HashMap; put[java.lang.String, java.util.Vector<freecs.core.User>]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.Vector; addElement[freecs.core.User]; void; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.Vector; size[]; int; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.HashMap; remove[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<freecs.Server; isRunning[]; boolean; freecs.core.UserManager; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.UserManager; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; run[]; void; null; System>
<java.lang.Math; min[long, long]; long; freecs.core.UserManager; run[]; void; null; Math>
<freecs.core.UserManager; checkUsers[long, long]; long; freecs.core.UserManager; run[]; void; null; this>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; run[]; void; null; schedule>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; run[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.core.UserManager; run[]; void; null; e>
<freecs.core.UserManager$UserStore; contains[freecs.core.User]; boolean; freecs.core.UserManager; run[]; void; null; ustr>
<freecs.core.ScheduledAction; getUser[]; freecs.core.User; freecs.core.UserManager; run[]; void; null; sa>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; run[]; void; null; schedule>
<freecs.core.ScheduledAction; getStartTime[]; long; freecs.core.UserManager; run[]; void; null; sa>
<freecs.core.ScheduledAction; execute[]; void; freecs.core.UserManager; run[]; void; null; sa>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; run[]; void; null; schedule>
<java.lang.System; currentTimeMillis[]; long; freecs.core.UserManager; run[]; void; null; System>
<java.lang.Thread; sleep[long]; void; freecs.core.UserManager; run[]; void; null; Thread>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.UserManager; run[]; void; null; Server>
<freecs.core.UserManager$UserStore; toArray[]; freecs.core.User[]; freecs.core.UserManager; checkUsers[long, long]; long; null; ustr>
<freecs.core.User; check[long]; boolean; freecs.core.UserManager; checkUsers[long, long]; long; null; cu>
<freecs.core.User; removeNow[]; void; freecs.core.UserManager; checkUsers[long, long]; long; null; cu>
<freecs.core.User; nextCheck[]; long; freecs.core.UserManager; checkUsers[long, long]; long; null; cu>
<freecs.core.User; checkReferences[]; void; freecs.core.UserManager; checkUsers[long, long]; long; null; cu>
<freecs.core.User; touch[long]; void; freecs.core.UserManager; checkUsers[long, long]; long; null; cu>
<freecs.core.UserManager$UserStore; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; null; ustr>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; null; i>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.UserManager; sendMessage[freecs.interfaces.IContainer]; void; null; cu>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; onlineVips[]; java.util.Enumeration<java.lang.Object>; null; onlineVips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; notListedAsOnlineVips[]; java.util.Enumeration<java.lang.Object>; null; notListedAsOnlineVips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; anoProxyUser[]; java.util.Enumeration<java.lang.Object>; null; anoProxyUser>
<freecs.core.UserManager$UserStore; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.UserManager; users[]; java.util.Iterator<java.lang.Object>; null; ustr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; scheduleAction[short, long, freecs.core.User, freecs.core.User]; void; null; schedule>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; scheduleAction[short, long, freecs.core.User, freecs.core.User]; void; null; schedule>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; nVips>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; nAdmins>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; setPermission[int]; void; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; nMod>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; addIsModerator[]; void; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; removeIsModerator[]; void; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; nGuest>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; addIsGuest[]; void; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; e>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; umgr>
<freecs.core.User; removeIsGuest[]; void; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; cu>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; mpr>
<freecs.core.MessageParser; setTargetGroup[freecs.core.Group]; void; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; mpr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; mpr>
<java.util.List; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; to>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; e>
<java.util.Iterator; next[]; freecs.core.User; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; e>
<freecs.core.Group; equals[java.lang.Object]; boolean; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; forUser.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; equals[java.lang.Object]; forUser>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; cu>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; cu>
<freecs.core.User; isAway[]; boolean; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; cu>
<freecs.core.User; storeFriendNotification[java.lang.String]; void; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; cu>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; forUser>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; vips[]; java.util.Enumeration<java.lang.Object>; null; vips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; moderators[]; java.util.Enumeration<java.lang.Object>; null; moderators>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; guests[]; java.util.Enumeration<java.lang.Object>; null; guests>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager; resolveState[java.lang.String]; int; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.UserManager; resolveState[java.lang.String]; int; null; lowerName>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrName.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; iterator[]; usrName>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb.append(i.next())>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; append[java.lang.String]; sb>
<java.util.Iterator; next[]; java.util.Map.Entry<java.lang.String,freecs.core.User>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrCookie.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; iterator[]; usrCookie>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb.append(i.next())>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; append[java.lang.String]; sb>
<java.util.Iterator; next[]; java.util.Map.Entry<java.lang.String,freecs.core.User>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; sb>
<java.util.Map; size[]; int; freecs.core.UserManager.UserStore; size[]; int; null; usrName>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; u>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; u>
<java.lang.String; length[]; int; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; name>
<java.lang.String; length[]; int; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; cookie>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; name.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; toLowerCase[]; name>
<java.util.Map; containsKey[java.lang.Object]; boolean; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrName>
<java.util.Map; containsKey[java.lang.Object]; boolean; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrCookie>
<java.util.Map; put[java.lang.String, freecs.core.User]; freecs.core.User; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrName>
<java.util.Map; put[java.lang.String, freecs.core.User]; freecs.core.User; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrCookie>
<java.util.Collection; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.UserManager.UserStore; toArray[]; freecs.core.User[]; null; usrName.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.User>; freecs.core.UserManager.UserStore; toArray[]; freecs.core.User[]; toArray[freecs.core.User[]]; usrName>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; u>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; u>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; usrName>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; name.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; toLowerCase[]; name>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; usrCookie>
<java.util.Map; get[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; getUserCookie[java.lang.String]; freecs.core.User; null; usrCookie>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.UserManager.UserStore; getUserName[java.lang.String]; freecs.core.User; null; name.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.UserManager.UserStore; getUserName[java.lang.String]; freecs.core.User; toLowerCase[]; name>
<java.util.Map; get[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; getUserName[java.lang.String]; freecs.core.User; null; usrName>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.UserManager.UserStore; contains[freecs.core.User]; boolean; null; u>
<freecs.core.User; getName[]; java.lang.String; freecs.core.UserManager.UserStore; contains[freecs.core.User]; boolean; null; u>
<freecs.core.UserManager$UserStore; getUserCookie[java.lang.String]; freecs.core.User; freecs.core.UserManager.UserStore; contains[freecs.core.User]; boolean; null; this>
<freecs.core.UserManager$UserStore; getUserName[java.lang.String]; freecs.core.User; freecs.core.UserManager.UserStore; contains[freecs.core.User]; boolean; null; this>
<java.util.Collection; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager.UserStore.UserStoreIterator; UserStoreIterator[freecs.core.UserManager.UserStore]; void; null; usrName.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.User>; freecs.core.UserManager.UserStore.UserStoreIterator; UserStoreIterator[freecs.core.UserManager.UserStore]; void; iterator[]; usrName>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore.UserStoreIterator; remove[]; void; null; usrCookie>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.UserManager.UserStore.UserStoreIterator; remove[]; void; null; cu>
<java.util.Iterator; remove[]; void; freecs.core.UserManager.UserStore.UserStoreIterator; remove[]; void; null; ci>
<java.util.Iterator; hasNext[]; boolean; freecs.core.UserManager.UserStore.UserStoreIterator; hasNext[]; boolean; null; ci>
<java.util.Iterator; next[]; freecs.core.User; freecs.core.UserManager.UserStore.UserStoreIterator; next[]; java.lang.Object; null; ci>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; User[java.lang.String, java.lang.String]; void; null; System>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.core.User; User[java.lang.String, java.lang.String]; void; null; Server.srv.templatemanager>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; User[java.lang.String, java.lang.String]; void; null; Server>
<java.util.Vector; addElement[freecs.core.MessageParser]; void; freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; null; schedMsgs>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.MessageParser>; freecs.core.User; sendScheduledMessages[]; void; null; schedMsgs>
<java.util.Iterator; hasNext[]; boolean; freecs.core.User; sendScheduledMessages[]; void; null; i>
<java.util.Iterator; next[]; freecs.core.MessageParser; freecs.core.User; sendScheduledMessages[]; void; null; i>
<freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendScheduledMessages[]; void; null; this>
<java.util.Iterator; remove[]; void; freecs.core.User; sendScheduledMessages[]; void; null; i>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; scheduleToRemove[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; scheduleToRemove[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; scheduleToRemove[]; void; null; tsb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.core.User; scheduleToRemove[]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; scheduleToRemove[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; scheduleToRemove[]; void; null; tsb>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; scheduleToRemove[]; void; null; System>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.User; scheduleToRemove[]; void; null; sk>
<freecs.core.ConnectionBuffer; invalidate[]; void; freecs.core.User; scheduleToRemove[]; void; null; cb>
<freecs.core.Group; removeUser[freecs.core.User]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; g>
<freecs.core.Group; size[]; int; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; g>
<freecs.core.Group; isValid[]; boolean; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; g>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.User; isAway[]; boolean; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; this>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; g>
<freecs.core.MessageParser; setReason[java.lang.String]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; g>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; sk>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; isOpen[]; sk>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; mp>
<freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; Server>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; CentralSelector>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; removeNow[]; void; null; System>
<freecs.core.UserManager; removeUser[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; UserManager.mgr>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; removeNow[]; void; null; memberships.entrySet()>
<java.util.HashMap; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; removeNow[]; void; iterator[]; memberships>
<java.util.Iterator; hasNext[]; boolean; freecs.core.User; removeNow[]; void; null; i>
<java.util.Iterator; next[]; java.util.Map.Entry<java.lang.String,freecs.core.Membership>; freecs.core.User; removeNow[]; void; null; i>
<java.util.Map$Entry; getValue[]; freecs.core.Membership; freecs.core.User; removeNow[]; void; null; entry>
<freecs.core.Membership; remove[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; m>
<freecs.core.Group; removeUser[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; g>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; mp>
<freecs.core.User; isAway[]; boolean; freecs.core.User; removeNow[]; void; null; this>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; removeNow[]; void; null; mp>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; removeNow[]; void; null; g>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; removeNow[]; void; null; mp>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; removeNow[]; void; null; g>
<freecs.Server; removeTempAdminhost[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; Server.srv>
<freecs.auth.AuthManager; logoutUser[freecs.core.User]; void; freecs.core.User; removeNow[]; void; null; Server.srv.auth>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.User; removeNow[]; void; null; Server>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; removeNow[]; void; null; friendsList>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.core.User; removeNow[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.core.User; removeNow[]; void; null; e>
<freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; freecs.core.User; removeNow[]; void; null; UserManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; removeNow[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; removeNow[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; removeNow[]; void; null; tsb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.core.User; removeNow[]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; removeNow[]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; removeNow[]; void; null; tsb>
<freecs.Server; removeToken[java.lang.String]; void; freecs.core.User; removeNow[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; wasActive[]; boolean; null; System>
<freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; freecs.core.User; wasActive[]; boolean; null; Server.srv>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; wasActive[]; boolean; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; wasActive[]; boolean; null; Server>
<freecs.Server; banUser[freecs.core.User, java.lang.String, java.lang.String, long, java.lang.String]; void; freecs.core.User; wasActive[]; boolean; null; Server.srv>
<freecs.core.Group; removeUser[freecs.core.User]; void; freecs.core.User; setGroup[freecs.core.Group]; boolean; null; this.grp>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; null; CentralSelector>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; null; Server>
<freecs.core.User; scheduleToRemove[]; void; freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; null; this>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; null; sk>
<freecs.core.ConnectionBuffer; setUser[freecs.core.User]; void; freecs.core.User; setKey[java.nio.channels.SelectionKey]; void; null; cb>
<freecs.core.User; scheduleToRemove[]; void; freecs.core.User; touch[long]; void; null; this>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.User; touch[long]; void; null; sk>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.User; touch[long]; void; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.User; touch[long]; void; isOpen[]; sk>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; touch[long]; void; null; Server>
<freecs.core.CentralSelector; dropKey[java.nio.channels.SelectionKey]; void; freecs.core.User; touch[long]; void; null; CentralSelector>
<java.nio.ByteBuffer; wrap[byte[]]; java.nio.ByteBuffer; freecs.core.User; touch[long]; void; null; ByteBuffer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; touch[long]; void; null; Server>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.User; touch[long]; void; null; sk>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.User; touch[long]; void; null; cb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.User; touch[long]; void; null; Server>
<freecs.core.MessageParser; getSender[]; freecs.core.User; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; ((MessageParser)mc)>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; ignoreList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; toLowerCase[]; sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; hasDefaultRight[int]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender>
<freecs.core.User; isFriendsOnly[]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; hasState[int]; this>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; friendsList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; sender.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; toLowerCase[]; sender>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; Server>
<freecs.core.User; scheduleToRemove[]; void; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; this>
<freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; this>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; sk>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; cb>
<freecs.interfaces.IContainer; getByteBuffer[]; java.nio.ByteBuffer; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; mc>
<freecs.interfaces.IContainer; closeSocket[]; boolean; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; mc>
<freecs.core.ConnectionBuffer; addToWrite[java.lang.Object]; void; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; cb>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; System>
<freecs.core.MessageParser; setHTTP11[boolean]; void; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; ((MessageParser)mc)>
<java.nio.channels.SelectionKey; attachment[]; java.lang.Object; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; sk>
<freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; ((MessageParser)mc)>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; implSendMessage[freecs.interfaces.IContainer]; void; null; System>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; userIsIgnored[java.lang.String]; boolean; null; ignoreList>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; userIsIgnored[java.lang.String]; boolean; null; uname>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; ignoreUser[freecs.core.User]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; ignoreUser[freecs.core.User]; void; toLowerCase[]; u>
<freecs.core.User; ignoreUser[java.lang.String]; void; freecs.core.User; ignoreUser[freecs.core.User]; void; null; this>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; ignoreUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; ignoreUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; respectUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.User; respectUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; size[]; int; freecs.core.User; numberOfIgnoredUser[]; int; null; ignoreList>
<java.util.HashMap; put[java.lang.String, freecs.core.Membership]; freecs.core.Membership; freecs.core.User; addMembership[java.lang.String, freecs.core.Membership]; void; null; memberships>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; null; memberships>
<java.util.HashMap; remove[java.lang.Object]; freecs.core.Membership; freecs.core.User; removeMembership[java.lang.String]; void; null; memberships>
<freecs.core.User; rebuildMemberships[]; void; freecs.core.User; removeMembership[java.lang.String]; void; null; this>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; rebuildMemberships[]; void; null; memberships.entrySet()>
<java.util.HashMap; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; rebuildMemberships[]; void; iterator[]; memberships>
<java.util.Iterator; hasNext[]; boolean; freecs.core.User; rebuildMemberships[]; void; null; i>
<java.util.Iterator; next[]; java.util.Map.Entry<java.lang.String,freecs.core.Membership>; freecs.core.User; rebuildMemberships[]; void; null; i>
<java.util.Map$Entry; getValue[]; freecs.core.Membership; freecs.core.User; rebuildMemberships[]; void; null; entry>
<freecs.core.Membership; add[freecs.core.User]; void; freecs.core.User; rebuildMemberships[]; void; null; m>
<freecs.core.User; setPermission[int]; void; freecs.core.User; addIsModerator[]; void; null; this>
<freecs.core.User; getPermissionMap[]; int; freecs.core.User; addIsModerator[]; void; null; this>
<freecs.core.User; setPermission[int]; void; freecs.core.User; removeIsModerator[]; void; null; this>
<freecs.core.User; getPermissionMap[]; int; freecs.core.User; removeIsModerator[]; void; null; this>
<freecs.core.User; setPermission[int]; void; freecs.core.User; addIsGuest[]; void; null; this>
<freecs.core.User; getPermissionMap[]; int; freecs.core.User; addIsGuest[]; void; null; this>
<freecs.core.User; setPermission[int]; void; freecs.core.User; removeIsGuest[]; void; null; this>
<freecs.core.User; getPermissionMap[]; int; freecs.core.User; removeIsGuest[]; void; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasEntraceMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasSepaMinRight[int, freecs.content.MessageState]; boolean; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; hasMinRight[int, freecs.content.MessageState, freecs.core.Group]; boolean; null; this>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; setAway[boolean]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; setAway[boolean]; void; null; System>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.User; storeFriendNotification[java.lang.String]; void; null; UserManager.mgr>
<java.lang.String; toString[]; java.lang.String; freecs.core.User; storeFriendNotification[java.lang.String]; void; null; u>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.User; storeFriendNotification[java.lang.String]; void; null; storeFriendNotification>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.User; addWhisper[java.lang.Object]; void; null; UserManager.mgr>
<java.lang.Object; toString[]; java.lang.String; freecs.core.User; addWhisper[java.lang.Object]; void; null; u>
<java.lang.Object; toString[]; java.lang.String; freecs.core.User; addWhisper[java.lang.Object]; void; null; u>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.User; addWhisper[java.lang.Object]; void; null; whisper>
<java.util.Vector; size[]; int; freecs.core.User; getWhipserSize[]; int; null; whisper>
<java.util.Vector; add[freecs.content.PrivateMessageStore]; boolean; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<freecs.core.Membership; getPrivatemessageStore[]; int; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; defaultMembership>
<freecs.core.Membership; getPrivatemessageStore[]; int; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; defaultMembership>
<java.util.Vector; size[]; int; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.PrivateMessageStore>; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; tmp>
<java.util.Iterator; next[]; freecs.content.PrivateMessageStore; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; p>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<java.util.Vector; size[]; int; freecs.core.User; sendMessageHistory[int]; void; null; privateMessage>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.PrivateMessageStore>; freecs.core.User; sendMessageHistory[int]; void; null; privateMessage>
<java.util.Iterator; hasNext[]; boolean; freecs.core.User; sendMessageHistory[int]; void; null; p>
<java.util.Iterator; next[]; freecs.content.PrivateMessageStore; freecs.core.User; sendMessageHistory[int]; void; null; p>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.User; sendMessageHistory[int]; void; null; mp>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.User; sendMessageHistory[int]; void; null; mp>
<freecs.core.MessageParser; setMessage[java.lang.String]; void; freecs.core.User; sendMessageHistory[int]; void; null; mp>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.User; sendMessageHistory[int]; void; null; mp>
<freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.User; sendMessageHistory[int]; void; null; this>
<freecs.core.User; userIsIgnored[java.lang.String]; boolean; freecs.core.User; invitedFrom[freecs.core.User]; boolean; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; invitedFrom[freecs.core.User]; boolean; null; u>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.User; invitedFrom[freecs.core.User]; boolean; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; null; link>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; null; link.append("\">").append(EntityDecoder.charToHtml(name))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; append[java.lang.String]; link.append("\">")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; append[java.lang.String]; link>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; null; EntityDecoder>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; getNoFadeColorUsername[]; java.lang.String; null; link>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; changeColCode[java.lang.String]; boolean; null; System>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; null; Server.srv.templatemanager>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; msg>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<freecs.Server; formatTimeStamp[long, java.text.SimpleDateFormat]; java.lang.String; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<freecs.Server; formatTimeStamp[long, java.text.SimpleDateFormat]; java.lang.String; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; System>
<java.lang.Math; round[float]; int; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; Math>
<java.lang.String; valueOf[long]; java.lang.String; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; String>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; k>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; System>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; tsb>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; userProps>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; null; userProps>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; addFriend[java.lang.String]; void; null; friendsList>
<freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; freecs.core.User; addFriend[java.lang.String]; void; null; UserManager.mgr>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; addFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; removeFriend[java.lang.String]; void; null; friendsList>
<freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; freecs.core.User; removeFriend[java.lang.String]; void; null; UserManager.mgr>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.User; removeFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; size[]; int; freecs.core.User; numberOfFriends[]; int; null; friendsList>
<freecs.core.User; isFriend[java.lang.String]; boolean; freecs.core.User; isFriend[freecs.core.User]; boolean; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; isFriend[java.lang.String]; boolean; null; name.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.core.User; isFriend[java.lang.String]; boolean; toLowerCase[]; name>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; isFriend[java.lang.String]; boolean; null; this.friendsList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; null; friendsList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; ignoreList[]; java.util.Enumeration<java.lang.String>; null; ignoreList>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.User; equals[freecs.core.User]; boolean; null; id>
<freecs.core.User; getID[]; java.lang.String; freecs.core.User; equals[freecs.core.User]; boolean; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.core.User; equals[freecs.core.User]; boolean; null; name>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; equals[freecs.core.User]; boolean; null; u>
<java.lang.String; hashCode[]; int; freecs.core.User; hashCode[]; int; null; id>
<java.lang.String; hashCode[]; int; freecs.core.User; hashCode[]; int; null; name.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; hashCode[]; int; hashCode[]; name>
<freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.User; hasMembership[java.lang.String]; boolean; null; this>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this.grp>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this.grp>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this.grp>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this.grp>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this>
<freecs.core.Group; hasState[int]; boolean; freecs.core.User; usrMayWhisper[freecs.core.User]; boolean; null; this.grp>
<freecs.core.User; isLoggedOut[]; boolean; freecs.core.User; checkReferences[]; void; null; foreignPrivateUser>
<freecs.core.User; isLoggedOut[]; boolean; freecs.core.User; checkReferences[]; void; null; ownPrivateUser>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.User; checkReferences[]; void; null; UserManager.mgr>
<freecs.core.User; isLoggedOut[]; boolean; freecs.core.User; checkReferences[]; void; null; invitedBy>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; lastActive[]; long; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; getSessionStart[]; long; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; awayTime[]; long; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; lastActive[]; long; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; getSessionStart[]; long; freecs.core.User; getChattime[]; long; null; this>
<freecs.core.User; awayTime[]; long; freecs.core.User; getChattime[]; long; null; this>
<java.lang.Long; longValue[]; long; freecs.core.User; getChattime[]; long; null; ((Long)ct)>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; check[long]; boolean; null; this>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.User; check[long]; boolean; null; this>
<freecs.core.Membership; userTimeout[]; long; freecs.core.User; check[long]; boolean; null; this.getDefaultMembership()>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.User; check[long]; boolean; userTimeout[]; this>
<freecs.core.Membership; userTimeout[]; long; freecs.core.User; check[long]; boolean; null; this.getDefaultMembership()>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.User; check[long]; boolean; userTimeout[]; this>
<freecs.core.Membership; userTimeout[]; long; freecs.core.User; check[long]; boolean; null; this.getDefaultMembership()>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.User; check[long]; boolean; userTimeout[]; this>
<freecs.core.Group; isValid[]; boolean; freecs.core.User; check[long]; boolean; null; grp>
<freecs.core.User; sendQuitMessage[boolean, java.lang.String]; void; freecs.core.User; check[long]; boolean; null; this>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.User; check[long]; boolean; null; sk>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.User; check[long]; boolean; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.User; check[long]; boolean; isOpen[]; sk>
<freecs.core.User; scheduleToRemove[]; void; freecs.core.User; check[long]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.nio.channels.SelectionKey; isValid[]; boolean; freecs.core.User; toString[]; java.lang.String; null; sk>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[boolean]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.nio.channels.spi.AbstractInterruptibleChannel; isOpen[]; boolean; freecs.core.User; toString[]; java.lang.String; null; sk.channel()>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.core.User; toString[]; java.lang.String; isOpen[]; sk>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; toString[]; java.lang.String; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; toString[]; java.lang.String; null; tsb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; finalize[]; void; null; Server>
<freecs.core.User; getDefaultPermissionMap[]; int; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; this>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; this>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; equals[freecs.core.User]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.core.User; hasRole[int]; boolean; freecs.core.User; compareRoleTo[freecs.core.User]; int; null; u>
<freecs.Server; isPunished[java.lang.Object]; boolean; freecs.core.User; isEntrancePunished[]; boolean; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; isEntrancePunished[]; boolean; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; isEntrancePunished[]; boolean; toLowerCase[]; this>
<freecs.Server; isEntranceBanned[java.lang.Object]; boolean; freecs.core.User; isEntranceBanned[]; boolean; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; isEntranceBanned[]; boolean; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; isEntranceBanned[]; boolean; toLowerCase[]; this>
<freecs.Server; isCollocked[java.lang.Object]; boolean; freecs.core.User; isColLocked[]; boolean; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; isColLocked[]; boolean; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; isColLocked[]; boolean; toLowerCase[]; this>
<freecs.Server; isPunished[java.lang.Object]; boolean; freecs.core.User; removePunish[]; void; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; removePunish[]; void; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; removePunish[]; void; toLowerCase[]; this>
<freecs.Server; removeStore[java.lang.Object, int]; boolean; freecs.core.User; removePunish[]; void; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; removePunish[]; void; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; removePunish[]; void; toLowerCase[]; this>
<freecs.Server; isEntranceBanned[java.lang.Object]; boolean; freecs.core.User; removeBan[]; void; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; removeBan[]; void; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; removeBan[]; void; toLowerCase[]; this>
<freecs.Server; removeStore[java.lang.Object, int]; boolean; freecs.core.User; removeBan[]; void; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; removeBan[]; void; null; this.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; removeBan[]; void; toLowerCase[]; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sb>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sb>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; defaultTs.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; split[java.lang.String]; defaultTs>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; values[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; templatesetList>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<freecs.core.User; hasRight[int]; boolean; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sc>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sc>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; sc>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; mayUseTemplateset>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; sb>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; templatesetList>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; setMessageFloodLenght[boolean]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.User; hasMessageFloodLenght[]; boolean; null; System>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.User; addToMembershiplist[]; void; null; this>
<freecs.core.User; setMembershiplist[java.lang.String]; void; freecs.core.User; addToMembershiplist[]; void; null; this>
<freecs.core.User; isStandart[java.lang.String]; boolean; freecs.core.User; addToMembershiplist[]; void; null; this>
<freecs.core.User; setMembershiplist[java.lang.String]; void; freecs.core.User; addToMembershiplist[]; void; null; this>
<java.lang.String; length[]; int; freecs.core.User; isStandart[java.lang.String]; boolean; null; mslist>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.core.User; setMembershiplist[java.lang.String]; void; null; list>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.core.User; setMembershiplist[java.lang.String]; void; null; MembershipManager.instance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; setMembershiplist[java.lang.String]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.User; setMembershiplist[java.lang.String]; void; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.core.User; setMembershiplist[java.lang.String]; void; null; this>
<freecs.core.Membership; addToList[freecs.core.User]; void; freecs.core.User; setMembershiplist[java.lang.String]; void; null; cms>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; containsConfirmAction[java.lang.String]; boolean; null; this.confirmAction>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.User; addConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.User; removeConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.util.Vector; size[]; int; freecs.core.User; removeConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.lang.Thread; isAlive[]; boolean; freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; null; this>
<java.lang.Thread; start[]; void; freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; null; this>
<java.util.HashMap; put[java.lang.Thread, java.lang.Long]; java.lang.Long; freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; null; monitors>
<java.util.HashMap; remove[java.lang.Object]; java.lang.Long; freecs.core.RequestMonitor; removeMonitor[java.lang.Thread]; void; null; monitors>
<java.lang.Thread; interrupt[]; void; freecs.core.RequestMonitor; interruptMonitored[java.lang.Thread]; void; null; t>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestMonitor; interruptMonitored[java.lang.Thread]; void; null; Server>
<java.lang.Thread; toString[]; java.lang.String; freecs.core.RequestMonitor; interruptMonitored[java.lang.Thread]; void; null; t>
<freecs.Server; isRunning[]; boolean; freecs.core.RequestMonitor; run[]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestMonitor; run[]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.RequestMonitor; run[]; void; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestMonitor; run[]; void; null; System>
<java.lang.System; currentTimeMillis[]; long; freecs.core.RequestMonitor; run[]; void; null; System>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Thread>; freecs.core.RequestMonitor; run[]; void; null; monitors.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.Thread>; freecs.core.RequestMonitor; run[]; void; iterator[]; monitors>
<java.util.Iterator; hasNext[]; boolean; freecs.core.RequestMonitor; run[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Thread; freecs.core.RequestMonitor; run[]; void; null; i>
<java.lang.Long; longValue[]; long; freecs.core.RequestMonitor; run[]; void; null; ((Long)monitors.get(t))>
<java.util.HashMap; get[java.lang.Object]; java.lang.Long; freecs.core.RequestMonitor; run[]; void; longValue[]; monitors>
<freecs.core.RequestMonitor; interruptMonitored[java.lang.Thread]; void; freecs.core.RequestMonitor; run[]; void; null; this>
<java.util.Iterator; remove[]; void; freecs.core.RequestMonitor; run[]; void; null; i>
<java.lang.Thread; sleep[long]; void; freecs.core.RequestMonitor; run[]; void; null; Thread>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ScheduledAction; ScheduledAction[short, long, freecs.core.User, freecs.core.User]; void; null; Server>
<freecs.core.User; setPunish[boolean]; void; freecs.core.ScheduledAction; execute[]; void; null; usr>
<freecs.core.MessageParser; setMessageTemplate[java.lang.String]; void; freecs.core.ScheduledAction; execute[]; void; null; mp>
<freecs.core.MessageParser; setUsercontext[freecs.core.User]; void; freecs.core.ScheduledAction; execute[]; void; null; mp>
<freecs.core.MessageParser; setSender[freecs.core.User]; void; freecs.core.ScheduledAction; execute[]; void; null; mp>
<freecs.Server; removeStore[java.lang.Object, int]; boolean; freecs.core.ScheduledAction; execute[]; void; null; Server.srv>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.ScheduledAction; execute[]; void; null; usr.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.ScheduledAction; execute[]; void; toLowerCase[]; usr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.ScheduledAction; execute[]; void; null; usr>
<freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; freecs.core.ScheduledAction; execute[]; void; null; g>
<freecs.core.ScheduledAction; getAction[]; short; freecs.core.ScheduledAction; equals[java.lang.Object]; boolean; null; sa>
<freecs.core.ScheduledAction; getUser[]; freecs.core.User; freecs.core.ScheduledAction; equals[java.lang.Object]; boolean; null; sa>
<freecs.core.ScheduledAction; getSender[]; freecs.core.User; freecs.core.ScheduledAction; equals[java.lang.Object]; boolean; null; sa>
<freecs.core.User; hashCode[]; int; freecs.core.ScheduledAction; hashCode[]; int; null; usr>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.core.ScheduledAction; finalize[]; void; null; Server>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgTpl>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; st>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; st>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; sb>
<freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; this>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; sb.append(addB)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; null; sb>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getID[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; isAway[]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertAwaymessage[freecs.content.MessageState, java.lang.String, freecs.core.User]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.core.User; getAwayMessage[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; isAway[]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<freecs.core.User; getQuestionCounter[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getColCode[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; getTheme[]; cu>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGrouptheme[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<freecs.core.Group; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; getName[]; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGroupname[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.net.InetAddress; getCanonicalHostName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.conn.peerAddress>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; equals[java.lang.Object]; cu>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; HashUtils>
<freecs.core.User; getCookie[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.Throwable; getMessage[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; e>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.net.InetAddress; getCanonicalHostName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.conn.clientAddress>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu.getTemplateSet()>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; getName[]; cu>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.String; substring[int, int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cu>
<java.lang.Object; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; o>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.Group; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGroupname[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.Group; getTheme[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertGrouptheme[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<freecs.core.Group; getQuestionCounter[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<freecs.core.Group; userInGroupCount[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; UserManager.mgr>
<freecs.core.Group; getOpener[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; u>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; u>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; u.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; toString[]; u>
<freecs.core.User; getNoFadeColorUsername[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; u>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; u>
<freecs.core.Group; getOpener[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; cg>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; toUpperCase[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertMessage[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertReason[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; equals[java.lang.Object]; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.interfaces.IServerPlugin; canConvert[freecs.content.MessageState]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<freecs.interfaces.IServerPlugin; convertParam[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; svp[s]>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb_val>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; convert>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val_ok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ((User)msgState.usrList[i])>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.Object; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; curr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; sb>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ((User)item)>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<java.lang.Object; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; item>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.Object; toString[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.usrList[0]>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token>
<freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<freecs.Server; getFormatedTime[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Server.srv>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<java.util.Vector; size[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; UserManager.mgr.onlineVipList()>
<freecs.core.UserManager; onlineVipList[]; java.util.Vector<java.lang.Object>; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; size[]; UserManager.mgr>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; UserManager.mgr>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; valueOf[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; String>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; GroupManager.mgr>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; msgState.sender>
<java.lang.String; substring[int, int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; ts>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.Math; max[int, int]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; Math>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; toUpperCase[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; tok>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; val>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; EntityDecoder>
<freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; this>
<java.lang.String; trim[]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; token.substring(pos)>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; trim[]; token>
<freecs.core.Group; getThemeCreator[]; freecs.core.User; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; cg>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; msgState.sender>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; cg.getThemeCreator()>
<freecs.core.Group; getThemeCreator[]; freecs.core.User; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; getName[]; cg>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; UserManager.mgr>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; cg.getThemeCreator()>
<freecs.core.Group; getThemeCreator[]; freecs.core.User; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; getName[]; cg>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; u>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; u>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; u.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; toString[]; u>
<freecs.core.User; getNoFadeColorUsername[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; u>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; EntityDecoder>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; u>
<freecs.core.Group; getThemeCreator[]; freecs.core.User; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; cg>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; se>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; se>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; se.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; toString[]; se>
<freecs.core.User; getNoFadeColorUsername[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; se>
<java.lang.AbstractStringBuilder; trimToSize[]; void; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; val>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.core.MessageRenderer; renderGroupthemeCreator[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; val>
<freecs.core.User; getChattime[]; long; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; null; sb.append(h)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; null; sb.append(m)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; null; sb.append(s)>
<java.lang.StringBuffer; append[long]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderChattime[freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; msgState.sender>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; getCustomTitle[]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu.getCustomTitle()>
<freecs.core.User; getCustomTitle[]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; length[]; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; getCustomTitle[]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Membership; displayDefaultVipRighttitle[]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; defaultMembership>
<freecs.core.Membership; displayDefaultModGuesttitle[]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; defaultMembership>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.Membership; getName[]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; defaultMembership>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; val>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu.getGroup()>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; usrIsSu[freecs.core.User]; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderTitle[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sb>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; isPunished[]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; usrIsSu[freecs.core.User]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; TemplateManager.mgr>
<freecs.core.User; getTemplateSet[]; freecs.layout.TemplateSet; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; msgState.sender>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; getDefaultMembership[]; freecs.core.Membership; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.Membership; getNamePrefix[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; defaultMembership>
<freecs.core.Membership; getNameSuffix[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; defaultMembership>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; hasRight[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.Group; hasState[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; sg>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.core.User; hasRole[int]; boolean; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu.getFadeColorUsername()>
<freecs.core.User; getFadeColorUsername[]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; toString[]; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<freecs.core.User; getNoFadeColorUsername[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<freecs.util.EntityDecoder; charToHtml[java.lang.String]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; EntityDecoder>
<freecs.core.User; getName[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; cu>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderUserName[freecs.content.MessageState, freecs.core.User]; java.lang.String; null; tsb>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; startsWith[java.lang.String]; params>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; val>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; val>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; params>
<freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; val>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; prefix>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; replace[char, char]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; prefix>
<java.lang.String; indexOf[java.lang.String]; int; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; suffix>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String, boolean]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; this>
<java.lang.String; replace[char, char]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; suffix>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; renderValue[freecs.content.MessageState, java.lang.String, java.lang.String]; java.lang.String; null; sb>
<java.lang.String; trim[]; java.lang.String; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; params>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; params>
<java.lang.String; charAt[int]; char; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; params>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; tsb>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; tsb>
<java.lang.String; length[]; int; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; params>
<java.lang.String; trim[]; java.lang.String; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; params.substring(stop)>
<java.lang.String; substring[int]; java.lang.String; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; trim[]; params>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.core.MessageRenderer; retrieveParamValue[java.lang.String]; java.lang.String[]; null; tsb>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; null; Server.srv.defaultCsEnc>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; null; CharBuffer>
<java.nio.charset.Charset; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; null; Server.srv.defaultCs>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.core.MessageRenderer; encode[java.lang.String]; java.nio.ByteBuffer; null; CharBuffer>
<java.sql.Connection; setAutoCommit[boolean]; void; freecs.auth.sqlConnectionPool.PoolElement; PoolElement[freecs.auth.sqlConnectionPool.ConnectionPool, java.sql.Connection, freecs.auth.sqlConnectionPool.DbProperties, int]; void; null; con>
<java.lang.System; currentTimeMillis[]; long; freecs.auth.sqlConnectionPool.PoolElement; PoolElement[freecs.auth.sqlConnectionPool.ConnectionPool, java.sql.Connection, freecs.auth.sqlConnectionPool.DbProperties, int]; void; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; PoolElement[freecs.auth.sqlConnectionPool.ConnectionPool, java.sql.Connection, freecs.auth.sqlConnectionPool.DbProperties, int]; void; null; Server>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; PoolElement[freecs.auth.sqlConnectionPool.ConnectionPool, java.sql.Connection, freecs.auth.sqlConnectionPool.DbProperties, int]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; PoolElement[freecs.auth.sqlConnectionPool.ConnectionPool, java.sql.Connection, freecs.auth.sqlConnectionPool.DbProperties, int]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; isValid[]; boolean; null; Server>
<java.lang.System; currentTimeMillis[]; long; freecs.auth.sqlConnectionPool.PoolElement; isValid[]; boolean; null; System>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; isValid[]; boolean; null; Server>
<java.sql.Statement; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; select>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; Server>
<java.sql.Statement; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; insert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; Server>
<java.sql.Statement; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; update>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; Server>
<java.sql.Connection; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; con>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; Server>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; null; this>
<java.sql.Statement; getWarnings[]; java.sql.SQLWarning; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; s>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.sql.SQLException; getErrorCode[]; int; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sqlW>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.Object]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.lang.Throwable; getCause[]; java.lang.Throwable; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sqlW>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; Thread>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sb>
<java.sql.SQLWarning; getNextWarning[]; java.sql.SQLWarning; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; sqlW>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb.append(dbp.url).append("(").append(dbp.table)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; append[java.lang.String]; sb.append(dbp.url).append("(")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; append[java.lang.String]; sb.append(dbp.url)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; null; sb>
<freecs.auth.sqlConnectionPool.PoolElement; isValid[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; grab[]; short; null; this>
<java.sql.PreparedStatement; clearParameters[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; select>
<java.sql.Statement; clearWarnings[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; select>
<java.sql.PreparedStatement; clearParameters[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; update>
<java.sql.Statement; clearWarnings[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; update>
<java.sql.PreparedStatement; clearParameters[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; insert>
<java.sql.Statement; clearWarnings[]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; insert>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; release[]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; sb>
<java.sql.Connection; prepareStatement[java.lang.String, int, int]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; con>
<java.sql.Connection; prepareStatement[java.lang.String, int, int]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; con>
<java.sql.Connection; prepareStatement[java.lang.String, int, int]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; con>
<java.sql.Statement; setQueryTimeout[int]; void; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; select>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; sb>
<java.sql.Connection; prepareStatement[java.lang.String]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; con>
<java.sql.Statement; setQueryTimeout[int]; void; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; update>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; ps>
<java.lang.String; trim[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; username.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; trim[]; username>
<java.sql.PreparedStatement; executeQuery[]; java.sql.ResultSet; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; ps>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; username>
<freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; dbp>
<java.sql.ResultSet; next[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<java.sql.ResultSet; isLast[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; dbpwd>
<freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; Server>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; getSelect[]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; ps>
<java.lang.String; trim[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; u.getName().toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; trim[]; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; toLowerCase[]; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; toLowerCase[]; u>
<java.sql.PreparedStatement; executeQuery[]; java.sql.ResultSet; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; ps>
<freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; dbp>
<java.sql.ResultSet; next[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; u>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<java.sql.ResultSet; isLast[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; u>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; dbpwd>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<java.sql.ResultSet; close[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; rs>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; Server>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "userright">
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; length[]; int; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; val>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "null">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "true">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "yes">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "vip">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "admin">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "moderator">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "guest">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "asshole">
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Integer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; this>
<freecs.core.User; setPermission[int]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "id">
<freecs.core.User; setID[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "color">
<freecs.core.User; setColCode[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "fadecolor">
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "bgcolor">
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.core.User; setBgColCode[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "chattime">
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getLong[int]; long; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "lastlogin">
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getLong[int]; long; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSet; getTimestamp[int]; java.sql.Timestamp; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSet; wasNull[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.System; currentTimeMillis[]; long; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; System>
<java.lang.Long; parseLong[java.lang.String]; long; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Long>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.Timestamp; valueOf[java.lang.String]; java.sql.Timestamp; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Timestamp>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "friends">
<freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; pool.authenticator>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.util.List; iterator[]; java.util.Iterator<>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; users>
<java.util.Iterator; hasNext[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; it>
<freecs.core.User; addFriend[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.util.Iterator; next[]; ; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; it>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "ignorelist">
<freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; pool.authenticator>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.util.List; iterator[]; java.util.Iterator<>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; ignores>
<java.util.Iterator; hasNext[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; it>
<freecs.core.User; ignoreUser[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.util.Iterator; next[]; ; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; it>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "notifyfriends">
<freecs.core.User; setFriendsNotification[short]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getShort[int]; short; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.core.User; setFriendsNotification[short]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; pool.authenticator>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "customtitle">
<freecs.core.User; setCustomTitle[java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "blocked">
<freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; pool.authenticator>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; "activated">
<freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; pool.authenticator>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; this>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; u>
<java.lang.System; currentTimeMillis[]; long; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; System>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; dbp.nameV>
<java.sql.ResultSet; updateInt[int, int]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSet; updateLong[int, long]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSet; updateTimestamp[int, java.sql.Timestamp]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSet; updateString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.lang.String; valueOf[long]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; String>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; this>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; dbp.nameV>
<java.sql.ResultSet; updateString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; HashUtils>
<freecs.core.User; getCookie[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; nu>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; this>
<java.sql.ResultSet; updateRow[]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<java.sql.Connection; commit[]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; con>
<java.sql.ResultSet; cancelRowUpdates[]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; rs>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; getUpdate[]; java.sql.PreparedStatement; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "chattime">
<java.sql.PreparedStatement; setLong[int, long]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getChattime[]; long; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "userrights">
<java.sql.PreparedStatement; setInt[int, int]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getPermissionMap[]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "fadecolor">
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "bgcolor">
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getBgColCode[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "color">
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "friends">
<freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; equalsIgnoreCase[java.lang.String]; u>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "ignorelist">
<freecs.core.User; ignoreList[]; java.util.Enumeration<java.lang.String>; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; e>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; sb>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "notifyfriends">
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.sql.PreparedStatement; setInt[int, int]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; notifyFriends[]; short; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.sql.PreparedStatement; setBoolean[int, boolean]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; notifyFriends[]; short; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; notifyFriends[]; short; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "extratitle">
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getCustomTitle[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "cookie">
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "blocked">
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.sql.PreparedStatement; setInt[int, int]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.sql.PreparedStatement; setBoolean[int, boolean]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; "activated">
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.sql.PreparedStatement; setInt[int, int]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.sql.PreparedStatement; setBoolean[int, boolean]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.sql.PreparedStatement; setObject[int, java.lang.Object]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<freecs.core.User; getID[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<freecs.core.User; getID[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.sql.PreparedStatement; setString[int, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; toLowerCase[]; u>
<java.sql.PreparedStatement; executeUpdate[]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; ps>
<java.sql.Connection; commit[]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; con>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<freecs.core.User; getID[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; toLowerCase[]; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<freecs.core.User; getID[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; toLowerCase[]; u>
<java.sql.Connection; rollback[]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; con>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; Thread>
<freecs.auth.sqlConnectionPool.PoolElement; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; checkWarnings[java.sql.Statement, java.lang.String]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; this>
<java.sql.ResultSet; getString[int]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; null; rs>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; null; result>
<java.lang.String; replaceAll[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; null; result>
<freecs.util.EntityDecoder; convertFormattingCharacters[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; null; EntityDecoder>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; getEncodedString[java.sql.ResultSet, int]; java.lang.String; null; Server>
<java.lang.Thread; isInterrupted[]; boolean; freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.PoolElement; checkThread[]; void; isInterrupted[]; Thread>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.PoolElement; finalize[]; void; null; Server>
<freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; freecs.auth.sqlConnectionPool.SqlRunner; run[]; void; null; this>
<freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; freecs.auth.sqlConnectionPool.SqlRunner; run[]; void; null; this>
<freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; freecs.auth.sqlConnectionPool.SqlRunner; run[]; void; null; this>
<freecs.auth.sqlConnectionPool.ConnectionPool; size[]; int; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; connPool>
<freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; connPool>
<freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; el>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.SqlRunner; logoutUser[freecs.core.User]; void; null; Server>
<freecs.util.HashUtils; encodeMD5[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; HashUtils>
<freecs.interfaces.IRequest; getConnectionBuffer[]; freecs.core.ConnectionBuffer; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; request>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.ConnectionPool; size[]; int; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; connPool>
<java.lang.Thread; isInterrupted[]; boolean; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; curr>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; cb>
<freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; connPool>
<freecs.auth.sqlConnectionPool.PoolElement; loginUser[java.lang.String, java.lang.String, java.lang.String]; freecs.core.User; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<freecs.interfaces.IRequest; getConnectionBuffer[]; freecs.core.ConnectionBuffer; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; request>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Thread>
<freecs.auth.sqlConnectionPool.ConnectionPool; size[]; int; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; connPool>
<java.lang.Thread; isInterrupted[]; boolean; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; curr>
<freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; connPool>
<freecs.auth.sqlConnectionPool.PoolElement; loginUser[freecs.core.User, java.lang.String]; freecs.core.User; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; release[]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; el>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.SqlRunner; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; Class>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; new StringBuffer("Unable to load jdbc-driver '").append(props.getProperty("driver"))>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; append[java.lang.String]; new StringBuffer("Unable to load jdbc-driver '")>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; tsb>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; this>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "true">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "true">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "1">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "false">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "0">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; warnMsg>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; warnMsg>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; warnMsg>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; e>
<java.util.Enumeration; nextElement[]; ; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; e>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "id">
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "username">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "password">
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; key>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.lang.String; substring[int]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; key>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; key>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; val>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "chattime">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "userrights">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "color">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "cookie">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "fadecolor">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "bgcolor">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "friends">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; "ignorelist">
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; key>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; key>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updateMapping>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; e>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updateMapping>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; val>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; val>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; warnMsg>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; warnMsg>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; insert[int, int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; insert[int, java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; errMsg>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; Server>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.DbProperties; column4property[java.lang.String]; java.lang.String; null; nameV>
<java.lang.String; trim[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; column4property[java.lang.String]; java.lang.String; null; columns[idx]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; Thread>
<freecs.auth.sqlConnectionPool.DbProperties; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; this>
<java.sql.ResultSet; getMetaData[]; java.sql.ResultSetMetaData; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; rs>
<java.sql.ResultSetMetaData; getColumnCount[]; int; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; rsm>
<java.sql.ResultSetMetaData; getColumnCount[]; int; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; rsm>
<java.sql.ResultSetMetaData; getColumnType[int]; int; freecs.auth.sqlConnectionPool.DbProperties; cacheMetaData[java.sql.ResultSet]; void; null; rsm>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.DbProperties; finalize[]; void; null; Server>
<java.lang.Integer; parseInt[java.lang.String]; int; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; null; logger.append(".) SQLAuthenticator.").append(name).append(" was set to a value below zero. Corrected to default of ").append(def)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger.append(".) SQLAuthenticator.").append(name).append(" was set to a value below zero. Corrected to default of ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[int]; logger.append(".) SQLAuthenticator.").append(name)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger.append(".) SQLAuthenticator.")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; null; logger.append(".) SQLAuthenticator.").append(name).append(" wasn't a number. Corrected to default of ").append(def)>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger.append(".) SQLAuthenticator.").append(name).append(" wasn't a number. Corrected to default of ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[int]; logger.append(".) SQLAuthenticator.").append(name)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger.append(".) SQLAuthenticator.")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.sqlConnectionPool.DbProperties; parseInt[java.lang.String, java.lang.String, int, java.lang.StringBuffer]; int; append[java.lang.String]; logger>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.ConnectionPool; ConnectionPool[freecs.auth.SQLAuthenticator, freecs.auth.sqlConnectionPool.DbProperties]; void; append[java.lang.String]; Server>
<freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; freecs.auth.sqlConnectionPool.ConnectionPool; shutdown[]; void; null; pool[i]>
<java.sql.DriverManager; getConnection[java.lang.String, java.util.Properties]; java.sql.Connection; freecs.auth.sqlConnectionPool.ConnectionPool; createPoolElement[]; freecs.auth.sqlConnectionPool.PoolElement; null; DriverManager>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; cb>
<java.lang.Thread; isInterrupted[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; isInterrupted[]; Thread>
<freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Thread>
<java.lang.Object; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; this>
<freecs.Server; isRunning[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[int, freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Server.srv>
<freecs.core.ConnectionBuffer; isValid[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; cb>
<java.lang.Thread; isInterrupted[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Thread.currentThread()>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; isInterrupted[]; Thread>
<freecs.Server; isRunning[]; boolean; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Server.srv>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; sb>
<freecs.auth.sqlConnectionPool.ConnectionPool; createPoolElement[]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; this>
<freecs.auth.sqlConnectionPool.PoolElement; grab[]; short; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; pool[p]>
<freecs.auth.sqlConnectionPool.PoolElement; cleanup[]; void; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; pool[p]>
<freecs.auth.sqlConnectionPool.ConnectionPool; createPoolElement[]; freecs.auth.sqlConnectionPool.PoolElement; freecs.auth.sqlConnectionPool.ConnectionPool; getPoolElement[freecs.core.ConnectionBuffer]; freecs.auth.sqlConnectionPool.PoolElement; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.sqlConnectionPool.ConnectionPool; finalize[]; void; null; Server>
<java.lang.String; trim[]; java.lang.String; freecs.auth.NoAuthentication; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; username>
<freecs.Server; getConfigDir[]; java.io.File; freecs.auth.AuthManager; getDefaultConfigFile[]; java.io.File; null; Server.srv>
<java.util.Properties; load[java.io.InputStream]; void; freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; null; props>
<java.io.FileInputStream; close[]; void; freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; null; in>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; null; e>
<freecs.auth.AuthManager; init[java.io.File]; void; freecs.auth.AuthManager; init[]; void; null; this>
<freecs.auth.AuthManager; getDefaultConfigFile[]; java.io.File; freecs.auth.AuthManager; init[]; void; null; this>
<java.io.File; lastModified[]; long; freecs.auth.AuthManager; init[java.io.File]; void; null; configFile>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.auth.AuthManager; init[java.io.File]; void; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.auth.AuthManager; init[java.io.File]; void; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<freecs.auth.AuthManager; createAuthenticators[]; void; freecs.auth.AuthManager; init[java.io.File]; void; null; this>
<freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; freecs.auth.AuthManager; createAuthenticators[]; void; null; this>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; props.getProperty("allowUnregisteredUsers","false")>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; toLowerCase[]; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; "true">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; "1">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; "yes">
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; props>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; freecs.auth.AuthManager; createAuthenticators[]; void; null; Pattern>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; createAuthenticators[]; void; null; Server>
<java.util.StringTokenizer; hasMoreTokens[]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; tok>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; tok.nextToken()>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; trim[]; tok>
<java.lang.String; indexOf[java.lang.String]; int; freecs.auth.AuthManager; createAuthenticators[]; void; null; element>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; element.substring(element.indexOf(" ") + 1)>
<java.lang.String; substring[int]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; trim[]; element>
<java.lang.String; indexOf[java.lang.String]; int; freecs.auth.AuthManager; createAuthenticators[]; void; null; element>
<java.lang.String; substring[int, int]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; element>
<java.lang.String; indexOf[java.lang.String]; int; freecs.auth.AuthManager; createAuthenticators[]; void; null; element>
<java.lang.Package; getName[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; getClass().getPackage()>
<java.lang.Class; getPackage[]; java.lang.Package; freecs.auth.AuthManager; createAuthenticators[]; void; getName[]; getClass()>
<java.lang.Object; getClass[]; java.lang.Class<? extends freecs.auth.AuthManager>; freecs.auth.AuthManager; createAuthenticators[]; void; getPackage[]; this>
<java.lang.Class; newInstance[]; ; freecs.auth.AuthManager; createAuthenticators[]; void; null; Class.forName(className)>
<java.lang.Class; forName[java.lang.String]; java.lang.Class<?>; freecs.auth.AuthManager; createAuthenticators[]; void; newInstance[]; Class>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; createAuthenticators[]; void; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; ex>
<freecs.auth.IAuthenticator; init[java.util.Properties, java.lang.String]; void; freecs.auth.AuthManager; createAuthenticators[]; void; null; authObj>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; createAuthenticators[]; void; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; ex1>
<java.util.Vector; add[freecs.auth.IAuthenticator]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Vector; size[]; int; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Vector; add[freecs.auth.IAuthenticator]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; createAuthenticators[]; void; null; Server>
<java.util.Vector; toArray[freecs.auth.IAuthenticator[]]; freecs.auth.IAuthenticator[]; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<freecs.auth.IAuthenticator; shutdown[]; void; freecs.auth.AuthManager; shutdown[]; void; null; list[i]>
<java.lang.String; length[]; int; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; username.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; length[]; username>
<freecs.auth.IAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; list[i]>
<freecs.auth.IAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; list[i]>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; "">
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u.getName()>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; trim[]; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.lang.Object; toString[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; list[i]>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; AbstractCommand>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u.getColCode().trim()>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; toLowerCase[]; u.getColCode()>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; trim[]; u>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server.srv.templatemanager>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; req>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server.srv.templatemanager>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ts>
<freecs.auth.AuthManager; generateColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; AuthManager.instance>
<freecs.core.User; setColCode[java.lang.String]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.lang.Thread; currentThread[]; java.lang.Thread; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Thread>
<java.lang.Object; toString[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.commands.AbstractCommand; _isColorCodeValid[java.lang.String, boolean]; short; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; AbstractCommand>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u.getFadeColCode().trim()>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; toLowerCase[]; u.getFadeColCode()>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; trim[]; u>
<java.lang.String; length[]; int; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u.getFadeColCode()>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; length[]; u>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; setFadeColorUsername[java.lang.StringBuffer]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; FadeColor>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; msListClone>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; MembershipManager.instance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ml>
<java.lang.StringBuilder; append[java.lang.String]; java.lang.StringBuilder; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ml>
<java.lang.AbstractStringBuilder; length[]; int; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ml>
<java.lang.AbstractStringBuilder; trimToSize[]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ml>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ml>
<freecs.auth.AuthManager; isStandart[java.lang.String]; boolean; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; freecs.auth.AuthManager; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.lang.String; length[]; int; freecs.auth.AuthManager; isStandart[java.lang.String]; boolean; null; mslist>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; null; list>
<freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; null; MembershipManager.instance>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; null; Server>
<freecs.core.Membership; add[freecs.core.User]; void; freecs.auth.AuthManager; setMembership[freecs.core.User, java.lang.String]; void; null; cms>
<java.util.regex.Pattern; compile[java.lang.String]; java.util.regex.Pattern; freecs.auth.AuthManager; updateUsernamePattern[java.lang.String]; void; null; Pattern>
<java.util.regex.Pattern; matcher[java.lang.CharSequence]; java.util.regex.Matcher; freecs.auth.AuthManager; isValidName[java.lang.String]; boolean; null; userNamePattern>
<java.util.regex.Matcher; matches[]; boolean; freecs.auth.AuthManager; isValidName[java.lang.String]; boolean; null; m>
<freecs.auth.IAuthenticator; logoutUser[freecs.core.User]; void; freecs.auth.AuthManager; logoutUser[freecs.core.User]; void; null; list[i]>
<freecs.interfaces.IRequest; getConnectionObject[]; freecs.content.Connection; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; grp>
<freecs.Server; isTokenValid[java.lang.String, java.lang.String]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; cReq>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; isBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; isTrafficBanned[java.lang.Object]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<java.lang.System; currentTimeMillis[]; long; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; System>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; UserManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.content.Connection; isBanable[]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server.srv>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; u>
<freecs.core.User; setHTTP11[boolean]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; u>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; g>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.core.User; setTemplateSet[freecs.layout.TemplateSet]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; u>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; GroupManager.mgr>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.core.Group; getRawName[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; g>
<freecs.core.Group; addUser[freecs.core.User]; boolean; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; g>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<freecs.core.User; setTemplateSet[freecs.layout.TemplateSet]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; u>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.Connection; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; conn>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; sb>
<freecs.content.ContentContainer; setTemplate[java.lang.String]; void; freecs.auth.AuthManager; doLogin[freecs.interfaces.IRequest, java.nio.channels.SelectionKey, java.lang.String, freecs.content.ContentContainer, freecs.layout.TemplateSet, freecs.core.User, boolean, freecs.core.RequestReader]; void; null; c>
<java.lang.Math; round[double]; long; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.Math; random[]; double; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.Math; round[double]; long; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.Math; random[]; double; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.Math; round[double]; long; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.Math; random[]; double; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Math>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Integer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; Integer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AuthManager; generateColCode[]; java.lang.String; null; sb>
<java.io.File; exists[]; boolean; freecs.auth.AuthManager; filePresent[]; boolean; null; configFile>
<java.io.File; lastModified[]; long; freecs.auth.AuthManager; changed[]; void; null; configFile>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.AuthManager; changed[]; void; null; Server>
<freecs.auth.AuthManager; shutdown[]; void; freecs.auth.AuthManager; changed[]; void; null; this>
<freecs.auth.AuthManager; createAuthenticators[]; void; freecs.auth.AuthManager; changed[]; void; null; this>
<freecs.auth.AuthManager; changed[]; void; freecs.auth.AuthManager; created[]; void; null; this>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; this>
<freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; sb.append(dbProps.url).append("(").append(dbProps.table)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; append[java.lang.String]; sb.append(dbProps.url).append("(")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; append[java.lang.String]; sb.append(dbProps.url)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; append[java.lang.String]; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; sb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<freecs.auth.sqlConnectionPool.ConnectionPool; shutdown[]; void; freecs.auth.SQLAuthenticator; shutdown[]; void; null; conPool>
<freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; freecs.auth.SQLAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.lang.Thread; join[]; void; freecs.auth.SQLAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; t>
<java.lang.Thread; interrupt[]; void; freecs.auth.SQLAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; t>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; new StringBuffer("Login timed out for user ")>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.SQLAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; sb>
<freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.lang.Thread; join[]; void; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; t>
<java.lang.Thread; interrupt[]; void; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; t>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; new StringBuffer("Login timed out for user ")>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.SQLAuthenticator; loginUser[freecs.core.User, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; sb>
<freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; freecs.auth.SQLAuthenticator; logoutUser[freecs.core.User]; void; null; this>
<java.lang.ThreadGroup; activeCount[]; int; freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; null; threadGroup>
<freecs.auth.sqlConnectionPool.ConnectionPool; size[]; int; freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; null; conPool>
<java.lang.Thread; start[]; void; freecs.auth.SQLAuthenticator; startThread[freecs.auth.sqlConnectionPool.SqlRunner]; java.lang.Thread; null; t>
<freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; freecs.auth.AbstractAuthenticator; init[java.util.Properties, java.lang.String]; void; null; this>
<java.lang.String; length[]; int; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; friendslist>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; friendslist>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; friendslist>
<java.lang.String; trim[]; java.lang.String; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; friendsArray[i]>
<java.lang.String; length[]; int; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; friend>
<freecs.auth.AuthManager; isValidName[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; Server.srv.auth>
<java.util.List; add[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; users>
<java.lang.Boolean; booleanValue[]; boolean; freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; null; ((Boolean)value)>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; null; "true">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; null; "1">
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; null; "yes">
<java.lang.Number; intValue[]; int; freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; null; ((Number)value)>
<java.lang.Object; getClass[]; java.lang.Class<? extends freecs.auth.AbstractAuthenticator>; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; null; this>
<java.lang.Package; getName[]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; null; clazz.getPackage()>
<java.lang.Class; getPackage[]; java.lang.Package; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; getName[]; clazz>
<java.lang.String; substring[int]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; null; clazz.getName()>
<java.lang.Class; getName[]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; substring[int]; clazz>
<java.lang.String; length[]; int; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; null; packageName>
<freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties]; java.util.Properties; null; this>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; props>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; e>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; e>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; key>
<java.lang.String; substring[int]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; key>
<java.lang.String; length[]; int; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; prefix>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; props>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; newProps>
<java.lang.Object; getClass[]; java.lang.Class<? extends freecs.auth.AbstractAuthenticator>; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; this>
<java.lang.Package; getName[]; java.lang.String; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; clazz.getPackage()>
<java.lang.Class; getPackage[]; java.lang.Package; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; getName[]; clazz>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; sb>
<java.lang.String; substring[int]; java.lang.String; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; clazz.getName()>
<java.lang.Class; getName[]; java.lang.String; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; substring[int]; clazz>
<java.lang.String; length[]; int; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; packageName>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; sb.append(" ")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.auth.AbstractAuthenticator; toString[]; java.lang.String; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<not found; setServerURL[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; config>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<not found; setEnabledForExtensions[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; config>
<not found; setConnectionTimeout[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; config>
<not found; setReplyTimeout[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; config>
<not found; setTransportFactory[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; client>
<not found; setConfig[]; not found; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; client>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<java.lang.Throwable; toString[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; wrongurl>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; cookie.trim()>
<java.lang.String; trim[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; equals[java.lang.Object]; cookie>
<freecs.interfaces.IRequest; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; request>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; "session">
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<not found; execute[]; not found; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; client>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; "1">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; "true">
<java.lang.Boolean; equals[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Boolean.TRUE>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.lang.Integer; intValue[]; int; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ((Integer)userdata.get("errorcode"))>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; intValue[]; userdata>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; usr>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.core.User; setColCode[java.lang.String]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.core.User; setFadeColCode[java.lang.String]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.Long; valueOf[java.lang.String]; java.lang.Long; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; Long>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.core.User; setID[java.lang.String]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.Object; toString[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ((Number)obj)>
<freecs.core.User; setID[java.lang.String]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.lang.Number; longValue[]; long; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ((Number)obj)>
<freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.util.Date; getTime[]; long; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; ((Date)obj)>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.List; iterator[]; java.util.Iterator<java.lang.String>; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; users>
<java.util.Iterator; hasNext[]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; i>
<freecs.core.User; addFriend[java.lang.String]; void; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; u>
<java.util.Iterator; next[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; i>
<freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<freecs.auth.AbstractAuthenticator; parseBoolean[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; this>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.lang.String; length[]; int; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; logoutMethod>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<freecs.core.User; getName[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; u>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.lang.Long; intValue[]; int; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; new Long(u.getChattime())>
<freecs.core.User; getChattime[]; long; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; intValue[]; u>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<freecs.core.User; getColCode[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; u>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<freecs.core.User; getFadeColCode[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; u>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<freecs.core.User; getCookie[]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; u>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<freecs.core.User; getProperty[java.lang.String]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; u>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; params>
<not found; execute[]; not found; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; client>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; Server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.PersonalizedMessage; PersonalizedMessage[java.nio.ByteBuffer, boolean]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.PersonalizedMessage; PersonalizedMessage[java.nio.ByteBuffer]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.PersonalizedMessage; finalize[]; void; null; Server>
<freecs.core.ConnectionBuffer; getKey[]; java.nio.channels.SelectionKey; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; cb>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; Charset>
<java.nio.charset.Charset; newDecoder[]; java.nio.charset.CharsetDecoder; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; c>
<java.nio.charset.CharsetDecoder; decode[java.nio.ByteBuffer]; java.nio.CharBuffer; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; ce>
<java.nio.CharBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; cbuf>
<java.nio.ByteBuffer; array[]; byte[]; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; buf>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; HTTPRequest[java.nio.ByteBuffer, freecs.core.ConnectionBuffer]; void; null; Server>
<freecs.core.CentralSelector; isSkValid[java.nio.channels.SelectionKey]; boolean; freecs.content.HTTPRequest; parse[]; void; null; CentralSelector>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; request>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; parts[0]>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; hf[0]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; "GET">
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; "POST">
<freecs.content.HTTPRequest; parseAction[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; values[2]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; parts[1].substring(parts[1].length() - 2)>
<java.lang.String; substring[int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; equals[java.lang.Object]; parts[1]>
<java.lang.String; length[]; int; freecs.content.HTTPRequest; parse[]; void; null; parts[1]>
<java.lang.String; substring[int, int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; parts[1]>
<java.lang.String; length[]; int; freecs.content.HTTPRequest; parse[]; void; null; parts[1]>
<java.lang.String; indexOf[java.lang.String]; int; freecs.content.HTTPRequest; parse[]; void; null; action>
<java.lang.String; substring[int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; action>
<java.lang.String; substring[int, int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; action>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; rest>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; prt[i]>
<java.net.URLDecoder; decode[java.lang.String, java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; URLDecoder>
<java.net.URLDecoder; decode[java.lang.String, java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; URLDecoder>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; keyval[1]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; new StringBuffer("v_")>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; keyval[0]>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.String; indexOf[java.lang.String]; int; freecs.content.HTTPRequest; parse[]; void; null; hf[i]>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; hf[i].substring(0,dp).trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; toLowerCase[]; hf[i].substring(0,dp)>
<java.lang.String; substring[int, int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; trim[]; hf[i]>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; hf[i].substring(dp + 1)>
<java.lang.String; substring[int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; trim[]; hf[i]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.content.HTTPRequest; parse[]; void; null; InetAddress>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; "localhost">
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.SERVER_NAME>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.content.HTTPRequest; parse[]; void; null; e>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; e>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; hst>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.props>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; "80">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.COOKIE_DOMAIN.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; split[java.lang.String]; Server.srv.COOKIE_DOMAIN>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; cd[c].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; toLowerCase[]; cd[c]>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; cd[c].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; toLowerCase[]; cd[c]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; hst>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.net.InetAddress; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; ia>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.SERVER_NAME>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.content.HTTPRequest; parse[]; void; null; le>
<java.util.Enumeration; nextElement[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; le>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; hst>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.COOKIE_DOMAIN.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; split[java.lang.String]; Server.srv.COOKIE_DOMAIN>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; cd[co].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; toLowerCase[]; cd[co]>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; hst>
<java.lang.String; endsWith[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; hst>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; substring[int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.lang.String; indexOf[java.lang.String]; int; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.lang.String; indexOf[java.lang.String]; int; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.lang.String; substring[int, int]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.util.Vector; elements[]; java.util.Enumeration<java.net.InetAddress>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.allowedLoginHosts>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.content.HTTPRequest; parse[]; void; null; e>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.content.HTTPRequest; parse[]; void; null; InetAddress>
<java.lang.String; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; value>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.net.InetAddress; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; ((InetAddress)e.nextElement())>
<java.util.Enumeration; nextElement[]; java.net.InetAddress; freecs.content.HTTPRequest; parse[]; void; equals[java.lang.Object]; e>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; cookiePair[j].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; split[java.lang.String]; cookiePair[j]>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; cookiePair[j].trim()>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; startsWith[java.lang.String]; cookiePair[j]>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; cp[1]>
<freecs.util.CookieGenerator; checkValidity[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; CookieGenerator>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; value>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.HTTPRequest; parse[]; void; null; key>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.content.HTTPRequest; parse[]; void; null; InetAddress>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.HTTPRequest; parse[]; void; null; Server>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; parts[1]>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.HTTPRequest; parse[]; void; null; hf[i]>
<freecs.util.EntityDecoder; entityToChar[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; EntityDecoder>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.content.HTTPRequest; parse[]; void; null; pair[0]>
<freecs.util.EntityDecoder; entityToHtml[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; EntityDecoder>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; pair[1]>
<freecs.util.EntityDecoder; entityToChar[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; EntityDecoder>
<java.lang.String; trim[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; pair[1]>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.HTTPRequest; parse[]; void; null; new StringBuffer("v_")>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; tsb>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; getProperty[java.lang.String]; java.lang.String; null; props>
<freecs.content.HTTPRequest; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; getValue[java.lang.String]; java.lang.String; null; this>
<java.lang.String; length[]; int; freecs.content.HTTPRequest; parseAction[java.lang.String]; java.lang.String; null; rawAction>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.content.HTTPRequest; parseAction[java.lang.String]; java.lang.String; null; rawAction>
<java.lang.String; indexOf[java.lang.String, int]; int; freecs.content.HTTPRequest; parseAction[java.lang.String]; java.lang.String; null; rawAction>
<java.lang.String; substring[int]; java.lang.String; freecs.content.HTTPRequest; parseAction[java.lang.String]; java.lang.String; null; rawAction>
<freecs.content.HTTPRequest; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; getCookie[java.lang.String]; java.lang.String; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; getCookieDomain[]; java.lang.String; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.HTTPRequest; finalize[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ActionstoreObject; ActionstoreObject[int, java.lang.String, java.lang.String, java.lang.String, long]; void; null; Server>
<freecs.content.MessageState; clear[]; void; freecs.content.MessageState; MessageState[freecs.core.MessageParser]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.MessageState; MessageState[freecs.core.MessageParser]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.MessageState; finalize[]; void; null; Server>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.content.Connection; Connection[java.nio.channels.SelectionKey]; void; null; ((SocketChannel)sk.channel()).socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.content.Connection; Connection[java.nio.channels.SelectionKey]; void; getInetAddress[]; ((SocketChannel)sk.channel())>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.content.Connection; Connection[java.nio.channels.SelectionKey]; void; socket[]; sk>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.content.Connection; Connection[java.nio.channels.SelectionKey]; void; null; peerAddress>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.Connection; Connection[java.nio.channels.SelectionKey]; void; null; Server>
<java.net.Socket; getInetAddress[]; java.net.InetAddress; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; ((SocketChannel)sk.channel()).socket()>
<java.nio.channels.SocketChannel; socket[]; java.net.Socket; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; getInetAddress[]; ((SocketChannel)sk.channel())>
<java.nio.channels.SelectionKey; channel[]; java.nio.channels.SelectableChannel; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; socket[]; sk>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; peerAddress>
<java.lang.String; indexOf[java.lang.String]; int; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; fwChain[0]>
<java.net.InetAddress; getByName[java.lang.String]; java.net.InetAddress; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; InetAddress>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; clientAddress>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; Server>
<java.net.InetAddress; getHostAddress[]; java.lang.String; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; clientAddress>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.Connection; Connection[java.nio.channels.SelectionKey, java.lang.String[], boolean]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.Connection; toString[]; java.lang.String; null; sb>
<java.lang.String; length[]; int; freecs.content.Connection; isBanable[]; boolean; null; fwChain[0]>
<java.lang.String; length[]; int; freecs.content.Connection; hasAnoProxy[]; boolean; null; fwChain[0]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.Connection; equals[java.lang.Object]; boolean; null; this.clientIp>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.Connection; equals[java.lang.Object]; boolean; null; this.peerIp>
<java.lang.Object; equals[java.lang.Object]; boolean; freecs.content.Connection; equals[java.lang.Object]; boolean; null; this.fwChain>
<java.lang.String; hashCode[]; int; freecs.content.Connection; hashCode[]; int; null; (this.clientIp + "/" + this.peerIp)>
<java.lang.String; hashCode[]; int; freecs.content.Connection; hashCode[]; int; null; this.peerIp>
<java.lang.String; hashCode[]; int; freecs.content.Connection; hashCode[]; int; null; this.clientIp>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; getBanKey[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; getBanKey[]; java.lang.String; null; sb.append(":")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.Connection; getBanKey[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.Connection; getBanKey[]; java.lang.String; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.Connection; finalize[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ContentContainer; ContentContainer[]; void; null; Server>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb.append("\r\nETag: \"").append(eTag)>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; append[java.lang.String]; sb.append("\r\nETag: \"")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; append[java.lang.String]; sb>
<freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.String; length[]; int; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.Integer; toHexString[int]; java.lang.String; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; Integer>
<java.lang.String; length[]; int; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; trimToSize[]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; "iso-8859-1">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; trimToSize[]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; trimToSize[]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; null; sb>
<java.lang.String; split[java.lang.String]; java.lang.String[]; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; defaultTs.toString()>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; split[java.lang.String]; defaultTs>
<java.util.Vector; addElement[java.lang.String]; void; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; values[i]>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; t>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; scn>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; Server.srv.templatemanager>
<freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; ts>
<freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; ts>
<freecs.layout.Template; isRedirect[]; boolean; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; this>
<freecs.layout.Template; getDestination[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; req>
<freecs.layout.Template; hasToBeRendered[java.lang.String, long]; boolean; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<freecs.interfaces.IRequest; getProperty[java.lang.String]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; req>
<freecs.util.HttpDateParser; parseDate[java.lang.String]; long; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; HttpDateParser>
<freecs.interfaces.IRequest; getProperty[java.lang.String]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<java.lang.String; length[]; int; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; cntnt>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; Server>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<freecs.layout.Template; getName[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String]; void; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; this>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; sb>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; req>
<freecs.layout.Template; notCacheable[]; boolean; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<freecs.content.ContentContainer; wrap[java.lang.String, java.lang.String, java.lang.String]; void; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; this>
<freecs.layout.Template; getEtag[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; tpl>
<freecs.interfaces.IRequest; getCookieDomain[]; java.lang.String; freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; null; req>
<java.nio.CharBuffer; length[]; int; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; null; cb>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; null; Charset.forName("iso-8859-1").newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; encode[java.nio.CharBuffer]; Charset.forName("iso-8859-1")>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; newEncoder[]; Charset>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; null; Server>
<java.nio.Buffer; capacity[]; int; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; hdr>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; Charset.forName("iso-8859-1").newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; encode[java.nio.CharBuffer]; Charset.forName("iso-8859-1")>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; newEncoder[]; Charset>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; Charset.forName(Server.srv.DEFAULT_CHARSET).newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; encode[java.nio.CharBuffer]; Charset.forName(Server.srv.DEFAULT_CHARSET)>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; newEncoder[]; Charset>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; ByteBuffer>
<java.nio.Buffer; capacity[]; int; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; hdrBytes>
<java.nio.Buffer; capacity[]; int; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; cntntBytes>
<java.nio.ByteBuffer; put[java.nio.ByteBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; buf>
<java.nio.ByteBuffer; put[java.nio.ByteBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; buf>
<java.nio.Buffer; flip[]; java.nio.Buffer; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; buf>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; null; Server>
<freecs.content.ContentContainer; renderTemplate[freecs.interfaces.IRequest]; void; freecs.content.ContentContainer; prepareForSending[freecs.interfaces.IRequest]; boolean; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; setContent[byte[]]; void; null; sb>
<java.nio.charset.CharsetEncoder; encode[java.nio.CharBuffer]; java.nio.ByteBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; Charset.forName("iso-8859-1").newEncoder()>
<java.nio.charset.Charset; newEncoder[]; java.nio.charset.CharsetEncoder; freecs.content.ContentContainer; setContent[byte[]]; void; encode[java.nio.CharBuffer]; Charset.forName("iso-8859-1")>
<java.nio.charset.Charset; forName[java.lang.String]; java.nio.charset.Charset; freecs.content.ContentContainer; setContent[byte[]]; void; newEncoder[]; Charset>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.ContentContainer; setContent[byte[]]; void; null; Server>
<java.nio.ByteBuffer; wrap[byte[]]; java.nio.ByteBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; ByteBuffer>
<java.lang.String; getBytes[java.lang.String]; byte[]; freecs.content.ContentContainer; setContent[byte[]]; void; null; cb.toString()>
<java.nio.CharBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; setContent[byte[]]; void; getBytes[java.lang.String]; cb>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.content.ContentContainer; setContent[byte[]]; void; null; Server>
<java.nio.ByteBuffer; allocate[int]; java.nio.ByteBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; ByteBuffer>
<java.nio.Buffer; capacity[]; int; freecs.content.ContentContainer; setContent[byte[]]; void; null; tempBuffer>
<java.nio.ByteBuffer; put[byte[]]; java.nio.ByteBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; this.buf>
<java.nio.ByteBuffer; array[]; byte[]; freecs.content.ContentContainer; setContent[byte[]]; void; null; tempBuffer>
<java.nio.ByteBuffer; put[byte[]]; java.nio.ByteBuffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; this.buf>
<java.nio.Buffer; flip[]; java.nio.Buffer; freecs.content.ContentContainer; setContent[byte[]]; void; null; this.buf>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; length[]; int; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; cntnt>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; appendCookie[java.lang.StringBuffer, java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; "iso-8859-1">
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer]; void; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; CharBuffer>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; sb>
<freecs.content.ContentContainer; prepareForSending[java.nio.CharBuffer, java.nio.CharBuffer]; void; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; this>
<java.nio.CharBuffer; wrap[java.lang.CharSequence]; java.nio.CharBuffer; freecs.content.ContentContainer; setRedirectTo[java.lang.String, java.lang.String]; void; null; CharBuffer>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.ContentContainer; finalize[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.BanObject; BanObject[java.lang.String, java.lang.String, long]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.BanObject; equals[java.lang.Object]; boolean; null; this.usr>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.BanObject; equals[java.lang.Object]; boolean; null; this.cookie>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.BanObject; equals[java.lang.Object]; boolean; null; this.con.getBanKey()>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.content.BanObject; equals[java.lang.Object]; boolean; equals[java.lang.Object]; this.con>
<freecs.content.Connection; getBanKey[]; java.lang.String; freecs.content.BanObject; equals[java.lang.Object]; boolean; null; bo.con>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.content.BanObject; equals[java.lang.Object]; boolean; null; this.email>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.content.BanObject; finalize[]; void; null; Server>
<freecs.layout.TemplateManager; loadTemplates[]; void; freecs.layout.TemplateManager; TemplateManager[]; void; null; this>
<java.io.File; lastModified[]; long; freecs.layout.TemplateManager; TemplateManager[]; void; null; reloadable>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.layout.TemplateManager; TemplateManager[]; void; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.layout.TemplateManager; TemplateManager[]; void; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.layout.TemplateManager; getTemplateSet[]; freecs.layout.TemplateSet; null; this>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.TemplateManager; loadTemplates[]; void; null; new StringBuffer(Server.BASE_PATH)>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.TemplateManager; loadTemplates[]; void; null; tsb>
<java.io.File; exists[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; mkdir[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.TemplateManager; loadTemplates[]; void; null; new StringBuffer(Server.BASE_PATH)>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.TemplateManager; loadTemplates[]; void; null; tsb>
<java.io.File; exists[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; mkdir[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; isDirectory[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; getCanonicalPath[]; java.lang.String; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; exists[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; defaultTs>
<freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; freecs.layout.TemplateManager; loadTemplates[]; void; null; this>
<java.io.File; listFiles[]; java.io.File[]; freecs.layout.TemplateManager; loadTemplates[]; void; null; tFile>
<java.io.File; isDirectory[]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; fList[i]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; fList[i].getName()>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateManager; loadTemplates[]; void; equals[java.lang.Object]; fList[i]>
<freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; freecs.layout.TemplateManager; loadTemplates[]; void; null; this>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tSets>
<freecs.layout.TemplateSet; isValide[]; boolean; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tSet>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tsb>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tSet>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; Server>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tsb>
<java.util.HashMap; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tSets>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; f>
<java.io.File; exists[]; boolean; freecs.layout.TemplateManager; filePresent[]; boolean; null; reloadable>
<java.io.File; lastModified[]; long; freecs.layout.TemplateManager; changed[]; void; null; reloadable>
<java.io.File; isDirectory[]; boolean; freecs.layout.TemplateManager; changed[]; void; null; reloadable>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateManager; changed[]; void; null; Server>
<java.io.File; listFiles[]; java.io.File[]; freecs.layout.TemplateManager; changed[]; void; null; reloadable>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; changed[]; void; null; tSets>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateManager; changed[]; void; null; files[i]>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateManager; changed[]; void; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateManager; changed[]; void; null; files[i]>
<freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; freecs.layout.TemplateManager; changed[]; void; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.layout.TemplateManager; changed[]; void; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateManager; changed[]; void; null; files[i]>
<freecs.layout.TemplateSet; reload[java.io.File]; void; freecs.layout.TemplateManager; changed[]; void; null; ts>
<java.util.Set; iterator[]; java.util.Iterator; freecs.layout.TemplateManager; changed[]; void; null; this.tSets.keySet()>
<java.util.HashMap; keySet[]; java.util.Set; freecs.layout.TemplateManager; changed[]; void; iterator[]; this.tSets>
<java.util.Iterator; hasNext[]; boolean; freecs.layout.TemplateManager; changed[]; void; null; i>
<java.util.Iterator; next[]; java.lang.Object; freecs.layout.TemplateManager; changed[]; void; null; i>
<java.io.File; exists[]; boolean; freecs.layout.TemplateManager; changed[]; void; null; subdir>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateManager; changed[]; void; null; Server>
<java.util.Iterator; remove[]; void; freecs.layout.TemplateManager; changed[]; void; null; i>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateManager; removed[]; void; null; Server>
<freecs.layout.TemplateManager; changed[]; void; freecs.layout.TemplateManager; created[]; void; null; this>
<freecs.layout.Template; generateETag[]; java.lang.String; freecs.layout.Template; hasToBeRendered[java.lang.String, long]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; hasToBeRendered[java.lang.String, long]; boolean; null; eTag>
<java.lang.String; indexOf[java.lang.String]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; replaceFirst[java.lang.String, java.lang.String]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; indexOf[java.lang.String]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; replaceFirst[java.lang.String, java.lang.String]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#active_users">
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.core.UserManager; getActiveUserCount[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#active_user_list">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.layout.Template; generateUserList[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; this>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#users_in_group">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; this>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#open_groups">
<java.lang.StringBuffer; append[int]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.core.GroupManager; openGroupsCount[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; GroupManager.mgr>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#bgcolor">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; this>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#userstate_fonly">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; this>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#selve">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.interfaces.IRequest; getUrl[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.interfaces.IRequest; getUrl[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; req>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.Server; getUrl[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Server.srv>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#token">
<java.lang.StringBuffer; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; c>
<java.lang.Math; ceil[double]; double; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Math>
<java.lang.Math; random[]; double; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Math>
<java.lang.StringBuffer; append[char]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; c>
<java.lang.StringBuffer; append[java.lang.StringBuffer]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<freecs.Server; addToken[java.lang.String, java.lang.String]; void; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Server.srv>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; c>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; req>
<java.lang.String; regionMatches[boolean, int, java.lang.String, int, int]; boolean; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part>
<java.lang.String; length[]; int; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; "#config.">
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Server.srv.props>
<java.lang.String; trim[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; part.substring(8)>
<java.lang.String; substring[int]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; trim[]; part>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; retVal>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; null; sb>
<java.lang.Long; toHexString[long]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; Long>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; null; sb.append("pc")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.Long; toHexString[long]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; Long>
<freecs.Server; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; Server.srv>
<freecs.Server; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; Server.srv>
<freecs.Server; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; Server.srv>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; null; sb.append("puc")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.Long; toHexString[long]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; Long>
<freecs.core.UserManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; UserManager.mgr>
<freecs.core.UserManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; UserManager.mgr>
<freecs.core.UserManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; UserManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; null; sb.append("pgc")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.Long; toHexString[long]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; Long>
<freecs.core.GroupManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<freecs.core.GroupManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<freecs.core.GroupManager; lastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; null; sb.append("pgl")>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateETag[]; java.lang.String; append[java.lang.String]; sb>
<java.lang.Long; toHexString[long]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; Long>
<freecs.core.GroupManager; groupListLastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<freecs.core.GroupManager; groupListLastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<freecs.core.GroupManager; groupListLastModified[]; long; freecs.layout.Template; generateETag[]; java.lang.String; null; GroupManager.mgr>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; generateETag[]; java.lang.String; null; sb>
<freecs.layout.TemplateSet; getName[]; java.lang.String; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; ts>
<java.io.File; getName[]; java.lang.String; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; tpl>
<java.lang.String; indexOf[java.lang.String]; int; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; name>
<java.lang.String; substring[int, int]; java.lang.String; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; name>
<java.io.File; lastModified[]; long; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; tpl>
<freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; this>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.layout.Template; Template[java.io.File, freecs.layout.TemplateSet]; void; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<java.lang.String; length[]; int; freecs.layout.Template; isValide[]; boolean; null; destination>
<java.io.File; canRead[]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tpl>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; new StringBuffer("Unable to read template '").append(tpl.getName())>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; append[java.lang.String]; new StringBuffer("Unable to read template '")>
<java.io.File; getName[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tpl>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tsb>
<java.io.File; length[]; long; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tpl>
<java.io.Reader; read[char[]]; int; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; fr>
<java.lang.String; copyValueOf[char[]]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; String>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; raw.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; startsWith[java.lang.String]; raw>
<java.lang.String; trim[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; raw.substring(raw.lastIndexOf("#") + 1)>
<java.lang.String; substring[int]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; trim[]; raw>
<java.lang.String; lastIndexOf[java.lang.String]; int; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; raw>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; destination.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; startsWith[java.lang.String]; destination>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; new StringBuffer("http://")>
<freecs.Server; getUrl[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; Server.srv>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tsb>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; destination.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; startsWith[java.lang.String]; destination>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; new StringBuffer("http://")>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tsb>
<java.util.StringTokenizer; hasMoreElements[]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tok>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; curr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; curr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; curr>
<java.util.StringTokenizer; nextToken[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; tok>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; curr>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.lang.String; trim[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; curr>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; startsWith[java.lang.String]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; cplh.toLowerCase()>
<java.lang.String; toLowerCase[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; equals[java.lang.Object]; cplh>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<freecs.Server; getVersion[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; Server>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.lang.StringBuffer; length[]; int; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPart>
<java.lang.StringBuffer; length[]; int; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; currPlaceHolder>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; u>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; GroupManager.mgr>
<freecs.layout.Template; generateUserList[freecs.content.MessageState, freecs.core.Group]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; this>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; MessageRenderer>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; msg>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.core.User; getBgColCode[]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; u>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; msg>
<freecs.core.User; getBgColCode[]; java.lang.String; freecs.layout.Template; getBgcolor[freecs.interfaces.IRequest]; java.lang.String; null; u>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.interfaces.IRequest; getValue[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.core.UserManager; getUserByName[java.lang.String]; freecs.core.User; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.interfaces.IRequest; getCookie[]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; req>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.core.User; getGroup[]; freecs.core.Group; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; u>
<freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; GroupManager.mgr>
<freecs.core.Group; hasState[int]; boolean; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; g>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; msg>
<freecs.core.UserManager; getUserByCookie[java.lang.String]; freecs.core.User; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; UserManager.mgr>
<freecs.core.Group; hasState[int]; boolean; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; g>
<freecs.core.User; isFriendsOnly[]; boolean; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; u>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; msg>
<freecs.core.Group; hasState[int]; boolean; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; g>
<freecs.core.User; isFriendsOnly[]; boolean; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; u>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; ts>
<java.lang.StringBuilder; toString[]; java.lang.String; freecs.layout.Template; fonly[freecs.interfaces.IRequest]; java.lang.String; null; msg>
<freecs.commands.AbstractCommand; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; java.lang.String; freecs.layout.Template; generateUserList[freecs.content.MessageState, freecs.core.Group]; java.lang.String; null; ((AbstractCommand)CommandSet.getCommandSet().getCommand("/wc"))>
<freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; freecs.layout.Template; generateUserList[freecs.content.MessageState, freecs.core.Group]; java.lang.String; generateUserList[freecs.content.MessageState, boolean, freecs.layout.TemplateSet]; CommandSet.getCommandSet()>
<freecs.commands.CommandSet; getCommandSet[]; freecs.commands.CommandSet; freecs.layout.Template; generateUserList[freecs.content.MessageState, freecs.core.Group]; java.lang.String; getCommand[java.lang.String]; CommandSet>
<freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; freecs.layout.Template; generateUserList[]; java.lang.String; null; GroupManager.mgr>
<freecs.core.Group; size[]; int; freecs.layout.Template; generateUserList[]; java.lang.String; null; g>
<freecs.core.Group; isValid[]; boolean; freecs.layout.Template; generateUserList[]; java.lang.String; null; g>
<freecs.layout.Template; generateUserList[freecs.content.MessageState, freecs.core.Group]; java.lang.String; freecs.layout.Template; generateUserList[]; java.lang.String; null; this>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; generateUserList[]; java.lang.String; null; sb>
<freecs.core.MessageRenderer; renderTemplate[freecs.content.MessageState, java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[]; java.lang.String; null; MessageRenderer>
<freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; freecs.layout.Template; generateUserList[]; java.lang.String; null; ts>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; generateUserList[]; java.lang.String; null; sb>
<freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; freecs.layout.Template; changed[]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.Template; changed[]; void; null; Server>
<java.io.File; lastModified[]; long; freecs.layout.Template; changed[]; void; null; template>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.layout.Template; changed[]; void; null; Server>
<freecs.layout.TemplateSet; removeTemplate[freecs.layout.Template]; void; freecs.layout.Template; removed[]; void; null; ts>
<freecs.layout.Template; changed[]; void; freecs.layout.Template; created[]; void; null; this>
<freecs.layout.TemplateSet; addTemplate[freecs.layout.Template]; void; freecs.layout.Template; created[]; void; null; ts>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.Template; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.Template; toString[]; java.lang.String; null; sb>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; dir>
<freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; name>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; Server>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; tm>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; Server>
<freecs.layout.TemplateSet; getMessageTemplateSet[]; java.util.Properties; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; foreignTS>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; "admin">
<freecs.layout.TemplateSet; checkTemplateCompleteness[java.lang.String[]]; boolean; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; Server>
<freecs.layout.TemplateSet; checkTemplateCompleteness[java.lang.String[]]; boolean; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; this>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; TemplateSet[java.io.File, freecs.layout.TemplateManager]; void; null; Server>
<java.io.File; listFiles[]; java.io.File[]; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; dir>
<java.io.File; isFile[]; boolean; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tFiles[i]>
<java.lang.String; equalsIgnoreCase[java.lang.String]; boolean; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tFiles[i].getName()>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; equalsIgnoreCase[java.lang.String]; tFiles[i]>
<freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; this>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; Server>
<freecs.layout.Template; isValide[]; boolean; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; t>
<java.util.Hashtable; put[java.lang.String, freecs.layout.Template]; freecs.layout.Template; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tempTable>
<freecs.layout.Template; getName[]; java.lang.String; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; t>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; Server>
<java.io.File; getName[]; java.lang.String; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tFiles[i]>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; name>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; Server>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tm>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; Server>
<freecs.layout.TemplateSet; getMessageTemplateSet[]; java.util.Properties; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; foreignTS>
<freecs.util.FileMonitor; removeMonitor[java.lang.Object]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; removeMonitor[java.lang.Object]; FileMonitor>
<freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; FileMonitor.getFileMonitor()>
<freecs.util.FileMonitor; getFileMonitor[]; freecs.util.FileMonitor; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; addReloadable[freecs.interfaces.IReloadable]; FileMonitor>
<freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; freecs.layout.TemplateSet; reload[java.io.File]; void; null; this>
<java.util.Hashtable; get[java.lang.Object]; freecs.layout.Template; freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; null; tpl>
<java.util.Hashtable; remove[java.lang.Object]; freecs.layout.Template; freecs.layout.TemplateSet; removeTemplate[freecs.layout.Template]; void; null; tpl>
<freecs.layout.Template; getName[]; java.lang.String; freecs.layout.TemplateSet; removeTemplate[freecs.layout.Template]; void; null; t>
<java.util.Hashtable; put[java.lang.String, freecs.layout.Template]; freecs.layout.Template; freecs.layout.TemplateSet; addTemplate[freecs.layout.Template]; void; null; tpl>
<freecs.layout.Template; getName[]; java.lang.String; freecs.layout.TemplateSet; addTemplate[freecs.layout.Template]; void; null; t>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; null; props>
<java.io.File; lastModified[]; long; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; msgSet>
<java.util.Properties; load[java.io.InputStream]; void; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<java.io.FileInputStream; close[]; void; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; fis>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<java.util.Hashtable; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; Server>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; ig>
<java.lang.Object; toString[]; java.lang.String; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; ig.nextElement()>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; toString[]; ig>
<java.lang.String; indexOf[java.lang.String]; int; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; param>
<java.lang.String; substring[int, int]; java.lang.String; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; param>
<freecs.layout.TemplateSet; Ignore[java.lang.String]; boolean; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; this>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Enumeration; hasMoreElements[]; boolean; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; e>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; Server>
<java.lang.Object; toString[]; java.lang.String; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; e.nextElement()>
<java.util.Enumeration; nextElement[]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; toString[]; e>
<java.util.Properties; load[java.io.InputStream]; void; freecs.layout.TemplateSet; changed[]; void; null; tprop>
<java.io.FileInputStream; close[]; void; freecs.layout.TemplateSet; changed[]; void; null; fis>
<java.io.File; lastModified[]; long; freecs.layout.TemplateSet; changed[]; void; null; msgSet>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; changed[]; void; null; Server>
<freecs.Server; debug[java.lang.Object, java.lang.String, java.lang.Throwable, short, short]; void; freecs.layout.TemplateSet; changed[]; void; null; Server>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; removed[]; void; null; name>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; removed[]; void; null; Server>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; removed[]; void; null; Server>
<freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; freecs.layout.TemplateSet; removed[]; void; null; tm>
<freecs.Server; log[java.lang.Object, java.lang.String, short, short]; void; freecs.layout.TemplateSet; removed[]; void; null; Server>
<freecs.layout.TemplateSet; getMessageTemplateSet[]; java.util.Properties; freecs.layout.TemplateSet; removed[]; void; null; foreignTS>
<freecs.layout.TemplateSet; changed[]; void; freecs.layout.TemplateSet; created[]; void; null; this>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateSet; checkTemplateCompleteness[java.lang.String[]]; boolean; null; tpl>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; Ignore[java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; Ignore[java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; Ignore[java.lang.String]; boolean; null; param>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; Ignore[java.lang.String]; boolean; null; param>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.TemplateSet; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; append[java.lang.String]; java.lang.StringBuffer; freecs.layout.TemplateSet; toString[]; java.lang.String; null; sb>
<java.lang.StringBuffer; toString[]; java.lang.String; freecs.layout.TemplateSet; toString[]; java.lang.String; null; sb>
<java.lang.String; equals[java.lang.Object]; boolean; freecs.layout.TemplateSet; equals[java.lang.Object]; boolean; null; this.name>
<java.lang.String; hashCode[]; int; freecs.layout.TemplateSet; hashCode[]; int; null; ("TemplateSet" + name)>


Calls That Belongs To JCF (1112)

<java.util.HashMap; size[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogCleaner.instance.getLogDestinations()>
<java.util.Properties; load[java.io.InputStream]; void; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; iterator[]; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; msObjects>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; p>
<java.util.HashMap; size[]; int; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; iterator[]; map>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; p>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; GroupManager.pluginStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; GroupManager.pluginStore>
<java.util.Vector; add[freecs.interfaces.IGroupPlugin]; boolean; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; plugins>
<java.util.Vector; toArray[freecs.interfaces.IGroupPlugin[]]; freecs.interfaces.IGroupPlugin[]; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; plugins>
<java.util.Vector; size[]; int; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; v>
<java.util.Vector; add[freecs.content.BanObject]; boolean; freecs.external.WebadminRequestHandler; renderBanlist[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; v>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv.pluginStore.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; iterator[]; Server.srv.pluginStore>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr.getGroupPlugins().keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; iterator[]; GroupManager.mgr.getGroupPlugins()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv.props>
<java.util.HashMap; get[java.lang.Object]; freecs.external.StaticRequestHandler.FileProperties; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fileCache>
<java.util.HashMap; put[java.lang.String, freecs.external.StaticRequestHandler.FileProperties]; freecs.external.StaticRequestHandler.FileProperties; freecs.external.StaticRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; fileCache>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; putAll[java.util.Map<? extends java.lang.Object,? extends java.lang.Object>]; void; freecs.external.xmlrpc.freecsXmlRpcHandler; state[java.lang.String]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; result>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.freecsXmlRpcHandler; getLinuxMemoryDetails[java.lang.Runtime]; java.util.Hashtable<java.lang.Object,java.lang.Object>; null; ht>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; handler.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; iterator[]; handler>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; handler>
<java.util.ArrayList; add[java.lang.StringBuffer]; boolean; freecs.util.FadeColor; getFadeColorUsername[java.lang.String, java.lang.String, java.lang.String]; java.lang.StringBuffer; null; fadecolor>
<java.util.ArrayList; iterator[]; java.util.Iterator<java.lang.StringBuffer>; freecs.util.FadeColor; generateFadeUsername[java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList<java.lang.StringBuffer>]; java.lang.StringBuffer; null; fadecolor>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; null; ldWorkingCopy.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; iterator[]; ldWorkingCopy>
<java.util.Vector; add[java.lang.String]; boolean; freecs.util.logger.LogCleaner; run[]; void; null; obj>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; null; obj>
<java.util.HashMap; get[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; run[]; void; null; ldWorkingCopy>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; ldWorkingCopy>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removePath[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; logDestinations>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; ldWorkingCopy>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; removeDest[java.lang.String, java.util.HashMap<java.lang.String,freecs.util.logger.LogDestination>]; void; null; logDestinations>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; logDestinations>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; addLogDestination[java.lang.StringBuffer]; void; null; logDestinations>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.util.logger.LogCleaner; addLogDestination[java.lang.String, freecs.util.logger.LogDestination]; void; null; logDestinations>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogCleaner; addLogDestination[java.lang.String, freecs.util.logger.LogDestination]; void; null; logDestinations>
<java.util.HashMap; get[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; null; logDestinations>
<java.util.HashMap; put[java.lang.String, freecs.util.logger.LogDestination]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; getLogDestination[java.lang.String]; freecs.util.logger.LogDestination; null; logDestinations>
<java.util.HashMap; remove[java.lang.Object]; freecs.util.logger.LogDestination; freecs.util.logger.LogWriter; removeLogDestinations[java.lang.String]; void; null; logDestinations>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; null; watchlist>
<java.util.Vector; addElement[freecs.interfaces.IReloadable]; void; freecs.util.FileMonitor; addReloadable[freecs.interfaces.IReloadable]; void; null; watchlist>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.interfaces.IReloadable>; freecs.util.FileMonitor; run[]; void; null; watchlist>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.util.FileMonitor; run[]; void; null; watchlist>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.util.FileMonitor; removeMonitor[java.lang.Object]; void; null; this.watchlist>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; ht>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; v>
<java.util.HashMap; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; addUser[freecs.core.User]; void; null; ht>
<java.util.Collection; iterator[]; java.util.Iterator; freecs.util.GroupUserList; iterator[]; java.util.Iterator; null; ht.values()>
<java.util.HashMap; values[]; java.util.Collection; freecs.util.GroupUserList; iterator[]; java.util.Iterator; iterator[]; ht>
<java.util.List; add[java.lang.Object]; boolean; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; l>
<java.util.List; add[java.lang.Object]; boolean; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; l>
<java.util.Set; iterator[]; java.util.Iterator; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; ht.keySet()>
<java.util.HashMap; keySet[]; java.util.Set; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; iterator[]; ht>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; ht>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; get[int]; java.lang.Object; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; size[]; int; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; v>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; allTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; semiBlockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; blockTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; internalTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.HashSet; add[java.lang.Object]; boolean; freecs.util.GroupUserList; finalize[]; void; null; emptyTags>
<java.util.Set; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; allowedTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; allTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; internalTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; blockTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; semiBlockTags>
<java.util.Stack; search[java.lang.Object]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; emptyTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; push[java.lang.Object]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Vector; size[]; int; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.Stack; pop[]; java.lang.Object; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; openTags>
<java.util.HashSet; contains[java.lang.Object]; boolean; freecs.util.HtmlEncoder; encode[java.lang.String, java.lang.StringBuffer, boolean, java.util.Set]; void; null; emptyTags>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; addr>
<java.util.Hashtable; put[java.net.InetAddress, freecs.util.TrafficMonitor.AddressState]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; mayPass[java.net.InetAddress]; freecs.util.TrafficMonitor.AddressState; null; addr>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; markAsProxy[java.net.InetAddress]; void; null; addr>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.net.InetAddress>; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.util.Hashtable; get[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.util.Hashtable; remove[java.lang.Object]; freecs.util.TrafficMonitor.AddressState; freecs.util.TrafficMonitor; run[]; void; null; addr>
<java.util.Properties; load[java.io.InputStream]; void; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.TreeSet; iterator[]; java.util.Iterator; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; v>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.util.MessageTemplateFinder; main[java.lang.String[]]; void; null; oldprops>
<java.util.TreeSet; contains[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; v>
<java.util.TreeSet; add[java.lang.Object]; boolean; freecs.util.MessageTemplateFinder; search[java.io.File]; void; null; v>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdListBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; bl>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdSys; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; add[java.lang.String]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; get[int]; java.lang.String; freecs.commands.AbstractCommand; getMultiblePunishableUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; add[java.lang.String]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; found>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; size[]; int; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; get[int]; java.lang.String; freecs.commands.AbstractCommand; getMultibleUsers[freecs.content.MessageState, java.lang.String]; java.util.Vector<freecs.core.User>; null; notfound>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.commands.CmdListOnlineFriends; execute[freecs.content.MessageState, java.lang.String]; boolean; null; onlineFriends>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; col[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; away[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdLockChangeForeignAction; me[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr.anoProxyUserList()>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup.bannedUsers()>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdRSu; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdRespectUser; execute[freecs.content.MessageState, java.lang.String]; boolean; null; foundList>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdInvite; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnPunish; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKickToRoom; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; freecs.core.User; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKickHard; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdKick; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.util.Properties; load[java.io.InputStream]; void; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; allCmds.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; iterator[]; allCmds>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; props>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; allCmds>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; available>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; getCommand[java.lang.String]; freecs.interfaces.ICommand; null; allCmds>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.commands.CommandSet; evaluate[java.lang.String, freecs.content.MessageState, java.lang.String, boolean]; byte; null; availableCmds>
<java.util.Vector; size[]; int; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; size[]; int; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdListVips; execute[freecs.content.MessageState, java.lang.String]; boolean; null; v>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.User>; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdIgnore; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<java.util.Vector; addElement[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; isAllowedBgcolor[java.lang.String, freecs.content.MessageState]; boolean; null; allowedBgcolor>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.util.Vector; addElement[java.lang.String]; void; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.commands.CmdChangeBgcolor; listAllowedBgcolor[freecs.content.MessageState]; java.lang.String; null; allowedBgcolor>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; notfound>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; size[]; int; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.commands.CmdUnBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; found>
<java.util.SortedMap; keySet[]; java.util.Set<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; Charset.availableCharsets()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; ks>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; main[java.lang.String[]]; void; null; srv.banList>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; main[java.lang.String[]]; void; null; srv.storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; main[java.lang.String[]]; void; null; srv.storeList>
<java.util.Properties; load[java.io.InputStream]; void; freecs.Server; readConfig[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; readConfig[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; server>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; pluginUrl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; jarUrl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; checkForConfigValues[]; void; null; names>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.Server; checkForConfigValues[]; void; null; tvl>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; clone[]; java.lang.Object; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; remove>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; addAll[java.util.Collection<? extends java.net.InetAddress>]; boolean; freecs.Server; checkForConfigValues[]; void; null; adminHosts>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.Server; checkForConfigValues[]; void; null; tempAdmins>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; clone[]; java.lang.Object; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; remove>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; newHsts>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Vector; addAll[java.util.Collection<? extends java.net.InetAddress>]; boolean; freecs.Server; checkForConfigValues[]; void; null; allowedLoginHosts>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkForConfigValues[]; void; null; props>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandUrl>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandUrl>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandsStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; commandsStore>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; allCommands>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadCommands[java.util.Vector<java.lang.String>]; void; null; allCommands>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcUrl>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcUrl>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcHandler>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadXmlRpcHandler[java.util.Vector<java.lang.String>]; void; null; xmlRpcHandler>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginUrl>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; pluginStore>
<java.util.Vector; add[freecs.interfaces.IServerPlugin]; boolean; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; plugins>
<java.util.Vector; toArray[freecs.interfaces.IServerPlugin[]]; freecs.interfaces.IServerPlugin[]; freecs.Server; loadPlugin[java.util.Vector<java.lang.String>]; void; null; plugins>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, boolean]; boolean; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, long]; long; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, int]; int; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; checkProperty[java.lang.String, java.lang.String]; java.lang.String; null; props>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; removeToken[java.lang.String]; void; null; tokenStore>
<java.util.Hashtable; get[java.lang.Object]; java.lang.String; freecs.Server; isTokenValid[java.lang.String, java.lang.String]; boolean; null; tokenStore>
<java.util.Hashtable; put[java.lang.String, java.lang.String]; java.lang.String; freecs.Server; addToken[java.lang.String, java.lang.String]; void; null; tokenStore>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; isAdminHost[java.net.InetAddress]; boolean; null; adminHosts>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; adminHosts>
<java.util.Vector; add[java.net.InetAddress]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; adminHosts>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.util.Vector; add[java.lang.String]; boolean; freecs.Server; addTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; adminHosts>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.Server; removeTempAdminhost[freecs.core.User]; void; null; tempAdmins>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getProperty[java.lang.String]; java.lang.String; null; props>
<java.util.Vector; firstElement[]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; SERVER_NAME>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.Server; getUrl[]; java.lang.String; null; props>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.Server; banUser[java.util.Vector<freecs.core.User>, java.lang.String, long, java.lang.String]; void; null; v>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banUser[freecs.core.User, java.lang.String, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banConn[freecs.content.Connection, java.lang.String, java.lang.String, java.lang.String, long]; void; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; removeBan[java.lang.String]; boolean; null; banList>
<java.util.Hashtable; size[]; int; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; banList>
<java.util.Hashtable; elements[]; java.util.Enumeration<freecs.content.BanObject>; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; banList>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; v>
<java.util.Vector; toArray[freecs.content.BanObject[]]; freecs.content.BanObject[]; freecs.Server; getBanList[]; freecs.content.BanObject[]; null; v>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; banHost[java.net.InetAddress, long, java.lang.String]; void; null; banList>
<java.util.Hashtable; put[java.lang.String, freecs.content.BanObject]; freecs.content.BanObject; freecs.Server; permaBanHost[java.net.InetAddress, java.lang.String]; void; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; isBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; getBanObject[java.lang.Object]; freecs.content.BanObject; null; banList>
<java.util.Hashtable; get[java.lang.Object]; freecs.content.BanObject; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; banList>
<java.util.Hashtable; remove[java.lang.Object]; freecs.content.BanObject; freecs.Server; isTrafficBanned[java.lang.Object]; boolean; null; banList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.Server; storeUser[java.util.Vector<java.lang.Object>, int, java.lang.String, long, java.lang.String]; void; null; v>
<java.util.Hashtable; put[freecs.content.ActionstoreObject, java.lang.String]; java.lang.String; freecs.Server; storeUser[int, freecs.core.User, java.lang.String, long, java.lang.String]; void; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; storeList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Vector; toArray[freecs.content.ActionstoreObject[]]; freecs.content.ActionstoreObject[]; freecs.Server; getStoreList[]; freecs.content.ActionstoreObject[]; null; v>
<java.util.Hashtable; keys[]; java.util.Enumeration<freecs.content.ActionstoreObject>; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; srv.storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; removeStore[java.lang.Object, int]; boolean; null; srv.storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isPunished[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isPunished[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isPunished[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunished[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunished[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isEntranceBanned[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isCollocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isCollocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isCollocked[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isCollocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isCollocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isActlocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isActlocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isActlocked[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isActlocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isActlocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isAwaylocked[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; isPunishable[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; isPunishable[java.lang.Object]; boolean; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; isPunishable[java.lang.Object]; boolean; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunishable[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; isPunishable[java.lang.Object]; boolean; null; storeList>
<java.util.Hashtable; size[]; int; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; srv.storeList>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; srv.storeList>
<java.util.Hashtable; keys[]; java.util.Enumeration<>; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; st>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; storeList>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.String; freecs.Server; getPunishableKey[java.lang.Object]; freecs.core.User; null; storeList>
<java.util.Properties; load[java.io.InputStream]; void; freecs.Server; changed[]; void; null; tprop>
<java.util.Map; put[java.lang.String, freecs.core.Group]; freecs.core.Group; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<java.util.Map; size[]; int; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<java.util.Map; size[]; int; freecs.core.GroupManager; addGroup[freecs.core.Group]; void; null; grps>
<java.util.Map; remove[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; removeGroup[freecs.core.Group]; void; null; grps>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; getGroup[java.lang.String]; freecs.core.Group; null; grps>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; getStartingGroup[java.lang.String]; freecs.core.Group; null; grps>
<java.util.HashMap; get[java.lang.Object]; java.lang.String; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; startGroupThemes>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; openGroup[java.lang.String, java.lang.String, freecs.core.User, freecs.core.User]; freecs.core.Group; null; moderatedGroups>
<java.util.Properties; load[java.io.InputStream]; void; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; iterator[]; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.Vector; toArray[freecs.core.Membership[]]; freecs.core.Membership[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; msObjects>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; p>
<java.util.HashMap; size[]; int; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; iterator[]; map>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; p>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; pluginStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; pluginStore>
<java.util.Vector; add[freecs.interfaces.IGroupPlugin]; boolean; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; plugins>
<java.util.Vector; toArray[freecs.interfaces.IGroupPlugin[]]; freecs.interfaces.IGroupPlugin[]; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; plugins>
<java.util.Map; size[]; int; freecs.core.GroupManager; openGroupsCount[]; int; null; grps>
<java.util.Collection; toArray[freecs.core.Group[]]; freecs.core.Group[]; freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; null; grps.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.Group>; freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; toArray[freecs.core.Group[]]; grps>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updtToLowerCase>
<java.util.HashMap; put[java.lang.String, java.lang.String]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupThemes>
<java.util.HashMap; remove[java.lang.Object]; java.lang.String; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupThemes>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; curr>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; currToLowerCase>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updtToLowerCase>
<java.util.Vector; addAll[java.util.Collection<? extends java.lang.Object>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; addAll[java.util.Collection<? extends java.lang.Object>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroups>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; startGroupsToLowerCase>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; updt>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; grps>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; curr>
<java.util.Map; get[java.lang.Object]; freecs.core.Group; freecs.core.GroupManager; updateStartingGroups[java.lang.String[]]; void; null; grps>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; mg>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.GroupManager; updateModeratedGroups[java.util.Vector<java.lang.String>]; void; null; moderatedGroups>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; checkReason[java.lang.String, freecs.core.User, freecs.core.User]; int; null; moderatedGroups>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.GroupManager; checkGproupname[java.lang.String]; java.lang.String; null; startGroups>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.GroupManager; isStartingGroup[java.lang.String]; boolean; null; startGroupsToLowerCase>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; processRequest[java.nio.channels.SelectionKey]; boolean; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getAliveState[]; boolean[]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getAliveState[]; boolean[]; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getWorkingSince[]; long[][]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getWorkingSince[]; long[][]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getCurrCommant[int]; java.lang.String; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; getOveralUsage[]; double[]; null; reqReaders>
<java.util.Vector; elementAt[int]; freecs.core.RequestReader; freecs.core.RequestReader; getOveralUsage[]; double[]; null; reqReaders>
<java.util.Vector; add[freecs.core.RequestReader]; boolean; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; startRequestReader[boolean]; freecs.core.RequestReader; null; reqReaders>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; removeRequestReader[freecs.core.RequestReader]; void; null; reqReaders>
<java.util.Vector; size[]; int; freecs.core.RequestReader; activeReaders[]; int; null; reqReaders>
<java.util.Properties; load[java.io.InputStream]; void; freecs.core.MembershipManager; init[java.io.File]; void; null; props>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; props.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.MembershipManager; init[java.util.Properties]; void; iterator[]; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.MembershipManager; init[java.util.Properties]; void; null; props>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.HashMap; put[java.lang.String, java.util.Properties]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.core.MembershipManager; init[java.util.Properties]; void; null; p>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; iterator[]; hm>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.HashMap; get[java.lang.Object]; java.util.Properties; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm>
<java.util.Vector; add[freecs.core.Membership]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; newMemberships>
<java.util.HashMap; put[java.lang.String, freecs.core.Membership]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; tempMap>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; tempMap>
<java.util.Set; removeAll[java.util.Collection<?>]; boolean; freecs.core.MembershipManager; init[java.util.Properties]; void; null; old>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; old>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; init[java.util.Properties]; void; null; memberships>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.Membership>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; newMemberships>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.MembershipManager; getMembership[java.lang.String]; freecs.core.Membership; null; memberships>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; init[java.util.Properties]; void; null; p.keySet()>
<java.util.Hashtable; keySet[]; java.util.Set<java.lang.Object>; freecs.core.Membership; init[java.util.Properties]; void; iterator[]; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; equalsIgnoreCase[java.lang.String]; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.Membership; init[java.util.Properties]; void; null; p>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; update[java.util.Properties]; void; null; members>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Membership; remove[freecs.core.User]; void; null; members>
<java.util.Vector; size[]; int; freecs.core.Membership; remove[freecs.core.User]; void; null; members>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Membership; addToList[freecs.core.User]; void; null; members>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.Membership; addToList[freecs.core.User]; void; null; members>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; cleanup[]; void; null; members>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Membership; sendMessage[freecs.interfaces.IContainer]; void; null; members>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.CallMembershipObject>; freecs.core.Membership; sendHistory[freecs.core.User]; void; null; callKey>
<java.util.Vector; add[freecs.content.CallMembershipObject]; boolean; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; size[]; int; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.CallMembershipObject>; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; tmp>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Membership; addCallKey[freecs.content.CallMembershipObject]; void; null; callKey>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; users[]; java.util.Iterator<java.lang.Object>; null; members>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; usr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; addLoginUser[freecs.core.User]; void; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; isEmpty[]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addUser[freecs.core.User, freecs.core.User, boolean]; boolean; null; autoSuList>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<java.util.Vector; size[]; int; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<java.util.Vector; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.Group; removeUser[freecs.core.User]; void; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; removeUser[freecs.core.User]; void; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; susers>
<java.util.Vector; addElement[freecs.core.User]; void; freecs.core.Group; addToSusers[freecs.core.User]; boolean; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; removeFromSusers[freecs.core.User]; void; null; susers>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.Group; removeFromSusers[freecs.core.User]; void; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsAutoSu[freecs.core.User]; boolean; null; autoSuList>
<java.util.Vector; size[]; int; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; usr>
<java.util.List; contains[java.lang.Object]; boolean; freecs.core.Group; exclusiveSendMessage[freecs.interfaces.IContainer, java.util.List<freecs.core.User>]; void; null; exclude>
<java.util.Vector; size[]; int; freecs.core.Group; sendMessage[freecs.interfaces.IContainer]; void; null; usr>
<java.util.Vector; size[]; int; freecs.core.Group; sendModeratorMessage[freecs.interfaces.IContainer]; void; null; usr>
<java.util.Vector; size[]; int; freecs.core.Group; sendModeratedMessage[freecs.interfaces.IContainer]; void; null; usr>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Group; users[]; java.util.Iterator<java.lang.Object>; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayJoin[freecs.core.User]; boolean; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrMayLock[freecs.core.User]; boolean; null; susers>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.Group; setBanForUser[java.lang.String, boolean]; void; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; canSetBanForUser[java.lang.String]; boolean; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; getBanForUser[java.lang.String]; boolean; null; banList>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.Group; bannedUsers[]; java.util.Vector<java.lang.String>; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsBaned[java.lang.String]; boolean; null; banList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsPresent[freecs.core.User]; boolean; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; usrIsSu[freecs.core.User]; boolean; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; suUserCount[]; int; null; susers>
<java.util.Vector; size[]; int; freecs.core.Group; size[]; int; null; usr>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.Group; setAutoSu[java.lang.String[]]; void; null; autoSuList>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.Group; setAutoSu[java.lang.String[]]; void; null; autoSuList>
<java.util.HashMap; clear[]; void; freecs.core.MessageParser; clear[]; void; null; renderCache>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<java.util.HashMap; put[java.lang.String, java.lang.StringBuffer]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<java.util.HashMap; get[java.lang.Object]; java.lang.StringBuffer; freecs.core.MessageParser; addPersonalizedMessage[freecs.core.User, freecs.core.ConnectionBuffer]; boolean; null; renderCache>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; added>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundName>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundName>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; get[int]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.whisper()>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.core.MessageParser; parseAndSendMessage[]; void; null; found>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.MessageParser; parseAndSendMessage[]; void; null; storeFriendNotification>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; get[int]; java.lang.Object; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Vector; toArray[]; java.lang.Object[]; freecs.core.MessageParser; parseAndSendMessage[]; void; null; foundFriends>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; l.ia2ssc.values()>
<java.util.HashMap; values[]; java.util.Collection<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; updateSscRecieveBuffer[int]; void; iterator[]; l.ia2ssc>
<java.util.HashMap; get[java.lang.Object]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ia2ssc>
<java.util.Vector; addElement[java.net.InetAddress]; void; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; Server.srv.allowedLoginHosts>
<java.util.HashMap; put[java.net.InetAddress, java.nio.channels.ServerSocketChannel]; java.nio.channels.ServerSocketChannel; freecs.core.Listener; bindSSC[java.net.InetAddress]; void; null; ia2ssc>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; reinitSSC[]; void; null; ia2ssc.values()>
<java.util.HashMap; values[]; java.util.Collection<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; reinitSSC[]; void; iterator[]; ia2ssc>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.selectedKeys()>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.keys()>
<java.util.Set; isEmpty[]; boolean; freecs.core.Responder; run[]; void; null; ks>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Responder; run[]; void; null; ks>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; requestHandlers>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; Server.srv.props>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.RequestEvaluator; RequestEvaluator[freecs.core.RequestReader]; void; null; jarUrl>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; evaluate[freecs.interfaces.IRequest]; void; null; requestHandlers>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; jarUrl>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerUrl>
<java.util.Vector; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerUrl>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; handlerStore>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; requestHandlers>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.RequestEvaluator; loadHandler[java.util.Vector<java.lang.String>]; void; null; requestHandlers>
<java.util.Set; size[]; int; freecs.core.CentralSelector; keyCount[]; int; null; keys>
<java.util.Set; size[]; int; freecs.core.CentralSelector; run[]; void; null; sel.keys()>
<java.util.Set; size[]; int; freecs.core.CentralSelector; run[]; void; null; sel.keys()>
<java.util.Set; isEmpty[]; boolean; freecs.core.CentralSelector; run[]; void; null; keys>
<java.util.Set; iterator[]; java.util.Iterator; freecs.core.CentralSelector; run[]; void; null; keys>
<java.util.Set; toArray[java.lang.Object[]]; java.lang.Object[]; freecs.core.CentralSelector.KeepAliveTimeoutChecker; run[]; void; null; keyset>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.UserManager; tryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.core.User, freecs.content.Connection]; short; null; loggingIn>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; admins>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; vips>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; moderators>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; guests>
<java.util.HashMap; get[java.lang.Object]; java.lang.String; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; GroupManager.mgr.startGroupThemes>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; anoProxyUser>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fshipList>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fshipList>
<java.util.List; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; allFriends>
<java.util.List; add[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; fn>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineVips>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; notListedAsOnlineVips>
<java.util.Vector; add[freecs.core.User]; boolean; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Vector; size[]; int; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Vector; elements[]; java.util.Enumeration<freecs.core.User>; freecs.core.UserManager; execTryLogin[java.lang.String, java.lang.String, java.lang.String, freecs.layout.TemplateSet, freecs.core.RequestReader, freecs.content.Connection]; short; null; onlineFriends>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; onlineVips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; onlineVips>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; notListedAsOnlineVips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; notListedAsOnlineVips>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; anoProxyUser>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; removeUser[freecs.core.User]; void; null; anoProxyUser>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.HashMap; put[java.lang.String, java.util.Vector<freecs.core.User>]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.Vector; addElement[freecs.core.User]; void; freecs.core.UserManager; addFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.HashMap; get[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.Vector; size[]; int; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; f>
<java.util.HashMap; remove[java.lang.Object]; java.util.Vector<freecs.core.User>; freecs.core.UserManager; removeFriendship[freecs.core.User, java.lang.String]; void; null; fshipList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; run[]; void; null; schedule>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; run[]; void; null; schedule>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; run[]; void; null; schedule>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; onlineVips[]; java.util.Enumeration<java.lang.Object>; null; onlineVips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; notListedAsOnlineVips[]; java.util.Enumeration<java.lang.Object>; null; notListedAsOnlineVips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; anoProxyUser[]; java.util.Enumeration<java.lang.Object>; null; anoProxyUser>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; scheduleAction[short, long, freecs.core.User, freecs.core.User]; void; null; schedule>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; scheduleAction[short, long, freecs.core.User, freecs.core.User]; void; null; schedule>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; nVips>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateVips[java.util.Vector<java.lang.String>]; void; null; vips>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; nAdmins>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateAdmins[java.util.Vector<java.lang.String>]; void; null; admins>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; nMod>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateModerators[java.util.Vector<java.lang.String>]; void; null; moderators>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; clone[]; java.lang.Object; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; nGuest>
<java.util.Vector; removeAll[java.util.Collection<?>]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; added>
<java.util.Vector; addElement[java.lang.Object]; void; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; removed>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.UserManager; updateGuests[java.util.Vector<java.lang.String>]; void; null; guests>
<java.util.List; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager; sendFriendNotification[freecs.core.User, freecs.core.Group, java.util.List<freecs.core.User>]; void; null; to>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; vips[]; java.util.Enumeration<java.lang.Object>; null; vips>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; moderators[]; java.util.Enumeration<java.lang.Object>; null; moderators>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.Object>; freecs.core.UserManager; guests[]; java.util.Enumeration<java.lang.Object>; null; guests>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrName.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; iterator[]; usrName>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrCookie.entrySet()>
<java.util.Map; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; iterator[]; usrCookie>
<java.util.Map; size[]; int; freecs.core.UserManager.UserStore; size[]; int; null; usrName>
<java.util.Map; containsKey[java.lang.Object]; boolean; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrName>
<java.util.Map; containsKey[java.lang.Object]; boolean; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrCookie>
<java.util.Map; put[java.lang.String, freecs.core.User]; freecs.core.User; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrName>
<java.util.Map; put[java.lang.String, freecs.core.User]; freecs.core.User; freecs.core.UserManager.UserStore; addUser[freecs.core.User]; void; null; usrCookie>
<java.util.Collection; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.UserManager.UserStore; toArray[]; freecs.core.User[]; null; usrName.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.User>; freecs.core.UserManager.UserStore; toArray[]; freecs.core.User[]; toArray[freecs.core.User[]]; usrName>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; usrName>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; removeUser[freecs.core.User]; void; null; usrCookie>
<java.util.Map; get[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; getUserCookie[java.lang.String]; freecs.core.User; null; usrCookie>
<java.util.Map; get[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore; getUserName[java.lang.String]; freecs.core.User; null; usrName>
<java.util.Collection; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager.UserStore.UserStoreIterator; UserStoreIterator[freecs.core.UserManager.UserStore]; void; null; usrName.values()>
<java.util.Map; values[]; java.util.Collection<freecs.core.User>; freecs.core.UserManager.UserStore.UserStoreIterator; UserStoreIterator[freecs.core.UserManager.UserStore]; void; iterator[]; usrName>
<java.util.Map; remove[java.lang.Object]; freecs.core.User; freecs.core.UserManager.UserStore.UserStoreIterator; remove[]; void; null; usrCookie>
<java.util.Vector; addElement[freecs.core.MessageParser]; void; freecs.core.User; scheduleMessage[freecs.core.MessageParser]; void; null; schedMsgs>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.core.MessageParser>; freecs.core.User; sendScheduledMessages[]; void; null; schedMsgs>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; removeNow[]; void; null; memberships.entrySet()>
<java.util.HashMap; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; removeNow[]; void; iterator[]; memberships>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; removeNow[]; void; null; friendsList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; ignoreList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; sendMessage[freecs.interfaces.IContainer]; void; null; friendsList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; userIsIgnored[java.lang.String]; boolean; null; ignoreList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; ignoreUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; ignoreUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; respectUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.User; respectUser[java.lang.String]; void; null; ignoreList>
<java.util.Vector; size[]; int; freecs.core.User; numberOfIgnoredUser[]; int; null; ignoreList>
<java.util.HashMap; put[java.lang.String, freecs.core.Membership]; freecs.core.Membership; freecs.core.User; addMembership[java.lang.String, freecs.core.Membership]; void; null; memberships>
<java.util.HashMap; get[java.lang.Object]; freecs.core.Membership; freecs.core.User; getMembership[java.lang.String]; freecs.core.Membership; null; memberships>
<java.util.HashMap; remove[java.lang.Object]; freecs.core.Membership; freecs.core.User; removeMembership[java.lang.String]; void; null; memberships>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; rebuildMemberships[]; void; null; memberships.entrySet()>
<java.util.HashMap; entrySet[]; java.util.Set<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; rebuildMemberships[]; void; iterator[]; memberships>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.User; storeFriendNotification[java.lang.String]; void; null; storeFriendNotification>
<java.util.Vector; add[java.lang.Object]; boolean; freecs.core.User; addWhisper[java.lang.Object]; void; null; whisper>
<java.util.Vector; size[]; int; freecs.core.User; getWhipserSize[]; int; null; whisper>
<java.util.Vector; add[freecs.content.PrivateMessageStore]; boolean; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<java.util.Vector; size[]; int; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.PrivateMessageStore>; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; tmp>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.User; addPrivateMessageStore[freecs.content.PrivateMessageStore]; void; null; privateMessage>
<java.util.Vector; size[]; int; freecs.core.User; sendMessageHistory[int]; void; null; privateMessage>
<java.util.Vector; iterator[]; java.util.Iterator<freecs.content.PrivateMessageStore>; freecs.core.User; sendMessageHistory[int]; void; null; privateMessage>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.core.User; getProperty[java.lang.String]; java.lang.Object; null; userProps>
<java.util.HashMap; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.core.User; setProperty[java.lang.String, java.lang.Object]; void; null; userProps>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; addFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; addFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; removeFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; removeElement[java.lang.Object]; boolean; freecs.core.User; removeFriend[java.lang.String]; void; null; friendsList>
<java.util.Vector; size[]; int; freecs.core.User; numberOfFriends[]; int; null; friendsList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; isFriend[java.lang.String]; boolean; null; this.friendsList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; friends[]; java.util.Enumeration<java.lang.String>; null; friendsList>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.core.User; ignoreList[]; java.util.Enumeration<java.lang.String>; null; ignoreList>
<java.util.Vector; addElement[java.lang.String]; void; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; templatesetList>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.User; mayUseTemplateset[java.lang.String]; void; null; templatesetList>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.core.User; containsConfirmAction[java.lang.String]; boolean; null; this.confirmAction>
<java.util.Vector; add[java.lang.String]; boolean; freecs.core.User; addConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.core.User; removeConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.util.Vector; size[]; int; freecs.core.User; removeConfirmAction[java.lang.String]; void; null; this.confirmAction>
<java.util.HashMap; put[java.lang.Thread, java.lang.Long]; java.lang.Long; freecs.core.RequestMonitor; addMonitor[java.lang.Thread, long]; void; null; monitors>
<java.util.HashMap; remove[java.lang.Object]; java.lang.Long; freecs.core.RequestMonitor; removeMonitor[java.lang.Thread]; void; null; monitors>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Thread>; freecs.core.RequestMonitor; run[]; void; null; monitors.keySet()>
<java.util.HashMap; keySet[]; java.util.Set<java.lang.Thread>; freecs.core.RequestMonitor; run[]; void; iterator[]; monitors>
<java.util.HashMap; get[java.lang.Object]; java.lang.Long; freecs.core.RequestMonitor; run[]; void; longValue[]; monitors>
<java.util.Vector; size[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; UserManager.mgr.onlineVipList()>
<java.util.List; iterator[]; java.util.Iterator<>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; users>
<java.util.List; iterator[]; java.util.Iterator<>; freecs.auth.sqlConnectionPool.PoolElement; readColumns[freecs.core.User, java.sql.ResultSet]; void; null; ignores>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; dbp.nameV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; doLoginUpdates[freecs.core.User, java.sql.ResultSet]; void; null; dbp.nameV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.PoolElement; logoutUser[freecs.core.User]; void; null; dbp.nameV>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; props>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updateMapping>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updateMapping>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; remove[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; mapping>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; add[java.lang.String]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; conProps>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; colV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; nameV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updColV>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.auth.sqlConnectionPool.DbProperties; DbProperties[java.util.Properties, java.util.Properties, java.util.Properties]; void; null; updNamV>
<java.util.Vector; indexOf[java.lang.Object]; int; freecs.auth.sqlConnectionPool.DbProperties; column4property[java.lang.String]; java.lang.String; null; nameV>
<java.util.Properties; load[java.io.InputStream]; void; freecs.auth.AuthManager; parseConfigFile[java.io.File]; java.util.Properties; null; props>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; toLowerCase[]; props>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String, java.lang.String]; java.lang.String; freecs.auth.AuthManager; createAuthenticators[]; void; null; props>
<java.util.Vector; add[freecs.auth.IAuthenticator]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Vector; size[]; int; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Vector; add[freecs.auth.IAuthenticator]; boolean; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Vector; toArray[freecs.auth.IAuthenticator[]]; freecs.auth.IAuthenticator[]; freecs.auth.AuthManager; createAuthenticators[]; void; null; tmpList>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.auth.SQLAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.List; add[java.lang.String]; boolean; freecs.auth.AbstractAuthenticator; parseUserList[java.lang.String]; java.util.List<java.lang.String>; null; users>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; props>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.auth.AbstractAuthenticator; filterProperties[java.util.Properties, java.lang.String]; java.util.Properties; null; newProps>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; init[java.util.Properties, java.lang.String]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; params>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; intValue[]; userdata>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; props>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.List; iterator[]; java.util.Iterator<java.lang.String>; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; users>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Hashtable; get[java.lang.Object]; ; freecs.auth.XmlRpcAuthenticator; loginUser[java.lang.String, java.lang.String, java.lang.String, freecs.interfaces.IRequest]; freecs.core.User; null; userdata>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Hashtable; put[java.lang.String, java.lang.Object]; java.lang.Object; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; userdata>
<java.util.Vector; add[java.io.Serializable]; boolean; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; params>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.auth.XmlRpcAuthenticator; logoutUser[freecs.core.User]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.SERVER_NAME>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.props>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.SERVER_NAME>
<java.util.Vector; elements[]; java.util.Enumeration<java.net.InetAddress>; freecs.content.HTTPRequest; parse[]; void; null; Server.srv.allowedLoginHosts>
<java.util.Hashtable; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.util.Properties; setProperty[java.lang.String, java.lang.String]; java.lang.Object; freecs.content.HTTPRequest; parse[]; void; null; props>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.content.HTTPRequest; getProperty[java.lang.String]; java.lang.String; null; props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.content.ContentContainer; canUseTemplateset[freecs.layout.TemplateSet]; boolean; null; St>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; getTemplateSet[java.lang.String]; freecs.layout.TemplateSet; null; tSets>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateManager; loadTemplates[]; void; null; tSets>
<java.util.HashMap; put[java.lang.Object, java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; constructTemplateSet[java.io.File]; void; null; tSets>
<java.util.HashMap; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateManager; changed[]; void; null; tSets>
<java.util.Set; iterator[]; java.util.Iterator; freecs.layout.TemplateManager; changed[]; void; null; this.tSets.keySet()>
<java.util.HashMap; keySet[]; java.util.Set; freecs.layout.TemplateManager; changed[]; void; iterator[]; this.tSets>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.layout.Template; render[freecs.interfaces.IRequest]; java.lang.String; null; Server.srv.props>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.util.Vector; addElement[java.lang.String]; void; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.util.Vector; toArray[java.lang.String[]]; java.lang.String[]; freecs.layout.Template; parseFile[java.io.File]; java.lang.String[]; null; t>
<java.util.Hashtable; put[java.lang.String, freecs.layout.Template]; freecs.layout.Template; freecs.layout.TemplateSet; createTemplates[java.io.File]; java.util.Hashtable<java.lang.String,freecs.layout.Template>; null; tempTable>
<java.util.Hashtable; get[java.lang.Object]; freecs.layout.Template; freecs.layout.TemplateSet; getTemplate[java.lang.String]; freecs.layout.Template; null; tpl>
<java.util.Hashtable; remove[java.lang.Object]; freecs.layout.Template; freecs.layout.TemplateSet; removeTemplate[freecs.layout.Template]; void; null; tpl>
<java.util.Hashtable; put[java.lang.String, freecs.layout.Template]; freecs.layout.Template; freecs.layout.TemplateSet; addTemplate[freecs.layout.Template]; void; null; tpl>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.layout.TemplateSet; getMessageTemplate[java.lang.String]; java.lang.String; null; props>
<java.util.Properties; load[java.io.InputStream]; void; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<java.util.Hashtable; clone[]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<java.util.Hashtable; get[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; props>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Hashtable; remove[java.lang.Object]; java.lang.Object; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Hashtable; keys[]; java.util.Enumeration<java.lang.Object>; freecs.layout.TemplateSet; readMessageSet[java.io.File]; void; null; tProps>
<java.util.Properties; load[java.io.InputStream]; void; freecs.layout.TemplateSet; changed[]; void; null; tprop>
<java.util.Hashtable; containsKey[java.lang.Object]; boolean; freecs.layout.TemplateSet; checkTemplateCompleteness[java.lang.String[]]; boolean; null; tpl>


Calls That Are Candidatas (38)

<java.util.Set; size[]; int; freecs.core.CentralSelector; run[]; void; null; sel.keys()>
<java.util.Vector; contains[java.lang.Object]; boolean; freecs.commands.CmdBan; execute[freecs.content.MessageState, java.lang.String]; boolean; null; msgState.targetGroup.bannedUsers()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; props.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.GroupManager; checkProperties[java.io.File, freecs.core.Group, freecs.core.User]; freecs.core.Group; null; map.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.util.logger.LogCleaner; run[]; void; null; ldWorkingCopy.keySet()>
<java.util.Collection; toArray[freecs.core.Group[]]; freecs.core.Group[]; freecs.core.GroupManager; currentGroupList[]; freecs.core.Group[]; null; grps.values()>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrName.entrySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.User>>; freecs.core.UserManager.UserStore; state[]; java.lang.String; null; usrCookie.entrySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.commands.CommandSet; checkActivatedCommands[]; java.util.HashMap<java.lang.String,java.lang.Object>; null; allCmds.keySet()>
<java.util.Collection; toArray[freecs.core.User[]]; freecs.core.User[]; freecs.core.UserManager.UserStore; toArray[]; freecs.core.User[]; null; usrName.values()>
<java.util.Collection; iterator[]; java.util.Iterator<freecs.core.User>; freecs.core.UserManager.UserStore.UserStoreIterator; UserStoreIterator[freecs.core.UserManager.UserStore]; void; null; usrName.values()>
<java.util.Collection; iterator[]; java.util.Iterator; freecs.util.GroupUserList; iterator[]; java.util.Iterator; null; ht.values()>
<java.util.Set; iterator[]; java.util.Iterator; freecs.util.GroupUserList; sendMessage[freecs.content.MessageState, java.lang.String, boolean]; void; null; ht.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; removeNow[]; void; null; memberships.entrySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.util.Map.Entry<java.lang.String,freecs.core.Membership>>; freecs.core.User; rebuildMemberships[]; void; null; memberships.entrySet()>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; updateSscRecieveBuffer[int]; void; null; l.ia2ssc.values()>
<java.util.Collection; iterator[]; java.util.Iterator<java.nio.channels.ServerSocketChannel>; freecs.core.Listener; reinitSSC[]; void; null; ia2ssc.values()>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.selectedKeys()>
<java.util.Set; iterator[]; java.util.Iterator<java.nio.channels.SelectionKey>; freecs.core.Listener; run[]; void; null; sel.keys()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightEntrace[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRightSepa[int, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Properties; getProperty[java.lang.String]; java.lang.String; freecs.commands.AbstractCommand; hasMinRight[int, freecs.core.Group, freecs.content.MessageState, java.lang.String]; boolean; null; CommandSet.getCommandSet().getCommandSetProps()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; hm.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.MembershipManager; init[java.util.Properties]; void; null; props.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.core.Membership; init[java.util.Properties]; void; null; p.keySet()>
<java.util.SortedMap; keySet[]; java.util.Set<java.lang.String>; freecs.Server; main[java.lang.String[]]; void; null; Charset.availableCharsets()>
<java.util.Vector; size[]; int; freecs.commands.CmdShowIp; execute[freecs.content.MessageState, java.lang.String]; boolean; null; UserManager.mgr.anoProxyUserList()>
<java.util.Vector; size[]; int; freecs.core.MessageParser; parseAndSendMessage[]; void; null; msgState.sender.whisper()>
<java.util.HashMap; size[]; int; freecs.external.StateRequestHandler; handle[freecs.interfaces.IRequest, freecs.content.ContentContainer]; void; null; LogCleaner.instance.getLogDestinations()>
<java.util.Vector; size[]; int; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<java.util.Vector; elements[]; java.util.Enumeration<java.lang.String>; freecs.external.WebadminRequestHandler; displayGroup[freecs.core.Group, java.lang.StringBuffer]; void; null; g.getAutoSuList()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Object>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; props.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; checkProperties[java.io.File, freecs.core.Group]; freecs.core.Group; null; map.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; Server.srv.pluginStore.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.WebadminRequestHandler; renderConfigoverview[freecs.interfaces.IRequest, java.lang.StringBuffer]; void; null; GroupManager.mgr.getGroupPlugins().keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.String>; freecs.external.xmlrpc.XmlRpcManager; start[]; void; null; handler.keySet()>
<java.util.Set; iterator[]; java.util.Iterator<java.lang.Thread>; freecs.core.RequestMonitor; run[]; void; null; monitors.keySet()>
<java.util.Vector; size[]; int; freecs.core.MessageRenderer; evalVariable[freecs.content.MessageState, java.lang.String]; java.lang.String; null; UserManager.mgr.onlineVipList()>


Calls That Broken Confinement (0)

