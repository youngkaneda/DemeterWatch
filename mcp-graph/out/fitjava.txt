<fit.Parse, last[], fit.Parse, eg.AllCombinations, doTable[fit.Parse], null>
<eg.AllCombinations, combinations[], void, eg.AllCombinations, doTable[fit.Parse], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllCombinations, doRow[fit.Parse, java.util.List], null>
<eg.AllCombinations, combinations[int, java.util.List], void, eg.AllCombinations, combinations[], null>
<java.util.List, size[], int, eg.AllCombinations, combinations[int, java.util.List], null>
<eg.AllCombinations, doCase[java.util.List], void, eg.AllCombinations, combinations[int, java.util.List], null>
<java.util.List, get[int], java.lang.Object, eg.AllCombinations, combinations[int, java.util.List], null>
<java.util.List, iterator[], java.util.Iterator, eg.AllCombinations, combinations[int, java.util.List], null>
<java.util.Iterator, hasNext[], boolean, eg.AllCombinations, combinations[int, java.util.List], null>
<java.util.List, set[int, java.lang.Object], java.lang.Object, eg.AllCombinations, combinations[int, java.util.List], null>
<java.util.Iterator, next[], java.lang.Object, eg.AllCombinations, combinations[int, java.util.List], null>
<eg.AllCombinations, combinations[int, java.util.List], void, eg.AllCombinations, combinations[int, java.util.List], null>
<eg.AllFiles, tr[fit.Parse, fit.Parse], fit.Parse, eg.AllCombinations, doCase[java.util.List], null>
<eg.AllFiles, td[java.lang.String, fit.Parse], fit.Parse, eg.AllCombinations, doCase[java.util.List], null>
<fit.Parse, addToTag[java.lang.String], void, eg.AllCombinations, doCase[java.util.List], null>
<fit.Parse, leaf[], fit.Parse, eg.AllCombinations, doCase[java.util.List], addToTag[java.lang.String]>
<fit.Parse, last[], fit.Parse, eg.AllCombinations, doCase[java.util.List], null>
<fit.Parse, leaf[], fit.Parse, eg.AllFiles, doRow[fit.Parse], null>
<eg.AllFiles, expand[java.lang.String], java.util.List, eg.AllFiles, doRow[fit.Parse], null>
<fit.Parse, text[], java.lang.String, eg.AllFiles, doRow[fit.Parse], null>
<java.util.List, size[], int, eg.AllFiles, doRow[fit.Parse], null>
<eg.AllFiles, doRow[fit.Parse, java.util.List], void, eg.AllFiles, doRow[fit.Parse], null>
<fit.Fixture, ignore[fit.Parse], void, eg.AllFiles, doRow[fit.Parse], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, eg.AllFiles, doRow[fit.Parse], null>
<eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], void, eg.AllFiles, expand[java.lang.String], null>
<java.util.StringTokenizer, hasMoreTokens[], boolean, eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], null>
<java.io.File, listFiles[java.io.FilenameFilter], java.io.File[], eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], null>
<eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], void, eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllFiles, expand[java.io.File, java.util.StringTokenizer, java.util.List], null>
<eg.AllFiles, doFiles[fit.Parse, java.util.List], void, eg.AllFiles, doRow[fit.Parse, java.util.List], null>
<java.util.List, iterator[], java.util.Iterator, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<java.util.Iterator, hasNext[], boolean, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<java.util.Iterator, next[], java.lang.Object, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, td[java.lang.String, fit.Parse], fit.Parse, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<java.io.File, getName[], java.lang.String, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, td[java.lang.String, fit.Parse], fit.Parse, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, tr[fit.Parse, fit.Parse], fit.Parse, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], void, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, summarize[fit.Fixture, java.io.File], void, eg.AllFiles, doFiles[fit.Parse, java.util.List], null>
<eg.AllFiles, pushAndCheck[java.io.File], boolean, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, ignore[fit.Parse], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<eg.AllFiles, read[java.io.File], java.lang.String, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<java.lang.String, indexOf[java.lang.String], int, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, doTables[fit.Parse], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, doTables[fit.Parse], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Counts, toString[], java.lang.String, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, right[fit.Parse], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, wrong[fit.Parse], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Parse, addToBody[java.lang.String], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Parse, footnote[], java.lang.String, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<eg.AllFiles, pop[java.io.File], void, eg.AllFiles, run[java.io.File, fit.Fixture, fit.Parse], null>
<java.io.File, getAbsolutePath[], java.lang.String, eg.AllFiles, pushAndCheck[java.io.File], null>
<java.util.List, contains[java.lang.Object], boolean, eg.AllFiles, pushAndCheck[java.io.File], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllFiles, pushAndCheck[java.io.File], null>
<java.util.List, remove[java.lang.Object], boolean, eg.AllFiles, pop[java.io.File], null>
<java.io.File, getAbsolutePath[], java.lang.String, eg.AllFiles, pop[java.io.File], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.io.File, getAbsolutePath[], java.lang.String, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.io.File, lastModified[], long, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.util.Map, containsKey[java.lang.Object], boolean, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<fit.Counts, tally[fit.Counts], void, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, eg.AllFiles, summarize[fit.Fixture, java.io.File], null>
<java.io.File, length[], long, eg.AllFiles, read[java.io.File], null>
<java.io.Reader, read[char[]], int, eg.AllFiles, read[java.io.File], null>
<java.io.InputStreamReader, close[], void, eg.AllFiles, read[java.io.File], null>
<fit.Fixture, info[java.lang.String], java.lang.String, eg.AllFiles, td[java.lang.String, fit.Parse], null>
<java.lang.String, indexOf[java.lang.String], int, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, substring[int], java.lang.String, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, length[], int, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, length[], int, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, length[], int, eg.AllFiles.WildCard, WildCard[java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, eg.AllFiles.WildCard, accept[java.io.File, java.lang.String], null>
<java.lang.String, length[], int, eg.AllFiles.WildCard, accept[java.io.File, java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, eg.AllFiles.WildCard, accept[java.io.File, java.lang.String], null>
<java.lang.String, length[], int, eg.AllFiles.WildCard, accept[java.io.File, java.lang.String], null>
<java.lang.String, endsWith[java.lang.String], boolean, eg.AllFiles.WildCard, accept[java.io.File, java.lang.String], null>
<eg.AllFiles, expand[java.lang.String], java.util.List, eg.AllFiles.Expand, expansion[], null>
<java.util.List, size[], int, eg.AllFiles.Expand, expansion[], null>
<java.io.File, getName[], java.lang.String, eg.AllFiles.Expand, expansion[], null>
<java.util.List, get[int], java.lang.Object, eg.AllFiles.Expand, expansion[], getName[]>
<eg.AllPairs, populate[], void, eg.AllPairs, combinations[], null>
<eg.AllPairs, generate[], void, eg.AllPairs, combinations[], null>
<eg.AllPairs, doAllVars[], void, eg.AllPairs, populate[], null>
<eg.AllPairs, doAllVarPairs[], void, eg.AllPairs, populate[], null>
<java.util.List, size[], int, eg.AllPairs, doAllVars[], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs, doAllVars[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs, doAllVars[], null>
<eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], void, eg.AllPairs, doAllVars[], null>
<java.util.List, size[], int, eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], null>
<java.io.File, getName[], java.lang.String, eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], getName[]>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs, doAllItems[eg.AllPairs.Var, java.util.List], null>
<java.util.List, size[], int, eg.AllPairs, doAllVarPairs[], null>
<java.util.List, size[], int, eg.AllPairs, doAllVarPairs[], null>
<eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], void, eg.AllPairs, doAllVarPairs[], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs, doAllVarPairs[], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs, doAllVarPairs[], null>
<eg.AllPairs$Var, size[], int, eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], null>
<eg.AllPairs$Var, size[], int, eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], null>
<java.util.Set, add[java.lang.Object], boolean, eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], null>
<eg.AllPairs$Var, get[int], eg.AllPairs.Item, eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], null>
<eg.AllPairs$Var, get[int], eg.AllPairs.Item, eg.AllPairs, doAllItemPairs[eg.AllPairs.Var, eg.AllPairs.Var], null>
<java.util.SortedSet, first[], java.lang.Object, eg.AllPairs, generate[], null>
<eg.AllPairs, emit[eg.AllPairs.Item[]], void, eg.AllPairs, generate[], null>
<eg.AllPairs, nextCase[], eg.AllPairs.Item[], eg.AllPairs, generate[], null>
<java.util.List, size[], int, eg.AllPairs, nextCase[], null>
<eg.AllPairs, isFull[eg.AllPairs.Item[]], boolean, eg.AllPairs, nextCase[], null>
<eg.AllPairs, nextFit[eg.AllPairs.Item[]], eg.AllPairs.Pair, eg.AllPairs, nextCase[], null>
<eg.AllPairs, fill[eg.AllPairs.Item[], eg.AllPairs.Pair], void, eg.AllPairs, nextCase[], null>
<java.util.Set, add[java.lang.Object], boolean, eg.AllPairs, fill[eg.AllPairs.Item[], eg.AllPairs.Pair], null>
<eg.AllPairs$Pair, isFit[eg.AllPairs.Item[]], boolean, eg.AllPairs, nextFit[eg.AllPairs.Item[]], null>
<eg.AllPairs, nextPair[], eg.AllPairs.Pair, eg.AllPairs, nextFit[eg.AllPairs.Item[]], isFit[eg.AllPairs.Item[]]>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs, nextFit[eg.AllPairs.Item[]], null>
<java.util.Set, addAll[java.util.Collection], boolean, eg.AllPairs, nextFit[eg.AllPairs.Item[]], null>
<java.util.SortedSet, first[], java.lang.Object, eg.AllPairs, nextPair[], null>
<java.util.Set, remove[java.lang.Object], boolean, eg.AllPairs, nextPair[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs, emit[eg.AllPairs.Item[]], null>
<eg.AllPairs$Item, file[], java.io.File, eg.AllPairs, emit[eg.AllPairs.Item[]], null>
<eg.AllCombinations, doCase[java.util.List], void, eg.AllPairs, emit[eg.AllPairs.Item[]], null>
<java.util.List, size[], int, eg.AllPairs.Var, size[], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs.Var, get[int], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs.Item, file[], null>
<java.io.File, getName[], java.lang.String, eg.AllPairs.Item, toString[], null>
<eg.AllPairs$Item, file[], java.io.File, eg.AllPairs.Item, toString[], getName[]>
<eg.AllPairs$Item, isFit[eg.AllPairs.Item[]], boolean, eg.AllPairs.Pair, isFit[eg.AllPairs.Item[]], null>
<eg.AllPairs$Item, isFit[eg.AllPairs.Item[]], boolean, eg.AllPairs.Pair, isFit[eg.AllPairs.Item[]], null>
<eg.AllPairs$Pair, rank[], int, eg.AllPairs.Pair, compareTo[java.lang.Object], null>
<eg.AllPairs$Pair, rank[], int, eg.AllPairs.Pair, compareTo[java.lang.Object], null>
<eg.AllPairs, populate[], void, eg.AllPairs.Setup, doTable[fit.Parse], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, eg.AllPairs.Setup, doCell[fit.Parse, int], equals[java.lang.Object]>
<java.util.List, size[], int, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs.Setup, doCell[fit.Parse, int], add[java.lang.Object]>
<fit.Parse, text[], java.lang.String, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<fit.Fixture, right[fit.Parse], void, eg.AllPairs.Setup, doCell[fit.Parse, int], null>
<java.util.SortedSet, first[], java.lang.Object, eg.AllPairs.Cases, query[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Cases, query[], null>
<eg.AllPairs, nextCase[], eg.AllPairs.Item[], eg.AllPairs.Cases, query[], null>
<java.util.List, size[], int, eg.AllPairs.Cases, query[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Cases, query[], null>
<java.util.List, get[int], java.lang.Object, eg.AllPairs.Cases, query[], null>
<java.util.List, toArray[], java.lang.Object[], eg.AllPairs.Cases, query[], null>
<java.util.Set, toArray[], java.lang.Object[], eg.AllPairs.Pairs, query[], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.AllPairs.Pairs, parse[java.lang.String, java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, eg.AllPairs.Pairs, parse[java.lang.String, java.lang.Class], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, eg.AllPairs.Pairs, parse[java.lang.String, java.lang.Class], null>
<eg.AllPairs, nextPair[], eg.AllPairs.Pair, eg.AllPairs.Step, next[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Step, next[], null>
<eg.AllPairs$Pair, toString[], java.lang.String, eg.AllPairs.Step, next[], null>
<eg.AllPairs, nextFit[eg.AllPairs.Item[]], eg.AllPairs.Pair, eg.AllPairs.Step, nextFit[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Step, nextFit[], null>
<eg.AllPairs$Pair, toString[], java.lang.String, eg.AllPairs.Step, nextFit[], null>
<eg.AllPairs$Pair, rank[], int, eg.AllPairs.Step, rank[], null>
<eg.AllPairs$Pair, isFit[eg.AllPairs.Item[]], boolean, eg.AllPairs.Step, isFit[], null>
<eg.AllPairs, fill[eg.AllPairs.Item[], eg.AllPairs.Pair], void, eg.AllPairs.Step, isFit[], null>
<java.util.Set, addAll[java.util.Collection], boolean, eg.AllPairs.Step, isFit[], null>
<java.util.List, size[], int, eg.AllPairs.Step, hold[], null>
<eg.AllPairs, isFull[eg.AllPairs.Item[]], boolean, eg.AllPairs.Step, isFull[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Step, isFull[], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.AllPairs.Step, parse[java.lang.String, java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, eg.AllPairs.Step, parse[java.lang.String, java.lang.Class], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, eg.AllPairs.Step, parse[java.lang.String, java.lang.Class], null>
<eg.AllPairs$Stats, setup[eg.AllPairs], void, eg.AllPairs.Stats, cases[], null>
<eg.AllPairs, populate[], void, eg.AllPairs.Stats, cases[], null>
<eg.AllPairs$Stats, generate[eg.AllPairs], int, eg.AllPairs.Stats, cases[], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Stats, setup[eg.AllPairs], null>
<java.lang.Integer, toString[int], java.lang.String, eg.AllPairs.Stats, setup[eg.AllPairs], null>
<java.util.List, add[java.lang.Object], boolean, eg.AllPairs.Stats, setup[eg.AllPairs], null>
<java.lang.System, currentTimeMillis[], long, eg.AllPairs.Stats, generate[eg.AllPairs], null>
<java.util.SortedSet, first[], java.lang.Object, eg.AllPairs.Stats, generate[eg.AllPairs], null>
<eg.AllPairs, nextCase[], eg.AllPairs.Item[], eg.AllPairs.Stats, generate[eg.AllPairs], null>
<java.util.Set, size[], int, eg.AllPairs.Stats, generate[eg.AllPairs], null>
<java.lang.System, currentTimeMillis[], long, eg.AllPairs.Stats, generate[eg.AllPairs], null>
<java.lang.Math, sin[double], double, eg.ArithmeticColumnFixture, sin[], null>
<java.lang.Math, toRadians[double], double, eg.ArithmeticColumnFixture, sin[], null>
<java.lang.Math, cos[double], double, eg.ArithmeticColumnFixture, cos[], null>
<java.lang.Math, toRadians[double], double, eg.ArithmeticColumnFixture, cos[], null>
<fit.PrimitiveFixture, parseLong[fit.Parse], long, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, parseLong[fit.Parse], long, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, check[fit.Parse, long], void, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, check[fit.Parse, long], void, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, check[fit.Parse, long], void, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, check[fit.Parse, long], void, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<fit.Fixture, ignore[fit.Parse], void, eg.ArithmeticFixture, doCell[fit.Parse, int], null>
<eg.BinaryChop, chopFriday[int, int[]], int, eg.BinaryChop, result[], null>
<eg.BinaryChop, chopMonday[int, int[]], int, eg.BinaryChop, mon[], null>
<eg.BinaryChop, chopTuesday[int, int[]], int, eg.BinaryChop, tue[], null>
<eg.BinaryChop, chopWednesday[int, int[]], int, eg.BinaryChop, wed[], null>
<eg.BinaryChop, chopThursday[int, int[]], int, eg.BinaryChop, thr[], null>
<eg.BinaryChop, chopFriday[int, int[]], int, eg.BinaryChop, fri[], null>
<java.lang.Integer, compareTo[java.lang.Integer], int, eg.BinaryChop, chopTuesday[int, int[]], null>
<eg.BinaryChop, chopWednesday[int, int[]], int, eg.BinaryChop, chopWednesday[int, int[]], null>
<eg.BinaryChop, subarray[int[], int, int], int[], eg.BinaryChop, chopWednesday[int, int[]], null>
<eg.BinaryChop, chopWednesday[int, int[]], int, eg.BinaryChop, chopWednesday[int, int[]], null>
<eg.BinaryChop, subarray[int[], int, int], int[], eg.BinaryChop, chopWednesday[int, int[]], null>
<java.util.Random, nextDouble[], double, eg.BinaryChop, chopThursday[int, int[]], null>
<eg.Calculator$HP35, key[java.lang.String], void, eg.Calculator, execute[], null>
<eg.Calculator$HP35, numeric[java.lang.String], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Double, parseDouble[java.lang.String], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, exp[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, log[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, sqrt[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, log[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, sin[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, toRadians[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, cos[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, toRadians[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, push[double], void, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, tan[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.Math, toRadians[double], double, eg.Calculator.HP35, key[java.lang.String], null>
<eg.Calculator$HP35, pop[], double, eg.Calculator.HP35, key[java.lang.String], null>
<java.lang.String, length[], int, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.Character, isDigit[char], boolean, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.String, charAt[int], char, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.String, length[], int, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.String, charAt[int], char, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.Character, isDigit[char], boolean, eg.Calculator.HP35, numeric[java.lang.String], null>
<java.lang.String, charAt[int], char, eg.Calculator.HP35, numeric[java.lang.String], null>
<eg.Calculator$HP35, push[], void, eg.Calculator.HP35, push[double], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, query[], null>
<fit.Parse, text[], java.lang.String, eg.ColumnIndex, query[], equals[java.lang.Object]>
<java.util.Set, add[java.lang.Object], boolean, eg.ColumnIndex, query[], null>
<fit.Parse, text[], java.lang.String, eg.ColumnIndex, query[], null>
<fit.Parse, at[int, int], fit.Parse, eg.ColumnIndex, query[], text[]>
<java.util.Set, iterator[], java.util.Iterator, eg.ColumnIndex, query[], null>
<java.util.Iterator, hasNext[], boolean, eg.ColumnIndex, query[], null>
<java.lang.Class, forName[java.lang.String], java.lang.Class, eg.ColumnIndex, query[], null>
<java.util.Iterator, next[], java.lang.Object, eg.ColumnIndex, query[], null>
<java.lang.Class, getFields[], java.lang.reflect.Field[], eg.ColumnIndex, query[], null>
<java.lang.reflect.Field, getModifiers[], int, eg.ColumnIndex, query[], null>
<java.util.ArrayList, add[java.lang.Object], boolean, eg.ColumnIndex, query[], null>
<java.lang.Class, getMethods[], java.lang.reflect.Method[], eg.ColumnIndex, query[], null>
<java.lang.reflect.Method, getParameterTypes[], java.lang.Class[], eg.ColumnIndex, query[], null>
<java.lang.reflect.Method, getModifiers[], int, eg.ColumnIndex, query[], null>
<java.util.ArrayList, add[java.lang.Object], boolean, eg.ColumnIndex, query[], null>
<java.util.ArrayList, toArray[], java.lang.Object[], eg.ColumnIndex, query[], null>
<java.lang.Object, equals[java.lang.Object], boolean, eg.ColumnIndex, parse[java.lang.String, java.lang.Class], null>
<eg.ColumnIndex, parseClass[java.lang.String], java.lang.Class, eg.ColumnIndex, parse[java.lang.String, java.lang.Class], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.Class, forName[java.lang.String], java.lang.Class, eg.ColumnIndex, parseClass[java.lang.String], null>
<java.lang.reflect.Field, getDeclaringClass[], java.lang.Class, eg.ColumnIndex.Column, Column[java.lang.reflect.Field], null>
<java.lang.reflect.Field, getName[], java.lang.String, eg.ColumnIndex.Column, Column[java.lang.reflect.Field], null>
<java.lang.reflect.Field, getType[], java.lang.Class, eg.ColumnIndex.Column, Column[java.lang.reflect.Field], null>
<java.lang.reflect.Method, getDeclaringClass[], java.lang.Class, eg.ColumnIndex.Column, Column[java.lang.reflect.Method], null>
<java.lang.reflect.Method, getName[], java.lang.String, eg.ColumnIndex.Column, Column[java.lang.reflect.Method], null>
<java.lang.reflect.Method, getReturnType[], java.lang.Class, eg.ColumnIndex.Column, Column[java.lang.reflect.Method], null>
<eg.ExampleTests, read[java.io.File], java.lang.String, eg.ExampleTests, run[], null>
<fit.Fixture, doTables[fit.Parse], void, eg.ExampleTests, run[], null>
<fit.Fixture, doTables[fit.Parse], void, eg.ExampleTests, run[], null>
<fit.Counts, tally[fit.Counts], void, eg.ExampleTests, run[], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, eg.ExampleTests, run[], null>
<eg.ExampleTests, run[], void, eg.ExampleTests, right[], null>
<java.io.File, length[], long, eg.ExampleTests, read[java.io.File], null>
<java.io.Reader, read[char[]], int, eg.ExampleTests, read[java.io.File], null>
<java.io.InputStreamReader, close[], void, eg.ExampleTests, read[java.io.File], null>
<fit.Parse, leaf[], fit.Parse, eg.ExampleTests, doRow[fit.Parse], null>
<fit.Parse, footnote[], java.lang.String, eg.ExampleTests, wrong[fit.Parse], null>
<fit.Parse, addToBody[java.lang.String], void, eg.ExampleTests, wrong[fit.Parse], null>
<eg.music.MusicLibrary, load[java.lang.String], void, eg.music.Browser, library[java.lang.String], null>
<eg.music.MusicLibrary, select[eg.music.Music], void, eg.music.Browser, select[int], null>
<eg.music.Music, time[], double, eg.music.Browser, time[], null>
<eg.music.Music, track[], java.lang.String, eg.music.Browser, track[], null>
<eg.music.MusicLibrary, findAlbum[java.lang.String], void, eg.music.Browser, sameAlbum[], null>
<eg.music.MusicLibrary, findArtist[java.lang.String], void, eg.music.Browser, sameArtist[], null>
<eg.music.MusicLibrary, findGenre[java.lang.String], void, eg.music.Browser, sameGenre[], null>
<eg.music.MusicLibrary, findYear[int], void, eg.music.Browser, sameYear[], null>
<eg.music.MusicLibrary, displayCount[], int, eg.music.Browser, selectedSongs[], null>
<eg.music.MusicLibrary, findAll[], void, eg.music.Browser, showAll[], null>
<eg.music.MusicPlayer, play[eg.music.Music], void, eg.music.Browser, play[], null>
<eg.music.MusicPlayer, pause[], void, eg.music.Browser, pause[], null>
<eg.music.MusicPlayer, minutesRemaining[], double, eg.music.Browser, remaining[], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.music.Dialog, ok[], null>
<eg.music.MusicPlayer, stop[], void, eg.music.Dialog, ok[], null>
<eg.music.MusicLibrary, displayContents[], eg.music.Music[], eg.music.Display, query[], null>
<java.lang.Object, equals[java.lang.Object], boolean, eg.music.Display, parse[java.lang.String, java.lang.Class], null>
<java.text.DateFormat, parse[java.lang.String], java.util.Date, eg.music.Display, parse[java.lang.String, java.lang.Class], null>
<java.lang.Math, round[double], long, eg.music.Music, time[], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.lang.Long, parseLong[java.lang.String], long, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.lang.Integer, parseInt[java.lang.String], int, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.lang.Integer, parseInt[java.lang.String], int, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.lang.Integer, parseInt[java.lang.String], int, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.lang.Integer, parseInt[java.lang.String], int, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.text.DateFormat, parse[java.lang.String], java.util.Date, eg.music.Music, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.music.Music, parse[java.lang.String], null>
<java.io.BufferedReader, readLine[], java.lang.String, eg.music.MusicLibrary, load[java.lang.String], null>
<java.io.BufferedReader, ready[], boolean, eg.music.MusicLibrary, load[java.lang.String], null>
<java.util.List, add[java.lang.Object], boolean, eg.music.MusicLibrary, load[java.lang.String], null>
<eg.music.Music, parse[java.lang.String], eg.music.Music, eg.music.MusicLibrary, load[java.lang.String], null>
<java.io.BufferedReader, readLine[], java.lang.String, eg.music.MusicLibrary, load[java.lang.String], null>
<java.io.BufferedReader, close[], void, eg.music.MusicLibrary, load[java.lang.String], null>
<java.util.List, toArray[java.lang.Object[]], java.lang.Object[], eg.music.MusicLibrary, load[java.lang.String], null>
<eg.music.Simulator, schedule[double], long, eg.music.MusicLibrary, search[double], null>
<eg.music.MusicLibrary, search[double], void, eg.music.MusicLibrary, findAll[], null>
<eg.music.MusicLibrary, search[double], void, eg.music.MusicLibrary, findArtist[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.music.MusicLibrary, findArtist[java.lang.String], null>
<eg.music.MusicLibrary, search[double], void, eg.music.MusicLibrary, findAlbum[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.music.MusicLibrary, findAlbum[java.lang.String], null>
<eg.music.MusicLibrary, search[double], void, eg.music.MusicLibrary, findGenre[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, eg.music.MusicLibrary, findGenre[java.lang.String], null>
<eg.music.MusicLibrary, search[double], void, eg.music.MusicLibrary, findYear[int], null>
<eg.music.MusicLibrary, displayCount[], int, eg.music.MusicLibrary, displayContents[], null>
<eg.music.Simulator, schedule[double], long, eg.music.MusicPlayer, play[eg.music.Music], null>
<eg.music.Simulator, schedule[double], long, eg.music.MusicPlayer, play[eg.music.Music], null>
<eg.music.MusicPlayer, playComplete[], void, eg.music.MusicPlayer, stop[], null>
<java.lang.Math, round[double], long, eg.music.MusicPlayer, minutesRemaining[], null>
<eg.music.MusicPlayer, secondsRemaining[], double, eg.music.MusicPlayer, minutesRemaining[], null>
<eg.music.Simulator, schedule[double], long, eg.music.MusicPlayer, playStarted[], null>
<java.lang.Double, parseDouble[java.lang.String], double, eg.music.Realtime, pause[], null>
<fit.Parse, text[], java.lang.String, eg.music.Realtime, pause[], null>
<eg.music.Simulator, delay[double], void, eg.music.Realtime, pause[], null>
<eg.music.Realtime, system[java.lang.String, fit.Parse], void, eg.music.Realtime, await[], delay[double]>
<eg.music.Realtime, system[java.lang.String, fit.Parse], void, eg.music.Realtime, fail[], null>
<eg.music.Simulator, delay[double], void, eg.music.Realtime, enter[], null>
<eg.music.Simulator, delay[double], void, eg.music.Realtime, press[], null>
<fit.Fixture, camel[java.lang.String], java.lang.String, eg.music.Realtime, system[java.lang.String, fit.Parse], null>
<fit.Parse, text[], java.lang.String, eg.music.Realtime, system[java.lang.String, fit.Parse], null>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, eg.music.Realtime, system[java.lang.String, fit.Parse], null>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, eg.music.Realtime, system[java.lang.String, fit.Parse], invoke[java.lang.Object, java.lang.Object[]]>
<java.lang.Object, getClass[], java.lang.Class, eg.music.Realtime, system[java.lang.String, fit.Parse], getMethod[java.lang.String, java.lang.Class[]]>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, eg.music.Realtime, system[java.lang.String, fit.Parse], null>
<java.util.Date, getTime[], long, eg.music.Realtime, system[java.lang.String, fit.Parse], null>
<eg.music.Simulator, sooner[long, long], long, eg.music.Simulator, nextEvent[long], null>
<eg.music.Simulator, sooner[long, long], long, eg.music.Simulator, nextEvent[long], null>
<eg.music.Simulator, sooner[long, long], long, eg.music.Simulator, nextEvent[long], null>
<eg.music.MusicLibrary, searchComplete[], void, eg.music.Simulator, perform[], null>
<eg.music.MusicPlayer, playStarted[], void, eg.music.Simulator, perform[], null>
<eg.music.MusicPlayer, playComplete[], void, eg.music.Simulator, perform[], null>
<eg.music.Simulator, nextEvent[long], long, eg.music.Simulator, advance[long], null>
<eg.music.Simulator, perform[], void, eg.music.Simulator, advance[long], null>
<eg.music.Simulator, advance[long], void, eg.music.Simulator, delay[double], null>
<eg.music.Simulator, schedule[double], long, eg.music.Simulator, delay[double], null>
<eg.music.Simulator, advance[long], void, eg.music.Simulator, waitSearchComplete[], null>
<eg.music.Simulator, advance[long], void, eg.music.Simulator, waitPlayStarted[], null>
<eg.music.Simulator, advance[long], void, eg.music.Simulator, waitPlayComplete[], null>
<java.util.StringTokenizer, hasMoreTokens[], boolean, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.lang.String, toLowerCase[], java.lang.String, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.net.GeoCoordinate, parse[java.lang.String], toLowerCase[]>
<java.lang.String, charAt[int], char, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.lang.Character, isDigit[char], boolean, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.lang.Float, parseFloat[java.lang.String], float, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.lang.String, indexOf[int], int, eg.net.GeoCoordinate, parse[java.lang.String], null>
<java.lang.Class, isInstance[java.lang.Object], boolean, eg.net.GeoCoordinate, equals[java.lang.Object], null>
<java.lang.Object, getClass[], java.lang.Class, eg.net.GeoCoordinate, equals[java.lang.Object], isInstance[java.lang.Object]>
<java.text.DecimalFormat, setMaximumFractionDigits[int], void, eg.net.GeoCoordinate, toString[], null>
<java.text.NumberFormat, format[double], java.lang.String, eg.net.GeoCoordinate, toString[], null>
<java.lang.Math, abs[float], float, eg.net.GeoCoordinate, toString[], null>
<java.text.NumberFormat, format[double], java.lang.String, eg.net.GeoCoordinate, toString[], null>
<java.lang.Math, abs[float], float, eg.net.GeoCoordinate, toString[], null>
<java.lang.Object, equals[java.lang.Object], boolean, eg.net.Simulator, parse[java.lang.String, java.lang.Class], null>
<eg.net.GeoCoordinate, parse[java.lang.String], eg.net.GeoCoordinate, eg.net.Simulator, parse[java.lang.String, java.lang.Class], null>
<eg.Page, get[java.net.URL], java.lang.String, eg.Page, location[java.lang.String], null>
<fit.Parse, text[], java.lang.String, eg.Page, title[], null>
<java.lang.String, startsWith[java.lang.String], boolean, eg.Page, link[java.lang.String], null>
<fit.Parse, text[], java.lang.String, eg.Page, link[java.lang.String], startsWith[java.lang.String]>
<java.lang.String, equals[java.lang.Object], boolean, eg.Page, link[java.lang.String], null>
<java.lang.String, toLowerCase[], java.lang.String, eg.Page, link[java.lang.String], equals[java.lang.Object]>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.Page, link[java.lang.String], toLowerCase[]>
<java.util.StringTokenizer, nextToken[], java.lang.String, eg.Page, link[java.lang.String], null>
<eg.Page, get[java.net.URL], java.lang.String, eg.Page, link[java.lang.String], null>
<fit.Parse, at[int, int, int], fit.Parse, eg.Page, query[], null>
<fit.Parse, size[], int, eg.Page, query[], null>
<fit.Parse, text[], java.lang.String, eg.Page.Row, numerator[], null>
<fit.Parse, at[int], fit.Parse, eg.Page.Row, numerator[], text[]>
<fit.Parse, text[], java.lang.String, eg.Page.Row, denominator[], null>
<fit.Parse, at[int], fit.Parse, eg.Page.Row, denominator[], text[]>
<fit.Parse, text[], java.lang.String, eg.Page.Row, quotient[], null>
<fit.Parse, at[int], fit.Parse, eg.Page.Row, quotient[], text[]>
<java.net.URL, getContent[], java.lang.Object, eg.Page, get[java.net.URL], null>
<java.io.BufferedReader, readLine[], java.lang.String, eg.Page, get[java.net.URL], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, eg.Page, get[java.net.URL], null>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, eg.Page, get[java.net.URL], null>
<java.lang.StringBuffer, toString[], java.lang.String, eg.Page, get[java.net.URL], null>
<java.lang.Math, sqrt[double], double, eg.Sqrt, sqrt[], null>
<fit.Parse, at[int, int], fit.Parse, fat.AnnotationFixture, ResultingHTML[], sqrt[double]>
<fit.Parse, at[int, int], fit.Parse, fat.AnnotationFixture, ResultingHTML[], null>
<fit.Parse, addToBody[java.lang.String], void, fat.AnnotationFixture, ResultingHTML[], null>
<fit.Parse, addToTag[java.lang.String], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, stripDelimiters[java.lang.String], java.lang.String, fat.AnnotationFixture, ResultingHTML[], null>
<fit.Parse, addToTag[java.lang.String], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, stripDelimiters[java.lang.String], java.lang.String, fat.AnnotationFixture, ResultingHTML[], null>
<fit.Parse, addToTag[java.lang.String], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, stripDelimiters[java.lang.String], java.lang.String, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, addParse[fit.Parse, java.lang.String, java.lang.String[]], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, removeParse[fit.Parse], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, addParse[fit.Parse, java.lang.String, java.lang.String[]], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, removeParse[fit.Parse], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, addParse[fit.Parse, java.lang.String, java.lang.String[]], void, fat.AnnotationFixture, ResultingHTML[], null>
<fat.AnnotationFixture, GenerateOutput[fit.Parse], java.lang.String, fat.AnnotationFixture, ResultingHTML[], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.AnnotationFixture, stripDelimiters[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.AnnotationFixture, stripDelimiters[java.lang.String], replaceAll[java.lang.String, java.lang.String]>
<fit.Parse, print[java.io.PrintWriter], void, fat.AnnotationFixture, GenerateOutput[fit.Parse], null>
<java.lang.String, trim[], java.lang.String, fat.AnnotationFixture, GenerateOutput[fit.Parse], null>
<java.io.StringWriter, toString[], java.lang.String, fat.AnnotationFixture, GenerateOutput[fit.Parse], trim[]>
<fit.Parse, size[], int, fat.Color, doRows[fit.Parse], null>
<fit.Parse, size[], int, fat.Color, doRows[fit.Parse], null>
<fit.PrimitiveFixture, check[fit.Parse, java.lang.String], void, fat.Color, doCell[fit.Parse, int], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.Color, doCell[fit.Parse, int], null>
<fit.Parse, at[int], fit.Parse, fat.Color, doCell[fit.Parse, int], null>
<fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], java.lang.String, fat.Color, color[fit.Parse], null>
<fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], java.lang.String, fat.Color, color[fit.Parse], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, color[fit.Parse], null>
<java.lang.String, indexOf[java.lang.String], int, fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], null>
<java.lang.String, length[], int, fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], null>
<fat.Color, decode[java.lang.String], java.lang.String, fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, fat.Color, extract[java.lang.String, java.lang.String, java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, decode[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, decode[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, decode[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, decode[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Color, decode[java.lang.String], null>
<fat.DocumentParseFixture, GenerateOutput[fit.Parse], java.lang.String, fat.DocumentParseFixture, Output[], null>
<fat.DocumentParseFixture, dumpTables[fit.Parse], java.lang.String, fat.DocumentParseFixture, Structure[], null>
<fit.Parse, print[java.io.PrintWriter], void, fat.DocumentParseFixture, GenerateOutput[fit.Parse], null>
<java.io.StringWriter, toString[], java.lang.String, fat.DocumentParseFixture, GenerateOutput[fit.Parse], null>
<fat.DocumentParseFixture, dumpRows[fit.Parse], java.lang.String, fat.DocumentParseFixture, dumpTables[fit.Parse], null>
<fat.DocumentParseFixture, dumpCells[fit.Parse], java.lang.String, fat.DocumentParseFixture, dumpRows[fit.Parse], null>
<java.lang.String, charAt[int], char, fat.Equals, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, fat.Equals, doCell[fit.Parse, int], charAt[int]>
<fit.Parse, at[int], fit.Parse, fat.Equals, doCell[fit.Parse, int], text[]>
<fat.Equals, type[java.lang.String], fit.TypeAdapter, fat.Equals, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fat.Equals, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fat.Equals, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fit.PrimitiveFixture, check[fit.Parse, boolean], void, fat.Equals, doCell[fit.Parse, int], null>
<fit.TypeAdapter, equals[java.lang.Object, java.lang.Object], boolean, fat.Equals, doCell[fit.Parse, int], null>
<fit.Parse, addToBody[java.lang.String], void, fat.Equals, doCell[fit.Parse, int], null>
<fit.Fixture, info[java.lang.String], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fat.Equals, print[java.lang.Object], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fat.Equals, print[java.lang.Object], java.lang.String, fat.Equals, doCell[fit.Parse, int], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fat.Equals, doCell[fit.Parse, int], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.Object, getClass[], java.lang.Class, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.Object, getClass[], java.lang.Class, fat.Equals, type[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Equals, type[java.lang.String], null>
<java.lang.Object, getClass[], java.lang.Class, fat.Equals, type[java.lang.String], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.Class], fit.TypeAdapter, fat.Equals, type[java.lang.String], null>
<java.lang.Object, equals[java.lang.Object], boolean, fat.Equals, parse[java.lang.String, java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fat.Equals, parse[java.lang.String, java.lang.Class], null>
<fat.Equals, parseCustomBoolean[java.lang.String], java.lang.Boolean, fat.Equals, parse[java.lang.String, java.lang.Class], null>
<java.lang.String, startsWith[java.lang.String], boolean, fat.Equals, parseCustomBoolean[java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, fat.Equals, parseCustomBoolean[java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, fat.Equals, parseCustomBoolean[java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, fat.Equals, parseCustomBoolean[java.lang.String], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fat.Equals, print[java.lang.Object], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.FatTest, testCopy[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testCopy[], null>
<fit.Parse, at[int, int, int], fit.Parse, fat.FatTest, testCopy[], null>
<SAD, assertTrue[], SADNESS, fat.FatTest, testCopy[], null>
<SAD, assertTrue[], SADNESS, fat.FatTest, testCopy[], null>
<fit.Fixture, doTable[fit.Parse], void, fat.FatTest, testTable[], null>
<SAD, assertTrue[], SADNESS, fat.FatTest, testTable[], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.FatTest, testColor[], null>
<fit.Fixture, wrong[fit.Parse], void, fat.FatTest, testColor[], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.FatTest, testColor[], null>
<fit.Fixture, right[fit.Parse], void, fat.FatTest, testColor[], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.FatTest, testColor[], null>
<fit.Fixture, ignore[fit.Parse], void, fat.FatTest, testColor[], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.FatTest, testColor[], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fat.FatTest, testColor[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testColor[], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.FatTest, testColor[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testColor[], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.FatTest, testColor[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testColor[], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.FatTest, testColor[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testColor[], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.FatTest, testColor[], null>
<SAD, assertEquals[], SADNESS, fat.FatTest, testColor[], null>
<fat.Color, color[fit.Parse], java.lang.String, fat.FatTest, testColor[], null>
<fat.FixtureLoadFixture, loadFixture[], void, fat.FixtureLoadFixture, LoadResult[], null>
<fit.Fixture, loadFixture[java.lang.String], fit.Fixture, fat.FixtureLoadFixture, loadFixture[], null>
<fat.FixtureLoadFixture, loadFixture[], void, fat.FixtureLoadFixture, ErrorMessage[], null>
<java.lang.Throwable, getMessage[], java.lang.String, fat.FixtureLoadFixture, ErrorMessage[], null>
<fat.FixtureNameFixture, GenerateTableParse[java.lang.String], fit.Parse, fat.FixtureNameFixture, FixtureName[], null>
<fit.Parse, text[], java.lang.String, fat.FixtureNameFixture, FixtureName[], null>
<fit.Fixture, fixtureName[fit.Parse], fit.Parse, fat.FixtureNameFixture, FixtureName[], text[]>
<java.lang.String, equals[java.lang.Object], boolean, fat.FixtureNameFixture, FixtureName[], null>
<java.lang.String, split[java.lang.String], java.lang.String[], fat.FixtureNameFixture, GenerateTableParse[java.lang.String], null>
<fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], fit.Parse, fat.FixtureNameFixture, GenerateTableParse[java.lang.String], null>
<java.lang.String, split[java.lang.String], java.lang.String[], fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], null>
<java.lang.String, substring[int], java.lang.String, fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], null>
<fat.FixtureNameFixture, GenerateCellParses[java.lang.String[], int], fit.Parse, fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], null>
<fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], fit.Parse, fat.FixtureNameFixture, GenerateRowParses[java.lang.String[], int], null>
<fat.FixtureNameFixture, GenerateCellParses[java.lang.String[], int], fit.Parse, fat.FixtureNameFixture, GenerateCellParses[java.lang.String[], int], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fat.Frameworks, execute[], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.HtmlToTextFixture, Text[], null>
<fat.HtmlToTextFixture, escapeAscii[java.lang.String], java.lang.String, fat.HtmlToTextFixture, Text[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fat.HtmlToTextFixture, Text[], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.HtmlToTextFixture, escapeAscii[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.HtmlToTextFixture, escapeAscii[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.HtmlToTextFixture, escapeAscii[java.lang.String], null>
<java.lang.String, length[], int, fat.Money, Money[java.lang.String], null>
<java.lang.String, charAt[int], char, fat.Money, Money[java.lang.String], null>
<java.lang.Character, isDigit[char], boolean, fat.Money, Money[java.lang.String], null>
<java.lang.Double, parseDouble[java.lang.String], double, fat.Money, Money[java.lang.String], null>
<fit.FileRunner, args[java.lang.String[]], void, fat.ReferenceFixture, Result[], null>
<fit.FileRunner, process[], void, fat.ReferenceFixture, Result[], null>
<java.io.PrintWriter, close[], void, fat.ReferenceFixture, Result[], null>
<java.io.File, getCanonicalPath[], java.lang.String, fat.ReferenceFixture, Result[], null>
<java.io.File, getAbsolutePath[], java.lang.String, fat.ReferenceFixture, Result[], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.StandardAnnotationFixture, Output[], null>
<fit.Fixture, right[fit.Parse], void, fat.StandardAnnotationFixture, Output[], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.StandardAnnotationFixture, Output[], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fat.StandardAnnotationFixture, Output[], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.StandardAnnotationFixture, Output[], null>
<fit.Fixture, error[fit.Parse, java.lang.String], void, fat.StandardAnnotationFixture, Output[], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.StandardAnnotationFixture, Output[], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, fat.StandardAnnotationFixture, Output[], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.StandardAnnotationFixture, Output[], null>
<fit.Fixture, ignore[fit.Parse], void, fat.StandardAnnotationFixture, Output[], null>
<fat.StandardAnnotationFixture, GenerateOutput[fit.Parse], java.lang.String, fat.StandardAnnotationFixture, Output[], null>
<fat.StandardAnnotationFixture, RenderedOutput[], java.lang.String, fat.StandardAnnotationFixture, doCell[fit.Parse, int], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fat.StandardAnnotationFixture, doCell[fit.Parse, int], null>
<fat.StandardAnnotationFixture, Output[], java.lang.String, fat.StandardAnnotationFixture, RenderedOutput[], null>
<fit.Parse, print[java.io.PrintWriter], void, fat.StandardAnnotationFixture, GenerateOutput[fit.Parse], null>
<java.lang.String, trim[], java.lang.String, fat.StandardAnnotationFixture, GenerateOutput[fit.Parse], null>
<java.io.StringWriter, toString[], java.lang.String, fat.StandardAnnotationFixture, GenerateOutput[fit.Parse], trim[]>
<fat.Table, copy[fit.Parse], fit.Parse, fat.Table, doRows[fit.Parse], null>
<fit.Fixture, doTables[fit.Parse], void, fat.Table, doRows[fit.Parse], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.Table, copy[fit.Parse], null>
<fat.Table, copy[fit.Parse], fit.Parse, fat.Table, copy[fit.Parse], null>
<fat.TableParseFixture, cell[], fit.Parse, fat.TableParseFixture, CellBody[], null>
<fat.TableParseFixture, cell[], fit.Parse, fat.TableParseFixture, CellTag[], null>
<fat.TableParseFixture, row[], fit.Parse, fat.TableParseFixture, RowTag[], null>
<fat.TableParseFixture, table[], fit.Parse, fat.TableParseFixture, TableTag[], null>
<fit.Parse, at[int, int], fit.Parse, fat.TableParseFixture, row[], null>
<fat.TableParseFixture, table[], fit.Parse, fat.TableParseFixture, row[], at[int, int]>
<fit.Parse, at[int, int], fit.Parse, fat.TableParseFixture, cell[], null>
<fat.TableParseFixture, row[], fit.Parse, fat.TableParseFixture, cell[], at[int, int]>
<fit.Parse, text[], java.lang.String, fat.Tests, doCell[fit.Parse, int], null>
<fit.Parse, text[], java.lang.String, fat.Tests, doCell[fit.Parse, int], null>
<fit.Parse, at[int], fit.Parse, fat.Tests, doCell[fit.Parse, int], text[]>
<java.util.Map, get[java.lang.Object], java.lang.Object, fat.Tests, doCell[fit.Parse, int], null>
<fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], void, fat.Tests, doCell[fit.Parse, int], null>
<java.lang.String, equals[java.lang.Object], boolean, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<java.lang.String, startsWith[java.lang.String], boolean, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Fixture, ignore[fit.Parse], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fat.Tests, get[java.net.URL], java.lang.String, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<java.lang.String, indexOf[java.lang.String], int, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fat.Tests, count[fit.Parse], fit.Counts, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fat.Tests, anchor[java.lang.String, java.lang.String], java.lang.String, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Fixture, right[fit.Parse], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Fixture, wrong[fit.Parse], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Parse, footnote[], java.lang.String, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<java.lang.String, indexOf[java.lang.String], int, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<java.lang.Throwable, getMessage[], java.lang.String, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], indexOf[java.lang.String]>
<fit.Parse, addToBody[java.lang.String], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Fixture, ignore[fit.Parse], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fat.Tests, performTest[fit.Parse, java.lang.String, java.lang.String], null>
<java.net.URL, getContent[], java.lang.Object, fat.Tests, get[java.net.URL], null>
<java.io.BufferedReader, readLine[], java.lang.String, fat.Tests, get[java.net.URL], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fat.Tests, get[java.net.URL], null>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, fat.Tests, get[java.net.URL], null>
<java.lang.StringBuffer, toString[], java.lang.String, fat.Tests, get[java.net.URL], null>
<fat.Tests$Color, parse[fit.Parse], fat.Tests.Color, fat.Tests, count[fit.Parse], null>
<fat.Tests$Color, isGreen[], boolean, fat.Tests, count[fit.Parse], null>
<fat.Tests$Color, isRed[], boolean, fat.Tests, count[fit.Parse], null>
<fat.Tests$Color, isYellow[], boolean, fat.Tests, count[fit.Parse], null>
<fat.Tests$Color, isGray[], boolean, fat.Tests, count[fit.Parse], null>
<java.lang.String, toLowerCase[], java.lang.String, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.String, indexOf[java.lang.String], int, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.String, length[], int, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.String, charAt[int], char, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.String, charAt[int], char, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.String, substring[int, int], java.lang.String, fat.Tests.Color, parse[fit.Parse], null>
<java.lang.Integer, parseInt[java.lang.String, int], int, fat.Tests.Color, parse[fit.Parse], null>
<fat.TextToHtmlFixture, unescapeAscii[java.lang.String], java.lang.String, fat.TextToHtmlFixture, HTML[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fat.TextToHtmlFixture, HTML[], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.TextToHtmlFixture, unescapeAscii[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fat.TextToHtmlFixture, unescapeAscii[java.lang.String], null>
<fit.Parse, print[java.io.PrintWriter], void, fat.TextToHtmlFixture, GenerateOutput[fit.Parse], null>
<java.io.StringWriter, toString[], java.lang.String, fat.TextToHtmlFixture, GenerateOutput[fit.Parse], null>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, fit.ActionFixture, doCells[fit.Parse], null>
<java.lang.Object, getClass[], java.lang.Class, fit.ActionFixture, doCells[fit.Parse], getMethod[java.lang.String, java.lang.Class[]]>
<fit.Parse, text[], java.lang.String, fit.ActionFixture, doCells[fit.Parse], null>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, fit.ActionFixture, doCells[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.ActionFixture, doCells[fit.Parse], null>
<java.lang.Class, newInstance[], java.lang.Object, fit.ActionFixture, start[], null>
<java.lang.Class, forName[java.lang.String], java.lang.Class, fit.ActionFixture, start[], null>
<fit.Parse, text[], java.lang.String, fit.ActionFixture, start[], null>
<fit.ActionFixture, method[int], java.lang.reflect.Method, fit.ActionFixture, enter[], null>
<java.lang.reflect.Method, getParameterTypes[], java.lang.Class[], fit.ActionFixture, enter[], null>
<fit.Parse, text[], java.lang.String, fit.ActionFixture, enter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.ActionFixture, enter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.Class], fit.TypeAdapter, fit.ActionFixture, enter[], parse[java.lang.String]>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, fit.ActionFixture, enter[], null>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, fit.ActionFixture, press[], null>
<fit.ActionFixture, method[int], java.lang.reflect.Method, fit.ActionFixture, press[], invoke[java.lang.Object, java.lang.Object[]]>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], fit.TypeAdapter, fit.ActionFixture, check[], null>
<fit.ActionFixture, method[int], java.lang.reflect.Method, fit.ActionFixture, check[], null>
<fit.Fixture, check[fit.Parse, fit.TypeAdapter], void, fit.ActionFixture, check[], null>
<fit.ActionFixture, method[java.lang.String, int], java.lang.reflect.Method, fit.ActionFixture, method[int], null>
<fit.Fixture, camel[java.lang.String], java.lang.String, fit.ActionFixture, method[int], null>
<fit.Parse, text[], java.lang.String, fit.ActionFixture, method[int], null>
<java.lang.Class, getMethods[], java.lang.reflect.Method[], fit.ActionFixture, method[java.lang.String, int], null>
<java.lang.Object, getClass[], java.lang.Class, fit.ActionFixture, method[java.lang.String, int], getMethods[]>
<java.lang.String, equals[java.lang.Object], boolean, fit.ActionFixture, method[java.lang.String, int], null>
<java.lang.reflect.Method, getName[], java.lang.String, fit.ActionFixture, method[java.lang.String, int], equals[java.lang.Object]>
<java.lang.reflect.Method, getParameterTypes[], java.lang.Class[], fit.ActionFixture, method[java.lang.String, int], null>
<fit.ColumnFixture, bind[fit.Parse], void, fit.ColumnFixture, doRows[fit.Parse], null>
<fit.ColumnFixture, reset[], void, fit.ColumnFixture, doRow[fit.Parse], null>
<fit.ColumnFixture, execute[], void, fit.ColumnFixture, doRow[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.ColumnFixture, doRow[fit.Parse], null>
<fit.Parse, leaf[], fit.Parse, fit.ColumnFixture, doRow[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.ColumnFixture, doCell[fit.Parse, int], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.ColumnFixture, check[fit.Parse, fit.TypeAdapter], void, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.Fixture, ignore[fit.Parse], void, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.TypeAdapter, set[java.lang.Object], void, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.ColumnFixture, check[fit.Parse, fit.TypeAdapter], void, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.ColumnFixture, doCell[fit.Parse, int], null>
<fit.ColumnFixture, execute[], void, fit.ColumnFixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.ColumnFixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Parse, size[], int, fit.ColumnFixture, bind[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.ColumnFixture, bind[fit.Parse], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.ColumnFixture, bind[fit.Parse], null>
<java.lang.String, endsWith[java.lang.String], boolean, fit.ColumnFixture, bind[fit.Parse], null>
<fit.ColumnFixture, bindMethod[java.lang.String], fit.TypeAdapter, fit.ColumnFixture, bind[fit.Parse], null>
<java.lang.String, substring[int, int], java.lang.String, fit.ColumnFixture, bind[fit.Parse], null>
<java.lang.String, length[], int, fit.ColumnFixture, bind[fit.Parse], null>
<java.lang.String, length[], int, fit.ColumnFixture, bind[fit.Parse], null>
<fit.ColumnFixture, bindField[java.lang.String], fit.TypeAdapter, fit.ColumnFixture, bind[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.ColumnFixture, bind[fit.Parse], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], fit.TypeAdapter, fit.ColumnFixture, bindMethod[java.lang.String], null>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, fit.ColumnFixture, bindMethod[java.lang.String], null>
<fit.ColumnFixture, getTargetClass[], java.lang.Class, fit.ColumnFixture, bindMethod[java.lang.String], getMethod[java.lang.String, java.lang.Class[]]>
<fit.Fixture, camel[java.lang.String], java.lang.String, fit.ColumnFixture, bindMethod[java.lang.String], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.ColumnFixture, bindField[java.lang.String], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.ColumnFixture, bindField[java.lang.String], null>
<fit.ColumnFixture, getTargetClass[], java.lang.Class, fit.ColumnFixture, bindField[java.lang.String], getField[java.lang.String]>
<fit.Fixture, camel[java.lang.String], java.lang.String, fit.ColumnFixture, bindField[java.lang.String], null>
<java.lang.Object, getClass[], java.lang.Class, fit.ColumnFixture, getTargetClass[], null>
<fit.FileRunner, run[java.lang.String[]], void, fit.FileRunner, main[java.lang.String[]], null>
<java.io.PrintStream, println[java.lang.String], void, fit.FileRunner, main[java.lang.String[]], null>
<java.lang.Throwable, getMessage[], java.lang.String, fit.FileRunner, main[java.lang.String[]], null>
<java.lang.System, exit[int], void, fit.FileRunner, main[java.lang.String[]], null>
<fit.FileRunner, args[java.lang.String[]], void, fit.FileRunner, run[java.lang.String[]], null>
<fit.FileRunner, process[], void, fit.FileRunner, run[java.lang.String[]], null>
<fit.FileRunner, exit[], void, fit.FileRunner, run[java.lang.String[]], null>
<java.lang.String, indexOf[java.lang.String], int, fit.FileRunner, process[], null>
<fit.Fixture, doTables[fit.Parse], void, fit.FileRunner, process[], null>
<fit.Fixture, doTables[fit.Parse], void, fit.FileRunner, process[], null>
<fit.FileRunner, exception[java.lang.Exception], void, fit.FileRunner, process[], null>
<fit.Parse, print[java.io.PrintWriter], void, fit.FileRunner, process[], null>
<java.io.PrintStream, println[java.lang.String], void, fit.FileRunner, args[java.lang.String[]], null>
<java.lang.System, exit[int], void, fit.FileRunner, args[java.lang.String[]], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.FileRunner, args[java.lang.String[]], null>
<java.io.File, getAbsolutePath[], java.lang.String, fit.FileRunner, args[java.lang.String[]], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.FileRunner, args[java.lang.String[]], null>
<java.io.File, lastModified[], long, fit.FileRunner, args[java.lang.String[]], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.FileRunner, args[java.lang.String[]], null>
<java.io.File, getAbsolutePath[], java.lang.String, fit.FileRunner, args[java.lang.String[]], null>
<fit.FileRunner, read[java.io.File], java.lang.String, fit.FileRunner, args[java.lang.String[]], null>
<java.io.File, length[], long, fit.FileRunner, read[java.io.File], null>
<java.io.Reader, read[char[]], int, fit.FileRunner, read[java.io.File], null>
<java.io.InputStreamReader, close[], void, fit.FileRunner, read[java.io.File], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.FileRunner, exception[java.lang.Exception], null>
<java.io.PrintWriter, close[], void, fit.FileRunner, exit[], null>
<java.io.PrintStream, println[java.lang.String], void, fit.FileRunner, exit[], null>
<fit.Fixture, counts[], java.lang.String, fit.FileRunner, exit[], null>
<java.lang.System, exit[int], void, fit.FileRunner, exit[], null>
<fit.FileRunnerTest, testHtml[java.lang.String], void, fit.FileRunnerTest, testRunningFileWithWikiTag[], null>
<fit.FileRunnerTest, testHtml[java.lang.String], void, fit.FileRunnerTest, testRunningFileWithWikiTag[], null>
<fit.FileRunner, process[], void, fit.FileRunnerTest, testHtml[java.lang.String], null>
<SAD, assertEquals[], SADNESS, fit.FileRunnerTest, testHtml[java.lang.String], null>
<fit.Parse, text[], java.lang.String, fit.FileRunnerTest, testHtml[java.lang.String], null>
<fit.Parse, leaf[], fit.Parse, fit.FileRunnerTest, testHtml[java.lang.String], text[]>
<java.lang.System, currentTimeMillis[], long, fit.FileRunnerTest, testHtml[java.lang.String], null>
<java.lang.System, currentTimeMillis[], long, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<fit.Fixture$RunTime, d[long], java.lang.String, fit.Fixture.RunTime, toString[], null>
<java.lang.Long, toString[long], java.lang.String, fit.Fixture.RunTime, d[long], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.Fixture, doTables[fit.Parse], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, fixtureName[fit.Parse], fit.Parse, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], fit.Fixture, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, interpretTables[fit.Parse], void, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, interpretFollowingTables[fit.Parse], void, fit.Fixture, doTables[fit.Parse], null>
<fit.Fixture, getArgsForTable[fit.Parse], void, fit.Fixture, interpretTables[fit.Parse], null>
<fit.Fixture, doTable[fit.Parse], void, fit.Fixture, interpretTables[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, interpretTables[fit.Parse], null>
<fit.Fixture, fixtureName[fit.Parse], fit.Parse, fit.Fixture, interpretTables[fit.Parse], null>
<fit.Fixture, interpretFollowingTables[fit.Parse], void, fit.Fixture, interpretTables[fit.Parse], null>
<fit.Fixture, fixtureName[fit.Parse], fit.Parse, fit.Fixture, interpretFollowingTables[fit.Parse], null>
<fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], fit.Fixture, fit.Fixture, interpretFollowingTables[fit.Parse], null>
<fit.Fixture, doTable[fit.Parse], void, fit.Fixture, interpretFollowingTables[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, interpretFollowingTables[fit.Parse], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], null>
<fit.Fixture, loadFixture[java.lang.String], fit.Fixture, fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], null>
<fit.Fixture, getArgsForTable[fit.Parse], void, fit.Fixture, getLinkedFixtureWithArgs[fit.Parse], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.Fixture, fixtureName[fit.Parse], null>
<java.lang.Class, newInstance[], java.lang.Object, fit.Fixture, loadFixture[java.lang.String], null>
<java.lang.Class, forName[java.lang.String], java.lang.Class, fit.Fixture, loadFixture[java.lang.String], newInstance[]>
<java.util.ArrayList, add[java.lang.Object], boolean, fit.Fixture, getArgsForTable[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.Fixture, getArgsForTable[fit.Parse], null>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], fit.Fixture, getArgsForTable[fit.Parse], null>
<fit.Fixture, doRows[fit.Parse], void, fit.Fixture, doTable[fit.Parse], null>
<fit.Fixture, doRow[fit.Parse], void, fit.Fixture, doRows[fit.Parse], null>
<fit.Fixture, doCells[fit.Parse], void, fit.Fixture, doRow[fit.Parse], null>
<fit.Fixture, doCell[fit.Parse, int], void, fit.Fixture, doCells[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, doCells[fit.Parse], null>
<fit.Fixture, ignore[fit.Parse], void, fit.Fixture, doCell[fit.Parse, int], null>
<fit.Parse, addToTag[java.lang.String], void, fit.Fixture, right[fit.Parse], null>
<fit.Parse, addToTag[java.lang.String], void, fit.Fixture, wrong[fit.Parse], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.Fixture, wrong[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.Fixture, wrong[fit.Parse], null>
<fit.Fixture, wrong[fit.Parse], void, fit.Fixture, wrong[fit.Parse, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fit.Fixture, wrong[fit.Parse, java.lang.String], null>
<fit.Fixture, label[java.lang.String], java.lang.String, fit.Fixture, wrong[fit.Parse, java.lang.String], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.Fixture, wrong[fit.Parse, java.lang.String], null>
<fit.Fixture, label[java.lang.String], java.lang.String, fit.Fixture, wrong[fit.Parse, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fit.Fixture, info[fit.Parse, java.lang.String], null>
<fit.Fixture, info[java.lang.String], java.lang.String, fit.Fixture, info[fit.Parse, java.lang.String], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.Fixture, info[java.lang.String], null>
<fit.Parse, addToTag[java.lang.String], void, fit.Fixture, ignore[fit.Parse], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.Fixture, error[fit.Parse, java.lang.String], null>
<fit.Parse, text[], java.lang.String, fit.Fixture, error[fit.Parse, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fit.Fixture, error[fit.Parse, java.lang.String], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.Fixture, error[fit.Parse, java.lang.String], null>
<fit.Parse, addToTag[java.lang.String], void, fit.Fixture, error[fit.Parse, java.lang.String], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.Fixture, exception[fit.Parse, java.lang.Throwable], null>
<java.lang.Object, getClass[], java.lang.Class, fit.Fixture, exception[fit.Parse, java.lang.Throwable], equals[java.lang.Object]>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, fit.Fixture, exception[fit.Parse, java.lang.Throwable], null>
<java.lang.Throwable, printStackTrace[java.io.PrintWriter], void, fit.Fixture, exception[fit.Parse, java.lang.Throwable], null>
<fit.Fixture, error[fit.Parse, java.lang.String], void, fit.Fixture, exception[fit.Parse, java.lang.Throwable], null>
<java.io.StringWriter, toString[], java.lang.String, fit.Fixture, exception[fit.Parse, java.lang.Throwable], null>
<fit.Counts, toString[], java.lang.String, fit.Fixture, counts[], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Fixture, escape[java.lang.String], null>
<java.lang.String, length[], int, fit.Fixture, camel[java.lang.String], null>
<java.util.StringTokenizer, hasMoreTokens[], boolean, fit.Fixture, camel[java.lang.String], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fit.Fixture, camel[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, fit.Fixture, camel[java.lang.String], null>
<java.util.StringTokenizer, hasMoreTokens[], boolean, fit.Fixture, camel[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, fit.Fixture, camel[java.lang.String], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fit.Fixture, camel[java.lang.String], null>
<java.lang.String, toUpperCase[], java.lang.String, fit.Fixture, camel[java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Fixture, camel[java.lang.String], toUpperCase[]>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fit.Fixture, camel[java.lang.String], null>
<java.lang.String, substring[int], java.lang.String, fit.Fixture, camel[java.lang.String], null>
<java.lang.StringBuffer, toString[], java.lang.String, fit.Fixture, camel[java.lang.String], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.Fixture, parse[java.lang.String, java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.Fixture, parse[java.lang.String, java.lang.Class], null>
<java.text.DateFormat, parse[java.lang.String], java.util.Date, fit.Fixture, parse[java.lang.String, java.lang.Class], null>
<java.text.DateFormat, getDateInstance[], java.text.DateFormat, fit.Fixture, parse[java.lang.String, java.lang.Class], parse[java.lang.String]>
<java.lang.Object, equals[java.lang.Object], boolean, fit.Fixture, parse[java.lang.String, java.lang.Class], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.Fixture, parse[java.lang.String, java.lang.Class], null>
<fit.Parse, text[], java.lang.String, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, get[], java.lang.Object, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, ignore[fit.Parse], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, invoke[], java.lang.Object, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, right[fit.Parse], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, get[], java.lang.Object, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, equals[java.lang.Object, java.lang.Object], boolean, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, right[fit.Parse], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.Fixture, check[fit.Parse, fit.TypeAdapter], null>
<SAD, assertEquals[], SADNESS, fit.FixtureTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FixtureTest, testEscape[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, toString[], java.lang.String, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], toString[]>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Integer, toString[], java.lang.String, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getMethod[java.lang.String, java.lang.Class[]]>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Double, doubleValue[], double, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, invoke[], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], doubleValue[]>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, invoke[], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, equals[java.lang.Object, java.lang.Object], boolean, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<java.util.Calendar, getTime[], java.util.Date, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<java.text.DateFormat, format[java.util.Date], java.lang.String, fit.FrameworkTest, testTypeAdapter[], null>
<java.text.DateFormat, getDateInstance[], java.text.DateFormat, fit.FrameworkTest, testTypeAdapter[], format[java.util.Date]>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], fit.TypeAdapter, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, fit.FrameworkTest, testTypeAdapter[], null>
<java.lang.Object, getClass[], java.lang.Class, fit.FrameworkTest, testTypeAdapter[], getField[java.lang.String]>
<fit.TypeAdapter, set[java.lang.Object], void, fit.FrameworkTest, testTypeAdapter[], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testTypeAdapter[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertTrue[], SADNESS, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, equals[java.lang.Object], boolean, fit.FrameworkTest, testScientificDouble[], null>
<fit.ScientificDouble, valueOf[java.lang.String], fit.ScientificDouble, fit.FrameworkTest, testScientificDouble[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, testEscape[], null>
<fit.Fixture, escape[java.lang.String], java.lang.String, fit.FrameworkTest, testEscape[], null>
<fit.FrameworkTest, run[java.lang.String, int, int, int, int], void, fit.FrameworkTest, testRuns[], null>
<fit.FrameworkTest, run[java.lang.String, int, int, int, int], void, fit.FrameworkTest, testRuns[], null>
<fit.FrameworkTest, run[java.lang.String, int, int, int, int], void, fit.FrameworkTest, testRuns[], null>
<fit.FrameworkTest, read[java.io.File], java.lang.String, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<java.lang.String, indexOf[java.lang.String], int, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<fit.Fixture, doTables[fit.Parse], void, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<fit.Fixture, doTables[fit.Parse], void, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<fit.Parse, print[java.io.PrintWriter], void, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<java.io.PrintWriter, close[], void, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<SAD, assertEquals[], SADNESS, fit.FrameworkTest, run[java.lang.String, int, int, int, int], null>
<java.io.File, length[], long, fit.FrameworkTest, read[java.io.File], null>
<java.io.Reader, read[char[]], int, fit.FrameworkTest, read[java.io.File], null>
<java.io.InputStreamReader, close[], void, fit.FrameworkTest, read[java.io.File], null>
<java.lang.String, toLowerCase[], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<fit.Parse, findMatchingEndTag[java.lang.String, int, java.lang.String, int], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, substring[int], java.lang.String, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String], int, fit.Parse, Parse[java.lang.String, java.lang.String[], int, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, findMatchingEndTag[java.lang.String, int, java.lang.String, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, findMatchingEndTag[java.lang.String, int, java.lang.String, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, findMatchingEndTag[java.lang.String, int, java.lang.String, int], null>
<java.lang.String, indexOf[java.lang.String, int], int, fit.Parse, findMatchingEndTag[java.lang.String, int, java.lang.String, int], null>
<fit.Parse, size[], int, fit.Parse, size[], null>
<fit.Parse, last[], fit.Parse, fit.Parse, last[], null>
<fit.Parse, leaf[], fit.Parse, fit.Parse, leaf[], null>
<fit.Parse, at[int], fit.Parse, fit.Parse, at[int], null>
<fit.Parse, at[int], fit.Parse, fit.Parse, at[int, int], null>
<fit.Parse, at[int], fit.Parse, fit.Parse, at[int, int], null>
<fit.Parse, at[int], fit.Parse, fit.Parse, at[int, int, int], null>
<fit.Parse, at[int, int], fit.Parse, fit.Parse, at[int, int, int], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.Parse, text[], null>
<fit.Parse, normalizeLineBreaks[java.lang.String], java.lang.String, fit.Parse, htmlToText[java.lang.String], null>
<fit.Parse, removeNonBreakTags[java.lang.String], java.lang.String, fit.Parse, htmlToText[java.lang.String], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.Parse, htmlToText[java.lang.String], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.Parse, htmlToText[java.lang.String], null>
<java.lang.String, indexOf[int, int], int, fit.Parse, removeNonBreakTags[java.lang.String], null>
<java.lang.String, indexOf[int, int], int, fit.Parse, removeNonBreakTags[java.lang.String], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.Parse, removeNonBreakTags[java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, removeNonBreakTags[java.lang.String], equals[java.lang.Object]>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, removeNonBreakTags[java.lang.String], null>
<java.lang.String, substring[int], java.lang.String, fit.Parse, removeNonBreakTags[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescape[java.lang.String], null>
<fit.Parse, unescapeEntities[java.lang.String], java.lang.String, fit.Parse, unescape[java.lang.String], null>
<fit.Parse, unescapeSmartQuotes[java.lang.String], java.lang.String, fit.Parse, unescape[java.lang.String], null>
<java.lang.String, replace[char, char], java.lang.String, fit.Parse, unescapeSmartQuotes[java.lang.String], null>
<java.lang.String, replace[char, char], java.lang.String, fit.Parse, unescapeSmartQuotes[java.lang.String], null>
<java.lang.String, replace[char, char], java.lang.String, fit.Parse, unescapeSmartQuotes[java.lang.String], null>
<java.lang.String, replace[char, char], java.lang.String, fit.Parse, unescapeSmartQuotes[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescapeEntities[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescapeEntities[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescapeEntities[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescapeEntities[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, unescapeEntities[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, normalizeLineBreaks[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, normalizeLineBreaks[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, condenseWhitespace[java.lang.String], null>
<java.lang.String, replace[char, char], java.lang.String, fit.Parse, condenseWhitespace[java.lang.String], null>
<java.lang.String, replaceAll[java.lang.String, java.lang.String], java.lang.String, fit.Parse, condenseWhitespace[java.lang.String], null>
<java.lang.String, trim[], java.lang.String, fit.Parse, condenseWhitespace[java.lang.String], null>
<java.lang.String, length[], int, fit.Parse, addToTag[java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, fit.Parse, addToTag[java.lang.String], null>
<java.io.PrintWriter, print[java.lang.String], void, fit.Parse, print[java.io.PrintWriter], null>
<java.io.PrintWriter, print[java.lang.String], void, fit.Parse, print[java.io.PrintWriter], null>
<fit.Parse, print[java.io.PrintWriter], void, fit.Parse, print[java.io.PrintWriter], null>
<java.io.PrintWriter, print[java.lang.String], void, fit.Parse, print[java.io.PrintWriter], null>
<java.io.PrintWriter, print[java.lang.String], void, fit.Parse, print[java.io.PrintWriter], null>
<fit.Parse, print[java.io.PrintWriter], void, fit.Parse, print[java.io.PrintWriter], null>
<java.io.PrintWriter, print[java.lang.String], void, fit.Parse, print[java.io.PrintWriter], null>
<java.io.File, delete[], boolean, fit.Parse, footnote[], null>
<fit.Parse, print[java.io.PrintWriter], void, fit.Parse, footnote[], null>
<java.io.PrintWriter, close[], void, fit.Parse, footnote[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParsing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParsing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParsing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParsing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testRecursing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testRecursing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testRecursing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIterating[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIterating[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIterating[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, at[int, int, int], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, size[], int, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, size[], int, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, size[], int, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, leaf[], fit.Parse, fit.ParseTest, testIndexing[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testIndexing[], null>
<fit.Parse, leaf[], fit.Parse, fit.ParseTest, testIndexing[], null>
<fit.Parse, last[], fit.Parse, fit.ParseTest, testIndexing[], leaf[]>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParseException[], null>
<java.text.ParseException, getErrorOffset[], int, fit.ParseTest, testParseException[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testParseException[], null>
<java.lang.Throwable, getMessage[], java.lang.String, fit.ParseTest, testParseException[], null>
<SAD, fail[], SADNESS, fit.ParseTest, testParseException[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, text[], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, text[], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, text[], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, text[], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testText[], null>
<fit.Parse, htmlToText[java.lang.String], java.lang.String, fit.ParseTest, testText[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testUnescape[], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.ParseTest, testUnescape[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testUnescape[], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.ParseTest, testUnescape[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testUnescape[], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.ParseTest, testUnescape[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testUnescape[], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.ParseTest, testUnescape[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testUnescape[], null>
<fit.Parse, unescape[java.lang.String], java.lang.String, fit.ParseTest, testUnescape[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<SAD, assertEquals[], SADNESS, fit.ParseTest, testWhitespaceIsCondensed[], null>
<fit.Parse, condenseWhitespace[java.lang.String], java.lang.String, fit.ParseTest, testWhitespaceIsCondensed[], null>
<java.lang.Long, parseLong[java.lang.String], long, fit.PrimitiveFixture, parseLong[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.PrimitiveFixture, parseLong[fit.Parse], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.PrimitiveFixture, parseDouble[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.PrimitiveFixture, parseDouble[fit.Parse], null>
<java.lang.Boolean, booleanValue[], boolean, fit.PrimitiveFixture, parseBoolean[fit.Parse], null>
<java.lang.Boolean, valueOf[java.lang.String], java.lang.Boolean, fit.PrimitiveFixture, parseBoolean[fit.Parse], null>
<fit.Parse, text[], java.lang.String, fit.PrimitiveFixture, parseBoolean[fit.Parse], null>
<java.lang.String, equals[java.lang.Object], boolean, fit.PrimitiveFixture, check[fit.Parse, java.lang.String], null>
<fit.Parse, text[], java.lang.String, fit.PrimitiveFixture, check[fit.Parse, java.lang.String], equals[java.lang.Object]>
<fit.Fixture, right[fit.Parse], void, fit.PrimitiveFixture, check[fit.Parse, java.lang.String], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.PrimitiveFixture, check[fit.Parse, java.lang.String], null>
<fit.PrimitiveFixture, parseLong[fit.Parse], long, fit.PrimitiveFixture, check[fit.Parse, long], null>
<fit.Fixture, right[fit.Parse], void, fit.PrimitiveFixture, check[fit.Parse, long], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.PrimitiveFixture, check[fit.Parse, long], null>
<java.lang.Long, toString[long], java.lang.String, fit.PrimitiveFixture, check[fit.Parse, long], null>
<fit.PrimitiveFixture, parseDouble[fit.Parse], double, fit.PrimitiveFixture, check[fit.Parse, double], null>
<fit.Fixture, right[fit.Parse], void, fit.PrimitiveFixture, check[fit.Parse, double], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.PrimitiveFixture, check[fit.Parse, double], null>
<java.lang.Double, toString[double], java.lang.String, fit.PrimitiveFixture, check[fit.Parse, double], null>
<fit.PrimitiveFixture, parseBoolean[fit.Parse], boolean, fit.PrimitiveFixture, check[fit.Parse, boolean], null>
<fit.Fixture, right[fit.Parse], void, fit.PrimitiveFixture, check[fit.Parse, boolean], null>
<fit.Fixture, wrong[fit.Parse, java.lang.String], void, fit.PrimitiveFixture, check[fit.Parse, boolean], null>
<fit.ColumnFixture, bind[fit.Parse], void, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, query[], java.lang.Object[], fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, match[java.util.List, java.util.List, int], void, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, list[fit.Parse], java.util.List, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, list[java.lang.Object[]], java.util.List, fit.RowFixture, doRows[fit.Parse], null>
<fit.Parse, last[], fit.Parse, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, buildRows[java.lang.Object[]], fit.Parse, fit.RowFixture, doRows[fit.Parse], null>
<java.util.List, toArray[], java.lang.Object[], fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, mark[fit.Parse, java.lang.String], void, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, mark[java.util.Iterator, java.lang.String], void, fit.RowFixture, doRows[fit.Parse], null>
<java.util.List, iterator[], java.util.Iterator, fit.RowFixture, doRows[fit.Parse], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.RowFixture, doRows[fit.Parse], null>
<fit.Parse, leaf[], fit.Parse, fit.RowFixture, doRows[fit.Parse], null>
<fit.RowFixture, check[java.util.List, java.util.List], void, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, match[java.util.List, java.util.List, int], void, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, eSort[java.util.List, int], java.util.Map, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, cSort[java.util.List, int], java.util.Map, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, union[java.util.Set, java.util.Set], java.util.Set, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Map, keySet[], java.util.Set, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Map, keySet[], java.util.Set, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Set, iterator[], java.util.Iterator, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Iterator, hasNext[], boolean, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Iterator, next[], java.lang.Object, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.List, addAll[java.util.Collection], boolean, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.List, addAll[java.util.Collection], boolean, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.List, size[], int, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.List, size[], int, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, check[java.util.List, java.util.List], void, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<fit.RowFixture, match[java.util.List, java.util.List, int], void, fit.RowFixture, match[java.util.List, java.util.List, int], null>
<java.util.List, add[java.lang.Object], boolean, fit.RowFixture, list[fit.Parse], null>
<java.util.List, add[java.lang.Object], boolean, fit.RowFixture, list[java.lang.Object[]], null>
<java.util.List, size[], int, fit.RowFixture, eSort[java.util.List, int], null>
<java.util.List, iterator[], java.util.Iterator, fit.RowFixture, eSort[java.util.List, int], null>
<java.util.Iterator, hasNext[], boolean, fit.RowFixture, eSort[java.util.List, int], null>
<java.util.Iterator, next[], java.lang.Object, fit.RowFixture, eSort[java.util.List, int], null>
<fit.Parse, at[int], fit.Parse, fit.RowFixture, eSort[java.util.List, int], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.RowFixture, eSort[java.util.List, int], null>
<fit.Parse, text[], java.lang.String, fit.RowFixture, eSort[java.util.List, int], null>
<fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], void, fit.RowFixture, eSort[java.util.List, int], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.RowFixture, eSort[java.util.List, int], null>
<fit.Fixture, ignore[fit.Parse], void, fit.RowFixture, eSort[java.util.List, int], null>
<java.util.List, size[], int, fit.RowFixture, cSort[java.util.List, int], null>
<java.util.List, iterator[], java.util.Iterator, fit.RowFixture, cSort[java.util.List, int], null>
<java.util.Iterator, hasNext[], boolean, fit.RowFixture, cSort[java.util.List, int], null>
<java.util.Iterator, next[], java.lang.Object, fit.RowFixture, cSort[java.util.List, int], null>
<fit.TypeAdapter, get[], java.lang.Object, fit.RowFixture, cSort[java.util.List, int], null>
<fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], void, fit.RowFixture, cSort[java.util.List, int], null>
<java.util.List, add[java.lang.Object], boolean, fit.RowFixture, cSort[java.util.List, int], null>
<java.lang.Class, isArray[], boolean, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.lang.Object, getClass[], java.lang.Class, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], isArray[]>
<java.util.Arrays, asList[T[]], java.util.List, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.util.Map, containsKey[java.lang.Object], boolean, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.util.List, add[java.lang.Object], boolean, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], add[java.lang.Object]>
<java.util.List, add[java.lang.Object], boolean, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.RowFixture, bin[java.util.Map, java.lang.Object, java.lang.Object], null>
<java.util.Set, addAll[java.util.Collection], boolean, fit.RowFixture, union[java.util.Set, java.util.Set], null>
<java.util.Set, addAll[java.util.Collection], boolean, fit.RowFixture, union[java.util.Set, java.util.Set], null>
<java.util.List, size[], int, fit.RowFixture, check[java.util.List, java.util.List], null>
<java.util.List, addAll[java.util.Collection], boolean, fit.RowFixture, check[java.util.List, java.util.List], null>
<java.util.List, size[], int, fit.RowFixture, check[java.util.List, java.util.List], null>
<java.util.List, addAll[java.util.Collection], boolean, fit.RowFixture, check[java.util.List, java.util.List], null>
<java.util.List, remove[int], java.lang.Object, fit.RowFixture, check[java.util.List, java.util.List], null>
<java.util.List, remove[int], java.lang.Object, fit.RowFixture, check[java.util.List, java.util.List], null>
<fit.ColumnFixture, check[fit.Parse, fit.TypeAdapter], void, fit.RowFixture, check[java.util.List, java.util.List], null>
<fit.RowFixture, check[java.util.List, java.util.List], void, fit.RowFixture, check[java.util.List, java.util.List], null>
<fit.Fixture, label[java.lang.String], java.lang.String, fit.RowFixture, mark[fit.Parse, java.lang.String], null>
<fit.Fixture, wrong[fit.Parse], void, fit.RowFixture, mark[fit.Parse, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fit.RowFixture, mark[fit.Parse, java.lang.String], null>
<fit.Fixture, label[java.lang.String], java.lang.String, fit.RowFixture, mark[java.util.Iterator, java.lang.String], null>
<java.util.Iterator, hasNext[], boolean, fit.RowFixture, mark[java.util.Iterator, java.lang.String], null>
<java.util.Iterator, next[], java.lang.Object, fit.RowFixture, mark[java.util.Iterator, java.lang.String], null>
<fit.Fixture, wrong[fit.Parse], void, fit.RowFixture, mark[java.util.Iterator, java.lang.String], null>
<fit.Parse, addToBody[java.lang.String], void, fit.RowFixture, mark[java.util.Iterator, java.lang.String], null>
<fit.RowFixture, buildCells[java.lang.Object], fit.Parse, fit.RowFixture, buildRows[java.lang.Object[]], null>
<fit.Parse, addToTag[java.lang.String], void, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.Fixture, ignore[fit.Parse], void, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.Fixture, info[fit.Parse, java.lang.String], void, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.TypeAdapter, get[], java.lang.Object, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.Fixture, exception[fit.Parse, java.lang.Throwable], void, fit.RowFixture, buildCells[java.lang.Object], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], fit.TypeAdapter, fit.RowFixtureTest, testMatch[], null>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, fit.RowFixtureTest, testMatch[], null>
<java.util.LinkedList, add[java.lang.Object], boolean, fit.RowFixtureTest, testMatch[], null>
<java.util.LinkedList, add[java.lang.Object], boolean, fit.RowFixtureTest, testMatch[], null>
<fit.RowFixture, match[java.util.List, java.util.List, int], void, fit.RowFixtureTest, testMatch[], null>
<SAD, assertEquals[], SADNESS, fit.RowFixtureTest, testMatch[], null>
<SAD, assertEquals[], SADNESS, fit.RowFixtureTest, testMatch[], null>
<SAD, assertEquals[], SADNESS, fit.RowFixtureTest, testMatch[], null>
<java.util.List, size[], int, fit.RowFixtureTest, testMatch[], null>
<SAD, assertEquals[], SADNESS, fit.RowFixtureTest, testMatch[], null>
<java.util.List, size[], int, fit.RowFixtureTest, testMatch[], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.ScientificDouble, valueOf[java.lang.String], null>
<fit.ScientificDouble, precision[java.lang.String], double, fit.ScientificDouble, valueOf[java.lang.String], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.ScientificDouble, precision[java.lang.String], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.ScientificDouble, precision[java.lang.String], null>
<fit.ScientificDouble, tweak[java.lang.String], java.lang.String, fit.ScientificDouble, precision[java.lang.String], null>
<java.lang.String, trim[], java.lang.String, fit.ScientificDouble, precision[java.lang.String], null>
<java.lang.Math, abs[double], double, fit.ScientificDouble, precision[java.lang.String], null>
<java.lang.String, indexOf[java.lang.String], int, fit.ScientificDouble, tweak[java.lang.String], null>
<java.lang.String, toLowerCase[], java.lang.String, fit.ScientificDouble, tweak[java.lang.String], indexOf[java.lang.String]>
<fit.ScientificDouble, tweak[java.lang.String], java.lang.String, fit.ScientificDouble, tweak[java.lang.String], null>
<java.lang.String, substring[int, int], java.lang.String, fit.ScientificDouble, tweak[java.lang.String], null>
<java.lang.String, substring[int], java.lang.String, fit.ScientificDouble, tweak[java.lang.String], null>
<java.lang.String, indexOf[java.lang.String], int, fit.ScientificDouble, tweak[java.lang.String], null>
<fit.ScientificDouble, compareTo[java.lang.Object], int, fit.ScientificDouble, equals[java.lang.Object], null>
<java.lang.Number, doubleValue[], double, fit.ScientificDouble, compareTo[java.lang.Object], null>
<java.lang.Double, isNaN[double], boolean, fit.ScientificDouble, compareTo[java.lang.Object], null>
<java.lang.Double, isNaN[double], boolean, fit.ScientificDouble, compareTo[java.lang.Object], null>
<java.lang.Double, isNaN[double], boolean, fit.ScientificDouble, compareTo[java.lang.Object], null>
<java.lang.Double, isNaN[double], boolean, fit.ScientificDouble, compareTo[java.lang.Object], null>
<java.lang.Double, toString[double], java.lang.String, fit.ScientificDouble, toString[], null>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, fit.Summary, doTable[fit.Parse], null>
<fit.Fixture, counts[], java.lang.String, fit.Summary, doTable[fit.Parse], null>
<java.util.Map, keySet[], java.util.Set, fit.Summary, doTable[fit.Parse], null>
<fit.Summary, rows[java.util.Iterator], fit.Parse, fit.Summary, doTable[fit.Parse], null>
<java.util.Set, iterator[], java.util.Iterator, fit.Summary, doTable[fit.Parse], null>
<java.util.Iterator, hasNext[], boolean, fit.Summary, rows[java.util.Iterator], null>
<java.util.Iterator, next[], java.lang.Object, fit.Summary, rows[java.util.Iterator], null>
<fit.Summary, tr[fit.Parse, fit.Parse], fit.Parse, fit.Summary, rows[java.util.Iterator], null>
<fit.Summary, td[java.lang.String, fit.Parse], fit.Parse, fit.Summary, rows[java.util.Iterator], null>
<java.lang.Object, toString[], java.lang.String, fit.Summary, rows[java.util.Iterator], null>
<fit.Summary, td[java.lang.String, fit.Parse], fit.Parse, fit.Summary, rows[java.util.Iterator], null>
<java.lang.Object, toString[], java.lang.String, fit.Summary, rows[java.util.Iterator], null>
<java.util.Map, get[java.lang.Object], java.lang.Object, fit.Summary, rows[java.util.Iterator], toString[]>
<fit.Summary, rows[java.util.Iterator], fit.Parse, fit.Summary, rows[java.util.Iterator], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.Summary, rows[java.util.Iterator], null>
<fit.Summary, mark[fit.Parse], void, fit.Summary, rows[java.util.Iterator], null>
<fit.Fixture, info[java.lang.String], java.lang.String, fit.Summary, td[java.lang.String, fit.Parse], null>
<fit.Fixture, wrong[fit.Parse], void, fit.Summary, mark[fit.Parse], null>
<fit.Fixture, right[fit.Parse], void, fit.Summary, mark[fit.Parse], null>
<fit.Parse, last[], fit.Parse, fit.TimedActionFixture, doTable[fit.Parse], null>
<fit.TimedActionFixture, td[java.lang.String], fit.Parse, fit.TimedActionFixture, doTable[fit.Parse], null>
<fit.Parse, last[], fit.Parse, fit.TimedActionFixture, doTable[fit.Parse], null>
<fit.TimedActionFixture, td[java.lang.String], fit.Parse, fit.TimedActionFixture, doTable[fit.Parse], null>
<fit.TimedActionFixture, time[], java.util.Date, fit.TimedActionFixture, doCells[fit.Parse], null>
<java.util.Date, getTime[], long, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.TimedActionFixture, time[], java.util.Date, fit.TimedActionFixture, doCells[fit.Parse], getTime[]>
<java.util.Date, getTime[], long, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.Parse, last[], fit.Parse, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.TimedActionFixture, td[java.lang.String], fit.Parse, fit.TimedActionFixture, doCells[fit.Parse], null>
<java.text.DateFormat, format[java.util.Date], java.lang.String, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.Parse, last[], fit.Parse, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.TimedActionFixture, td[java.lang.String], fit.Parse, fit.TimedActionFixture, doCells[fit.Parse], null>
<java.lang.Double, toString[double], java.lang.String, fit.TimedActionFixture, doCells[fit.Parse], null>
<fit.Fixture, info[java.lang.String], java.lang.String, fit.TimedActionFixture, td[java.lang.String], null>
<fit.TypeAdapter, adapterFor[java.lang.Class], fit.TypeAdapter, fit.TypeAdapter, on[fit.Fixture, java.lang.Class], null>
<fit.TypeAdapter, init[fit.Fixture, java.lang.Class], void, fit.TypeAdapter, on[fit.Fixture, java.lang.Class], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.Class], fit.TypeAdapter, fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], null>
<java.lang.reflect.Field, getType[], java.lang.Class, fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Field], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.Class], fit.TypeAdapter, fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], null>
<java.lang.reflect.Method, getReturnType[], java.lang.Class, fit.TypeAdapter, on[fit.Fixture, java.lang.reflect.Method], null>
<java.lang.Class, isPrimitive[], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.Class, isArray[], boolean, fit.TypeAdapter, adapterFor[java.lang.Class], null>
<java.lang.reflect.Field, get[java.lang.Object], java.lang.Object, fit.TypeAdapter, get[], null>
<fit.TypeAdapter, invoke[], java.lang.Object, fit.TypeAdapter, get[], null>
<java.lang.reflect.Field, set[java.lang.Object, java.lang.Object], void, fit.TypeAdapter, set[java.lang.Object], null>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, fit.TypeAdapter, invoke[], null>
<fit.Fixture, parse[java.lang.String, java.lang.Class], java.lang.Object, fit.TypeAdapter, parse[java.lang.String], null>
<java.lang.Object, equals[java.lang.Object], boolean, fit.TypeAdapter, equals[java.lang.Object, java.lang.Object], null>
<java.lang.Object, toString[], java.lang.String, fit.TypeAdapter, toString[java.lang.Object], null>
<java.lang.reflect.Field, setByte[java.lang.Object, byte], void, fit.TypeAdapter.ByteAdapter, set[java.lang.Object], null>
<java.lang.Byte, byteValue[], byte, fit.TypeAdapter.ByteAdapter, set[java.lang.Object], null>
<java.lang.Byte, parseByte[java.lang.String], byte, fit.TypeAdapter.ClassByteAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setShort[java.lang.Object, short], void, fit.TypeAdapter.ShortAdapter, set[java.lang.Object], null>
<java.lang.Short, shortValue[], short, fit.TypeAdapter.ShortAdapter, set[java.lang.Object], null>
<java.lang.Short, parseShort[java.lang.String], short, fit.TypeAdapter.ClassShortAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setInt[java.lang.Object, int], void, fit.TypeAdapter.IntAdapter, set[java.lang.Object], null>
<java.lang.Integer, intValue[], int, fit.TypeAdapter.IntAdapter, set[java.lang.Object], null>
<java.lang.Integer, parseInt[java.lang.String], int, fit.TypeAdapter.ClassIntegerAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setLong[java.lang.Object, long], void, fit.TypeAdapter.LongAdapter, set[java.lang.Long], null>
<java.lang.Long, longValue[], long, fit.TypeAdapter.LongAdapter, set[java.lang.Long], null>
<java.lang.Long, parseLong[java.lang.String], long, fit.TypeAdapter.ClassLongAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setFloat[java.lang.Object, float], void, fit.TypeAdapter.FloatAdapter, set[java.lang.Object], null>
<java.lang.Number, floatValue[], float, fit.TypeAdapter.FloatAdapter, set[java.lang.Object], null>
<java.lang.Float, parseFloat[java.lang.String], float, fit.TypeAdapter.FloatAdapter, parse[java.lang.String], null>
<java.lang.Float, parseFloat[java.lang.String], float, fit.TypeAdapter.ClassFloatAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setDouble[java.lang.Object, double], void, fit.TypeAdapter.DoubleAdapter, set[java.lang.Object], null>
<java.lang.Number, doubleValue[], double, fit.TypeAdapter.DoubleAdapter, set[java.lang.Object], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.TypeAdapter.DoubleAdapter, parse[java.lang.String], null>
<java.lang.Double, parseDouble[java.lang.String], double, fit.TypeAdapter.ClassDoubleAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setChar[java.lang.Object, char], void, fit.TypeAdapter.CharAdapter, set[java.lang.Object], null>
<java.lang.Character, charValue[], char, fit.TypeAdapter.CharAdapter, set[java.lang.Object], null>
<java.lang.String, charAt[int], char, fit.TypeAdapter.ClassCharacterAdapter, parse[java.lang.String], null>
<java.lang.reflect.Field, setBoolean[java.lang.Object, boolean], void, fit.TypeAdapter.BooleanAdapter, set[java.lang.Object], null>
<java.lang.Boolean, booleanValue[], boolean, fit.TypeAdapter.BooleanAdapter, set[java.lang.Object], null>
<java.lang.Class, getComponentType[], java.lang.Class, fit.TypeAdapter.ArrayAdapter, init[fit.Fixture, java.lang.Class], null>
<fit.TypeAdapter, on[fit.Fixture, java.lang.Class], fit.TypeAdapter, fit.TypeAdapter.ArrayAdapter, init[fit.Fixture, java.lang.Class], null>
<java.lang.reflect.Array, newInstance[java.lang.Class, int], java.lang.Object, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<java.util.StringTokenizer, countTokens[], int, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<java.util.StringTokenizer, hasMoreTokens[], boolean, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<java.lang.reflect.Array, set[java.lang.Object, int, java.lang.Object], void, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<fit.TypeAdapter, parse[java.lang.String], java.lang.Object, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<java.lang.String, trim[], java.lang.String, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], null>
<java.util.StringTokenizer, nextToken[], java.lang.String, fit.TypeAdapter.ArrayAdapter, parse[java.lang.String], trim[]>
<java.lang.reflect.Array, getLength[java.lang.Object], int, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<fit.TypeAdapter, toString[java.lang.Object], java.lang.String, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<java.lang.reflect.Array, get[java.lang.Object, int], java.lang.Object, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<java.lang.StringBuffer, toString[], java.lang.String, fit.TypeAdapter.ArrayAdapter, toString[java.lang.Object], null>
<java.lang.reflect.Array, getLength[java.lang.Object], int, fit.TypeAdapter.ArrayAdapter, equals[java.lang.Object, java.lang.Object], null>
<java.lang.reflect.Array, getLength[java.lang.Object], int, fit.TypeAdapter.ArrayAdapter, equals[java.lang.Object, java.lang.Object], null>
<fit.TypeAdapter, equals[java.lang.Object, java.lang.Object], boolean, fit.TypeAdapter.ArrayAdapter, equals[java.lang.Object, java.lang.Object], null>
<java.lang.reflect.Array, get[java.lang.Object, int], java.lang.Object, fit.TypeAdapter.ArrayAdapter, equals[java.lang.Object, java.lang.Object], null>
<java.lang.reflect.Array, get[java.lang.Object, int], java.lang.Object, fit.TypeAdapter.ArrayAdapter, equals[java.lang.Object, java.lang.Object], null>
<java.io.PrintStream, println[java.lang.String], void, fit.WikiRunner, main[java.lang.String[]], null>
<fit.FileRunner, main[java.lang.String[]], void, fit.WikiRunner, main[java.lang.String[]], null>