All Method Calls (7276)

<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; SunflowGUI; usage[boolean]; void; null; System.out>
<java.lang.System; exit[int]; void; SunflowGUI; usage[boolean]; void; null; System>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<org.sunflow.core.primitive.TriangleMesh; setSmallTriangles[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; TriangleMesh>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<org.sunflow.core.accel.KDTree; setDumpMode[boolean, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; KDTree>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Float; parseFloat[java.lang.String]; float; SunflowGUI; main[java.lang.String[]]; void; null; Float>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; baketype>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; baketype>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<org.sunflow.system.UI; verbosity[int]; void; SunflowGUI; main[java.lang.String[]]; void; null; UI>
<java.lang.Integer; parseInt[java.lang.String]; int; SunflowGUI; main[java.lang.String[]]; void; null; Integer>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; args[i]>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<org.sunflow.SunflowAPI; runSystemCheck[]; void; SunflowGUI; main[java.lang.String[]]; void; null; SunflowAPI>
<org.sunflow.Benchmark; execute[]; void; SunflowGUI; main[java.lang.String[]]; void; null; new Benchmark()>
<org.sunflow.SunflowAPI; runSystemCheck[]; void; SunflowGUI; main[java.lang.String[]]; void; null; SunflowAPI>
<SunflowGUI; usage[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; this>
<org.sunflow.SunflowAPI; runSystemCheck[]; void; SunflowGUI; main[java.lang.String[]]; void; null; SunflowAPI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; main[java.lang.String[]]; void; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; main[java.lang.String[]]; void; null; UI>
<org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; SunflowGUI; main[java.lang.String[]]; void; null; SunflowAPI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<org.sunflow.SunflowAPI; shaderOverride[java.lang.String, boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; SunflowGUI; main[java.lang.String[]]; void; null; filename>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; SunflowGUI; main[java.lang.String[]]; void; null; String>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; currentFilename>
<java.lang.Throwable; printStackTrace[]; void; SunflowGUI; main[java.lang.String[]]; void; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; SunflowGUI; main[java.lang.String[]]; void; null; currentFilename>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; SunflowGUI; main[java.lang.String[]]; void; null; api>
<javax.swing.plaf.metal.MetalLookAndFeel; setCurrentTheme[javax.swing.plaf.metal.MetalTheme]; void; SunflowGUI; main[java.lang.String[]]; void; null; MetalLookAndFeel>
<java.awt.Window; setVisible[boolean]; void; SunflowGUI; main[java.lang.String[]]; void; null; gui>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; SunflowGUI; main[java.lang.String[]]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; SunflowGUI; main[java.lang.String[]]; void; getScreenSize[]; Toolkit>
<java.awt.Dimension; getWidth[]; double; SunflowGUI; main[java.lang.String[]]; void; null; screenRes>
<java.awt.Dimension; getHeight[]; double; SunflowGUI; main[java.lang.String[]]; void; null; screenRes>
<java.awt.Frame; setExtendedState[int]; void; SunflowGUI; main[java.lang.String[]]; void; null; gui>
<javax.swing.AbstractButton; doClick[]; void; SunflowGUI; main[java.lang.String[]]; void; null; gui.tileWindowMenuItem>
<org.sunflow.SunflowAPI; runSystemCheck[]; void; SunflowGUI; main[java.lang.String[]]; void; null; SunflowAPI>
<SunflowGUI; initGUI[]; void; SunflowGUI; SunflowGUI[]; void; null; this>
<java.awt.Window; pack[]; void; SunflowGUI; SunflowGUI[]; void; null; this>
<java.awt.Window; setLocationRelativeTo[java.awt.Component]; void; SunflowGUI; SunflowGUI[]; void; null; this>
<SunflowGUI; newFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; SunflowGUI; SunflowGUI[]; void; null; this>
<org.sunflow.system.UI; set[org.sunflow.system.UserInterface]; void; SunflowGUI; SunflowGUI[]; void; null; UI>
<java.awt.Frame; setTitle[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; this>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; SunflowGUI; initGUI[]; void; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; this>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; SunflowGUI; initGUI[]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; SunflowGUI; initGUI[]; void; getScreenSize[]; Toolkit>
<java.awt.Dimension; getWidth[]; double; SunflowGUI; initGUI[]; void; null; screenRes>
<java.awt.Dimension; getHeight[]; double; SunflowGUI; initGUI[]; void; null; screenRes>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; SunflowGUI; initGUI[]; void; null; desktop>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; SunflowGUI; initGUI[]; void; null; desktop>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; desktop>
<java.awt.FlowLayout; setAlignment[int]; void; SunflowGUI; initGUI[]; void; null; jPanel1Layout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; SunflowGUI; initGUI[]; void; null; jPanel1>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; imagePanelFrame>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; renderButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; renderButton>
<SunflowGUI; renderMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; iprButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; iprButton>
<SunflowGUI; iprMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; imagePanelFrame>
<javax.swing.JInternalFrame; pack[]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; setResizable[boolean]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; setMaximizable[boolean]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<javax.swing.JComponent; setVisible[boolean]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; setTitle[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; setIconifiable[boolean]; void; SunflowGUI; initGUI[]; void; null; imagePanelFrame>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; desktop>
<javax.swing.JInternalFrame; setTitle[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<javax.swing.JInternalFrame; setMaximizable[boolean]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<javax.swing.JInternalFrame; setResizable[boolean]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<javax.swing.JInternalFrame; setIconifiable[boolean]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; editorFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; editorFrame>
<javax.swing.JScrollPane; setVerticalScrollBarPolicy[int]; void; SunflowGUI; initGUI[]; void; null; jScrollPane1>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; SunflowGUI; initGUI[]; void; null; jScrollPane1>
<javax.swing.JScrollPane; setViewportView[java.awt.Component]; void; SunflowGUI; initGUI[]; void; null; jScrollPane1>
<javax.swing.JTextArea; setFont[java.awt.Font]; void; SunflowGUI; initGUI[]; void; null; editorTextArea>
<javax.swing.JComponent; setTransferHandler[javax.swing.TransferHandler]; void; SunflowGUI; initGUI[]; void; null; editorTextArea>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; editorFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; editorFrame>
<java.awt.FlowLayout; setAlignment[int]; void; SunflowGUI; initGUI[]; void; null; jPanel3Layout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; SunflowGUI; initGUI[]; void; null; jPanel3>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel3>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; buildButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; buildButton>
<SunflowGUI; buildMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JInternalFrame; pack[]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<javax.swing.JComponent; setVisible[boolean]; void; SunflowGUI; initGUI[]; void; null; editorFrame>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; desktop>
<javax.swing.JInternalFrame; setIconifiable[boolean]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<javax.swing.JInternalFrame; setMaximizable[boolean]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<javax.swing.JInternalFrame; setResizable[boolean]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<javax.swing.JInternalFrame; setTitle[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; consoleFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; consoleFrame>
<javax.swing.JScrollPane; setVerticalScrollBarPolicy[int]; void; SunflowGUI; initGUI[]; void; null; jScrollPane2>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; SunflowGUI; initGUI[]; void; null; jScrollPane2>
<javax.swing.JScrollPane; setViewportView[java.awt.Component]; void; SunflowGUI; initGUI[]; void; null; jScrollPane2>
<javax.swing.JTextArea; setFont[java.awt.Font]; void; SunflowGUI; initGUI[]; void; null; consoleTextArea>
<javax.swing.text.JTextComponent; setEditable[boolean]; void; SunflowGUI; initGUI[]; void; null; consoleTextArea>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; consoleFrame.getContentPane()>
<javax.swing.JInternalFrame; getContentPane[]; java.awt.Container; SunflowGUI; initGUI[]; void; add[java.awt.Component, java.lang.Object]; consoleFrame>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; SunflowGUI; initGUI[]; void; null; jPanel4>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; SunflowGUI; initGUI[]; void; null; jPanel6>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; jPanel4>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; SunflowGUI; initGUI[]; void; null; jPanel6>
<javax.swing.BorderFactory; createEmptyBorder[int, int, int, int]; javax.swing.border.Border; SunflowGUI; initGUI[]; void; null; BorderFactory>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel6>
<javax.swing.JComponent; setEnabled[boolean]; void; SunflowGUI; initGUI[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setString[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setStringPainted[boolean]; void; SunflowGUI; initGUI[]; void; null; taskProgressBar>
<javax.swing.JComponent; setOpaque[boolean]; void; SunflowGUI; initGUI[]; void; null; taskProgressBar>
<java.awt.FlowLayout; setAlignment[int]; void; SunflowGUI; initGUI[]; void; null; jPanel5Layout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; SunflowGUI; initGUI[]; void; null; jPanel5>
<java.awt.Container; add[java.awt.Component, java.lang.Object]; void; SunflowGUI; initGUI[]; void; null; jPanel4>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel5>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; taskCancelButton>
<javax.swing.AbstractButton; setEnabled[boolean]; void; SunflowGUI; initGUI[]; void; null; taskCancelButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; taskCancelButton>
<org.sunflow.system.UI; taskCancel[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; UI>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; jPanel5>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; clearConsoleButton>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; clearConsoleButton>
<SunflowGUI; clearConsole[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; this>
<javax.swing.JInternalFrame; pack[]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<javax.swing.JComponent; setVisible[boolean]; void; SunflowGUI; initGUI[]; void; null; consoleFrame>
<javax.swing.JFrame; setJMenuBar[javax.swing.JMenuBar]; void; SunflowGUI; initGUI[]; void; null; this>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; SunflowGUI; initGUI[]; void; null; jMenuBar1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; newFileMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; newFileMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; newFileMenuItem>
<SunflowGUI; newFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; openFileMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; openFileMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; openFileMenuItem>
<SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; saveMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; saveMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; saveMenuItem>
<SunflowGUI; saveCurrentFile[java.lang.String]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; saveAsMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; saveAsMenuItem>
<SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; fileMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; exitMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; exitMenuItem>
<java.lang.System; exit[int]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; System>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; SunflowGUI; initGUI[]; void; null; jMenuBar1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; buildMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; buildMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; buildMenuItem>
<java.awt.Component; isEnabled[]; boolean; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; sceneMenu>
<SunflowGUI; buildMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; autoBuildMenuItem>
<javax.swing.AbstractButton; setSelected[boolean]; void; SunflowGUI; initGUI[]; void; null; autoBuildMenuItem>
<javax.swing.JMenu; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; renderMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; renderMenuItem>
<SunflowGUI; renderMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; iprMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; iprMenuItem>
<SunflowGUI; iprMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; clearLogMenuItem>
<javax.swing.JComponent; setToolTipText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; clearLogMenuItem>
<javax.swing.AbstractButton; setSelected[boolean]; void; SunflowGUI; initGUI[]; void; null; clearLogMenuItem>
<javax.swing.JMenu; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; textureCacheClearMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; textureCacheClearMenuItem>
<SunflowGUI; textureCacheClearMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; sceneMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; smallTrianglesMenuItem>
<javax.swing.JComponent; setToolTipText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; smallTrianglesMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; smallTrianglesMenuItem>
<SunflowGUI; smallTrianglesMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; SunflowGUI; initGUI[]; void; null; jMenuBar1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; imageMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; imageMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; resetZoomMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; resetZoomMenuItem>
<org.sunflow.system.ImagePanel; reset[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; imagePanel>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; imageMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; fitWindowMenuItem>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; fitWindowMenuItem>
<org.sunflow.system.ImagePanel; fit[]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; addActionListener[java.awt.event.ActionListener]; imagePanel>
<javax.swing.JMenu; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; imageMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; imageMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; jMenuItem4>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; jMenuItem4>
<javax.swing.JFileChooser; setFileFilter[javax.swing.filechooser.FileFilter]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; isDirectory[]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f>
<java.lang.String; endsWith[java.lang.String]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f.getName()>
<java.io.File; getName[]; java.lang.String; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; endsWith[java.lang.String]; f>
<java.lang.String; endsWith[java.lang.String]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f.getName()>
<java.io.File; getName[]; java.lang.String; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; endsWith[java.lang.String]; f>
<javax.swing.JFileChooser; showSaveDialog[java.awt.Component]; int; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; getAbsolutePath[]; java.lang.String; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; fc.getSelectedFile()>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; getAbsolutePath[]; fc>
<org.sunflow.system.ImagePanel; save[java.lang.String]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; imagePanel>
<javax.swing.JMenuBar; add[javax.swing.JMenu]; javax.swing.JMenu; SunflowGUI; initGUI[]; void; null; jMenuBar1>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; imageWindowMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; imageWindowMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; imageWindowMenuItem>
<SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; editorWindowMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; editorWindowMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; editorWindowMenuItem>
<SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; consoleWindowMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; consoleWindowMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; consoleWindowMenuItem>
<SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.JMenu; add[java.awt.Component]; java.awt.Component; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.JMenu; add[javax.swing.JMenuItem]; javax.swing.JMenuItem; SunflowGUI; initGUI[]; void; null; windowMenu>
<javax.swing.AbstractButton; setText[java.lang.String]; void; SunflowGUI; initGUI[]; void; null; tileWindowMenuItem>
<javax.swing.JMenuItem; setAccelerator[javax.swing.KeyStroke]; void; SunflowGUI; initGUI[]; void; null; tileWindowMenuItem>
<javax.swing.KeyStroke; getKeyStroke[java.lang.String]; javax.swing.KeyStroke; SunflowGUI; initGUI[]; void; null; KeyStroke>
<javax.swing.AbstractButton; addActionListener[java.awt.event.ActionListener]; void; SunflowGUI; initGUI[]; void; null; tileWindowMenuItem>
<SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; java.lang.Object; actionPerformed[java.awt.event.ActionEvent]; void; null; this>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; SunflowGUI; newFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; editorTextArea>
<javax.swing.JFileChooser; setFileFilter[javax.swing.filechooser.FileFilter]; void; SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; isDirectory[]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f>
<java.lang.String; endsWith[java.lang.String]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f.getName()>
<java.io.File; getName[]; java.lang.String; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; endsWith[java.lang.String]; f>
<java.lang.String; endsWith[java.lang.String]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f.getName()>
<java.io.File; getName[]; java.lang.String; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; endsWith[java.lang.String]; f>
<javax.swing.JFileChooser; showOpenDialog[java.awt.Component]; int; SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; getAbsolutePath[]; java.lang.String; SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc.getSelectedFile()>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; getAbsolutePath[]; fc>
<SunflowGUI; openFile[java.lang.String]; void; SunflowGUI; openFileMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; this>
<java.lang.Thread; start[]; void; SunflowGUI; buildMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; new Thread(){
  public void run(){
    setEnableInterface(false);
    if (clearLogMenuItem.isSelected())     clearConsole();
    Timer t=new Timer();
    t.start();
    try {
      api=SunflowAPI.compile(editorTextArea.getText());
    }
 catch (    NoClassDefFoundError e) {
      UI.printError(Module.GUI,"Janino library not found. Please check command line.");
      api=null;
    }
    if (api != null) {
      try {
        if (currentFile != null) {
          String dir=new File(currentFile).getAbsoluteFile().getParent();
          api.addIncludeSearchPath(dir);
          api.addIncludeSearchPath(dir);
        }
        api.build();
      }
 catch (      Exception e) {
        UI.printError(Module.GUI,"Build terminated abnormally: %s",e.getMessage());
        for (        StackTraceElement elt : e.getStackTrace()) {
          UI.printInfo(Module.GUI,"       at %s",elt.toString());
        }
        e.printStackTrace();
      }
      t.end();
      UI.printInfo(Module.GUI,"Build time: %s",t.toString());
    }
    setEnableInterface(true);
  }
}
>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; start[]; this>
<javax.swing.AbstractButton; isSelected[]; boolean; java.lang.Thread; run[]; void; null; clearLogMenuItem>
<SunflowGUI; clearConsole[]; void; java.lang.Thread; run[]; void; null; this>
<org.sunflow.system.Timer; start[]; void; java.lang.Thread; run[]; void; null; t>
<org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; java.lang.Thread; run[]; void; null; SunflowAPI>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; java.lang.Thread; run[]; void; null; editorTextArea>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<java.io.File; getParent[]; java.lang.String; java.lang.Thread; run[]; void; null; new File(currentFile).getAbsoluteFile()>
<java.io.File; getAbsoluteFile[]; java.io.File; java.lang.Thread; run[]; void; getParent[]; new File(currentFile)>
<org.sunflow.SunflowAPI; addIncludeSearchPath[java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; addIncludeSearchPath[java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; build[]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; java.lang.Thread; run[]; void; null; e>
<java.lang.Throwable; getStackTrace[]; java.lang.StackTraceElement[]; java.lang.Thread; run[]; void; null; e>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<java.lang.StackTraceElement; toString[]; java.lang.String; java.lang.Thread; run[]; void; null; elt>
<java.lang.Throwable; printStackTrace[]; void; java.lang.Thread; run[]; void; null; e>
<org.sunflow.system.Timer; end[]; void; java.lang.Thread; run[]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; java.lang.Thread; run[]; void; null; t>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; null; this>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; SunflowGUI; clearConsole[]; void; null; consoleTextArea>
<javax.swing.SwingUtilities; invokeLater[java.lang.Runnable]; void; SunflowGUI; println[java.lang.String]; void; null; SwingUtilities>
<javax.swing.JTextArea; append[java.lang.String]; void; java.lang.Object; run[]; void; null; consoleTextArea>
<javax.swing.JMenuItem; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; newFileMenuItem>
<javax.swing.JMenuItem; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; openFileMenuItem>
<javax.swing.JMenuItem; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; saveMenuItem>
<javax.swing.JMenuItem; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; saveAsMenuItem>
<javax.swing.JMenuItem; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; sceneMenu>
<javax.swing.AbstractButton; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; buildButton>
<javax.swing.AbstractButton; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; renderButton>
<javax.swing.AbstractButton; setEnabled[boolean]; void; SunflowGUI; setEnableInterface[boolean]; void; null; iprButton>
<javax.swing.JOptionPane; showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int]; void; SunflowGUI; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; JOptionPane>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; SunflowGUI; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; String>
<java.lang.Enum; name[]; java.lang.String; SunflowGUI; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; m>
<SunflowGUI; println[java.lang.String]; void; SunflowGUI; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; this>
<org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; SunflowGUI; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; UI>
<javax.swing.SwingUtilities; invokeLater[java.lang.Runnable]; void; SunflowGUI; taskStart[java.lang.String, int, int]; void; null; SwingUtilities>
<javax.swing.JComponent; setEnabled[boolean]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.AbstractButton; setEnabled[boolean]; void; java.lang.Object; run[]; void; null; taskCancelButton>
<javax.swing.JProgressBar; setMinimum[int]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setMaximum[int]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setValue[int]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setString[java.lang.String]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.SwingUtilities; invokeLater[java.lang.Runnable]; void; SunflowGUI; taskUpdate[int]; void; null; SwingUtilities>
<javax.swing.JProgressBar; setValue[int]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; getPercentComplete[]; double; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setString[java.lang.String]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.SwingUtilities; invokeLater[java.lang.Runnable]; void; SunflowGUI; taskStop[]; void; null; SwingUtilities>
<javax.swing.JProgressBar; setValue[int]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; getMinimum[]; int; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JProgressBar; setString[java.lang.String]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.JComponent; setEnabled[boolean]; void; java.lang.Object; run[]; void; null; taskProgressBar>
<javax.swing.AbstractButton; setEnabled[boolean]; void; java.lang.Object; run[]; void; null; taskCancelButton>
<java.lang.Thread; start[]; void; SunflowGUI; renderMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; new Thread(){
  public void run(){
    setEnableInterface(false);
    if (clearLogMenuItem.isSelected())     clearConsole();
    if (api != null) {
      api.parameter("sampler","bucket");
      api.options(SunflowAPI.DEFAULT_OPTIONS);
      api.render(SunflowAPI.DEFAULT_OPTIONS,imagePanel);
    }
 else     UI.printError(Module.GUI,"Nothing to render!");
    setEnableInterface(true);
  }
}
>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; start[]; this>
<javax.swing.AbstractButton; isSelected[]; boolean; java.lang.Thread; run[]; void; null; clearLogMenuItem>
<SunflowGUI; clearConsole[]; void; java.lang.Thread; run[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; null; this>
<java.lang.Thread; start[]; void; SunflowGUI; iprMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; new Thread(){
  public void run(){
    setEnableInterface(false);
    if (clearLogMenuItem.isSelected())     clearConsole();
    if (api != null) {
      api.parameter("sampler","ipr");
      api.options(SunflowAPI.DEFAULT_OPTIONS);
      api.render(SunflowAPI.DEFAULT_OPTIONS,imagePanel);
    }
 else     UI.printError(Module.GUI,"Nothing to IPR!");
    setEnableInterface(true);
  }
}
>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; start[]; this>
<javax.swing.AbstractButton; isSelected[]; boolean; java.lang.Thread; run[]; void; null; clearLogMenuItem>
<SunflowGUI; clearConsole[]; void; java.lang.Thread; run[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; java.lang.Thread; run[]; void; null; api>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; java.lang.Thread; run[]; void; null; UI>
<SunflowGUI; setEnableInterface[boolean]; void; java.lang.Thread; run[]; void; null; this>
<org.sunflow.core.TextureCache; flush[]; void; SunflowGUI; textureCacheClearMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; TextureCache>
<org.sunflow.core.primitive.TriangleMesh; setSmallTriangles[boolean]; void; SunflowGUI; smallTrianglesMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; TriangleMesh>
<javax.swing.AbstractButton; isSelected[]; boolean; SunflowGUI; smallTrianglesMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; smallTrianglesMenuItem>
<javax.swing.JFileChooser; setFileFilter[javax.swing.filechooser.FileFilter]; void; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; isDirectory[]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f>
<java.lang.String; endsWith[java.lang.String]; boolean; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; null; f.getName()>
<java.io.File; getName[]; java.lang.String; javax.swing.filechooser.FileFilter; accept[java.io.File]; boolean; endsWith[java.lang.String]; f>
<javax.swing.JFileChooser; showSaveDialog[java.awt.Component]; int; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc>
<java.io.File; getAbsolutePath[]; java.lang.String; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; fc.getSelectedFile()>
<javax.swing.JFileChooser; getSelectedFile[]; java.io.File; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; getAbsolutePath[]; fc>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; f>
<java.io.File; exists[]; boolean; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; file>
<javax.swing.JOptionPane; showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int]; int; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; JOptionPane>
<SunflowGUI; saveCurrentFile[java.lang.String]; void; SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; this>
<SunflowGUI; saveAsMenuItemActionPerformed[java.awt.event.ActionEvent]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; this>
<java.io.Writer; write[java.lang.String]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; file>
<javax.swing.text.JTextComponent; getText[]; java.lang.String; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; editorTextArea>
<java.io.OutputStreamWriter; close[]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; file>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; UI>
<java.lang.Throwable; printStackTrace[]; void; SunflowGUI; saveCurrentFile[java.lang.String]; void; null; e>
<javax.swing.JInternalFrame; setSelected[boolean]; void; SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; null; frame>
<javax.swing.JInternalFrame; setIcon[boolean]; void; SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; null; frame>
<java.lang.Throwable; printStackTrace[]; void; SunflowGUI; selectFrame[javax.swing.JInternalFrame]; void; null; e>
<javax.swing.JInternalFrame; isIcon[]; boolean; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; setIcon[boolean]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; isIcon[]; boolean; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; editorFrame>
<javax.swing.JInternalFrame; setIcon[boolean]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; editorFrame>
<javax.swing.JInternalFrame; isIcon[]; boolean; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; consoleFrame>
<javax.swing.JInternalFrame; setIcon[boolean]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; consoleFrame>
<javax.swing.JComponent; getWidth[]; int; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; desktop>
<javax.swing.JComponent; getHeight[]; int; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; desktop>
<javax.swing.JInternalFrame; reshape[int, int, int, int]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; imagePanelFrame>
<javax.swing.JInternalFrame; reshape[int, int, int, int]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; editorFrame>
<javax.swing.JInternalFrame; reshape[int, int, int, int]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; consoleFrame>
<java.lang.Throwable; printStackTrace[]; void; SunflowGUI; tileWindowMenuItemActionPerformed[java.awt.event.ActionEvent]; void; null; e>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI; openFile[java.lang.String]; void; null; filename>
<java.io.BufferedReader; readLine[]; java.lang.String; SunflowGUI; openFile[java.lang.String]; void; null; bf>
<java.io.InputStreamReader; close[]; void; SunflowGUI; openFile[java.lang.String]; void; null; file>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; SunflowGUI; openFile[java.lang.String]; void; null; editorTextArea>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; openFile[java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; openFile[java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; openFile[java.lang.String]; void; null; UI>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI; openFile[java.lang.String]; void; null; filename>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; SunflowGUI; openFile[java.lang.String]; void; null; filename>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; SunflowGUI; openFile[java.lang.String]; void; null; editorTextArea>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; openFile[java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; SunflowGUI; openFile[java.lang.String]; void; null; UI>
<javax.swing.text.JTextComponent; setCaretPosition[int]; void; SunflowGUI; openFile[java.lang.String]; void; null; editorTextArea>
<javax.swing.AbstractButton; isSelected[]; boolean; SunflowGUI; openFile[java.lang.String]; void; null; autoBuildMenuItem>
<SunflowGUI; buildMenuItemActionPerformed[java.awt.event.ActionEvent]; void; SunflowGUI; openFile[java.lang.String]; void; null; this>
<java.awt.Component; isEnabled[]; boolean; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; sceneMenu>
<SunflowGUI$SceneTransferHandler; canImport[javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]]; boolean; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; this>
<java.awt.datatransfer.Transferable; getTransferDataFlavors[]; java.awt.datatransfer.DataFlavor[]; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; t>
<java.awt.datatransfer.Transferable; getTransferData[java.awt.datatransfer.DataFlavor]; java.lang.Object; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; t>
<java.util.List; size[]; int; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; files>
<java.util.List; get[int]; java.lang.Object; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; files>
<java.io.File; getAbsolutePath[]; java.lang.String; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; file>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; filename>
<SunflowGUI; openFile[java.lang.String]; void; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; this>
<java.lang.Throwable; printStackTrace[]; void; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; exp>
<java.awt.datatransfer.DataFlavor; isFlavorJavaFileListType[]; boolean; SunflowGUI.SceneTransferHandler; canImport[javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]]; boolean; null; flavors[i]>
<java.lang.Runtime; maxMemory[]; long; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; org.sunflow.SunflowAPI; runSystemCheck[]; void; maxMemory[]; Runtime>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; System>
<java.lang.String; contains[java.lang.CharSequence]; boolean; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; compiler>
<java.lang.String; contains[java.lang.CharSequence]; boolean; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; compiler>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; System>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; UI>
<java.lang.System; getProperty[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; runSystemCheck[]; void; null; System>
<org.sunflow.SunflowAPI; reset[]; void; org.sunflow.SunflowAPI; SunflowAPI[]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; null; String>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; null; renderObjects>
<org.sunflow.core.ParameterList; addString[java.lang.String, java.lang.String]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; null; parameterList>
<org.sunflow.core.ParameterList; addBoolean[java.lang.String, boolean]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; null; parameterList>
<org.sunflow.core.ParameterList; addInteger[java.lang.String, int]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; null; parameterList>
<org.sunflow.core.ParameterList; addFloat[java.lang.String, float]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; null; parameterList>
<org.sunflow.core.ParameterList; addColor[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; null; parameterList>
<org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; null; parameterList>
<org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; null; parameterList>
<org.sunflow.core.ParameterList; addMatrices[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; null; parameterList>
<org.sunflow.math.Matrix4; asRowMajor[]; float[]; org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; null; value>
<org.sunflow.core.ParameterList; addIntegerArray[java.lang.String, int[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; null; parameterList>
<org.sunflow.core.ParameterList; addStringArray[java.lang.String, java.lang.String[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; null; parameterList>
<org.sunflow.core.ParameterList$InterpolationType; valueOf[java.lang.String]; org.sunflow.core.ParameterList.InterpolationType; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; InterpolationType>
<java.lang.String; toUpperCase[]; java.lang.String; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; interpolation>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; UI>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; type>
<org.sunflow.core.ParameterList; addFloats[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; parameterList>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; type>
<org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; parameterList>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; type>
<org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; parameterList>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; type>
<org.sunflow.core.ParameterList; addTexCoords[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; parameterList>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; type>
<org.sunflow.core.ParameterList; addMatrices[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; parameterList>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; null; UI>
<org.sunflow.RenderObjectMap; remove[java.lang.String]; void; org.sunflow.SunflowAPI; remove[java.lang.String]; void; null; renderObjects>
<org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.SunflowAPI; update[java.lang.String]; boolean; null; renderObjects>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; update[java.lang.String]; boolean; null; parameterList>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; addIncludeSearchPath[java.lang.String]; void; null; includeSearchPath>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; addTextureSearchPath[java.lang.String]; void; null; textureSearchPath>
<org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; null; textureSearchPath>
<org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; resolveIncludeFilename[java.lang.String]; java.lang.String; null; includeSearchPath>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupShader[java.lang.String]; org.sunflow.core.Shader; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Modifier]; void; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; parameterList>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; clear[boolean]; this>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Instance]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupInstance[java.lang.String]; org.sunflow.core.Instance; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupLight[java.lang.String]; org.sunflow.core.LightSource; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; null; parameterList>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Camera]; void; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupCamera[java.lang.String]; org.sunflow.core.Camera; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; null; parameterList>
<org.sunflow.SunflowAPI; lookupOptions[java.lang.String]; org.sunflow.core.Options; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; this>
<org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; UI>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; parameterList>
<org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Options]; void; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupOptions[java.lang.String]; org.sunflow.core.Options; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; this>
<org.sunflow.SunflowAPI; update[java.lang.String]; boolean; org.sunflow.SunflowAPI; options[java.lang.String]; void; null; this>
<org.sunflow.RenderObjectMap; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; org.sunflow.SunflowAPI; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupInstance[java.lang.String]; org.sunflow.core.Instance; org.sunflow.SunflowAPI; lookupInstance[java.lang.String]; org.sunflow.core.Instance; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupCamera[java.lang.String]; org.sunflow.core.Camera; org.sunflow.SunflowAPI; lookupCamera[java.lang.String]; org.sunflow.core.Camera; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupOptions[java.lang.String]; org.sunflow.core.Options; org.sunflow.SunflowAPI; lookupOptions[java.lang.String]; org.sunflow.core.Options; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupShader[java.lang.String]; org.sunflow.core.Shader; org.sunflow.SunflowAPI; lookupShader[java.lang.String]; org.sunflow.core.Shader; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; org.sunflow.SunflowAPI; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; null; renderObjects>
<org.sunflow.RenderObjectMap; lookupLight[java.lang.String]; org.sunflow.core.LightSource; org.sunflow.SunflowAPI; lookupLight[java.lang.String]; org.sunflow.core.LightSource; null; renderObjects>
<org.sunflow.core.Scene; setShaderOverride[org.sunflow.core.Shader, boolean]; void; org.sunflow.SunflowAPI; shaderOverride[java.lang.String, boolean]; void; null; scene>
<org.sunflow.SunflowAPI; lookupShader[java.lang.String]; org.sunflow.core.Shader; org.sunflow.SunflowAPI; shaderOverride[java.lang.String, boolean]; void; null; this>
<org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; renderObjects>
<org.sunflow.SunflowAPI; lookupOptions[java.lang.String]; org.sunflow.core.Options; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; this>
<org.sunflow.core.Scene; setCamera[org.sunflow.core.Camera]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; scene>
<org.sunflow.SunflowAPI; lookupCamera[java.lang.String]; org.sunflow.core.Camera; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; this>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; opt>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; opt>
<org.sunflow.SunflowAPI; lookupInstance[java.lang.String]; org.sunflow.core.Instance; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.Scene; setBakingInstance[org.sunflow.core.Instance]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; scene>
<org.sunflow.core.Scene; setBakingInstance[org.sunflow.core.Instance]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; scene>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; opt>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; samplerName>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; samplerName>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; samplerName>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; samplerName>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; samplerName>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; null; scene>
<org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; includeSearchPath>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; filename>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; filename>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; UI>
<java.io.File; getAbsolutePath[]; java.lang.String; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; new File(filename).getAbsoluteFile().getParentFile()>
<java.io.File; getParentFile[]; java.io.File; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; getAbsolutePath[]; new File(filename).getAbsoluteFile()>
<java.io.File; getAbsoluteFile[]; java.io.File; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; getParentFile[]; new File(filename)>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; includeSearchPath>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; textureSearchPath>
<org.sunflow.core.SceneParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; null; parser>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.SunflowAPI; getBounds[]; org.sunflow.math.BoundingBox; null; scene>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; filename>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<not found; createFastClassBodyEvaluator[]; not found; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; ClassBodyEvaluator>
<java.lang.ClassLoader; getSystemClassLoader[]; java.lang.ClassLoader; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; ClassLoader>
<java.io.FileInputStream; close[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; stream>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.Timer; end[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<java.io.File; getAbsolutePath[]; java.lang.String; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; new File(filename).getAbsoluteFile().getParentFile()>
<java.io.File; getParentFile[]; java.io.File; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; getAbsolutePath[]; new File(filename).getAbsoluteFile()>
<java.io.File; getAbsoluteFile[]; java.io.File; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; getParentFile[]; new File(filename)>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; api.includeSearchPath>
<org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; api.textureSearchPath>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.SunflowAPI; setCurrentFrame[int]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; api>
<org.sunflow.SunflowAPI; build[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; api>
<org.sunflow.system.Timer; end[]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; org.sunflow.SunflowAPI; create[java.lang.String, int]; org.sunflow.SunflowAPI; null; api>
<org.sunflow.system.Timer; start[]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; t>
<not found; createFastClassBodyEvaluator[]; not found; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; ClassBodyEvaluator>
<org.sunflow.system.Timer; end[]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; t>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; UI>
<not found; getMessage[]; not found; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.SunflowAPI; compile[java.lang.String]; org.sunflow.SunflowAPI; null; e>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.Options; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; list>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.core.Options; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.Options; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.core.ParameterList$Parameter; check[]; void; org.sunflow.core.Options; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.Options; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; check[]; e>
<org.sunflow.core.LightServer; shadingCache[float]; void; org.sunflow.core.LightServer; LightServer[org.sunflow.core.Scene]; void; null; this>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.LightServer; shadingCache[float]; void; null; Math>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; options>
<org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; GIEngineFactory>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; caustics>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; caustics>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<java.lang.Math; max[int, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; Math>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; t>
<org.sunflow.core.LightSource; getNumSamples[]; int; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; lights[i]>
<org.sunflow.core.GIEngine; init[org.sunflow.core.Scene]; boolean; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; giEngine>
<org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; options>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; showStats[]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.core.LightSource; getPower[]; float; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; lights[0]>
<org.sunflow.core.LightSource; getPower[]; float; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; lights[i]>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.core.PhotonStore; numEmit[]; int; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; map>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.core.PhotonStore; prepare[org.sunflow.math.BoundingBox]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; map>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; scene>
<org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.core.Scene; getThreads[]; int; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; scene>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonTimer>
<org.sunflow.system.UI; taskUpdate[int]; void; java.lang.Object; run[]; void; null; UI>
<org.sunflow.system.UI; taskCanceled[]; boolean; java.lang.Object; run[]; void; null; UI>
<org.sunflow.math.QMC; halton[int, int]; double; java.lang.Object; run[]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; java.lang.Object; run[]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; java.lang.Object; run[]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; java.lang.Object; run[]; void; null; QMC>
<org.sunflow.core.LightSource; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; java.lang.Object; run[]; void; null; lights[j]>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; java.lang.Object; run[]; void; null; power>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; java.lang.Object; run[]; void; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; java.lang.Object; run[]; void; null; istate>
<org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; java.lang.Object; run[]; void; null; this>
<org.sunflow.core.ShadingState; createPhotonState[org.sunflow.core.Ray, org.sunflow.core.IntersectionState, int, org.sunflow.core.PhotonStore, org.sunflow.core.LightServer]; org.sunflow.core.ShadingState; java.lang.Object; run[]; void; null; ShadingState>
<java.lang.Thread; setPriority[int]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonThreads[i]>
<org.sunflow.core.Scene; getThreadPriority[]; int; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; scene>
<java.lang.Thread; start[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonThreads[i]>
<java.lang.Thread; join[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonThreads[i]>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.system.UI; taskCanceled[]; boolean; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonTimer>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; photonTimer>
<org.sunflow.core.PhotonStore; init[]; void; org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; map>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; prepareShadingState[org.sunflow.core.ShadingState]; state>
<org.sunflow.core.LightServer; getPhotonShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.Shader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; shader>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous.getIntersectionState()>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; hit[]; previous>
<org.sunflow.core.ShadingState; createDiffuseBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; ShadingState>
<org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; getReflectionDepth[]; int; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous.getIntersectionState()>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; hit[]; previous>
<org.sunflow.core.ShadingState; createReflectionBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; ShadingState>
<org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; getRefractionDepth[]; int; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; previous.getIntersectionState()>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; hit[]; previous>
<org.sunflow.core.ShadingState; createRefractionBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; ShadingState>
<org.sunflow.core.LightServer; shadePhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.LightServer; getShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; null; state>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.LightServer; getPhotonShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; null; state>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; istate>
<org.sunflow.core.ShadingState; createState[org.sunflow.core.IntersectionState, float, float, org.sunflow.core.Ray, int, org.sunflow.core.LightServer]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; ShadingState>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; prepareShadingState[org.sunflow.core.ShadingState]; state>
<org.sunflow.core.LightServer; getShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; this>
<org.sunflow.core.ShadingState; setResult[org.sunflow.image.Color]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; this>
<org.sunflow.core.ShadingState; setResult[org.sunflow.image.Color]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.ShadingState; setResult[org.sunflow.image.Color]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; shader>
<org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; this>
<org.sunflow.core.ShadingState; getResult[]; org.sunflow.image.Color; org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.LightServer; getShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; org.sunflow.core.LightServer; shadeBakeResult[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.ShadingState; setResult[org.sunflow.image.Color]; void; org.sunflow.core.LightServer; shadeBakeResult[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; shadeBakeResult[org.sunflow.core.ShadingState]; void; null; shader>
<org.sunflow.core.ShadingState; setResult[org.sunflow.image.Color]; void; org.sunflow.core.LightServer; shadeBakeResult[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; prepareShadingState[org.sunflow.core.ShadingState]; state>
<org.sunflow.core.LightServer; getShader[org.sunflow.core.ShadingState]; org.sunflow.core.Shader; org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; shader>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRasterX[]; float; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRasterY[]; float; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; state>
<org.sunflow.core.LightServer; hash[int, int]; int; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Vector3; dot[float, float, float]; float; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; lookupShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader]; org.sunflow.image.Color; dot[float, float, float]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRasterX[]; float; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRasterY[]; float; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.LightServer; hash[int, int]; int; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.LightServer; addShadingCache[org.sunflow.core.ShadingState, org.sunflow.core.Shader, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getReflectionDepth[]; int; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; istate>
<org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; createGlossyBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; ShadingState>
<org.sunflow.core.ShadingState; getReflectionDepth[]; int; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; istate>
<org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; createReflectionBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; ShadingState>
<org.sunflow.core.ShadingState; getRefractionDepth[]; int; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; istate>
<org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; createRefractionBounceState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; ShadingState>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; previous>
<org.sunflow.core.ShadingState; getIntersectionState[]; org.sunflow.core.IntersectionState; org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; previous>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; scene>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; istate>
<org.sunflow.core.ShadingState; createFinalGatherState[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; ShadingState>
<org.sunflow.core.GIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.LightServer; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; giEngine>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.LightServer; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.GIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.LightServer; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; giEngine>
<org.sunflow.core.LightSource; getSamples[org.sunflow.core.ShadingState]; void; org.sunflow.core.LightServer; initLightSamples[org.sunflow.core.ShadingState]; void; null; l>
<org.sunflow.core.CausticPhotonMapInterface; getSamples[org.sunflow.core.ShadingState]; void; org.sunflow.core.LightServer; initCausticSamples[org.sunflow.core.ShadingState]; void; null; causticPhotonMap>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; close[]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; filename>
<java.nio.channels.FileChannel; map[java.nio.channels.FileChannel.MapMode, long, long]; java.nio.MappedByteBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream.getChannel()>
<java.io.RandomAccessFile; getChannel[]; java.nio.channels.FileChannel; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; map[java.nio.channels.FileChannel.MapMode, long, long]; stream>
<java.nio.ByteBuffer; order[java.nio.ByteOrder]; java.nio.ByteBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.ByteBuffer; asIntBuffer[]; java.nio.IntBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.ByteBuffer; asFloatBuffer[]; java.nio.FloatBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.IntBuffer; put[int, int]; java.nio.IntBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<java.nio.IntBuffer; put[int, int]; java.nio.IntBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<java.nio.FloatBuffer; put[int, float]; java.nio.FloatBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; floats>
<java.nio.IntBuffer; put[int, int]; java.nio.IntBuffer; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<java.io.RandomAccessFile; close[]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.TriParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.nio.channels.FileChannel; map[java.nio.channels.FileChannel.MapMode, long, long]; java.nio.MappedByteBuffer; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream.getChannel()>
<java.io.FileInputStream; getChannel[]; java.nio.channels.FileChannel; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; map[java.nio.channels.FileChannel.MapMode, long, long]; stream>
<java.io.File; length[]; long; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; file>
<java.nio.ByteBuffer; order[java.nio.ByteOrder]; java.nio.ByteBuffer; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.ByteBuffer; asIntBuffer[]; java.nio.IntBuffer; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.ByteBuffer; asFloatBuffer[]; java.nio.FloatBuffer; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.nio.FloatBuffer; get[int]; float; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; buffer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; ints>
<java.io.FileInputStream; close[]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; lookupShader[java.lang.String]; org.sunflow.core.Shader; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.RA3Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.io.File; getAbsolutePath[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; new File(filename).getAbsoluteFile().getParentFile()>
<java.io.File; getParentFile[]; java.io.File; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; getAbsolutePath[]; new File(filename).getAbsoluteFile()>
<java.io.File; getAbsoluteFile[]; java.io.File; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; getParentFile[]; new File(filename)>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.SunflowAPI; shaderOverride[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.io.File; isAbsolute[]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; new File(path)>
<org.sunflow.SunflowAPI; addTextureSearchPath[java.lang.String]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.io.File; isAbsolute[]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; new File(path)>
<org.sunflow.SunflowAPI; addIncludeSearchPath[java.lang.String]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; token>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; close[]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.parser.SCParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; timer>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseImageBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseBackgroundBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; name>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseFilter[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parsePhotonBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseGIBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightserverBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseTraceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCamera[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseCameraTransform[org.sunflow.SunflowAPI]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseCameraMatrix[int, org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<not found; createFastClassBodyEvaluator[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; ClassBodyEvaluator>
<java.lang.ClassLoader; getSystemClassLoader[]; java.lang.ClassLoader; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; ClassLoader>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseShader[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.SunflowAPI; modifier[java.lang.String, org.sunflow.core.Modifier]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseModifier[org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; Matrix4.translation(x,y,z)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; new CornellBox()>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseIntArray[int]; int[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseIntArray[int]; int[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<not found; createFastClassBodyEvaluator[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; ClassBodyEvaluator>
<java.lang.ClassLoader; getSystemClassLoader[]; java.lang.ClassLoader; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; ClassLoader>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<not found; getMessage[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<not found; printStackTrace[]; not found; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<java.nio.channels.FileChannel; map[java.nio.channels.FileChannel.MapMode, long, long]; java.nio.MappedByteBuffer; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; stream.getChannel()>
<java.io.FileInputStream; getChannel[]; java.nio.channels.FileChannel; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; map[java.nio.channels.FileChannel.MapMode, long, long]; stream>
<java.io.File; length[]; long; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; file>
<java.nio.ByteBuffer; order[java.nio.ByteOrder]; java.nio.ByteBuffer; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; map>
<java.nio.ByteBuffer; asFloatBuffer[]; java.nio.FloatBuffer; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; map>
<java.nio.Buffer; capacity[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; buffer>
<java.nio.FloatBuffer; get[int]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; buffer>
<java.io.FileInputStream; close[]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; stream>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; type>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseObjectBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseInstanceBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; mesh>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; pow>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; pow>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; light>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; Point3>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; e>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextBoolean[]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; ibl>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; e>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseIntArray[int]; int[]; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; mesh>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; sunsky>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseLightBlock[org.sunflow.SunflowAPI]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; space>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.image.Color; toLinear[]; org.sunflow.image.Color; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; c>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; space>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseColor[]; org.sunflow.image.Color; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parsePoint[]; org.sunflow.math.Point3; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseVector[]; org.sunflow.math.Vector3; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.SCParser; parseIntArray[int]; int[]; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; this>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.core.parser.SCParser; parseFloatArray[int]; float[]; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; this>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; scale[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; rotateY[float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; rotateZ[float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; rotate[float, float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.parser.SCParser; parseMatrix[]; org.sunflow.math.Matrix4; null; t>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parse[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; t>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; t>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; String>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; t>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.ShaveRibParser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; p>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; s>
<java.lang.String; substring[int]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; s>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; s>
<java.lang.String; substring[int, int]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; s>
<java.lang.String; length[]; int; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; s>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; array>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; Integer>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.parser.ShaveRibParser; parseIntArray[org.sunflow.system.Parser]; int[]; null; array>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; p>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; substring[int]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; substring[int, int]; java.lang.String; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; length[]; int; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<org.sunflow.util.FloatArray; add[float]; void; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; array>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; Float>
<org.sunflow.util.FloatArray; trim[]; float[]; org.sunflow.core.parser.ShaveRibParser; parseFloatArray[org.sunflow.system.Parser]; float[]; null; array>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.nio.channels.FileChannel; map[java.nio.channels.FileChannel.MapMode, long, long]; java.nio.MappedByteBuffer; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream.getChannel()>
<java.io.FileInputStream; getChannel[]; java.nio.channels.FileChannel; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; map[java.nio.channels.FileChannel.MapMode, long, long]; stream>
<java.io.File; length[]; long; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; file>
<java.nio.ByteBuffer; order[java.nio.ByteOrder]; java.nio.ByteBuffer; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.ByteBuffer; asFloatBuffer[]; java.nio.FloatBuffer; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; map>
<java.nio.Buffer; capacity[]; int; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; buffer>
<java.nio.FloatBuffer; get[int]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; buffer>
<java.io.FileInputStream; close[]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; stream>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<java.lang.String; replace[java.lang.CharSequence, java.lang.CharSequence]; java.lang.String; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; filename>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.Parser; getNextInt[]; int; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; up>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; up>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; up>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; up>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.Parser; close[]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.parser.RA2Parser; parse[java.lang.String, org.sunflow.SunflowAPI]; boolean; null; e>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; ShadingState[org.sunflow.core.ShadingState, org.sunflow.core.IntersectionState, org.sunflow.core.Ray, int, int]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; ShadingState[org.sunflow.core.ShadingState, org.sunflow.core.IntersectionState, org.sunflow.core.Ray, int, int]; void; null; QMC>
<org.sunflow.core.LightServer; shadeHit[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.ShadingState; shade[]; org.sunflow.image.Color; null; server>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; correctShadingNormal[]; void; null; Vector3>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.ShadingState; correctShadingNormal[]; void; null; n>
<org.sunflow.math.OrthoNormalBasis; flipW[]; void; org.sunflow.core.ShadingState; correctShadingNormal[]; void; null; basis>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; faceforward[]; void; null; r>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.ShadingState; faceforward[]; void; null; ng>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.ShadingState; faceforward[]; void; null; n>
<org.sunflow.math.OrthoNormalBasis; flipW[]; void; org.sunflow.core.ShadingState; faceforward[]; void; null; basis>
<java.lang.Math; max[float, float]; float; org.sunflow.core.ShadingState; faceforward[]; void; null; Math>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; faceforward[]; void; null; r>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int]; double; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.ShadingState; getRandom[int, int, int]; double; null; QMC>
<org.sunflow.core.Scene; getCamera[]; org.sunflow.core.Camera; org.sunflow.core.ShadingState; getCameraToWorld[]; org.sunflow.math.Matrix4; null; server.getScene()>
<org.sunflow.core.LightServer; getScene[]; org.sunflow.core.Scene; org.sunflow.core.ShadingState; getCameraToWorld[]; org.sunflow.math.Matrix4; getCamera[]; server>
<org.sunflow.core.Camera; getCameraToWorld[]; org.sunflow.math.Matrix4; org.sunflow.core.ShadingState; getCameraToWorld[]; org.sunflow.math.Matrix4; null; c>
<org.sunflow.core.Scene; getCamera[]; org.sunflow.core.Camera; org.sunflow.core.ShadingState; getWorldToCamera[]; org.sunflow.math.Matrix4; null; server.getScene()>
<org.sunflow.core.LightServer; getScene[]; org.sunflow.core.Scene; org.sunflow.core.ShadingState; getWorldToCamera[]; org.sunflow.math.Matrix4; getCamera[]; server>
<org.sunflow.core.Camera; getWorldToCamera[]; org.sunflow.math.Matrix4; org.sunflow.core.ShadingState; getWorldToCamera[]; org.sunflow.math.Matrix4; null; c>
<org.sunflow.core.Geometry; getPrimitiveList[]; org.sunflow.core.PrimitiveList; org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; null; instance.getGeometry()>
<org.sunflow.core.Instance; getGeometry[]; org.sunflow.core.Geometry; org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; getPrimitiveList[]; instance>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int, int, org.sunflow.math.Point3]; void; org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; null; m>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int, int, org.sunflow.math.Point3]; void; org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; null; m>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int, int, org.sunflow.math.Point3]; void; org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; null; m>
<org.sunflow.core.LightServer; initLightSamples[org.sunflow.core.ShadingState]; void; org.sunflow.core.ShadingState; initLightSamples[]; void; null; server>
<org.sunflow.core.LightServer; initCausticSamples[org.sunflow.core.ShadingState]; void; org.sunflow.core.ShadingState; initCausticSamples[]; void; null; server>
<org.sunflow.core.LightServer; traceGlossy[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.ShadingState; traceGlossy[org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; server>
<org.sunflow.core.LightServer; traceReflection[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.ShadingState; traceReflection[org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; server>
<org.sunflow.core.LightServer; traceRefraction[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.ShadingState; traceRefraction[org.sunflow.core.Ray, int]; org.sunflow.image.Color; null; server>
<org.sunflow.core.ShadingState; traceRefraction[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.ShadingState; traceTransparency[]; org.sunflow.image.Color; null; this>
<org.sunflow.core.Scene; traceShadow[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.image.Color; org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; null; server.getScene()>
<org.sunflow.core.LightServer; getScene[]; org.sunflow.core.Scene; org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; traceShadow[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; server>
<org.sunflow.core.PhotonStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; map>
<org.sunflow.core.PhotonStore; allowReflectionBounced[]; boolean; org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; map>
<org.sunflow.core.LightServer; traceReflectionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; server>
<org.sunflow.core.PhotonStore; allowRefractionBounced[]; boolean; org.sunflow.core.ShadingState; traceRefractionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; map>
<org.sunflow.core.LightServer; traceRefractionPhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.ShadingState; traceRefractionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; server>
<org.sunflow.core.PhotonStore; allowDiffuseBounced[]; boolean; org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; map>
<org.sunflow.core.LightServer; traceDiffusePhoton[org.sunflow.core.ShadingState, org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; null; server>
<org.sunflow.core.LightServer; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.ShadingState; getGlobalRadiance[]; org.sunflow.image.Color; null; server>
<org.sunflow.core.LightServer; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; getIrradiance[org.sunflow.image.Color]; org.sunflow.image.Color; null; server>
<org.sunflow.core.LightServer; traceFinalGather[org.sunflow.core.ShadingState, org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.ShadingState; traceFinalGather[org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; null; server>
<org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<java.lang.Math; cos[double]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; result>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; result>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; isBlack[]; boolean; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; diff>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; sample>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; getIrradiance[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; null; lr.mul(diff)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; mul[float]; lr>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; isBlack[]; boolean; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; spec>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; sample>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; lr>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.ShadingState; getDepth[]; int; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; this>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; this>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; onb>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; traceGlossy[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; null; lr.mul(spec)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; mul[float]; lr>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.accel.NullAccelerator; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.NullAccelerator; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitives>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.math.BoundingBox; enlargeUlps[]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; Math>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; MathUtils>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; buildCells[idx]>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; cell>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; cell>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; cell>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.accel.UniformGrid; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<java.lang.Math; abs[float]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<java.lang.Math; abs[float]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<java.lang.Math; abs[float]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitives>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitives>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitives>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.UniformGrid; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; MathUtils>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; bounds>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; MathUtils>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; bounds>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; MathUtils>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.UniformGrid; getGridIndex[float, float, float, int[]]; void; null; bounds>
<java.lang.Math; min[int, int]; int; org.sunflow.core.accel.KDTree.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.accel.KDTree.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.accel.KDTree.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.accel.KDTree.BuildStats; updateLeaf[int, int]; void; null; Math>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; total>
<org.sunflow.core.PrimitiveList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; primitiveList>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; prepare>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; primitiveList>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; primitiveList>
<org.sunflow.core.accel.KDTree; pack[float, long, int, int]; long; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.core.accel.KDTree; pack[float, long, int, int]; long; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.core.accel.KDTree; pack[float, long, int, int]; long; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; prepare>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; tempTree>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; sorting>
<org.sunflow.core.accel.KDTree; radix12[long[], int]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; sorting>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; bounds>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; tempTree>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; tempList>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; total>
<org.sunflow.core.accel.KDTree$BuildStats; printStats[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; stats>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Memory; sizeof[int[]]; java.lang.String; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; Memory>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Memory; sizeof[int[]]; java.lang.String; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; Memory>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; Color>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; Color>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; Color>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; mtlFile>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; String>
<org.sunflow.image.Color; getRGB[]; float[]; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; nc>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; mtlFile>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; mtlFile>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; mtlFile>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; this>
<java.io.OutputStreamWriter; close[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; objFile>
<java.io.OutputStreamWriter; close[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; mtlFile>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.accel.KDTree; build[org.sunflow.core.PrimitiveList]; void; null; e>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; String>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; Float>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; dumpObj[int, int, int, org.sunflow.math.BoundingBox, java.io.FileWriter, java.io.FileWriter]; int; null; bounds>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.KDTree; pack[float, long, int, int]; long; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.KDTree; unpackSplit[long]; float; null; Float>
<org.sunflow.core.accel.KDTree; unpackSplit[long]; float; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackAxis[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; UI>
<org.sunflow.core.accel.KDTree; unpackAxis[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackSplitType[long]; long; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackAxis[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackSplitType[long]; long; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackAxis[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackSplitType[long]; long; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; Float>
<org.sunflow.core.accel.KDTree$BuildStats; updateInner[]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; stats>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempList>
<org.sunflow.core.accel.KDTree; unpackAxis[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree; unpackSplitType[long]; long; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempList>
<org.sunflow.core.accel.KDTree; unpackObject[long]; int; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; this>
<org.sunflow.core.accel.KDTree$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; stats>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; UI>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.KDTree; buildTree[float, float, float, float, float, float, org.sunflow.core.accel.KDTree.BuildTask, int, org.sunflow.util.IntArray, int, org.sunflow.util.IntArray, org.sunflow.core.accel.KDTree.BuildStats]; void; null; tempTree>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.IntersectionState; getStack[]; org.sunflow.core.IntersectionState.StackNode[]; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.IntersectionState; getStackTop[]; int; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitiveList>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.KDTree; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.core.PrimitiveList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; primitives>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; t>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; tempTree>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; printStats[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; stats>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Memory; sizeof[int[]]; java.lang.String; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; Memory>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; UI>
<org.sunflow.system.Memory; sizeof[int[]]; java.lang.String; org.sunflow.core.accel.BoundingIntervalHierarchy; build[org.sunflow.core.PrimitiveList]; void; null; Memory>
<java.lang.Math; min[int, int]; int; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; updateLeaf[int, int]; void; null; Math>
<java.lang.Math; max[int, int]; int; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; updateLeaf[int, int]; void; null; Math>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats; printStats[]; void; null; UI>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; bounds>
<org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; buildHierarchy[org.sunflow.util.IntArray, int[], org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; createNode[org.sunflow.util.IntArray, int, int, int]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; createNode[org.sunflow.util.IntArray, int, int, int]; void; null; tempTree>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.core.accel.BoundingIntervalHierarchy; createNode[org.sunflow.util.IntArray, int, int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; UI>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getPrimitiveBound[int, int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; primitives>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateBVH2[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateInner[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.core.accel.BoundingIntervalHierarchy; createNode[org.sunflow.util.IntArray, int, int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.core.accel.BoundingIntervalHierarchy; createNode[org.sunflow.util.IntArray, int, int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<java.lang.Float; isNaN[float]; boolean; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateInner[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateInner[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; getSize[]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateInner[]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.util.IntArray; set[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; tempTree>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; Float>
<org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; this>
<org.sunflow.core.accel.BoundingIntervalHierarchy$BuildStats; updateLeaf[int, int]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; subdivide[int, int, org.sunflow.util.IntArray, int[], float[], float[], int, int, org.sunflow.core.accel.BoundingIntervalHierarchy.BuildStats]; void; null; stats>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bounds>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.IntersectionState; getStack[]; org.sunflow.core.IntersectionState.StackNode[]; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.IntersectionState; getStackTop[]; int; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; state>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.PrimitiveList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; primitives>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.accel.BoundingIntervalHierarchy; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Texture; load[]; void; null; UI>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.Texture; load[]; void; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.Texture; load[]; void; null; bitmap>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Texture; load[]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.Texture; load[]; void; null; e>
<org.sunflow.core.Texture; load[]; void; org.sunflow.core.Texture; getBitmap[]; org.sunflow.image.Bitmap; null; this>
<org.sunflow.core.Texture; getBitmap[]; org.sunflow.image.Bitmap; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; bitmap>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; c>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; c>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; null; c>
<org.sunflow.image.Color; getRGB[]; float[]; org.sunflow.core.Texture; getNormal[float, float, org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Vector3; null; getPixel(x,y)>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.Texture; getNormal[float, float, org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Vector3; getRGB[]; this>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.Texture; getNormal[float, float, org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Vector3; null; basis.transform(new Vector3(2 * rgb[0] - 1,2 * rgb[1] - 1,2 * rgb[2] - 1))>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Texture; getNormal[float, float, org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Vector3; normalize[]; basis>
<org.sunflow.core.Texture; getBitmap[]; org.sunflow.image.Bitmap; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; basis>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; bitmap>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; getPixel(x,y)>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; getLuminance[]; this>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; getPixel(x + dx,y)>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; getLuminance[]; this>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; getPixel(x,y + dy)>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; getLuminance[]; this>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; null; basis.transform(new Vector3(scale * (bx - b0) / dx,scale * (by - b0) / dy,1))>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; normalize[]; basis>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.ParticleSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Solvers; solveQuadric[double, double, double]; double[]; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Solvers>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.ParticleSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; transformWorldToObject[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float, float]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; getShader[int]; state>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; getModifier[int]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; transformNormalObjectToWorld[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.ParticleSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.ParticleSurface; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.ParticleSurface; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.ParticleSurface; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; setSmallTriangles[boolean]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; setSmallTriangles[boolean]; void; null; UI>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; file>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; String>
<java.io.OutputStreamWriter; close[]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.primitive.TriangleMesh; writeObj[java.lang.String]; void; null; e>
<org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; setFaceCount[int]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pointsP.interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; toLowerCase[]; pointsP.interp>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; setVertexCount[int]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; setFaceVertexCount[int]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVectorArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getTexCoordArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.primitive.TriangleMesh; init[]; void; org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.TriangleMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.TriangleMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.core.IntersectionState; getRobustStack[]; float[]; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; MathUtils>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.primitive.TriangleMesh$WaldTriangle; intersectBox[org.sunflow.core.Ray, float, float, float, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.primitive.TriangleMesh; intersectPrimitiveRobust[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; triaccel[primID]>
<org.sunflow.core.Ray; dot[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh; intersectTriangleKensler[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.TriangleMesh; intersectTriangleKensler[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh; intersectTriangleKensler[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh; intersectTriangleKensler[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.primitive.TriangleMesh$WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.primitive.TriangleMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; triaccel[primID]>
<org.sunflow.core.primitive.TriangleMesh; intersectTriangleKensler[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.primitive.TriangleMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getU[]; float; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Point3; normal[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; ng>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.TriangleMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.primitive.TriangleMesh; getNumPrimitives[]; int; org.sunflow.core.primitive.TriangleMesh; init[]; void; null; this>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; init[]; void; null; UI>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh; getPoint[int, int, org.sunflow.math.Point3]; void; null; p>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; mesh>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; mesh>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; mesh>
<org.sunflow.math.Point3; normal[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Point3>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; WaldTriangle[org.sunflow.core.primitive.TriangleMesh, int]; void; null; Math>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersectBox[org.sunflow.core.Ray, float, float, float, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersectBox[org.sunflow.core.Ray, float, float, float, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersectBox[org.sunflow.core.Ray, float, float, float, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.WaldTriangle; intersect[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.TriangleMesh; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.core.primitive.TriangleMesh; getNumPrimitives[]; int; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getNumPrimitives[]; int; null; TriangleMesh.this>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.TriangleMesh.BakingSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getU[]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; set[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getPoint()>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Point3]; state>
<org.sunflow.core.Instance; transformObjectToWorld[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; normal[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; ng>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.TriangleMesh.BakingSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Vector3.cross(Point3.sub(v1,v0,new Vector3()),Point3.sub(v2,v0,new Vector3()),new Vector3())>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; normalize[]; Vector3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Point3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Point3>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Plane; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.Plane; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Plane; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Plane; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; String>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; file>
<java.io.Writer; write[java.lang.String]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; String>
<java.io.OutputStreamWriter; close[]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; file>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.primitive.QuadMesh; writeObj[java.lang.String]; void; null; e>
<org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; setFaceCount[int]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pointsP.interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; toLowerCase[]; pointsP.interp>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; setVertexCount[int]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; setFaceVertexCount[int]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVectorArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getTexCoordArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.QuadMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.math.MathUtils; min[float, float, float, float]; float; org.sunflow.core.primitive.QuadMesh; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float, float]; float; org.sunflow.core.primitive.QuadMesh; getPrimitiveBound[int, int]; float; null; MathUtils>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.QuadMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.primitive.QuadMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.primitive.QuadMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.primitive.QuadMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.QuadMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.QuadMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getU[]; float; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.primitive.QuadMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.QuadMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.QuadMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.QuadMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; ng>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.QuadMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.CubeGrid; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.CubeGrid; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.CubeGrid; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.CubeGrid; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.primitive.CubeGrid; inside[int, int, int]; boolean; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.math.BoundingBox; contains[float, float, float]; boolean; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; bounds>
<org.sunflow.core.primitive.CubeGrid; inside[int, int, int]; boolean; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.CubeGrid; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.CubeGrid; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.CubeGrid; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; Math>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.JuliaFractal; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.math.Solvers; solveQuadric[double, double, double]; double[]; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Solvers>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.JuliaFractal; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.JuliaFractal; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.JuliaFractal; length[float, float, float, float]; float; null; Math>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.JuliaFractal; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<java.lang.Math; min[float, float]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; Math>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; this>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; this>
<java.lang.Math; max[float, float]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; Math>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; this>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; getPrimitiveBound[int, int]; float; null; this>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; this>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.Hair; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.Hair; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.Hair; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getTangent[int, int, float]; org.sunflow.math.Vector3; null; vcurr>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getTangent[int, int, float]; org.sunflow.math.Vector3; null; vprev>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getTangent[int, int, float]; org.sunflow.math.Vector3; null; vnext>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.primitive.Hair; getWidth[int]; float; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Hair; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; i>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.primitive.Hair; getTangent[int, int, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; i>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.math.OrthoNormalBasis; swapVW[]; void; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getBasis()>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; swapVW[]; state>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float, float]; state>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getBasis()>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; transform[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point2; set[float, float]; org.sunflow.math.Point2; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getUV()>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float]; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.Hair; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pointsP.interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; toLowerCase[]; pointsP.interp>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; setVertexCount[int]; void; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloatArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; widthsP.interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.primitive.Hair; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; toLowerCase[]; widthsP.interp>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; v>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getBasis()>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; transform[org.sunflow.math.Vector3]; state>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ls.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; ls>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; diff>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ls>
<org.sunflow.math.Vector3; add[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; h>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; spec>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ls>
<org.sunflow.image.Color; add[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; traceTransparency[]; org.sunflow.image.Color; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.primitive.Hair; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.BanchoffSurface; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float, float]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.BanchoffSurface; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Solvers>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.BanchoffSurface; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.Sphere; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float, float]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<java.lang.Math; atan2[double, double]; double; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; acos[double]; double; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Sphere; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Solvers; solveQuadric[double, double, double]; double[]; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Solvers>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Sphere; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; getDepth[]; int; org.sunflow.core.primitive.Background; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Background; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Background; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Background; prepareShadingState[org.sunflow.core.ShadingState]; void; getShader[int]; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.Background; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Background; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.Torus; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.primitive.Torus; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.Torus; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.Torus; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float, float]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<java.lang.Math; asin[double]; double; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; MathUtils>
<java.lang.Math; atan2[double, double]; double; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Torus; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Solvers>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Torus; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; bounds>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; getShader[int]; state>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.primitive.Box; prepareShadingState[org.sunflow.core.ShadingState]; void; getModifier[int]; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.Box; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.Box; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.Box; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; org.sunflow.core.primitive.CornellBox; CornellBox[]; void; null; this>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.math.BoundingBox; enlargeUlps[]; void; org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; lightBounds>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.primitive.CornellBox; updateGeometry[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.primitive.CornellBox; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.primitive.CornellBox; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; intersects[org.sunflow.math.BoundingBox]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; b>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; intersects[org.sunflow.math.BoundingBox]; boolean; null; box>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.primitive.CornellBox; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; isInside[float]; boolean; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.primitive.CornellBox; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; kd>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(kd)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; lightBounds>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int]; double; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int]; double; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; getMax[]; dest>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getDiffuseRadiance()>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getSpecularRadiance()>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.primitive.CornellBox; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; dir>
<java.lang.Math; cos[double]; double; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Color>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.primitive.CornellBox; getPower[]; float; null; radiance.copy().mul((float)Math.PI * area)>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getPower[]; float; getLuminance[]; radiance.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.primitive.CornellBox; getPower[]; float; mul[float]; radiance>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.primitive.CornellBox; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; org.sunflow.core.primitive.CornellBox; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; UI>
<java.util.HashMap; get[java.lang.Object]; org.sunflow.core.Texture; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; UI>
<java.util.HashMap; put[java.lang.String, org.sunflow.core.Texture]; org.sunflow.core.Texture; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.TextureCache; flush[]; void; null; UI>
<java.util.HashMap; clear[]; void; org.sunflow.core.TextureCache; flush[]; void; null; textures>
<org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; null; Color>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; null; Color>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; null; d>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; null; s>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; null; shadowRay>
<org.sunflow.math.QMC; generateSigmaTable[int]; int[]; org.sunflow.core.renderer.ProgressiveRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; QMC>
<org.sunflow.core.Display; imageBegin[int, int, int]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; display>
<java.lang.Math; max[int, int]; int; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; Math>
<java.util.concurrent.PriorityBlockingQueue; add[org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket]; boolean; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; smallBucketQueue>
<org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; t>
<org.sunflow.core.Scene; getThreads[]; int; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; scene>
<java.lang.Thread; start[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<java.lang.Thread; join[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; t>
<org.sunflow.core.Display; imageEnd[]; void; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; display>
<org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; org.sunflow.core.renderer.ProgressiveRenderer.SmallBucketThread; run[]; void; null; this>
<org.sunflow.system.UI; taskUpdate[int]; void; org.sunflow.core.renderer.ProgressiveRenderer.SmallBucketThread; run[]; void; null; UI>
<org.sunflow.system.UI; taskCanceled[]; boolean; org.sunflow.core.renderer.ProgressiveRenderer.SmallBucketThread; run[]; void; null; UI>
<java.util.concurrent.PriorityBlockingQueue; poll[]; org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<java.util.AbstractCollection; isEmpty[]; boolean; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; QMC>
<org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; scene>
<org.sunflow.core.ShadingState; getResult[]; org.sunflow.image.Color; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; state>
<org.sunflow.core.Display; imageFill[int, int, int, int, org.sunflow.image.Color]; void; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; display>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; Math>
<java.util.concurrent.PriorityBlockingQueue; put[org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket]; void; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; MathUtils>
<org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; BucketOrderFactory>
<org.sunflow.core.BucketOrder; getBucketSequence[int, int]; int[]; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; bucketOrder>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; MathUtils>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; Math>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; options>
<org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; FilterFactory>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.core.Filter; getSize[]; float; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; filter>
<java.lang.Math; ceil[double]; double; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; Math>
<org.sunflow.math.QMC; generateSigmaTable[int]; int[]; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; QMC>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.core.renderer.BucketRenderer; aaDepthToString[int]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; this>
<org.sunflow.core.renderer.BucketRenderer; aaDepthToString[int]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.core.renderer.BucketRenderer; aaDepthToString[int]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; UI>
<org.sunflow.core.Filter; getSize[]; float; org.sunflow.core.renderer.BucketRenderer; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; null; filter>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; aaDepthToString[int]; java.lang.String; null; String>
<org.sunflow.core.Display; imageBegin[int, int, int]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; display>
<org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.core.Scene; getThreads[]; int; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; scene>
<java.lang.Thread; setPriority[int]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<org.sunflow.core.Scene; getThreadPriority[]; int; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; scene>
<java.lang.Thread; start[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<java.lang.Thread; join[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.core.Display; imageEnd[]; void; org.sunflow.core.renderer.BucketRenderer; render[org.sunflow.core.Display]; void; null; display>
<org.sunflow.system.UI; taskUpdate[int]; void; org.sunflow.core.renderer.BucketRenderer.BucketThread; run[]; void; null; UI>
<org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer.BucketThread; run[]; void; null; this>
<org.sunflow.system.UI; taskCanceled[]; boolean; org.sunflow.core.renderer.BucketRenderer.BucketThread; run[]; void; null; UI>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.Display; imagePrepare[int, int, int, int, int]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; display>
<org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; UI>
<org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; bitmap>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; samples[index].c.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; toNonLinear[]; samples[index].c>
<org.sunflow.image.Bitmap; save[java.lang.String]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; bitmap>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; String>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; sampled[]; boolean; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; samples[s]>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; Color>
<java.lang.Math; abs[float]; float; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.Filter; get[float, float]; float; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; filter>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; c>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; c>
<org.sunflow.core.Display; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; org.sunflow.core.renderer.BucketRenderer; renderBucket[org.sunflow.core.Display, int, int, int, org.sunflow.core.IntersectionState]; void; null; display>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; add[org.sunflow.core.ShadingState]; void; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; sample>
<org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; scene>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; mod1[double]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; QMC>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; add[org.sunflow.core.ShadingState]; void; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; sample>
<org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; scene>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; scale[float]; void; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; sample>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; set[org.sunflow.core.ShadingState]; void; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; sample>
<org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; null; scene>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; sampled[]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s00>
<org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; sampled[]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s01>
<org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; sampled[]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s10>
<org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; sampled[]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s11>
<org.sunflow.core.renderer.BucketRenderer; computeSubPixel[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s00>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s00>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s00>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s01>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s10>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; s01>
<org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; processed[]; boolean; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; samples[x + i + (y + j) * sbw]>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; bilerp[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, float, float]; org.sunflow.core.renderer.BucketRenderer.ImageSample; org.sunflow.core.renderer.BucketRenderer; refineSamples[org.sunflow.core.renderer.BucketRenderer.ImageSample[], int, int, int, int, float, org.sunflow.core.IntersectionState]; void; null; ImageSample>
<org.sunflow.core.ShadingState; getResult[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; checkNanInf[]; void; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.renderer.BucketRenderer.ImageSample; set[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; add[org.sunflow.core.ShadingState]; void; null; Color>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; add[org.sunflow.core.ShadingState]; void; null; c>
<org.sunflow.core.ShadingState; getResult[]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; add[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.renderer.BucketRenderer$ImageSample; checkNanInf[]; void; org.sunflow.core.renderer.BucketRenderer.ImageSample; add[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.image.Color; isNan[]; boolean; org.sunflow.core.renderer.BucketRenderer.ImageSample; checkNanInf[]; void; null; c>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer.ImageSample; checkNanInf[]; void; null; UI>
<org.sunflow.image.Color; isInf[]; boolean; org.sunflow.core.renderer.BucketRenderer.ImageSample; checkNanInf[]; void; null; c>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.BucketRenderer.ImageSample; checkNanInf[]; void; null; UI>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; scale[float]; void; null; c>
<org.sunflow.image.Color; hasContrast[org.sunflow.image.Color, org.sunflow.image.Color, float]; boolean; org.sunflow.core.renderer.BucketRenderer.ImageSample; isDifferent[org.sunflow.core.renderer.BucketRenderer.ImageSample, float]; boolean; null; Color>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; bilerp[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, float, float]; org.sunflow.core.renderer.BucketRenderer.ImageSample; null; Color>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; bilerp[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, float, float]; org.sunflow.core.renderer.BucketRenderer.ImageSample; null; c>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; bilerp[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, float, float]; org.sunflow.core.renderer.BucketRenderer.ImageSample; null; c>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.renderer.BucketRenderer.ImageSample; bilerp[org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, org.sunflow.core.renderer.BucketRenderer.ImageSample, float, float]; org.sunflow.core.renderer.BucketRenderer.ImageSample; null; c>
<org.sunflow.core.Display; imageBegin[int, int, int]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; display>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.core.Scene; getThreads[]; int; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; scene>
<java.lang.Thread; start[]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<java.lang.Thread; join[]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; renderThreads[i]>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; timer>
<org.sunflow.core.Display; imageEnd[]; void; org.sunflow.core.renderer.SimpleRenderer; render[org.sunflow.core.Display]; void; null; display>
<org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.renderer.SimpleRenderer.BucketThread; run[]; void; null; this>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; null; scene>
<org.sunflow.core.ShadingState; getResult[]; org.sunflow.image.Color; org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Display; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; org.sunflow.core.renderer.SimpleRenderer; renderBucket[int, int, org.sunflow.core.IntersectionState]; void; null; display>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.SunflowAPI; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; getStringArray[java.lang.String, java.lang.String[]]; java.lang.String[]; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; lookupShader[java.lang.String]; org.sunflow.core.Shader; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; getStringArray[java.lang.String, java.lang.String[]]; java.lang.String[]; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.ParameterList; getMatrix[java.lang.String, org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Matrix4; inverse[]; org.sunflow.math.Matrix4; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; o2w>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.math.Matrix4; determinant[]; float; org.sunflow.core.Instance; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; o2w>
<org.sunflow.core.Geometry; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.Instance; updateBounds[]; void; null; geometry>
<org.sunflow.core.Geometry; getNumPrimitives[]; int; org.sunflow.core.Instance; getNumPrimitives[]; int; null; geometry>
<org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; org.sunflow.core.Instance; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Geometry; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Instance; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; geometry>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.Instance; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.Instance; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; localRay>
<org.sunflow.core.Geometry; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; geometry>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; correctShadingNormal[]; void; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getModifier[]; org.sunflow.core.Modifier; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Modifier; modify[org.sunflow.core.ShadingState]; void; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getModifier()>
<org.sunflow.core.ShadingState; getModifier[]; org.sunflow.core.Modifier; org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; modify[org.sunflow.core.ShadingState]; state>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.Instance; transformObjectToWorld[org.sunflow.math.Point3]; org.sunflow.math.Point3; null; o2w>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.Instance; transformWorldToObject[org.sunflow.math.Point3]; org.sunflow.math.Point3; null; w2o>
<org.sunflow.math.Matrix4; transformTransposeV[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; w2o>
<org.sunflow.math.Matrix4; transformTransposeV[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Instance; transformNormalWorldToObject[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; o2w>
<org.sunflow.math.Matrix4; transformV[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Instance; transformVectorObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; o2w>
<org.sunflow.math.Matrix4; transformV[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Instance; transformVectorWorldToObject[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; w2o>
<org.sunflow.core.Geometry; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; org.sunflow.core.Instance; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; null; geometry>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.AnisotropicWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.AnisotropicWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.shader.AnisotropicWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; Math>
<org.sunflow.math.OrthoNormalBasis; untransformZ[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; basis>
<org.sunflow.math.OrthoNormalBasis; untransformZ[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; basis>
<org.sunflow.math.Vector3; add[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; Vector3>
<org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; basis>
<java.lang.Math; exp[double]; double; org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; null; Math>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; includeSpecular[]; boolean; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Vector3; negate[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay().getDirection()>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; negate[org.sunflow.math.Vector3]; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.AnisotropicWardShader; brdf[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.OrthoNormalBasis]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; sample.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; sample>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.ShadingState; getDepth[]; int; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; onb>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.math.OrthoNormalBasis; untransformZ[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; onb>
<org.sunflow.math.OrthoNormalBasis; untransformZ[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; onb>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; traceGlossy[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.AnisotropicWardShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.shader.AnisotropicWardShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; d>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; rhoS>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(d)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(rhoS)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.Vector3; negate[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay().getDirection()>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[org.sunflow.math.Vector3]; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; tan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; atan[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; basis>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.AnisotropicWardShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.shader.AmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.AmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; occlusion[int, float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.AmbientOcclusionShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.AmbientOcclusionShader; getBrightColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.AmbientOcclusionShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedAmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.TexturedAmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedAmbientOcclusionShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.TexturedAmbientOcclusionShader; getBrightColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; tex>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedAmbientOcclusionShader; getBrightColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedAmbientOcclusionShader; getBrightColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.Math; abs[float]; float; org.sunflow.core.shader.SimpleShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.SimpleShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.SimpleShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; dot[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.SimpleShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.TexturedWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedWardShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.TexturedWardShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; tex>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedWardShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedWardShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.ViewIrradianceShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ViewIrradianceShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; new Color().set(state.getIrradiance(Color.WHITE))>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ViewIrradianceShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[float]; new Color()>
<org.sunflow.core.ShadingState; getIrradiance[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ViewIrradianceShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedShinyDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.TexturedShinyDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedShinyDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.TexturedShinyDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; tex>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedShinyDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedShinyDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.DiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.DiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.DiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.DiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.core.shader.DiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; diffuse>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.DiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.NormalShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.TexturedDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.TexturedDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; tex>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.ShinyDiffuseShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.ShinyDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; includeSpecular[]; boolean; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; d.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[float]; d>
<org.sunflow.image.Color; sub[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.core.ShadingState; traceReflection[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.shader.ShinyDiffuseShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; diffuse>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.ShinyDiffuseShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedPhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.TexturedPhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.TexturedPhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.TexturedPhongShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; tex>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedPhongShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.TexturedPhongShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.LightSample; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; sample>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; sample>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.ViewCausticsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.Math; abs[float]; float; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; dot[org.sunflow.math.Vector3]; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; BORDERS[state.getPrimitiveID() % BORDERS.length].copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[float]; BORDERS[state.getPrimitiveID() % BORDERS.length]>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.shader.PrimIDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; copy[]; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.ViewGlobalPhotonsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getGlobalRadiance[]; org.sunflow.image.Color; org.sunflow.core.shader.ViewGlobalPhotonsShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; MathUtils>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; MathUtils>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; MathUtils>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.shader.UberShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; diffmap>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; specmap>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; includeSpecular[]; boolean; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; sub[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.core.ShadingState; traceReflection[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; lr>
<org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.shader.UberShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.shader.UberShader; getSpecular[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; diffuse>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; specular>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(spec)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.UberShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UVShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UVShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.shader.UVShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.PhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.shader.PhongShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.diffuse(getDiffuse(state))>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; add[org.sunflow.image.Color]; state>
<org.sunflow.core.shader.PhongShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; specularPhong[org.sunflow.image.Color, float, int]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.shader.PhongShader; getDiffuse[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; d>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; spec>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(d)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(spec)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.PhongShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.WireframeShader; WireframeShader[]; void; null; Math>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.WireframeShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.WireframeShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.WireframeShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.WireframeShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<org.sunflow.core.ShadingState; getTrianglePoints[org.sunflow.math.Point3[]]; boolean; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.shader.WireframeShader; getFillColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getWorldToCamera[]; org.sunflow.math.Matrix4; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; w2c>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; w2c>
<org.sunflow.core.Instance; transformObjectToWorld[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; transformObjectToWorld[org.sunflow.math.Point3]; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.Point3; distanceToSquared[org.sunflow.math.Point3]; float; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; p[i]>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.shader.WireframeShader; getLineColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.shader.WireframeShader; getFillColor[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.WireframeShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getShader()>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getRadiance[org.sunflow.core.ShadingState]; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initLightSamples[]; void; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; initCausticSamples[]; void; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; diffuse[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.QuickGrayShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; negate[]; state>
<org.sunflow.core.ShadingState; storePhoton[org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; diffuse>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(diffuse)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; onb>
<org.sunflow.core.ShadingState; traceDiffusePhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.QuickGrayShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.ConstantShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.GlassShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.shader.GlassShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; includeSpecular[]; boolean; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; exp[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color.mul(-state.getRay().getMax() / absorbtionDistance,absorbtionColor.copy().opposite())>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; exp[]; Color>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getMax[]; state>
<org.sunflow.image.Color; opposite[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; absorbtionColor.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; opposite[]; absorbtionColor>
<org.sunflow.image.Color; isBlack[]; boolean; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; absorbtion>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret.madd(kt,state.traceRefraction(new Ray(state.getPoint(),refrDir),0))>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[org.sunflow.image.Color]; ret>
<org.sunflow.core.ShadingState; traceRefraction[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color.mul(kr,state.traceReflection(new Ray(state.getPoint(),reflDir),0))>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[org.sunflow.image.Color]; Color>
<org.sunflow.core.ShadingState; traceReflection[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Color>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Color>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; refl>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; refr>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(refl)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(refr)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power>
<org.sunflow.image.Color; exp[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Color.mul(-state.getRay().getMax() / absorbtionDistance,absorbtionColor.copy().opposite())>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; exp[]; Color>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getMax[]; state>
<org.sunflow.image.Color; opposite[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; absorbtionColor.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; opposite[]; absorbtionColor>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; traceRefractionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.GlassShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ShadingState; includeSpecular[]; boolean; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; sub[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; ret>
<org.sunflow.core.ShadingState; traceReflection[org.sunflow.core.Ray, int]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; color>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getCosND[]; float; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; power.mul(color)>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; getDirection[]; state>
<org.sunflow.core.ShadingState; traceReflectionPhoton[org.sunflow.core.Ray, org.sunflow.image.Color]; void; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.shader.MirrorShader; scatterPhoton[org.sunflow.core.ShadingState, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.Math; abs[float]; float; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.Ray; dot[org.sunflow.math.Vector3]; float; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; dot[org.sunflow.math.Vector3]; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; new Color(state.getInstance().hashCode())>
<java.lang.Object; hashCode[]; int; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[float]; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.shader.IDShader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; hashCode[]; state>
<org.sunflow.core.filter.BlackmanHarrisFilter; bh1d[float]; float; org.sunflow.core.filter.BlackmanHarrisFilter; get[float, float]; float; null; this>
<org.sunflow.core.filter.BlackmanHarrisFilter; bh1d[float]; float; org.sunflow.core.filter.BlackmanHarrisFilter; get[float, float]; float; null; this>
<java.lang.Math; cos[double]; double; org.sunflow.core.filter.BlackmanHarrisFilter; bh1d[float]; float; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.filter.BlackmanHarrisFilter; bh1d[float]; float; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.filter.BlackmanHarrisFilter; bh1d[float]; float; null; Math>
<org.sunflow.core.filter.SincFilter; sinc1d[float]; float; org.sunflow.core.filter.SincFilter; get[float, float]; float; null; this>
<org.sunflow.core.filter.SincFilter; sinc1d[float]; float; org.sunflow.core.filter.SincFilter; get[float, float]; float; null; this>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.SincFilter; sinc1d[float]; float; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.filter.SincFilter; sinc1d[float]; float; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.filter.GaussianFilter; GaussianFilter[float]; void; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.filter.GaussianFilter; get[float, float]; float; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.filter.GaussianFilter; get[float, float]; float; null; Math>
<org.sunflow.core.filter.MitchellFilter; mitchell[float]; float; org.sunflow.core.filter.MitchellFilter; get[float, float]; float; null; this>
<org.sunflow.core.filter.MitchellFilter; mitchell[float]; float; org.sunflow.core.filter.MitchellFilter; get[float, float]; float; null; this>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.MitchellFilter; mitchell[float]; float; null; Math>
<org.sunflow.core.filter.CatmullRomFilter; catrom1d[float]; float; org.sunflow.core.filter.CatmullRomFilter; get[float, float]; float; null; this>
<org.sunflow.core.filter.CatmullRomFilter; catrom1d[float]; float; org.sunflow.core.filter.CatmullRomFilter; get[float, float]; float; null; this>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.CatmullRomFilter; catrom1d[float]; float; null; Math>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.filter.FilterFactory; get[java.lang.String]; org.sunflow.core.Filter; null; filter>
<org.sunflow.core.filter.LanczosFilter; sinc1d[float]; float; org.sunflow.core.filter.LanczosFilter; get[float, float]; float; null; this>
<org.sunflow.core.filter.LanczosFilter; sinc1d[float]; float; org.sunflow.core.filter.LanczosFilter; get[float, float]; float; null; this>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.LanczosFilter; sinc1d[float]; float; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.filter.LanczosFilter; sinc1d[float]; float; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.filter.LanczosFilter; sinc1d[float]; float; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.TriangleFilter; get[float, float]; float; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.filter.TriangleFilter; get[float, float]; float; null; Math>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.modifiers.BumpMappingModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.modifiers.BumpMappingModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.modifiers.BumpMappingModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.modifiers.BumpMappingModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Texture; getBump[float, float, org.sunflow.math.OrthoNormalBasis, float]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; bumpTexture>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.BumpMappingModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.modifiers.NormalMapModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.modifiers.NormalMapModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.modifiers.NormalMapModifier; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Texture; getNormal[float, float, org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; normalMap>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.modifiers.NormalMapModifier; modify[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.Geometry; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.RenderObject; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.core.Geometry; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; tesselatable>
<org.sunflow.core.RenderObject; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.core.Geometry; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; primitives>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.Geometry; getNumPrimitives[]; int; null; primitives>
<org.sunflow.core.Tesselatable; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.Geometry; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; tesselatable>
<org.sunflow.core.Geometry; tesselate[]; void; org.sunflow.core.Geometry; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; this>
<org.sunflow.core.PrimitiveList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.Geometry; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; primitives>
<org.sunflow.core.Geometry; tesselate[]; void; org.sunflow.core.Geometry; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.Geometry; build[]; void; org.sunflow.core.Geometry; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; this>
<org.sunflow.core.AccelerationStructure; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Geometry; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; accel>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Geometry; tesselate[]; void; null; UI>
<org.sunflow.core.Tesselatable; tesselate[]; org.sunflow.core.PrimitiveList; org.sunflow.core.Geometry; tesselate[]; void; null; tesselatable>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Geometry; tesselate[]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Geometry; tesselate[]; void; null; UI>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.Geometry; tesselate[]; void; null; primitives>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.Geometry; build[]; void; null; primitives>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Geometry; build[]; void; null; UI>
<org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; org.sunflow.core.Geometry; build[]; void; null; AccelerationStructureFactory>
<org.sunflow.core.AccelerationStructure; build[org.sunflow.core.PrimitiveList]; void; org.sunflow.core.Geometry; build[]; void; null; accel>
<org.sunflow.core.PrimitiveList; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.Geometry; prepareShadingState[org.sunflow.core.ShadingState]; void; null; primitives>
<org.sunflow.core.Geometry; tesselate[]; void; org.sunflow.core.Geometry; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.PrimitiveList; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; org.sunflow.core.Geometry; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; null; primitives>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.InstantGI; InstantGI[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.InstantGI; InstantGI[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.InstantGI; InstantGI[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.InstantGI; InstantGI[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.Math; max[float, float]; float; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Math>
<org.sunflow.image.Color; getAverage[]; float; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; vpl.power>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.math.Point3; distanceToSquared[org.sunflow.math.Point3]; float; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; vpl.p>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; pow.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; mul[float]; pow>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.core.Scene; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; scene>
<java.util.ArrayList; toArray[org.sunflow.core.gi.InstantGI.PointLight[]]; org.sunflow.core.gi.InstantGI.PointLight[]; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; map.virtualLights>
<java.util.ArrayList; size[]; int; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; map.virtualLights>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.image.Color; getMax[]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; diffuseReflectance>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<java.lang.Math; min[float, float]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.ShadingState; traceFinalGather[org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; prepareShadingState[org.sunflow.core.ShadingState]; temp>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; getMax[]; temp>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getShader()>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.InstantGI; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; getRadiance[org.sunflow.core.ShadingState]; temp>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.gi.InstantGI.PointLightStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.InstantGI.PointLightStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.InstantGI.PointLightStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<java.util.ArrayList; add[org.sunflow.core.gi.InstantGI.PointLight]; boolean; org.sunflow.core.gi.InstantGI.PointLightStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; virtualLights>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; null; options.getVector("gi.fake.up",new Vector3(0,1,0))>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; normalize[]; options>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; null; options.getColor("gi.fake.sky",Color.WHITE)>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; copy[]; options>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; null; options.getColor("gi.fake.ground",Color.BLACK)>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; copy[]; options>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; null; sky>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; FakeGIEngine[org.sunflow.core.Options]; void; null; ground>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.gi.FakeGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.FakeGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.FakeGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; org.sunflow.core.gi.FakeGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; type>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.GIEngineFactory; create[org.sunflow.core.Options]; org.sunflow.core.GIEngine; null; UI>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; gmap>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; gmap>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; gmap>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; IrradianceCacheGIEngine[org.sunflow.core.Options]; void; null; UI>
<java.lang.Math; max[int, int]; int; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; scene.getBounds()>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; getExtents[]; scene>
<org.sunflow.math.BoundingBox; getCenter[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; scene.getBounds()>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; getCenter[]; scene>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; MathUtils>
<org.sunflow.core.Scene; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; org.sunflow.core.gi.IrradianceCacheGIEngine; init[org.sunflow.core.Scene]; boolean; null; scene>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getShader()>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getRadiance[org.sunflow.core.ShadingState]; state>
<org.sunflow.core.GlobalPhotonMapInterface; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; globalPhotonMap>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; traceFinalGather[org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; getGlobalRadiance(temp).copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; mul[float]; getGlobalRadiance(temp)>
<org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; copy[]; this>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock; lock[]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; rwl.readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; readLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; lock[]; rwl>
<org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock; unlock[]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; rwl.readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; readLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; unlock[]; rwl>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; traceFinalGather[org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; min[float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; prepareShadingState[org.sunflow.core.ShadingState]; temp>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<org.sunflow.core.gi.IrradianceCacheGIEngine; getGlobalRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock; lock[]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; rwl.writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; writeLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; lock[]; rwl>
<org.sunflow.core.gi.IrradianceCacheGIEngine; insert[org.sunflow.math.Point3, org.sunflow.math.Vector3, float, org.sunflow.image.Color]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock; unlock[]; void; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; rwl.writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; writeLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; unlock[]; rwl>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; insert[org.sunflow.math.Point3, org.sunflow.math.Vector3, float, org.sunflow.image.Color]; void; null; MathUtils>
<org.sunflow.core.gi.IrradianceCacheGIEngine$Node; isInside[org.sunflow.math.Point3]; boolean; org.sunflow.core.gi.IrradianceCacheGIEngine; insert[org.sunflow.math.Point3, org.sunflow.math.Vector3, float, org.sunflow.image.Color]; void; null; root>
<org.sunflow.core.gi.IrradianceCacheGIEngine$Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; root>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine; getIrradiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; x.irr>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; isInside[org.sunflow.math.Point3]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; isInside[org.sunflow.math.Point3]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; isInside[org.sunflow.math.Point3]; boolean; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<java.lang.Math; min[float, float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<org.sunflow.image.Color; madd[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; x.irr>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; s.irr.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; mul[float]; s.irr>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; Math>
<org.sunflow.core.gi.IrradianceCacheGIEngine$Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; org.sunflow.core.gi.IrradianceCacheGIEngine.Node; find[org.sunflow.core.gi.IrradianceCacheGIEngine.Sample]; float; null; children[i]>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine.Sample; Sample[org.sunflow.math.Point3, org.sunflow.math.Vector3]; void; null; new Vector3(n)>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.gi.IrradianceCacheGIEngine.Sample; Sample[org.sunflow.math.Point3, org.sunflow.math.Vector3, float, org.sunflow.image.Color]; void; null; new Vector3(n)>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.PathTracingGIEngine; PathTracingGIEngine[org.sunflow.core.Options]; void; null; options>
<java.lang.Math; max[int, int]; int; org.sunflow.core.gi.PathTracingGIEngine; init[org.sunflow.core.Scene]; boolean; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.PathTracingGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.gi.PathTracingGIEngine; init[org.sunflow.core.Scene]; boolean; null; UI>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.ShadingState; traceFinalGather[org.sunflow.core.Ray, int]; org.sunflow.core.ShadingState; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; prepareShadingState[org.sunflow.core.ShadingState]; temp>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<org.sunflow.core.Shader; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; temp.getShader()>
<org.sunflow.core.ShadingState; getShader[]; org.sunflow.core.Shader; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; getRadiance[org.sunflow.core.ShadingState]; temp>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.PathTracingGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; irr>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; AmbientOcclusionGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; AmbientOcclusionGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.gi.AmbientOcclusionGIEngine; AmbientOcclusionGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.gi.AmbientOcclusionGIEngine; AmbientOcclusionGIEngine[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ShadingState; getBasis[]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<java.lang.Math; cos[double]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; onb>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; r>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; result>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.ShadingState; traceShadow[org.sunflow.core.Ray]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; state>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.gi.AmbientOcclusionGIEngine; getIrradiance[org.sunflow.core.ShadingState, org.sunflow.image.Color]; org.sunflow.image.Color; null; result>
<org.sunflow.core.BucketOrder; getBucketSequence[int, int]; int[]; org.sunflow.core.bucket.InvertedBucketOrder; getBucketSequence[int, int]; int[]; null; order>
<org.sunflow.core.bucket.RandomBucketOrder; xorshift[long]; long; org.sunflow.core.bucket.RandomBucketOrder; getBucketSequence[int, int]; int[]; null; this>
<org.sunflow.core.bucket.RandomBucketOrder; mod[int, int]; int; org.sunflow.core.bucket.RandomBucketOrder; getBucketSequence[int, int]; int[]; null; this>
<org.sunflow.core.bucket.RandomBucketOrder; xorshift[long]; long; org.sunflow.core.bucket.RandomBucketOrder; getBucketSequence[int, int]; int[]; null; this>
<org.sunflow.core.bucket.RandomBucketOrder; mod[int, int]; int; org.sunflow.core.bucket.RandomBucketOrder; getBucketSequence[int, int]; int[]; null; this>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; split[java.lang.String]; java.lang.String[]; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; order>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.bucket.BucketOrderFactory; create[java.lang.String]; org.sunflow.core.BucketOrder; null; UI>
<java.lang.Math; min[int, int]; int; org.sunflow.core.bucket.SpiralBucketOrder; getBucketSequence[int, int]; int[]; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.core.bucket.SpiralBucketOrder; getBucketSequence[int, int]; int[]; null; Math>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.camera.ThinLens; update[]; void; org.sunflow.core.camera.ThinLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.Math; tan[double]; double; org.sunflow.core.camera.ThinLens; update[]; void; null; Math>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.camera.ThinLens; update[]; void; null; Math>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.camera.ThinLens; update[]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.ThinLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.camera.SphericalLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.SphericalLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.camera.SphericalLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.SphericalLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.camera.SphericalLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<org.sunflow.core.camera.PinholeLens; update[]; void; org.sunflow.core.camera.PinholeLens; PinholeLens[]; void; null; this>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.PinholeLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.camera.PinholeLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.camera.PinholeLens; update[]; void; org.sunflow.core.camera.PinholeLens; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<java.lang.Math; tan[double]; double; org.sunflow.core.camera.PinholeLens; update[]; void; null; Math>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.camera.PinholeLens; update[]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.camera.FisheyeLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<java.lang.Runtime; availableProcessors[]; int; org.sunflow.core.Scene; getThreads[]; int; null; Runtime.getRuntime()>
<java.lang.Runtime; getRuntime[]; java.lang.Runtime; org.sunflow.core.Scene; getThreads[]; int; availableProcessors[]; Runtime>
<org.sunflow.core.LightServer; setLights[org.sunflow.core.LightSource[]]; void; org.sunflow.core.Scene; setLightList[org.sunflow.core.LightSource[]]; void; null; lightServer>
<org.sunflow.core.LightServer; setShaderOverride[org.sunflow.core.Shader, boolean]; void; org.sunflow.core.Scene; setShaderOverride[org.sunflow.core.Shader, boolean]; void; null; lightServer>
<org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; camera>
<org.sunflow.core.LightServer; getRadiance[float, float, int, org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.core.ShadingState; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; lightServer>
<org.sunflow.core.Scene; traceBake[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; this>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; istate>
<org.sunflow.core.ShadingState; createState[org.sunflow.core.IntersectionState, float, float, org.sunflow.core.Ray, int, org.sunflow.core.LightServer]; org.sunflow.core.ShadingState; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; ShadingState>
<org.sunflow.core.PrimitiveList; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; bakingPrimitives>
<org.sunflow.core.ShadingState; setRay[org.sunflow.core.Ray]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.Camera; getRay[org.sunflow.math.Point3]; org.sunflow.core.Ray; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; camera>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; incoming>
<org.sunflow.core.ShadingState; setRay[org.sunflow.core.Ray]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; state>
<org.sunflow.core.LightServer; shadeBakeResult[org.sunflow.core.ShadingState]; void; org.sunflow.core.Scene; getRadiance[org.sunflow.core.IntersectionState, float, float, double, double, double, int]; org.sunflow.core.ShadingState; null; lightServer>
<org.sunflow.core.InstanceList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; null; instanceList>
<org.sunflow.core.InstanceList; getNumPrimitives[]; int; org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; infiniteInstanceList>
<org.sunflow.core.InstanceList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; infiniteInstanceList>
<org.sunflow.core.AccelerationStructure; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; intAccel>
<org.sunflow.core.Scene; trace[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Scene; traceShadow[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.image.Color; null; this>
<org.sunflow.core.IntersectionState; hit[]; boolean; org.sunflow.core.Scene; traceShadow[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.AccelerationStructure; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.Scene; traceBake[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; null; bakingAccel>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.Instance; getBakingPrimitives[]; org.sunflow.core.PrimitiveList; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; bakingInstance>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.PrimitiveList; getNumPrimitives[]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; bakingPrimitives>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; AccelerationStructureFactory>
<org.sunflow.core.AccelerationStructure; build[org.sunflow.core.PrimitiveList]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; bakingAccel>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; MathUtils>
<org.sunflow.core.InstanceList; getNumPrimitives[]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; instanceList>
<org.sunflow.core.InstanceList; getNumPrimitives[int]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; instanceList>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.InstanceList; getNumPrimitives[]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; infiniteInstanceList>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.InstanceList; getNumPrimitives[]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; instanceList>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; options>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; acceltype>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; AccelerationStructureFactory>
<org.sunflow.core.InstanceList; getNumPrimitives[]; int; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; instanceList>
<org.sunflow.core.AccelerationStructure; build[org.sunflow.core.PrimitiveList]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; intAccel>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.math.BoundingBox; getCenter[]; org.sunflow.math.Point3; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; getBounds()>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; getCenter[]; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; getBounds().getExtents()>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; length[]; getBounds()>
<org.sunflow.core.Scene; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; getExtents[]; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.LightServer; build[org.sunflow.core.Options]; boolean; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; lightServer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.ImageSampler; prepare[org.sunflow.core.Options, org.sunflow.core.Scene, int, int]; boolean; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; sampler>
<org.sunflow.core.ImageSampler; render[org.sunflow.core.Display]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; sampler>
<org.sunflow.core.LightServer; showStats[]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; lightServer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Scene; render[org.sunflow.core.Options, org.sunflow.core.ImageSampler, org.sunflow.core.Display]; void; null; UI>
<org.sunflow.core.LightServer; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; org.sunflow.core.Scene; calculatePhotons[org.sunflow.core.PhotonStore, java.lang.String, int]; boolean; null; lightServer>
<org.sunflow.math.BoundingBox; getBound[int]; float; org.sunflow.core.InstanceList; getPrimitiveBound[int, int]; float; null; instances[primID].getBounds()>
<org.sunflow.core.Instance; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.InstanceList; getPrimitiveBound[int, int]; float; getBound[int]; instances[primID]>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.BoundingBox]; void; org.sunflow.core.InstanceList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.core.Instance; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.core.InstanceList; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; i>
<org.sunflow.core.Instance; intersect[org.sunflow.core.Ray, org.sunflow.core.IntersectionState]; void; org.sunflow.core.InstanceList; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; instances[primID]>
<org.sunflow.core.Instance; getNumPrimitives[]; int; org.sunflow.core.InstanceList; getNumPrimitives[int]; int; null; instances[primID]>
<org.sunflow.core.Instance; prepareShadingState[org.sunflow.core.ShadingState]; void; org.sunflow.core.InstanceList; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getInstance()>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.InstanceList; prepareShadingState[org.sunflow.core.ShadingState]; void; prepareShadingState[org.sunflow.core.ShadingState]; state>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; clear[boolean]; void; null; e>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; clear[boolean]; void; null; UI>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.core.ParameterList; clear[boolean]; void; null; e>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; clear[boolean]; void; null; e>
<org.sunflow.util.FastHashMap; clear[]; void; org.sunflow.core.ParameterList; clear[boolean]; void; null; list>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addString[java.lang.String, java.lang.String]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addInteger[java.lang.String, int]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addBoolean[java.lang.String, boolean]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addFloat[java.lang.String, float]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addColor[java.lang.String, org.sunflow.image.Color]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addIntegerArray[java.lang.String, int[]]; void; null; this>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addStringArray[java.lang.String, java.lang.String[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; addFloats[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; UI>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addFloats[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; UI>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; UI>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; addTexCoords[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; UI>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addTexCoords[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; addMatrices[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; UI>
<org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; org.sunflow.core.ParameterList; addMatrices[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; null; UI>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; null; list>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; add[java.lang.String, org.sunflow.core.ParameterList.Parameter]; void; null; UI>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; null; this>
<org.sunflow.core.ParameterList$Parameter; getStringValue[]; java.lang.String; org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getStringArray[java.lang.String, java.lang.String[]]; java.lang.String[]; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getStringArray[java.lang.String, java.lang.String[]]; java.lang.String[]; null; this>
<org.sunflow.core.ParameterList$Parameter; getStrings[]; java.lang.String[]; org.sunflow.core.ParameterList; getStringArray[java.lang.String, java.lang.String[]]; java.lang.String[]; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; null; this>
<org.sunflow.core.ParameterList$Parameter; getIntValue[]; int; org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; null; this>
<org.sunflow.core.ParameterList$Parameter; getInts[]; int[]; org.sunflow.core.ParameterList; getIntArray[java.lang.String]; int[]; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; null; this>
<org.sunflow.core.ParameterList$Parameter; getBoolValue[]; boolean; org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; null; this>
<org.sunflow.core.ParameterList$Parameter; getFloatValue[]; float; org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<org.sunflow.core.ParameterList$Parameter; getColor[]; org.sunflow.image.Color; org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; null; this>
<org.sunflow.core.ParameterList$Parameter; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; this>
<org.sunflow.core.ParameterList$Parameter; getVector[]; org.sunflow.math.Vector3; org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getTexCoord[java.lang.String, org.sunflow.math.Point2]; org.sunflow.math.Point2; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getTexCoord[java.lang.String, org.sunflow.math.Point2]; org.sunflow.math.Point2; null; this>
<org.sunflow.core.ParameterList$Parameter; getTexCoord[]; org.sunflow.math.Point2; org.sunflow.core.ParameterList; getTexCoord[java.lang.String, org.sunflow.math.Point2]; org.sunflow.math.Point2; null; p>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getMatrix[java.lang.String, org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; null; list>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getMatrix[java.lang.String, org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; null; this>
<org.sunflow.core.ParameterList$Parameter; getMatrix[]; org.sunflow.math.Matrix4; org.sunflow.core.ParameterList; getMatrix[java.lang.String, org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; null; p>
<org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getFloatArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getFloatArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; list>
<org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; list>
<org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getVectorArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getVectorArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; list>
<org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getTexCoordArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getTexCoordArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; list>
<org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getMatrixArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.core.ParameterList.Parameter; org.sunflow.core.ParameterList; getMatrixArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; null; list>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; type.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; toLowerCase[]; type>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; p.type.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; toLowerCase[]; p.type>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; UI>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; toLowerCase[]; interp>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; p.interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; toLowerCase[]; p.interp>
<org.sunflow.core.ParameterList$Parameter; size[]; int; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; p>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; UI>
<org.sunflow.core.ParameterList$Parameter; size[]; int; org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; null; p>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.core.ParameterList; isValidParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.InterpolationType, int, org.sunflow.core.ParameterList.Parameter]; boolean; org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; null; this>
<org.sunflow.core.ParameterList$Parameter; getFloats[]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.ParameterList; getFloatParameter[java.lang.String, org.sunflow.core.ParameterList.ParameterType, org.sunflow.core.ParameterList.Parameter]; org.sunflow.core.ParameterList.FloatParameter; null; p>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; null; String>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; null; interp.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; toLowerCase[]; interp>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; null; type.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; toLowerCase[]; type>
<org.sunflow.core.ParameterList$Parameter; size[]; int; org.sunflow.core.ParameterList.Parameter; toString[]; java.lang.String; null; this>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.math.Matrix4; inverse[]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; c2w[i]>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.RenderObject; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.core.Camera; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; lens>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; String>
<org.sunflow.core.ParameterList; getMatrix[java.lang.String, org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; pl>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; String>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; pl>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; String>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; pl>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; String>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; pl>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; String>
<org.sunflow.math.Matrix4; fromBasis[org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; Matrix4>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; OrthoNormalBasis>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; Point3>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; Matrix4.translation(eye.x,eye.y,eye.z)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; multiply[org.sunflow.math.Matrix4]; Matrix4>
<java.lang.String; length[]; int; org.sunflow.core.Camera; updateCameraMatrix[int, org.sunflow.core.ParameterList]; boolean; null; offset>
<org.sunflow.core.CameraLens; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; lens>
<org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; r>
<java.lang.Math; min[int, int]; int; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Math>
<org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; r>
<org.sunflow.math.Matrix4; blend[org.sunflow.math.Matrix4, org.sunflow.math.Matrix4, float]; org.sunflow.math.Matrix4; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; Matrix4>
<org.sunflow.core.Ray; normalize[]; void; org.sunflow.core.Camera; getRay[float, float, int, int, double, double, double]; org.sunflow.core.Ray; null; r>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.Camera; getRay[org.sunflow.math.Point3]; org.sunflow.core.Ray; null; c2w[0]>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.display.FileDisplay; imageBegin[int, int, int]; void; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.display.FileDisplay; imageBegin[int, int, int]; void; null; bitmap>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.display.FileDisplay; imageBegin[int, int, int]; void; null; filename>
<org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; org.sunflow.core.display.FileDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.display.FileDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; bitmap>
<org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; org.sunflow.core.display.FileDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; bitmap>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.display.FileDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; bitmap>
<org.sunflow.image.Bitmap; save[java.lang.String]; void; org.sunflow.core.display.FileDisplay; imageEnd[]; void; null; bitmap>
<org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; org.sunflow.core.display.ImgPipeDisplay; imageBegin[int, int, int]; void; null; this>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.display.ImgPipeDisplay; imageBegin[int, int, int]; void; null; Float>
<java.io.PrintStream; flush[]; void; org.sunflow.core.display.ImgPipeDisplay; imageBegin[int, int, int]; void; null; System.out>
<org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; org.sunflow.core.display.ImgPipeDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; this>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.core.display.ImgPipeDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; data[(h - j - 1) * w + i].toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.core.display.ImgPipeDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; toRGB[]; data[(h - j - 1) * w + i]>
<java.io.PrintStream; write[byte[]]; void; org.sunflow.core.display.ImgPipeDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; System.out>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.display.ImgPipeDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; e>
<org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; org.sunflow.core.display.ImgPipeDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; this>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.core.display.ImgPipeDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; c.toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.core.display.ImgPipeDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; toRGB[]; c>
<java.io.PrintStream; write[byte[]]; void; org.sunflow.core.display.ImgPipeDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; System.out>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.display.ImgPipeDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; e>
<org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; org.sunflow.core.display.ImgPipeDisplay; imageEnd[]; void; null; this>
<java.io.PrintStream; flush[]; void; org.sunflow.core.display.ImgPipeDisplay; imageEnd[]; void; null; System.out>
<org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; null; this>
<org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; null; this>
<org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; null; this>
<org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; null; this>
<org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputPacket[int, int, int, int, int]; void; null; this>
<java.io.PrintStream; write[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; null; System.out>
<java.io.PrintStream; write[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; null; System.out>
<java.io.PrintStream; write[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; null; System.out>
<java.io.PrintStream; write[int]; void; org.sunflow.core.display.ImgPipeDisplay; outputInt32[int]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; compression>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; compression>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; compression>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; UI>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; channelType>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; channelType>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; OpenExrDisplay[java.lang.String, java.lang.String, java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; setGamma[float]; void; null; UI>
<java.io.RandomAccessFile; setLength[long]; void; org.sunflow.core.display.OpenExrDisplay; imageBegin[int, int, int]; void; null; file>
<org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; org.sunflow.core.display.OpenExrDisplay; imageBegin[int, int, int]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; imageBegin[int, int, int]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.display.OpenExrDisplay; imageBegin[int, int, int]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.display.OpenExrDisplay; imageBegin[int, int, int]; void; null; e>
<org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; org.sunflow.core.display.OpenExrDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; this>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.display.OpenExrDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.display.OpenExrDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; e>
<org.sunflow.core.display.OpenExrDisplay; writeTileOffsets[]; void; org.sunflow.core.display.OpenExrDisplay; imageEnd[]; void; null; this>
<java.io.RandomAccessFile; close[]; void; org.sunflow.core.display.OpenExrDisplay; imageEnd[]; void; null; file>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.display.OpenExrDisplay; imageEnd[]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.core.display.OpenExrDisplay; imageEnd[]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.display.OpenExrDisplay; imageEnd[]; void; null; e>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "channels">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "chlist">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "R">
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "G">
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "B">
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "compression">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "compression">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4BytesInv[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "dataWindow">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "box2i">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "displayWindow">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "box2i">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "lineOrder">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "lineOrder">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4BytesInv[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "pixelAspectRatio">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "float">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.lang.Float; floatToIntBits[float]; int; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; Float>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "screenWindowCenter">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "v2f">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.lang.Float; floatToIntBits[float]; int; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; Float>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.lang.Float; floatToIntBits[float]; int; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; Float>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "screenWindowWidth">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "float">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.lang.Float; floatToIntBits[float]; int; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; Float>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "tiles">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.lang.String; getBytes[]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; "tiledesc">
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; write[int]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<java.io.RandomAccessFile; getFilePointer[]; long; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; file>
<org.sunflow.core.display.OpenExrDisplay; writeTileOffsets[]; void; org.sunflow.core.display.OpenExrDisplay; writeRGBHeader[int, int, int]; void; null; this>
<java.io.RandomAccessFile; seek[long]; void; org.sunflow.core.display.OpenExrDisplay; writeTileOffsets[]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTileOffsets[]; void; null; file>
<org.sunflow.system.ByteUtil; get8Bytes[long]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTileOffsets[]; void; null; ByteUtil>
<java.io.PrintStream; print[java.lang.String]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; System.out>
<java.io.PrintStream; print[java.lang.String]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; System.out>
<java.io.RandomAccessFile; getFilePointer[]; long; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.util.Arrays; fill[byte[], byte]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; Arrays>
<org.sunflow.image.Color; getRGB[]; float[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; tile[tx + ty * tileRangeX]>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; Float>
<org.sunflow.system.ByteUtil; get2Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<org.sunflow.system.ByteUtil; floatToHalf[float]; int; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<org.sunflow.core.display.OpenExrDisplay; compress[int, byte[], int, byte[]]; int; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; this>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[], int, int]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<java.io.RandomAccessFile; write[byte[]]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<org.sunflow.system.ByteUtil; get4Bytes[int]; byte[]; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; ByteUtil>
<java.io.RandomAccessFile; write[byte[], int, int]; void; org.sunflow.core.display.OpenExrDisplay; writeTile[int, int, int, int, org.sunflow.image.Color[]]; void; null; file>
<java.util.zip.Deflater; setInput[byte[], int, int]; void; org.sunflow.core.display.OpenExrDisplay; compress[int, byte[], int, byte[]]; int; null; def>
<java.util.zip.Deflater; finish[]; void; org.sunflow.core.display.OpenExrDisplay; compress[int, byte[], int, byte[]]; int; null; def>
<java.util.zip.Deflater; deflate[byte[]]; int; org.sunflow.core.display.OpenExrDisplay; compress[int, byte[], int, byte[]]; int; null; def>
<org.sunflow.core.display.OpenExrDisplay; rleCompress[byte[], int, byte[]]; int; org.sunflow.core.display.OpenExrDisplay; compress[int, byte[], int, byte[]]; int; null; this>
<org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame.imagePanel>
<java.awt.Toolkit; getScreenSize[]; java.awt.Dimension; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; Toolkit.getDefaultToolkit()>
<java.awt.Toolkit; getDefaultToolkit[]; java.awt.Toolkit; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; getScreenSize[]; Toolkit>
<java.awt.Dimension; getWidth[]; double; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; screenRes>
<java.awt.Dimension; getHeight[]; double; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; screenRes>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame.imagePanel>
<java.awt.Dimension; getWidth[]; double; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; screenRes>
<java.awt.Dimension; getHeight[]; double; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; screenRes>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame.imagePanel>
<java.awt.Window; pack[]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Window; setLocationRelativeTo[java.awt.Component]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Window; setVisible[boolean]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame>
<org.sunflow.system.ImagePanel; fit[]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; org.sunflow.core.display.FrameDisplay; imageBegin[int, int, int]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; imagePrepare[int, int, int, int, int]; void; org.sunflow.core.display.FrameDisplay; imagePrepare[int, int, int, int, int]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; org.sunflow.core.display.FrameDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; org.sunflow.core.display.FrameDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; imageEnd[]; void; org.sunflow.core.display.FrameDisplay; imageEnd[]; void; null; frame.imagePanel>
<org.sunflow.system.ImagePanel; save[java.lang.String]; void; org.sunflow.core.display.FrameDisplay; imageEnd[]; void; null; frame.imagePanel>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; org.sunflow.core.display.FrameDisplay.RenderFrame; RenderFrame[]; void; null; this>
<java.awt.Component; addKeyListener[java.awt.event.KeyListener]; void; org.sunflow.core.display.FrameDisplay.RenderFrame; RenderFrame[]; void; null; this>
<java.awt.event.KeyEvent; getKeyCode[]; int; java.awt.event.KeyAdapter; keyPressed[java.awt.event.KeyEvent]; void; null; e>
<java.lang.System; exit[int]; void; java.awt.event.KeyAdapter; keyPressed[java.awt.event.KeyEvent]; void; null; System>
<javax.swing.JFrame; setContentPane[java.awt.Container]; void; org.sunflow.core.display.FrameDisplay.RenderFrame; RenderFrame[]; void; null; this>
<java.awt.Window; pack[]; void; org.sunflow.core.display.FrameDisplay.RenderFrame; RenderFrame[]; void; null; this>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; image>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; this>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Component; addKeyListener[java.awt.event.KeyListener]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.event.KeyEvent; getKeyCode[]; int; java.awt.event.KeyAdapter; keyPressed[java.awt.event.KeyEvent]; void; null; e>
<java.lang.System; exit[int]; void; java.awt.event.KeyAdapter; keyPressed[java.awt.event.KeyEvent]; void; null; System>
<javax.swing.JFrame; setContentPane[java.awt.Container]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Window; pack[]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Window; setLocationRelativeTo[java.awt.Component]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<java.awt.Window; setVisible[boolean]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; frame>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.display.FastDisplay; imageBegin[int, int, int]; void; null; t>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.core.display.FastDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; image>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.core.display.FastDisplay; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; data[index]>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.core.display.FastDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; image>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.core.display.FastDisplay; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; c>
<java.awt.image.BufferedImage; setRGB[int, int, int, int, int[], int, int]; void; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; image>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; image>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; image>
<java.awt.Component; repaint[]; void; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; t>
<org.sunflow.system.Timer; seconds[]; double; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; t>
<java.awt.Frame; setTitle[java.lang.String]; void; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; frame>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.display.FastDisplay; imageEnd[]; void; null; String>
<java.awt.Graphics; drawImage[java.awt.Image, int, int, java.awt.image.ImageObserver]; boolean; org.sunflow.core.display.FastDisplay; paint[java.awt.Graphics]; void; null; g>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; filename>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.nio.channels.FileChannel; map[java.nio.channels.FileChannel.MapMode, long, long]; java.nio.MappedByteBuffer; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream.getChannel()>
<java.io.FileInputStream; getChannel[]; java.nio.channels.FileChannel; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; map[java.nio.channels.FileChannel.MapMode, long, long]; stream>
<java.io.File; length[]; long; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; file>
<java.nio.ByteBuffer; order[java.nio.ByteOrder]; java.nio.ByteBuffer; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; map>
<java.nio.ByteBuffer; asIntBuffer[]; java.nio.IntBuffer; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; map>
<java.nio.ByteBuffer; asFloatBuffer[]; java.nio.FloatBuffer; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; map>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; ints>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; ints>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.nio.FloatBuffer; get[int]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; buffer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.nio.IntBuffer; get[int]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; ints>
<java.io.FileInputStream; close[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; filename>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.io.BufferedReader; readLine[]; java.lang.String; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; bf>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; line>
<java.lang.String; split[java.lang.String]; java.lang.String[]; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; line>
<org.sunflow.util.FloatArray; add[float]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; verts>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Float>
<org.sunflow.util.FloatArray; add[float]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; verts>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Float>
<org.sunflow.util.FloatArray; add[float]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; verts>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Float>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; line>
<java.lang.String; split[java.lang.String]; java.lang.String[]; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; line>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.util.IntArray; add[int]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Integer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.io.InputStreamReader; close[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; file>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.util.IntArray; trim[]; int[]; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; tris>
<org.sunflow.util.FloatArray; trim[]; float[]; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; verts>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; filename>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.io.FileInputStream; skip[long]; long; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; file>
<org.sunflow.core.tesselatable.FileMesh; getLittleEndianInt[int]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.io.File; length[]; long; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; new File(filename)>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.system.Memory; bytesToString[long]; java.lang.String; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Memory>
<org.sunflow.system.Memory; bytesToString[long]; java.lang.String; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; Memory>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.core.tesselatable.FileMesh; getLittleEndianFloat[int]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.core.tesselatable.FileMesh; getLittleEndianFloat[int]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.core.tesselatable.FileMesh; getLittleEndianFloat[int]; float; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.io.DataInputStream; readInt[]; int; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<java.io.DataInputStream; readShort[]; short; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; stream>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.io.FileInputStream; close[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; file>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.FileMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; UI>
<org.sunflow.core.ParameterList; addIntegerArray[java.lang.String, int[]]; void; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; pl>
<org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; pl>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; p0>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; p1>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; p2>
<org.sunflow.math.Point3; normal[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; Point3>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; n>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; n>
<org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; pl>
<org.sunflow.core.primitive.TriangleMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.core.tesselatable.FileMesh; generate[int[], float[], boolean]; org.sunflow.core.primitive.TriangleMesh; null; m>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.tesselatable.FileMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; resolveIncludeFilename[java.lang.String]; java.lang.String; org.sunflow.core.tesselatable.FileMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.tesselatable.FileMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.core.tesselatable.FileMesh; getLittleEndianFloat[int]; float; null; Float>
<org.sunflow.core.tesselatable.FileMesh; getLittleEndianInt[int]; int; org.sunflow.core.tesselatable.FileMesh; getLittleEndianFloat[int]; float; null; this>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.tesselatable.BezierMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.tesselatable.BezierMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.tesselatable.BezierMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.tesselatable.BezierMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; o2w>
<org.sunflow.math.BoundingBox; include[float, float, float]; void; org.sunflow.core.tesselatable.BezierMesh; getWorldBounds[org.sunflow.math.Matrix4]; org.sunflow.math.BoundingBox; null; bounds>
<org.sunflow.core.tesselatable.BezierMesh; bernstein[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernsteinDeriv[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernstein[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernsteinDeriv[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.tesselatable.BezierMesh; getPatchPoint[float, float, float[], float[], float[], float[], float[], org.sunflow.math.Point3, org.sunflow.math.Vector3]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; this>
<org.sunflow.core.ParameterList; addPoints[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.ParameterList; addIntegerArray[java.lang.String, int[]]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.ParameterList; addIntegerArray[java.lang.String, int[]]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.ParameterList; addTexCoords[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.ParameterList; addVectors[java.lang.String, org.sunflow.core.ParameterList.InterpolationType, float[]]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.RenderObject; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; m>
<org.sunflow.core.ParameterList; clear[boolean]; void; org.sunflow.core.tesselatable.BezierMesh; tesselate[]; org.sunflow.core.PrimitiveList; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; setVertexCount[int]; void; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPointArray[java.lang.String]; org.sunflow.core.ParameterList.FloatParameter; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.tesselatable.BezierMesh; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.core.IntersectionState; getRobustStack[]; float[]; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.Ray; getMin[]; float; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Float>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Float>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<java.lang.Math; abs[float]; float; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.core.tesselatable.BezierMesh; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; Math>
<org.sunflow.core.ShadingState; init[]; void; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getPoint[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; getPoint[org.sunflow.math.Point3]; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getInstance[]; org.sunflow.core.Instance; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getU[]; float; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getV[]; float; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.tesselatable.BezierMesh; bernstein[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernsteinDeriv[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernstein[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.tesselatable.BezierMesh; bernsteinDeriv[float]; float[]; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.tesselatable.BezierMesh; getPatchPoint[float, float, float[], float[], float[], float[], float[], org.sunflow.math.Point3, org.sunflow.math.Vector3]; void; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.ShadingState; getPrimitiveID[]; int; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.Instance; transformNormalObjectToWorld[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; normalize[]; state>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getGeoNormal()>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[org.sunflow.math.Vector3]; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point2; set[float, float]; org.sunflow.math.Point2; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state.getUV()>
<org.sunflow.core.ShadingState; getUV[]; org.sunflow.math.Point2; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; set[float, float]; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getShader[int]; org.sunflow.core.Shader; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setModifier[org.sunflow.core.Modifier]; void; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Instance; getModifier[int]; org.sunflow.core.Modifier; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; parent>
<org.sunflow.core.ShadingState; setBasis[org.sunflow.math.OrthoNormalBasis]; void; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.tesselatable.BezierMesh; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; System.out>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; this>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; printf[java.lang.String, java.lang.Object[]]; java.io.PrintStream; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; System.out>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; Matrix4>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<java.lang.Math; toRadians[double]; double; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; Math>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; rotate[float, float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; Matrix4>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; scale[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; Matrix4>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextFloat[]; float; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; m>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; p>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; System.out>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.core.tesselatable.Gumbo; main[java.lang.String[]]; void; null; e>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; p>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; substring[int]; java.lang.String; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; substring[int, int]; java.lang.String; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<java.lang.String; length[]; int; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; s>
<org.sunflow.util.FloatArray; add[float]; void; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; array>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; Float>
<org.sunflow.util.FloatArray; trim[]; float[]; org.sunflow.core.tesselatable.Gumbo; parseFloatArray[org.sunflow.system.Parser]; float[]; null; array>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.photonmap.CausticPhotonMap; CausticPhotonMap[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.photonmap.CausticPhotonMap; CausticPhotonMap[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.photonmap.CausticPhotonMap; CausticPhotonMap[org.sunflow.core.Options]; void; null; options>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.photonmap.CausticPhotonMap; CausticPhotonMap[org.sunflow.core.Options]; void; null; options>
<java.util.ArrayList; add[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.CausticPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; photonList>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; getDist1[float, float, float]; float; org.sunflow.core.photonmap.CausticPhotonMap; locatePhotons[org.sunflow.core.photonmap.CausticPhotonMap.NearestPhotons]; void; null; photons[i]>
<org.sunflow.core.photonmap.CausticPhotonMap$NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; void; org.sunflow.core.photonmap.CausticPhotonMap; locatePhotons[org.sunflow.core.photonmap.CausticPhotonMap.NearestPhotons]; void; null; np>
<org.sunflow.core.photonmap.CausticPhotonMap$NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; void; org.sunflow.core.photonmap.CausticPhotonMap; locatePhotons[org.sunflow.core.photonmap.CausticPhotonMap.NearestPhotons]; void; null; np>
<java.util.ArrayList; toArray[org.sunflow.core.photonmap.CausticPhotonMap.Photon[]]; org.sunflow.core.photonmap.CausticPhotonMap.Photon[]; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; photonList>
<java.util.ArrayList; size[]; int; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; photonList>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; this>
<java.lang.Math; ceil[double]; double; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; Math>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; photons[right]>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; photons[++i]>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; photons[--j]>
<org.sunflow.core.photonmap.CausticPhotonMap; swap[int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.core.photonmap.CausticPhotonMap; swap[int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; setSplitAxis[int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; temp[index]>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; balanceSegment[org.sunflow.core.photonmap.CausticPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getReflectionDepth[]; int; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getRefractionDepth[]; int; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<java.util.ArrayList; add[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; photonList>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<java.lang.Math; max[float, float]; float; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.image.Color; getMax[]; float; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; power>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; t>
<org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.photonmap.CausticPhotonMap; init[]; void; null; t>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.photonmap.CausticPhotonMap; locatePhotons[org.sunflow.core.photonmap.CausticPhotonMap.NearestPhotons]; void; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; ppos>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; sample>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; pdir>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; sample>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; new Color().setRGBE(np.index[i].power)>
<org.sunflow.image.Color; setRGBE[int]; org.sunflow.image.Color; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; new Color()>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; sample.getDiffuseRadiance()>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; sample>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.photonmap.CausticPhotonMap; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.photonmap.CausticPhotonMap$Photon; getDist2[float, float, float]; float; org.sunflow.core.photonmap.CausticPhotonMap.NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; void; null; p>
<org.sunflow.math.Vector3; encode[]; short; org.sunflow.core.photonmap.CausticPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; dir>
<org.sunflow.image.Color; toRGBE[]; int; org.sunflow.core.photonmap.CausticPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; power>
<java.util.ArrayList; add[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.GlobalPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; photonList>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<java.util.ArrayList; add[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; photonList>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<java.lang.Math; max[float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.image.Color; getMax[]; float; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; power>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getDist1[float, float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap; locatePhotons[org.sunflow.core.photonmap.GlobalPhotonMap.NearestPhotons]; void; null; photons[i]>
<org.sunflow.core.photonmap.GlobalPhotonMap$NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; void; org.sunflow.core.photonmap.GlobalPhotonMap; locatePhotons[org.sunflow.core.photonmap.GlobalPhotonMap.NearestPhotons]; void; null; np>
<org.sunflow.core.photonmap.GlobalPhotonMap$NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; void; org.sunflow.core.photonmap.GlobalPhotonMap; locatePhotons[org.sunflow.core.photonmap.GlobalPhotonMap.NearestPhotons]; void; null; np>
<java.util.ArrayList; toArray[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[]]; org.sunflow.core.photonmap.GlobalPhotonMap.Photon[]; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; photonList>
<java.util.ArrayList; size[]; int; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; photonList>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; this>
<java.lang.Math; ceil[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; Math>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; photons[right]>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; photons[++i]>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getCoord[int]; float; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; photons[--j]>
<org.sunflow.core.photonmap.GlobalPhotonMap; swap[int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.core.photonmap.GlobalPhotonMap; swap[int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; setSplitAxis[int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; temp[index]>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; balanceSegment[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[], int, int, int]; void; null; bounds>
<org.sunflow.math.Vector3; encode[]; short; org.sunflow.core.photonmap.GlobalPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; dir>
<org.sunflow.image.Color; toRGBE[]; int; org.sunflow.core.photonmap.GlobalPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; power>
<org.sunflow.math.Vector3; encode[]; short; org.sunflow.core.photonmap.GlobalPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; n>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.core.photonmap.GlobalPhotonMap.Photon; Photon[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; diffuse>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.system.Timer; start[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GlobalPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; UI>
<org.sunflow.system.UI; taskUpdate[int]; void; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; UI>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; p>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Vector3>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; irr>
<org.sunflow.core.photonmap.GlobalPhotonMap$NearestPhotons; reset[org.sunflow.math.Point3, float]; void; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; np>
<org.sunflow.core.photonmap.GlobalPhotonMap; locatePhotons[org.sunflow.core.photonmap.GlobalPhotonMap.NearestPhotons]; void; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; this>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Vector3>
<org.sunflow.math.Point3; set[float, float, float]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; ppos>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Point3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Vector3>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; irr>
<org.sunflow.image.Color; setRGBE[int]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; pow>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; irr>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; irr.mul(new Color(curr.data))>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; mul[float]; irr>
<org.sunflow.image.Color; toRGBE[]; int; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; irr>
<org.sunflow.system.UI; taskStop[]; void; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; UI>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Math>
<java.lang.Math; ceil[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Math>
<java.lang.Math; log[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; precomputeRadiance[]; void; null; Math>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getDist1[float, float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; photons[i]>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getDist2[float, float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; curr>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.image.Color; setRGBE[int]; org.sunflow.image.Color; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; new Color()>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getDist2[float, float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; curr>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GlobalPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.photonmap.GlobalPhotonMap$Photon; getDist2[float, float, float]; float; org.sunflow.core.photonmap.GlobalPhotonMap.NearestPhotons; checkAddNearest[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; void; null; p>
<java.lang.Math; cos[double]; double; org.sunflow.core.photonmap.GlobalPhotonMap; numEmit[]; int; null; Math>
<org.sunflow.math.BoundingBox; enlargeUlps[]; void; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; bounds>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; bounds>
<java.lang.Math; max[float, float]; float; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; UI>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; bounds>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; state>
<org.sunflow.core.photonmap.GridPhotonMap; growPhotonHash[]; void; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; this>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; g.flux>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; g.diffuse>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; init[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; init[]; void; null; UI>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; init[]; void; null; g.diffuse>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.photonmap.GridPhotonMap; init[]; void; null; UI>
<org.sunflow.math.BoundingBox; contains[org.sunflow.math.Point3]; boolean; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; bounds>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; bounds>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; bounds>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; MathUtils>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock; lock[]; void; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; rwl.readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; readLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; lock[]; rwl>
<org.sunflow.core.photonmap.GridPhotonMap; get[int, int, int]; org.sunflow.core.photonmap.GridPhotonMap.PhotonGroup; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; this>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; g.radiance>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock; unlock[]; void; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; rwl.readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; readLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; unlock[]; rwl>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Color>
<org.sunflow.core.photonmap.GridPhotonMap; get[int, int, int]; org.sunflow.core.photonmap.GridPhotonMap.PhotonGroup; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; this>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; irr>
<org.sunflow.image.Color; add[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; diff>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; irr>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock; unlock[]; void; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; rwl.readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; readLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; unlock[]; rwl>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock; lock[]; void; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; rwl.writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; writeLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; lock[]; rwl>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; diff>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; center.diffuse>
<org.sunflow.image.Color; mul[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; irr>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; irr>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock; unlock[]; void; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; null; rwl.writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock; writeLock[]; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock; org.sunflow.core.photonmap.GridPhotonMap; getRadiance[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.image.Color; unlock[]; rwl>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap.PhotonGroup; PhotonGroup[int, org.sunflow.math.Vector3]; void; null; Color>
<org.sunflow.image.Color; black[]; org.sunflow.image.Color; org.sunflow.core.photonmap.GridPhotonMap.PhotonGroup; PhotonGroup[int, org.sunflow.math.Vector3]; void; null; Color>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.Ray; Ray[float, float, float, float, float, float]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.Ray; Ray[org.sunflow.math.Point3, org.sunflow.math.Vector3]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.Ray; Ray[org.sunflow.math.Point3, org.sunflow.math.Point3]; void; null; Math>
<org.sunflow.math.Matrix4; transformPX[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<org.sunflow.math.Matrix4; transformPY[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<org.sunflow.math.Matrix4; transformPZ[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<org.sunflow.math.Matrix4; transformVX[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<org.sunflow.math.Matrix4; transformVY[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<org.sunflow.math.Matrix4; transformVZ[float, float, float]; float; org.sunflow.core.Ray; transform[org.sunflow.math.Matrix4]; org.sunflow.core.Ray; null; m>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.Ray; normalize[]; void; null; Math>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.light.SphereLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.light.SphereLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; Matrix4.translation(center.x,center.y,center.z)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; Matrix4>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.light.SphereLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.Point3; distanceToSquared[org.sunflow.math.Point3]; float; org.sunflow.core.light.SphereLight; isVisible[org.sunflow.core.ShadingState]; boolean; null; state.getPoint()>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; isVisible[org.sunflow.core.ShadingState]; boolean; distanceToSquared[org.sunflow.math.Point3]; state>
<org.sunflow.core.light.SphereLight; getNumSamples[]; int; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; lengthSquared[]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; wc>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[float, float, float]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state.getNormal()>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; dot[float, float, float]; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; OrthoNormalBasis>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.light.SphereLight; getNumSamples[]; int; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Color>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; basis>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Solvers; solveQuadric[double, double, double]; double[]; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; Solvers>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; setMax[float]; dest>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.SphereLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; OrthoNormalBasis>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; basis>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; power>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; power>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.SphereLight; getPower[]; float; null; radiance.copy().mul((float)(Math.PI * Math.PI * 4* r2))>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; getPower[]; float; getLuminance[]; radiance.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.light.SphereLight; getPower[]; float; mul[float]; radiance>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.light.SphereLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.light.SphereLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.light.SphereLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.light.PointLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; distanceToSquared[org.sunflow.math.Point3]; float; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; lightPoint>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getDiffuseRadiance()>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getSpecularRadiance()>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.PointLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; set[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.light.PointLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; p>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.PointLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.PointLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.PointLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.PointLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; power>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.PointLight; getPower[]; float; null; power>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.SunSkyLight; SunSkyLight[]; void; null; OrthoNormalBasis>
<org.sunflow.core.light.SunSkyLight; initSunSky[]; void; org.sunflow.core.light.SunSkyLight; SunSkyLight[]; void; null; this>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<org.sunflow.image.IrregularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; k_oCurve>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<org.sunflow.image.IrregularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; k_gCurve>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<org.sunflow.image.IrregularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; k_gCurve>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<org.sunflow.image.IrregularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; k_waCurve>
<java.lang.Math; pow[double, double]; double; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; Math>
<org.sunflow.image.IrregularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; k_waCurve>
<org.sunflow.image.RegularSpectralCurve; sample[float]; float; org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; null; solCurve>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; null; Math>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; sunDirWorld>
<org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; basis>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; sunDir>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; MathUtils>
<org.sunflow.core.light.SunSkyLight; computeAttenuatedSunlight[float, float]; org.sunflow.image.SpectralCurve; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; this>
<org.sunflow.image.Color; constrainRGB[]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; RGBSpace.SRGB.convertXYZtoRGB(sunSpectralRadiance.toXYZ().mul(1e-4f))>
<org.sunflow.image.RGBSpace; convertXYZtoRGB[org.sunflow.image.XYZColor]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; constrainRGB[]; RGBSpace.SRGB>
<org.sunflow.image.XYZColor; mul[float]; org.sunflow.image.XYZColor; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; sunSpectralRadiance.toXYZ()>
<org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; mul[float]; sunSpectralRadiance>
<java.lang.Math; tan[double]; double; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; Math>
<org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; this>
<org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; this>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; c>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SunSkyLight; initSunSky[]; void; null; Math>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; OrthoNormalBasis>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; OrthoNormalBasis>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.light.SunSkyLight; initSunSky[]; void; org.sunflow.core.light.SunSkyLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.light.SunSkyLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; dir>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; MathUtils>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Vector3>
<org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; this>
<org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; this>
<org.sunflow.core.light.SunSkyLight; perezFunction[double[], double, double, double]; double; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; this>
<org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; ChromaticitySpectrum>
<org.sunflow.image.XYZColor; getX[]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; c>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; c>
<org.sunflow.image.XYZColor; getZ[]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; c>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; c>
<org.sunflow.image.RGBSpace; convertXYZtoRGB[float, float, float]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; setMax[float]; dest>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; basis>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; setMax[float]; dest>
<org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getDiffuseRadiance()>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getSpecularRadiance()>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.SunSkyLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.light.SunSkyLight; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.light.SunSkyLight; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.light.SunSkyLight; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.light.SunSkyLight; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.image.Color; constrainRGB[]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; getSkyRGB(basis.untransform(state.getRay().getDirection()))>
<org.sunflow.core.light.SunSkyLight; getSkyRGB[org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.light.SunSkyLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; constrainRGB[]; this>
<org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; basis>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.light.SunSkyLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.light.SunSkyLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.SunSkyLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<org.sunflow.core.light.ImageBasedLight; updateBasis[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; void; org.sunflow.core.light.ImageBasedLight; ImageBasedLight[]; void; null; this>
<org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.ImageBasedLight; updateBasis[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; void; null; OrthoNormalBasis>
<org.sunflow.math.OrthoNormalBasis; swapWU[]; void; org.sunflow.core.light.ImageBasedLight; updateBasis[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; void; null; basis>
<org.sunflow.math.OrthoNormalBasis; flipV[]; void; org.sunflow.core.light.ImageBasedLight; updateBasis[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; void; null; basis>
<org.sunflow.core.light.ImageBasedLight; updateBasis[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; void; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getString[java.lang.String, java.lang.String]; java.lang.String; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; TextureCache>
<org.sunflow.SunflowAPI; resolveTextureFilename[java.lang.String]; java.lang.String; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; api>
<org.sunflow.core.Texture; getBitmap[]; org.sunflow.image.Bitmap; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; texture>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; texture>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; c>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getWidth[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.image.Bitmap; getHeight[]; int; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; b>
<org.sunflow.core.ParameterList; getBoolean[java.lang.String, boolean]; boolean; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.QMC; halton[int, int]; double; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; QMC>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; Math>
<org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; basis>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; texture.getPixel(su,sv)>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; mul[float]; texture>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.light.ImageBasedLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.light.ImageBasedLight; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; setShader[org.sunflow.core.Shader]; void; org.sunflow.core.light.ImageBasedLight; prepareShadingState[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; getMax[]; float; org.sunflow.core.light.ImageBasedLight; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; r>
<org.sunflow.core.IntersectionState; setIntersection[int, float, float]; void; org.sunflow.core.light.ImageBasedLight; intersectPrimitive[org.sunflow.core.Ray, int, org.sunflow.core.IntersectionState]; void; null; state>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; basis>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; setMax[float]; dest>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; texture>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getDiffuseRadiance()>
<org.sunflow.core.LightSample; getDiffuseRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getSpecularRadiance()>
<org.sunflow.core.LightSample; getSpecularRadiance[]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; mul[float]; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest.getShadowRay()>
<org.sunflow.core.LightSample; getShadowRay[]; org.sunflow.core.Ray; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; setMax[float]; dest>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.ImageBasedLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.light.ImageBasedLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.light.ImageBasedLight; getColor[org.sunflow.math.Vector3]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; this>
<org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; basis>
<org.sunflow.core.Ray; getDirection[]; org.sunflow.math.Vector3; org.sunflow.core.light.ImageBasedLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state.getRay()>
<org.sunflow.core.ShadingState; getRay[]; org.sunflow.core.Ray; org.sunflow.core.light.ImageBasedLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; getDirection[]; state>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.ImageBasedLight; getColor[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Math>
<java.lang.Math; atan2[double, double]; double; org.sunflow.core.light.ImageBasedLight; getColor[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; Math>
<org.sunflow.core.Texture; getPixel[float, float]; org.sunflow.image.Color; org.sunflow.core.light.ImageBasedLight; getColor[org.sunflow.math.Vector3]; org.sunflow.image.Color; null; texture>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.ImageBasedLight; getDirection[float, float]; org.sunflow.math.Vector3; null; Math>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; DirectionalSpotlight[]; void; null; dir>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.DirectionalSpotlight; DirectionalSpotlight[]; void; null; OrthoNormalBasis>
<org.sunflow.core.ParameterList; getPoint[java.lang.String, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getVector[java.lang.String, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; dir>
<org.sunflow.core.ParameterList; getFloat[java.lang.String, float]; float; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; OrthoNormalBasis>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.DirectionalSpotlight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.DirectionalSpotlight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; basis>
<org.sunflow.math.Point3; add[org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Point3>
<org.sunflow.math.Vector3; set[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; dir>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; power.set(radiance)>
<org.sunflow.image.Color; set[org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.DirectionalSpotlight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; mul[float]; power>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.DirectionalSpotlight; getPower[]; float; null; radiance.copy().mul((float)Math.PI * r2)>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.DirectionalSpotlight; getPower[]; float; getLuminance[]; radiance.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.light.DirectionalSpotlight; getPower[]; float; mul[float]; radiance>
<org.sunflow.core.ParameterList; getColor[java.lang.String, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.TriangleMeshLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.core.ParameterList; getInt[java.lang.String, int]; int; org.sunflow.core.light.TriangleMeshLight; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; pl>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; String>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; null; api>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; this>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; this>
<org.sunflow.math.Point3; normal[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; Point3>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; ng>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; TriangleLight[int]; void; null; ng>
<org.sunflow.core.Ray; dot[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; intersectTriangleKensler[org.sunflow.core.Ray]; boolean; null; r>
<org.sunflow.core.Ray; setMax[float]; void; org.sunflow.core.light.TriangleMeshLight.TriangleLight; intersectTriangleKensler[org.sunflow.core.Ray]; boolean; null; r>
<org.sunflow.core.ShadingState; getNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Point3>
<org.sunflow.core.primitive.TriangleMesh; getPoint[int]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; p0>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; p1>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; p2>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; h>
<org.sunflow.math.Vector3; div[float]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; h>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n0>
<org.sunflow.math.Vector3; div[float]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n0>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n1>
<org.sunflow.math.Vector3; div[float]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n1>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; length[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n2>
<org.sunflow.math.Vector3; div[float]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; n2>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; acos[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; MathUtils>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.core.ShadingState; getDiffuseDepth[]; int; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Color>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.ShadingState; getRandom[int, int, int]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.Vector3; dot[float, float, float]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; p1>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; nd>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Math>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getGeoNormal[]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; Vector3>
<org.sunflow.core.ShadingState; getPoint[]; org.sunflow.math.Point3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<org.sunflow.core.light.TriangleMeshLight$TriangleLight; intersectTriangleKensler[org.sunflow.core.Ray]; boolean; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; this>
<org.sunflow.core.LightSample; setShadowRay[org.sunflow.core.Ray]; void; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; setRadiance[org.sunflow.image.Color, org.sunflow.image.Color]; void; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.LightSample; traceShadow[org.sunflow.core.ShadingState]; void; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; dest>
<org.sunflow.core.ShadingState; addSample[org.sunflow.core.LightSample]; void; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getSamples[org.sunflow.core.ShadingState]; void; null; state>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; OrthoNormalBasis>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; onb>
<java.lang.Math; cos[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Math>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPhoton[double, double, double, double, org.sunflow.math.Point3, org.sunflow.math.Vector3, org.sunflow.image.Color]; void; null; Color>
<org.sunflow.image.Color; getLuminance[]; float; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPower[]; float; null; radiance.copy().mul((float)Math.PI * area)>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPower[]; float; getLuminance[]; radiance.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.core.light.TriangleMeshLight.TriangleLight; getPower[]; float; mul[float]; radiance>
<org.sunflow.core.ShadingState; includeLights[]; boolean; org.sunflow.core.light.TriangleMeshLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; faceforward[]; void; org.sunflow.core.light.TriangleMeshLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<org.sunflow.core.ShadingState; isBehind[]; boolean; org.sunflow.core.light.TriangleMeshLight; getRadiance[org.sunflow.core.ShadingState]; org.sunflow.image.Color; null; state>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; name>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; name>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; UI>
<org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; org.sunflow.core.AccelerationStructureFactory; create[java.lang.String, int, boolean]; org.sunflow.core.AccelerationStructure; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; getUniqueName[java.lang.String]; java.lang.String; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.RealtimeBenchmark; createGeometry[]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.system.UI; set[org.sunflow.system.UserInterface]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.system.Timer; start[]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; t>
<java.lang.Math; cos[double]; double; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; Math>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; this>
<org.sunflow.system.Timer; end[]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; t>
<org.sunflow.system.UI; set[org.sunflow.system.UserInterface]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.system.Timer; seconds[]; double; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; t>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RealtimeBenchmark; RealtimeBenchmark[boolean, int]; void; null; UI>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Color.white()>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; mul[float]; Color>
<org.sunflow.SunflowAPI; light[java.lang.String, org.sunflow.core.LightSource]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Color.white()>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; mul[float]; Color>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.image.Color; mul[float]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Color.white()>
<org.sunflow.image.Color; white[]; org.sunflow.image.Color; org.sunflow.RealtimeBenchmark; createGeometry[]; void; mul[float]; Color>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.scale(0.075f)>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.rotateZ((float)Math.toRadians(-45f))>
<org.sunflow.math.Matrix4; rotateZ[float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Math>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.translation(-7,0,0)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.scale(0.5f)>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.rotateZ((float)Math.toRadians(25f))>
<org.sunflow.math.Matrix4; rotateZ[float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<java.lang.Math; toRadians[double]; double; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Math>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; Matrix4.translation(3,-7,0)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.RealtimeBenchmark; createGeometry[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.RealtimeBenchmark; createGeometry[]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; System.out>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; args[0]>
<org.sunflow.Benchmark; kernelMain[]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; b>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; args[0]>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; Integer>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; Integer>
<org.sunflow.Benchmark; kernelBegin[]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; benchmark>
<org.sunflow.Benchmark; kernelMain[]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; benchmark>
<org.sunflow.Benchmark; kernelEnd[]; void; org.sunflow.Benchmark; main[java.lang.String[]]; void; null; benchmark>
<org.sunflow.system.UI; set[org.sunflow.system.UserInterface]; void; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; UI>
<java.lang.Class; getResource[java.lang.String]; java.net.URL; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; Benchmark.class>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; String>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; UI>
<javax.imageio.ImageIO; read[java.net.URL]; java.awt.image.BufferedImage; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; ImageIO>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; bi>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; bi>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; UI>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; bi>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; bi>
<java.awt.image.BufferedImage; getRGB[int, int]; int; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; bi>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; Benchmark[int, boolean, boolean, boolean, int]; void; null; UI>
<org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; org.sunflow.Benchmark; execute[]; void; null; framework>
<org.sunflow.Benchmark$BenchmarkScene; build[]; void; org.sunflow.Benchmark.BenchmarkScene; BenchmarkScene[]; void; null; this>
<org.sunflow.SunflowAPI; render[java.lang.String, org.sunflow.core.Display]; void; org.sunflow.Benchmark.BenchmarkScene; BenchmarkScene[]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.Benchmark.BenchmarkScene; BenchmarkScene[]; void; null; String>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, boolean]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.Benchmark$BenchmarkScene; buildCornellBox[]; void; org.sunflow.Benchmark.BenchmarkScene; build[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Point3]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Vector3]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; camera[java.lang.String, org.sunflow.core.CameraLens]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; options[java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String, java.lang.String, float[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int[]]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, int]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.core.light.TriangleMeshLight; init[java.lang.String, org.sunflow.SunflowAPI]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; light>
<org.sunflow.SunflowAPI; parameter[java.lang.String, float]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.Benchmark$BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.image.Color]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; shader[java.lang.String, org.sunflow.core.Shader]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.Benchmark$BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.Tesselatable]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4.translation(80,-50,100).multiply(Matrix4.rotateX((float)-Math.PI / 6)).multiply(Matrix4.rotateY((float)Math.PI / 4))>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4.translation(80,-50,100).multiply(Matrix4.rotateX((float)-Math.PI / 6))>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4.translation(80,-50,100)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4>
<org.sunflow.math.Matrix4; rotateY[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4.rotateX((float)-Math.PI / 2)>
<org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4.translation(-80,-160,50).multiply(Matrix4.rotateY((float)Math.PI / 4))>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4.translation(-80,-160,50)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; rotateY[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4.rotateX((float)-Math.PI / 2)>
<org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; buildCornellBox[]; void; null; this>
<org.sunflow.SunflowAPI; geometry[java.lang.String, org.sunflow.core.PrimitiveList]; void; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; this>
<org.sunflow.SunflowAPI; parameter[java.lang.String, org.sunflow.math.Matrix4]; void; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; this>
<org.sunflow.math.Matrix4; multiply[org.sunflow.math.Matrix4]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; Matrix4.translation(x,y,z)>
<org.sunflow.math.Matrix4; translation[float, float, float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; multiply[org.sunflow.math.Matrix4]; Matrix4>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; Matrix4>
<org.sunflow.SunflowAPI; parameter[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; this>
<org.sunflow.SunflowAPI; instance[java.lang.String, java.lang.String]; void; org.sunflow.Benchmark.BenchmarkScene; sphere[java.lang.String, java.lang.String, float, float, float, float]; void; null; this>
<java.lang.Math; abs[int]; int; org.sunflow.Benchmark; kernelEnd[]; void; null; Math>
<java.lang.Math; abs[int]; int; org.sunflow.Benchmark; kernelEnd[]; void; null; Math>
<java.lang.Math; abs[int]; int; org.sunflow.Benchmark; kernelEnd[]; void; null; Math>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; kernelEnd[]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; kernelEnd[]; void; null; UI>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.Benchmark; kernelEnd[]; void; null; UI>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.Benchmark; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; System.out>
<org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; org.sunflow.Benchmark; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; UI>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.Benchmark; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; data[index].copy().toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.Benchmark; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; toRGB[]; data[index].copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.Benchmark; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; toNonLinear[]; data[index]>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; main[java.lang.String[]]; void; null; frame.getContentPane()>
<javax.swing.JFrame; getContentPane[]; java.awt.Container; org.sunflow.system.RenderGlobalsPanel; main[java.lang.String[]]; void; add[java.awt.Component]; frame>
<javax.swing.JFrame; setDefaultCloseOperation[int]; void; org.sunflow.system.RenderGlobalsPanel; main[java.lang.String[]]; void; null; frame>
<java.awt.Window; pack[]; void; org.sunflow.system.RenderGlobalsPanel; main[java.lang.String[]]; void; null; frame>
<java.awt.Window; setVisible[boolean]; void; org.sunflow.system.RenderGlobalsPanel; main[java.lang.String[]]; void; null; frame>
<org.sunflow.system.RenderGlobalsPanel; initialize[]; void; org.sunflow.system.RenderGlobalsPanel; RenderGlobalsPanel[]; void; null; this>
<org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; org.sunflow.system.RenderGlobalsPanel; RenderGlobalsPanel[]; void; null; this>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; this>
<java.awt.FlowLayout; setAlignment[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; generalPanelLayout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; generalPanel>
<javax.swing.JTabbedPane; addTab[java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; this>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; generalPanel>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String, int, int]; javax.swing.border.TitledBorder; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[int]; javax.swing.border.Border; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.AbstractButton; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionCheckBox>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.JLabel; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; jLabel1>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionXTextField>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionXTextField>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.JLabel; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; jLabel2>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionPanel>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionYTextField>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; resolutionYTextField>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; generalPanel>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadsPanel>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String, int, int]; javax.swing.border.TitledBorder; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[int]; javax.swing.border.Border; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadsPanel>
<javax.swing.AbstractButton; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadCheckBox>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadsPanel>
<javax.swing.JLabel; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; jLabel3>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadsPanel>
<javax.swing.text.JTextComponent; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadTextField>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; threadTextField>
<java.awt.FlowLayout; setAlignment[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; rendererPanelLayout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; rendererPanel>
<javax.swing.JTabbedPane; addTab[java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; this>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; rendererPanel>
<javax.swing.AbstractButton; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; defaultRendererRadioButton>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; bucketRendererPanel>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; rendererPanel>
<javax.swing.JComponent; setBorder[javax.swing.border.Border]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; bucketRendererPanel>
<javax.swing.BorderFactory; createTitledBorder[javax.swing.border.Border, java.lang.String, int, int]; javax.swing.border.TitledBorder; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<javax.swing.BorderFactory; createEtchedBorder[int]; javax.swing.border.Border; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; BorderFactory>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; bucketRendererPanel>
<javax.swing.AbstractButton; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; bucketRendererRadioButton>
<java.awt.GridLayout; setColumns[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanelLayout>
<java.awt.GridLayout; setHgap[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanelLayout>
<java.awt.GridLayout; setVgap[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanelLayout>
<java.awt.GridLayout; setRows[int]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanelLayout>
<java.awt.Container; setLayout[java.awt.LayoutManager]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanel>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; bucketRendererPanel>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanel>
<javax.swing.JLabel; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; jLabel5>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanel>
<javax.swing.JComboBox; setModel[javax.swing.ComboBoxModel]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; minSamplingComboBox>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanel>
<javax.swing.JLabel; setText[java.lang.String]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; jLabel6>
<java.awt.Container; add[java.awt.Component]; java.awt.Component; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; samplingPanel>
<javax.swing.JComboBox; setModel[javax.swing.ComboBoxModel]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; maxSamplingComboxBox>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.system.RenderGlobalsPanel; initGUI[]; void; null; e>
<org.sunflow.system.Memory; bytesToString[long]; java.lang.String; org.sunflow.system.Memory; sizeof[int[]]; java.lang.String; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Memory; bytesToString[long]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Memory; bytesToString[long]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Memory; bytesToString[long]; java.lang.String; null; String>
<java.lang.System; nanoTime[]; long; org.sunflow.system.Timer; start[]; void; null; System>
<java.lang.System; nanoTime[]; long; org.sunflow.system.Timer; end[]; void; null; System>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.system.Timer; toString[long]; java.lang.String; null; t>
<org.sunflow.system.Timer; toString[]; java.lang.String; org.sunflow.system.Timer; toString[double]; java.lang.String; null; t>
<org.sunflow.system.Timer; nanos[]; long; org.sunflow.system.Timer; toString[]; java.lang.String; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Timer; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Timer; toString[]; java.lang.String; null; String>
<java.lang.System; nanoTime[]; long; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; System>
<java.lang.System; nanoTime[]; long; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; System>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.BenchmarkTest; kernelBegin[]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; test>
<org.sunflow.system.Timer; start[]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; timers[i]>
<org.sunflow.system.BenchmarkTest; kernelMain[]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; test>
<org.sunflow.system.Timer; end[]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; timers[i]>
<org.sunflow.system.BenchmarkTest; kernelEnd[]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; test>
<org.sunflow.system.Timer; seconds[]; double; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; t>
<java.lang.Math; min[double, double]; double; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Math>
<java.lang.Math; max[double, double]; double; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Math>
<org.sunflow.system.Timer; seconds[]; double; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; t>
<java.lang.Math; sqrt[double]; double; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Math>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.Timer; toString[double]; java.lang.String; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.Timer; toString[double]; java.lang.String; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.Timer; toString[double]; java.lang.String; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Timer>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.system.Timer; toString[double]; java.lang.String; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Timer>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; UI>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.RED>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.GREEN>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.BLUE>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.YELLOW>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.CYAN>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.BenchmarkFramework; execute[org.sunflow.system.BenchmarkTest]; void; null; Color.MAGENTA>
<java.awt.event.MouseEvent; getX[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getY[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getButton[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getModifiersEx[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; e>
<org.sunflow.system.ImagePanel; fit[]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; this>
<org.sunflow.system.ImagePanel; reset[]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; this>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mousePressed[java.awt.event.MouseEvent]; void; null; this>
<java.awt.event.MouseEvent; getX[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseDragged[java.awt.event.MouseEvent]; void; null; e>
<java.awt.event.MouseEvent; getY[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseDragged[java.awt.event.MouseEvent]; void; null; e>
<org.sunflow.system.ImagePanel; drag[int, int]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseDragged[java.awt.event.MouseEvent]; void; null; this>
<org.sunflow.system.ImagePanel; zoom[int, int]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseDragged[java.awt.event.MouseEvent]; void; null; this>
<org.sunflow.system.ImagePanel$ScrollZoomListener; mouseDragged[java.awt.event.MouseEvent]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseReleased[java.awt.event.MouseEvent]; void; null; this>
<org.sunflow.system.ImagePanel; zoom[int, int]; void; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseWheelMoved[java.awt.event.MouseWheelEvent]; void; null; this>
<java.awt.event.MouseWheelEvent; getWheelRotation[]; int; org.sunflow.system.ImagePanel.ScrollZoomListener; mouseWheelMoved[java.awt.event.MouseWheelEvent]; void; null; e>
<javax.swing.JComponent; setPreferredSize[java.awt.Dimension]; void; org.sunflow.system.ImagePanel; ImagePanel[]; void; null; this>
<java.awt.Component; addMouseListener[java.awt.event.MouseListener]; void; org.sunflow.system.ImagePanel; ImagePanel[]; void; null; this>
<java.awt.Component; addMouseMotionListener[java.awt.event.MouseMotionListener]; void; org.sunflow.system.ImagePanel; ImagePanel[]; void; null; this>
<java.awt.Component; addMouseWheelListener[java.awt.event.MouseWheelListener]; void; org.sunflow.system.ImagePanel; ImagePanel[]; void; null; this>
<org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; org.sunflow.system.ImagePanel; save[java.lang.String]; void; null; Bitmap>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; drag[int, int]; void; null; this>
<java.lang.Math; max[int, int]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; Math>
<java.lang.Math; min[int, int]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; Math>
<java.lang.Math; abs[int]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; Math>
<java.lang.Math; abs[int]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; Math>
<javax.swing.JComponent; getWidth[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<javax.swing.JComponent; getHeight[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<javax.swing.JComponent; getWidth[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<javax.swing.JComponent; getHeight[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<javax.swing.JComponent; getWidth[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<javax.swing.JComponent; getHeight[]; int; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; zoom[int, int]; void; null; this>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.system.ImagePanel; reset[]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.system.ImagePanel; reset[]; void; null; image>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; reset[]; void; null; this>
<java.lang.Math; max[int, int]; int; org.sunflow.system.ImagePanel; fit[]; void; null; Math>
<javax.swing.JComponent; getWidth[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; this>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; image>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; image>
<java.lang.Math; max[int, int]; int; org.sunflow.system.ImagePanel; fit[]; void; null; Math>
<javax.swing.JComponent; getHeight[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; this>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.system.ImagePanel; fit[]; void; null; image>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; fit[]; void; null; this>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; image>
<java.awt.image.BufferedImage; getRGB[int, int]; int; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; image>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; image>
<java.lang.System; nanoTime[]; long; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; System>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; imageBegin[int, int, int]; void; null; this>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.system.ImagePanel; imagePrepare[int, int, int, int, int]; void; null; image>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.system.ImagePanel; imagePrepare[int, int, int, int, int]; void; null; image>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; imagePrepare[int, int, int, int, int]; void; null; this>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; image>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; data[index].copy().toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; toRGB[]; data[index].copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; toNonLinear[]; data[index]>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; imageUpdate[int, int, int, int, org.sunflow.image.Color[]]; void; null; this>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; c.copy().toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; toRGB[]; c.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; toNonLinear[]; c>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; image>
<org.sunflow.system.ImagePanel; fastRepaint[]; void; org.sunflow.system.ImagePanel; imageFill[int, int, int, int, org.sunflow.image.Color]; void; null; this>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; imageEnd[]; void; null; this>
<java.lang.System; nanoTime[]; long; org.sunflow.system.ImagePanel; fastRepaint[]; void; null; System>
<java.awt.Component; repaint[]; void; org.sunflow.system.ImagePanel; fastRepaint[]; void; null; this>
<java.lang.Math; round[float]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; Math>
<javax.swing.JComponent; getWidth[]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; this>
<java.lang.Math; round[float]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; Math>
<javax.swing.JComponent; getHeight[]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; this>
<java.lang.Math; round[float]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; Math>
<java.lang.Math; round[float]; int; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; Math>
<java.awt.Graphics; setColor[java.awt.Color]; void; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawLine[int, int, int, int]; void; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.awt.Graphics; drawImage[java.awt.Image, int, int, int, int, java.awt.image.ImageObserver]; boolean; org.sunflow.system.ImagePanel; paintComponent[java.awt.Graphics]; void; null; g>
<java.util.LinkedList; clear[]; void; org.sunflow.system.SearchPath; resetSearchPath[]; void; null; searchPath>
<java.io.File; exists[]; boolean; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; f>
<java.io.File; isDirectory[]; boolean; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; f>
<java.io.File; getCanonicalPath[]; java.lang.String; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; f>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; prefix>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; UI>
<java.util.LinkedList; add[java.lang.String]; boolean; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; searchPath>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; UI>
<java.lang.Throwable; getMessage[]; java.lang.String; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; e>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; UI>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; filename>
<java.lang.String; substring[int]; java.lang.String; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; filename>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; UI>
<java.io.File; isAbsolute[]; boolean; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; f>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; UI>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; prefix>
<java.lang.String; startsWith[java.lang.String]; boolean; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; filename>
<java.io.File; exists[]; boolean; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; f>
<java.io.File; getAbsolutePath[]; java.lang.String; org.sunflow.system.SearchPath; resolvePath[java.lang.String]; java.lang.String; null; f>
<java.io.InputStreamReader; close[]; void; org.sunflow.system.Parser; close[]; void; null; file>
<org.sunflow.system.Parser; fetchNextToken[]; java.lang.String; org.sunflow.system.Parser; getNextToken[]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; getNextToken[]; java.lang.String; null; tok>
<org.sunflow.system.Parser; fetchNextToken[]; java.lang.String; org.sunflow.system.Parser; getNextToken[]; java.lang.String; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; getNextToken[]; java.lang.String; null; tok>
<org.sunflow.system.Parser; fetchNextToken[]; java.lang.String; org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; null; t>
<org.sunflow.system.Parser; fetchNextToken[]; java.lang.String; org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; null; t>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; peekNextToken[java.lang.String]; boolean; null; t>
<org.sunflow.system.Parser; getNextLine[]; boolean; org.sunflow.system.Parser; fetchNextToken[]; java.lang.String; null; this>
<java.io.BufferedReader; readLine[]; java.lang.String; org.sunflow.system.Parser; getNextLine[]; boolean; null; bf>
<java.lang.String; length[]; int; org.sunflow.system.Parser; getNextLine[]; boolean; null; line>
<java.lang.String; charAt[int]; char; org.sunflow.system.Parser; getNextLine[]; boolean; null; line>
<java.lang.String; length[]; int; org.sunflow.system.Parser; getNextLine[]; boolean; null; current>
<java.lang.Character; isWhitespace[char]; boolean; org.sunflow.system.Parser; getNextLine[]; boolean; null; Character>
<java.lang.String; length[]; int; org.sunflow.system.Parser; getNextLine[]; boolean; null; current>
<java.util.ArrayList; add[java.lang.String]; boolean; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<java.lang.String; length[]; int; org.sunflow.system.Parser; getNextLine[]; boolean; null; current>
<java.util.ArrayList; add[java.lang.String]; boolean; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<java.util.ArrayList; toArray[java.lang.String[]]; java.lang.String[]; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; null; this>
<java.io.BufferedReader; readLine[]; java.lang.String; org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; null; bf>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; null; e>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; null; line.trim()>
<java.lang.String; trim[]; java.lang.String; org.sunflow.system.Parser; getNextCodeBlock[]; java.lang.String; equals[java.lang.Object]; line>
<java.lang.Boolean; booleanValue[]; boolean; org.sunflow.system.Parser; getNextBoolean[]; boolean; null; Boolean.valueOf(getNextToken())>
<java.lang.Boolean; valueOf[java.lang.String]; java.lang.Boolean; org.sunflow.system.Parser; getNextBoolean[]; boolean; booleanValue[]; Boolean>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.system.Parser; getNextBoolean[]; boolean; null; this>
<java.lang.Integer; parseInt[java.lang.String]; int; org.sunflow.system.Parser; getNextInt[]; int; null; Integer>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.system.Parser; getNextInt[]; int; null; this>
<java.lang.Float; parseFloat[java.lang.String]; float; org.sunflow.system.Parser; getNextFloat[]; float; null; Float>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.system.Parser; getNextFloat[]; float; null; this>
<org.sunflow.system.Parser; getNextToken[]; java.lang.String; org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; null; this>
<java.lang.String; equals[java.lang.Object]; boolean; org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; null; token>
<org.sunflow.system.Parser; close[]; void; org.sunflow.system.Parser; checkNextToken[java.lang.String]; void; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.Parser.ParserException; ParserException[java.lang.String, java.lang.String]; void; null; String>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.system.ui.ConsoleInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; System.err>
<org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; org.sunflow.system.ui.ConsoleInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; null; UI>
<java.io.PrintStream; print[java.lang.String]; void; org.sunflow.system.ui.ConsoleInterface; taskUpdate[int]; void; null; System.err>
<java.io.PrintStream; print[java.lang.String]; void; org.sunflow.system.ui.ConsoleInterface; taskStop[]; void; null; System.err>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; null; String>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; null; m>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; null; level.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.system.UI; formatOutput[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; java.lang.String; toLowerCase[]; level>
<org.sunflow.system.UserInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; ui>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; String>
<org.sunflow.system.UserInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; ui>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; String>
<org.sunflow.system.UserInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; ui>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; String>
<org.sunflow.system.UserInterface; print[org.sunflow.system.UI.Module, org.sunflow.system.UI.PrintLevel, java.lang.String]; void; org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; ui>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; null; String>
<org.sunflow.system.UserInterface; taskStart[java.lang.String, int, int]; void; org.sunflow.system.UI; taskStart[java.lang.String, int, int]; void; null; ui>
<org.sunflow.system.UserInterface; taskUpdate[int]; void; org.sunflow.system.UI; taskUpdate[int]; void; null; ui>
<org.sunflow.system.UserInterface; taskStop[]; void; org.sunflow.system.UI; taskStop[]; void; null; ui>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.UI; taskCancel[]; void; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.system.UI; taskCanceled[]; boolean; null; this>
<org.sunflow.system.ByteUtil; toInt[byte, byte, byte, byte]; int; org.sunflow.system.ByteUtil; toLong[byte[]]; long; null; this>
<org.sunflow.system.ByteUtil; toInt[byte, byte, byte, byte]; int; org.sunflow.system.ByteUtil; toLong[byte[]]; long; null; this>
<org.sunflow.system.ByteUtil; toInt[byte, byte, byte, byte]; int; org.sunflow.system.ByteUtil; toInt[byte[]]; int; null; this>
<org.sunflow.system.ByteUtil; toInt[byte, byte, byte, byte]; int; org.sunflow.system.ByteUtil; toInt[byte[], int]; int; null; this>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.system.ByteUtil; floatToHalf[float]; int; null; Float>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float]; float; null; Math>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float]; float; org.sunflow.math.PerlinScalar; snoise[float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float]; float; org.sunflow.math.PerlinScalar; snoise[float]; float; null; this>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; Math>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float]; float; null; this>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; Math>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; null; this>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; Math>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; fade[float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; lerp[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; grad[int, float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; snoise[org.sunflow.math.Point2]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[org.sunflow.math.Point3]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; snoise[org.sunflow.math.Point3, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinScalar; noise[float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; noise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; noise[float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; noise[org.sunflow.math.Point2]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; noise[org.sunflow.math.Point3]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; noise[org.sunflow.math.Point3, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[org.sunflow.math.Point2, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[org.sunflow.math.Point3, org.sunflow.math.Vector3]; float; null; this>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinScalar; pnoise[org.sunflow.math.Point3, float, org.sunflow.math.Vector3, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[org.sunflow.math.Point2, float, float]; float; null; this>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[org.sunflow.math.Point3, org.sunflow.math.Vector3]; float; null; this>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinScalar; spnoise[org.sunflow.math.Point3, float, org.sunflow.math.Vector3, float]; float; null; this>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.math.Point2; toString[]; java.lang.String; null; String>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Point3; distanceTo[org.sunflow.math.Point3]; float; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Point3; distanceTo[float, float, float]; float; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.math.Point3; toString[]; java.lang.String; null; String>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; flipU[]; void; null; u>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; flipV[]; void; null; v>
<org.sunflow.math.Vector3; negate[]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; flipW[]; void; null; w>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; a>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Vector3>
<org.sunflow.math.Vector3; set[float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; untransform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; a>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransformX[org.sunflow.math.Vector3]; float; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransformY[org.sunflow.math.Vector3]; float; null; Vector3>
<org.sunflow.math.Vector3; dot[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; float; org.sunflow.math.OrthoNormalBasis; untransformZ[org.sunflow.math.Vector3]; float; null; Vector3>
<org.sunflow.math.Vector3; normalize[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; w>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Math>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Vector3>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromW[org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; onb.v>
<org.sunflow.math.Vector3; normalize[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; w>
<org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Vector3.cross(v,onb.w,onb.u)>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; normalize[]; Vector3>
<org.sunflow.math.Vector3; cross[org.sunflow.math.Vector3, org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.OrthoNormalBasis; makeFromWV[org.sunflow.math.Vector3, org.sunflow.math.Vector3]; org.sunflow.math.OrthoNormalBasis; null; Vector3>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinVector; snoise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinVector; snoise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float]; float; org.sunflow.math.PerlinVector; snoise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; snoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; snoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinVector; snoise[float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; snoise[org.sunflow.math.Point2]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; snoise[float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; snoise[org.sunflow.math.Point3]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; snoise[float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; snoise[org.sunflow.math.Point3, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinScalar; noise[float]; float; org.sunflow.math.PerlinVector; noise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float]; float; org.sunflow.math.PerlinVector; noise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float]; float; org.sunflow.math.PerlinVector; noise[float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinVector; noise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinVector; noise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float]; float; org.sunflow.math.PerlinVector; noise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; noise[float, float, float, float]; float; org.sunflow.math.PerlinVector; noise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinVector; noise[float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; noise[org.sunflow.math.Point2]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; noise[float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; noise[org.sunflow.math.Point3]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; noise[float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; noise[org.sunflow.math.Point3, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinScalar; pnoise[float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; pnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinVector; pnoise[float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; pnoise[org.sunflow.math.Point2, float, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; pnoise[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; pnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; pnoise[org.sunflow.math.Point3, float, org.sunflow.math.Vector3, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinScalar; spnoise[float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinScalar; spnoise[float, float, float, float, float, float, float, float]; float; org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; null; PerlinScalar>
<org.sunflow.math.PerlinVector; spnoise[float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; spnoise[org.sunflow.math.Point2, float, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; spnoise[org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.PerlinVector; spnoise[float, float, float, float, float, float, float, float]; org.sunflow.math.Vector3; org.sunflow.math.PerlinVector; spnoise[org.sunflow.math.Point3, float, org.sunflow.math.Vector3, float]; org.sunflow.math.Vector3; null; this>
<org.sunflow.math.Point3; mid[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.math.BoundingBox; getCenter[]; org.sunflow.math.Point3; null; Point3>
<org.sunflow.math.Point3; sub[org.sunflow.math.Point3, org.sunflow.math.Point3, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; null; Point3>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.math.BoundingBox; getArea[]; float; null; this>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getArea[]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getArea[]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getArea[]; float; null; Math>
<org.sunflow.math.BoundingBox; getExtents[]; org.sunflow.math.Vector3; org.sunflow.math.BoundingBox; getVolume[]; float; null; this>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getVolume[]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getVolume[]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; getVolume[]; float; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; max[float, float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.Math; ulp[float]; float; org.sunflow.math.BoundingBox; enlargeUlps[]; void; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.math.BoundingBox; toString[]; java.lang.String; null; String>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuadric[double, double, double]; double[]; null; Math>
<org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; this>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveQuartic[double, double, double, double, double]; double[]; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; acos[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<java.lang.Math; abs[double]; double; org.sunflow.math.Solvers; solveCubicForQuartic[double, double, double]; double; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.math.MathUtils; smoothStep[float, float, float]; float; null; this>
<java.lang.Float; floatToRawIntBits[float]; int; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Float>
<java.lang.Math; floor[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<java.lang.Math; floor[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<java.lang.Float; intBitsToFloat[int]; float; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Float>
<java.lang.Math; cos[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.math.MathUtils; fastPow[float, float]; float; null; Math>
<org.sunflow.math.Vector3; decode[short, org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.Vector3; decode[short]; org.sunflow.math.Vector3; null; this>
<java.lang.Math; acos[double]; double; org.sunflow.math.Vector3; encode[]; short; null; Math>
<java.lang.Math; atan2[double, double]; double; org.sunflow.math.Vector3; encode[]; short; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Vector3; length[]; float; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Vector3; normalizeLength[]; float; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Vector3; normalize[]; org.sunflow.math.Vector3; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Vector3; normalize[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.math.Vector3; toString[]; java.lang.String; null; String>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.math.Vector3; toString[]; java.lang.String; null; UI>
<org.sunflow.math.QMC; nextPrime[int]; int; org.sunflow.math.Vector3; toString[]; java.lang.String; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; org.sunflow.math.Vector3; toString[]; java.lang.String; null; System>
<org.sunflow.math.Matrix4; scale[float]; org.sunflow.math.Matrix4; org.sunflow.math.QMC; generateSigmaTable[int]; int[]; null; Matrix4>
<java.lang.Math; abs[float]; float; org.sunflow.math.Matrix4; inverse[]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.math.BoundingBox; isEmpty[]; boolean; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; b>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; this>
<org.sunflow.math.BoundingBox; getMinimum[]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; b>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; rb>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; this>
<org.sunflow.math.BoundingBox; getMaximum[]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; b>
<org.sunflow.math.BoundingBox; include[org.sunflow.math.Point3]; void; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; rb>
<org.sunflow.math.Matrix4; transformP[org.sunflow.math.Point3]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; this>
<org.sunflow.math.BoundingBox; getCorner[int]; org.sunflow.math.Point3; org.sunflow.math.Matrix4; transform[org.sunflow.math.BoundingBox]; org.sunflow.math.BoundingBox; null; b>
<java.lang.Math; sin[double]; double; org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.Matrix4; rotateX[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.math.Matrix4; rotateY[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.Matrix4; rotateY[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.math.Matrix4; rotateZ[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.Matrix4; rotateZ[float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; sqrt[double]; double; org.sunflow.math.Matrix4; rotate[float, float, float, float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; sin[double]; double; org.sunflow.math.Matrix4; rotate[float, float, float, float]; org.sunflow.math.Matrix4; null; Math>
<java.lang.Math; cos[double]; double; org.sunflow.math.Matrix4; rotate[float, float, float, float]; org.sunflow.math.Matrix4; null; Math>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.Matrix4; fromBasis[org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Matrix4; null; basis>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.Matrix4; fromBasis[org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Matrix4; null; basis>
<org.sunflow.math.OrthoNormalBasis; transform[org.sunflow.math.Vector3]; org.sunflow.math.Vector3; org.sunflow.math.Matrix4; fromBasis[org.sunflow.math.OrthoNormalBasis]; org.sunflow.math.Matrix4; null; basis>
<org.sunflow.util.FastHashMap; clear[]; void; org.sunflow.util.FastHashMap; FastHashMap[]; void; null; this>
<org.sunflow.util.FastHashMap; alloc[int]; org.sunflow.util.FastHashMap.Entry<K,V>[]; org.sunflow.util.FastHashMap; clear[]; void; null; this>
<java.lang.Object; hashCode[]; int; org.sunflow.util.FastHashMap; put[K, V]; V; null; k>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap; put[K, V]; V; null; entries[hash]>
<java.lang.Object; equals[java.lang.Object]; boolean; org.sunflow.util.FastHashMap; put[K, V]; V; null; entries[hash].k>
<org.sunflow.util.FastHashMap; resize[int]; void; org.sunflow.util.FastHashMap; put[K, V]; V; null; this>
<java.lang.Object; hashCode[]; int; org.sunflow.util.FastHashMap; get[K]; V; null; k>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap; get[K]; V; null; entries[hash]>
<java.lang.Object; equals[java.lang.Object]; boolean; org.sunflow.util.FastHashMap; get[K]; V; null; entries[hash].k>
<java.lang.Object; hashCode[]; int; org.sunflow.util.FastHashMap; containsKey[K]; boolean; null; k>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap; containsKey[K]; boolean; null; entries[hash]>
<java.lang.Object; equals[java.lang.Object]; boolean; org.sunflow.util.FastHashMap; containsKey[K]; boolean; null; entries[hash].k>
<java.lang.Object; hashCode[]; int; org.sunflow.util.FastHashMap; remove[K]; void; null; k>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap; remove[K]; void; null; entries[hash]>
<java.lang.Object; equals[java.lang.Object]; boolean; org.sunflow.util.FastHashMap; remove[K]; void; null; entries[hash].k>
<org.sunflow.util.FastHashMap$Entry; remove[]; void; org.sunflow.util.FastHashMap; remove[K]; void; null; entries[hash]>
<org.sunflow.util.FastHashMap; resize[int]; void; org.sunflow.util.FastHashMap; remove[K]; void; null; this>
<org.sunflow.util.FastHashMap; alloc[int]; org.sunflow.util.FastHashMap.Entry<K,V>[]; org.sunflow.util.FastHashMap; resize[int]; void; null; this>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap; resize[int]; void; null; e>
<java.lang.Object; hashCode[]; int; org.sunflow.util.FastHashMap; resize[int]; void; null; e.k>
<java.lang.Object; equals[java.lang.Object]; boolean; org.sunflow.util.FastHashMap; resize[int]; void; null; newentries[hash].k>
<org.sunflow.util.FastHashMap$EntryIterator; readable[]; boolean; org.sunflow.util.FastHashMap.EntryIterator; EntryIterator[]; void; null; this>
<org.sunflow.util.FastHashMap$EntryIterator; inc[]; void; org.sunflow.util.FastHashMap.EntryIterator; EntryIterator[]; void; null; this>
<org.sunflow.util.FastHashMap$Entry; isRemoved[]; boolean; org.sunflow.util.FastHashMap.EntryIterator; readable[]; boolean; null; entries[index]>
<org.sunflow.util.FastHashMap$EntryIterator; hasNext[]; boolean; org.sunflow.util.FastHashMap.EntryIterator; inc[]; void; null; this>
<org.sunflow.util.FastHashMap$EntryIterator; readable[]; boolean; org.sunflow.util.FastHashMap.EntryIterator; inc[]; void; null; this>
<org.sunflow.util.FastHashMap$EntryIterator; inc[]; void; org.sunflow.util.FastHashMap.EntryIterator; next[]; org.sunflow.util.FastHashMap.Entry<K,V>; null; this>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; org.sunflow.util.FloatArray; add[float]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; org.sunflow.util.FloatArray; trim[]; float[]; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; org.sunflow.util.IntArray; add[int]; void; null; System>
<java.lang.System; arraycopy[java.lang.Object, int, java.lang.Object, int, int]; void; org.sunflow.util.IntArray; trim[]; int[]; null; System>
<org.sunflow.util.FastHashMap; containsKey[java.lang.String]; boolean; org.sunflow.RenderObjectMap; has[java.lang.String]; boolean; null; renderObjects>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; renderObjects>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; UI>
<org.sunflow.util.FastHashMap; remove[java.lang.String]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getShader[]; org.sunflow.core.Shader; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; obj>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; getInstance[]; e>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; UI>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e>
<org.sunflow.core.Instance; removeShader[org.sunflow.core.Shader]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; i>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getModifier[]; org.sunflow.core.Modifier; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; obj>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; getInstance[]; e>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; UI>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e>
<org.sunflow.core.Instance; removeModifier[org.sunflow.core.Modifier]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; i>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getGeometry[]; org.sunflow.core.Geometry; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; obj>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; getInstance[]; e>
<org.sunflow.core.Instance; hasGeometry[org.sunflow.core.Geometry]; boolean; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; i>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; UI>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e>
<org.sunflow.RenderObjectMap; remove[java.lang.String]; void; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; this>
<org.sunflow.util.FastHashMap$Entry; getKey[]; java.lang.String; org.sunflow.RenderObjectMap; remove[java.lang.String]; void; null; e>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; renderObjects>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.system.UI; printDetailed[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.RenderObjectMap$RenderObjectHandle; typeName[]; java.lang.String; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; obj>
<org.sunflow.RenderObjectMap$RenderObjectHandle; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; obj>
<org.sunflow.system.UI; printError[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; UI>
<org.sunflow.RenderObjectMap; remove[java.lang.String]; void; org.sunflow.RenderObjectMap; update[java.lang.String, org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; this>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; UI>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; getInstance[]; e>
<org.sunflow.core.Instance; updateBounds[]; void; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; i>
<org.sunflow.core.Instance; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; i>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; getInstance[]; e>
<org.sunflow.core.Instance; getBounds[]; org.sunflow.math.BoundingBox; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; i>
<org.sunflow.core.Scene; setInstanceLists[org.sunflow.core.Instance[], org.sunflow.core.Instance[]]; void; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; scene>
<org.sunflow.system.UI; printInfo[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; UI>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getLight[]; org.sunflow.core.LightSource; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; e.getValue()>
<org.sunflow.util.FastHashMap$Entry; getValue[]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; getLight[]; e>
<java.util.ArrayList; add[org.sunflow.core.LightSource]; boolean; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>
<org.sunflow.core.Scene; setLightList[org.sunflow.core.LightSource[]]; void; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; scene>
<java.util.ArrayList; toArray[org.sunflow.core.LightSource[]]; org.sunflow.core.LightSource[]; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>
<java.util.ArrayList; size[]; int; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Shader]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Modifier]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.PrimitiveList]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Tesselatable]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Instance]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.LightSource]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Camera]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; put[java.lang.String, org.sunflow.RenderObjectMap.RenderObjectHandle]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; put[java.lang.String, org.sunflow.core.Options]; void; null; renderObjects>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getGeometry[]; org.sunflow.core.Geometry; org.sunflow.RenderObjectMap; lookupGeometry[java.lang.String]; org.sunflow.core.Geometry; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupInstance[java.lang.String]; org.sunflow.core.Instance; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getInstance[]; org.sunflow.core.Instance; org.sunflow.RenderObjectMap; lookupInstance[java.lang.String]; org.sunflow.core.Instance; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupCamera[java.lang.String]; org.sunflow.core.Camera; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getCamera[]; org.sunflow.core.Camera; org.sunflow.RenderObjectMap; lookupCamera[java.lang.String]; org.sunflow.core.Camera; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupOptions[java.lang.String]; org.sunflow.core.Options; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getOptions[]; org.sunflow.core.Options; org.sunflow.RenderObjectMap; lookupOptions[java.lang.String]; org.sunflow.core.Options; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupShader[java.lang.String]; org.sunflow.core.Shader; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getShader[]; org.sunflow.core.Shader; org.sunflow.RenderObjectMap; lookupShader[java.lang.String]; org.sunflow.core.Shader; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getModifier[]; org.sunflow.core.Modifier; org.sunflow.RenderObjectMap; lookupModifier[java.lang.String]; org.sunflow.core.Modifier; null; handle>
<org.sunflow.util.FastHashMap; get[java.lang.String]; org.sunflow.RenderObjectMap.RenderObjectHandle; org.sunflow.RenderObjectMap; lookupLight[java.lang.String]; org.sunflow.core.LightSource; null; renderObjects>
<org.sunflow.RenderObjectMap$RenderObjectHandle; getLight[]; org.sunflow.core.LightSource; org.sunflow.RenderObjectMap; lookupLight[java.lang.String]; org.sunflow.core.LightSource; null; handle>
<org.sunflow.core.RenderObject; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; org.sunflow.RenderObjectMap.RenderObjectHandle; update[org.sunflow.core.ParameterList, org.sunflow.SunflowAPI]; boolean; null; obj>
<java.lang.String; toLowerCase[]; java.lang.String; org.sunflow.RenderObjectMap.RenderObjectHandle; typeName[]; java.lang.String; null; type.name()>
<java.lang.Enum; name[]; java.lang.String; org.sunflow.RenderObjectMap.RenderObjectHandle; typeName[]; java.lang.String; toLowerCase[]; type>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.SpectralCurve; sample[float]; float; null; String>
<org.sunflow.image.SpectralCurve; sample[float]; float; org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; null; this>
<org.sunflow.image.XYZColor; mul[float]; org.sunflow.image.XYZColor; org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; null; new XYZColor(X,Y,Z)>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.BlackbodySpectrum; sample[float]; float; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.image.BlackbodySpectrum; sample[float]; float; null; Math>
<org.sunflow.image.RGBSpace; gammaCorrect[float]; float; org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.image.RGBSpace; gammaCorrect[float]; float; org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.image.RGBSpace; gammaCorrect[float]; float; org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.image.RGBSpace; ungammaCorrect[float]; float; org.sunflow.image.Color; toLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.image.RGBSpace; ungammaCorrect[float]; float; org.sunflow.image.Color; toLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.image.RGBSpace; ungammaCorrect[float]; float; org.sunflow.image.Color; toLinear[]; org.sunflow.image.Color; null; RGBSpace.SRGB>
<org.sunflow.math.MathUtils; min[float, float, float]; float; org.sunflow.image.Color; getMin[]; float; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.image.Color; getMax[]; float; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.image.Color; toRGB[]; int; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.image.Color; toRGB[]; int; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.image.Color; toRGB[]; int; null; MathUtils>
<org.sunflow.math.MathUtils; max[float, float, float]; float; org.sunflow.image.Color; toRGBE[]; int; null; MathUtils>
<org.sunflow.math.MathUtils; min[float, float, float, float]; float; org.sunflow.image.Color; constrainRGB[]; org.sunflow.image.Color; null; MathUtils>
<java.lang.Float; isNaN[float]; boolean; org.sunflow.image.Color; isNan[]; boolean; null; Float>
<java.lang.Float; isNaN[float]; boolean; org.sunflow.image.Color; isNan[]; boolean; null; Float>
<java.lang.Float; isNaN[float]; boolean; org.sunflow.image.Color; isNan[]; boolean; null; Float>
<java.lang.Float; isInfinite[float]; boolean; org.sunflow.image.Color; isInf[]; boolean; null; Float>
<java.lang.Float; isInfinite[float]; boolean; org.sunflow.image.Color; isInf[]; boolean; null; Float>
<java.lang.Float; isInfinite[float]; boolean; org.sunflow.image.Color; isInf[]; boolean; null; Float>
<org.sunflow.image.Color; add[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; add[org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; sub[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; sub[org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; mul[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; mul[org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; mul[float, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; mul[float, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<org.sunflow.image.Color; div[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; div[org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; Color>
<java.lang.Math; exp[double]; double; org.sunflow.image.Color; exp[]; org.sunflow.image.Color; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.image.Color; exp[]; org.sunflow.image.Color; null; Math>
<java.lang.Math; exp[double]; double; org.sunflow.image.Color; exp[]; org.sunflow.image.Color; null; Math>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.image.Color; clamp[float, float]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.image.Color; clamp[float, float]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.math.MathUtils; clamp[float, float, float]; float; org.sunflow.image.Color; clamp[float, float]; org.sunflow.image.Color; null; MathUtils>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, float]; org.sunflow.image.Color; null; this>
<org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; org.sunflow.image.Color; blend[org.sunflow.image.Color, org.sunflow.image.Color, org.sunflow.image.Color]; org.sunflow.image.Color; null; this>
<java.lang.Math; abs[float]; float; org.sunflow.image.Color; hasContrast[org.sunflow.image.Color, org.sunflow.image.Color, float]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.image.Color; hasContrast[org.sunflow.image.Color, org.sunflow.image.Color, float]; boolean; null; Math>
<java.lang.Math; abs[float]; float; org.sunflow.image.Color; hasContrast[org.sunflow.image.Color, org.sunflow.image.Color, float]; boolean; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.Color; toString[]; java.lang.String; null; String>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; filename>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; this>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; this>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; System.out>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; System.out>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; System.out>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; filename>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; skip[long]; long; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<java.io.FileInputStream; read[byte[], int, int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<org.sunflow.image.RGBSpace; rgbToLinear[int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; RGBSpace.SRGB>
<java.io.FileInputStream; read[byte[], int, int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<org.sunflow.image.RGBSpace; rgbToLinear[int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; RGBSpace.SRGB>
<java.io.FileInputStream; read[byte[], int, int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<org.sunflow.image.RGBSpace; rgbToLinear[int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; RGBSpace.SRGB>
<org.sunflow.system.UI; printWarning[org.sunflow.system.UI.Module, java.lang.String, java.lang.Object[]]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; UI>
<java.io.FileInputStream; close[]; void; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; f>
<javax.imageio.ImageIO; read[java.io.File]; java.awt.image.BufferedImage; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; ImageIO>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; bi>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; bi>
<java.awt.image.BufferedImage; getRGB[int, int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; bi>
<org.sunflow.image.RGBSpace; rgbToLinear[int]; int; org.sunflow.image.Bitmap; Bitmap[java.lang.String, boolean]; void; null; RGBSpace.SRGB>
<java.awt.image.BufferedImage; getWidth[]; int; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; image>
<java.awt.image.BufferedImage; getHeight[]; int; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; image>
<java.awt.image.BufferedImage; getRGB[int, int]; int; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; image>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; filename>
<org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; b>
<org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.awt.image.BufferedImage, java.lang.String]; void; null; b>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; null; f>
<java.io.FileInputStream; read[]; int; org.sunflow.image.Bitmap; readFlatRGBE[java.io.FileInputStream, int, int]; void; null; f>
<org.sunflow.image.Color; toRGBE[]; int; org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; null; c>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; null; c.copy().toNonLinear()>
<org.sunflow.image.Color; toNonLinear[]; org.sunflow.image.Color; org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; toRGB[]; c.copy()>
<org.sunflow.image.Color; copy[]; org.sunflow.image.Color; org.sunflow.image.Bitmap; setPixel[int, int, org.sunflow.image.Color]; void; toNonLinear[]; c>
<org.sunflow.image.Color; setRGBE[int]; org.sunflow.image.Color; org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; null; new Color()>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; filename>
<org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; this>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; filename>
<org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; this>
<java.lang.String; endsWith[java.lang.String]; boolean; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; filename>
<org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; this>
<org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; org.sunflow.image.Bitmap; save[java.lang.String]; void; null; this>
<java.awt.image.BufferedImage; setRGB[int, int, int]; void; org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; null; bi>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; null; getPixel(x,y)>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; toRGB[]; this>
<javax.imageio.ImageIO; write[java.awt.image.RenderedImage, java.lang.String, java.io.File]; boolean; org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; null; ImageIO>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.image.Bitmap; savePNG[java.lang.String]; void; null; e>
<java.io.FileOutputStream; write[byte[]]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.lang.String; getBytes[]; byte[]; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; "#?RGBE\n">
<java.io.FileOutputStream; write[byte[]]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.lang.String; getBytes[]; byte[]; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; "FORMAT=32-bit_rle_rgbe\n\n">
<java.io.FileOutputStream; write[byte[]]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.lang.String; getBytes[]; byte[]; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; ("-Y " + height + " +X "+ width+ "\n")>
<org.sunflow.image.Color; toRGBE[]; int; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; new Color(pixels[(y * width) + x])>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.io.FileOutputStream; close[]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; f>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; e>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.image.Bitmap; saveHDR[java.lang.String]; void; null; e>
<java.io.FileOutputStream; write[byte[]]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<org.sunflow.image.Color; toRGB[]; int; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; getPixel(x,y)>
<org.sunflow.image.Bitmap; getPixel[int, int]; org.sunflow.image.Color; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; toRGB[]; this>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; write[int]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.io.FileOutputStream; close[]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; f>
<java.lang.Throwable; printStackTrace[]; void; org.sunflow.image.Bitmap; saveTGA[java.lang.String]; void; null; e>
<java.lang.Math; min[int, int]; int; org.sunflow.image.RegularSpectralCurve; sample[float]; float; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.XYZColor; toString[]; java.lang.String; null; String>
<org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; org.sunflow.image.XYZColor; toString[]; java.lang.String; null; kS0Spectrum>
<org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; org.sunflow.image.XYZColor; toString[]; java.lang.String; null; kS1Spectrum>
<org.sunflow.image.SpectralCurve; toXYZ[]; org.sunflow.image.XYZColor; org.sunflow.image.XYZColor; toString[]; java.lang.String; null; kS2Spectrum>
<org.sunflow.image.RegularSpectralCurve; sample[float]; float; org.sunflow.image.ChromaticitySpectrum; sample[float]; float; null; kS0Spectrum>
<org.sunflow.image.RegularSpectralCurve; sample[float]; float; org.sunflow.image.ChromaticitySpectrum; sample[float]; float; null; kS1Spectrum>
<org.sunflow.image.RegularSpectralCurve; sample[float]; float; org.sunflow.image.ChromaticitySpectrum; sample[float]; float; null; kS2Spectrum>
<org.sunflow.image.XYZColor; getX[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S0xyz>
<org.sunflow.image.XYZColor; getX[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S1xyz>
<org.sunflow.image.XYZColor; getX[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S2xyz>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S0xyz>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S1xyz>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S2xyz>
<org.sunflow.image.XYZColor; getZ[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S0xyz>
<org.sunflow.image.XYZColor; getZ[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S1xyz>
<org.sunflow.image.XYZColor; getZ[]; float; org.sunflow.image.ChromaticitySpectrum; get[float, float]; org.sunflow.image.XYZColor; null; S2xyz>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; Math>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; MathUtils>
<org.sunflow.image.RGBSpace; gammaCorrect[float]; float; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; this>
<org.sunflow.math.MathUtils; clamp[int, int, int]; int; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; MathUtils>
<org.sunflow.image.RGBSpace; ungammaCorrect[float]; float; org.sunflow.image.RGBSpace; RGBSpace[float, float, float, float, float, float, float, float, float, float]; void; null; this>
<org.sunflow.image.RGBSpace; convertXYZtoRGB[float, float, float]; org.sunflow.image.Color; org.sunflow.image.RGBSpace; convertXYZtoRGB[org.sunflow.image.XYZColor]; org.sunflow.image.Color; null; this>
<org.sunflow.image.XYZColor; getX[]; float; org.sunflow.image.RGBSpace; convertXYZtoRGB[org.sunflow.image.XYZColor]; org.sunflow.image.Color; null; c>
<org.sunflow.image.XYZColor; getY[]; float; org.sunflow.image.RGBSpace; convertXYZtoRGB[org.sunflow.image.XYZColor]; org.sunflow.image.Color; null; c>
<org.sunflow.image.XYZColor; getZ[]; float; org.sunflow.image.RGBSpace; convertXYZtoRGB[org.sunflow.image.XYZColor]; org.sunflow.image.Color; null; c>
<org.sunflow.image.Color; getRGB[]; float[]; org.sunflow.image.RGBSpace; convertRGBtoXYZ[org.sunflow.image.Color]; org.sunflow.image.XYZColor; null; c>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.RGBSpace; gammaCorrect[float]; float; null; Math>
<java.lang.Math; pow[double, double]; double; org.sunflow.image.RGBSpace; ungammaCorrect[float]; float; null; Math>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.RGBSpace; toString[]; java.lang.String; null; String>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; System.out>
<org.sunflow.image.RGBSpace; toString[]; java.lang.String; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; SRGB>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; System.out>
<org.sunflow.image.RGBSpace; toString[]; java.lang.String; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; HDTV>
<java.io.PrintStream; println[java.lang.String]; void; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; System.out>
<org.sunflow.image.RGBSpace; toString[]; java.lang.String; org.sunflow.image.RGBSpace; main[java.lang.String[]]; void; null; WIDE_GAMUT>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.IrregularSpectralCurve; IrregularSpectralCurve[float[], float[]]; void; null; String>
<java.lang.String; format[java.lang.String, java.lang.Object[]]; java.lang.String; org.sunflow.image.IrregularSpectralCurve; IrregularSpectralCurve[float[], float[]]; void; null; String>


Calls That Belongs To JCF (29)

<java.util.List; size[]; int; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; files>
<java.util.List; get[int]; java.lang.Object; SunflowGUI.SceneTransferHandler; importData[javax.swing.JComponent, java.awt.datatransfer.Transferable]; boolean; null; files>
<java.util.HashMap; containsKey[java.lang.Object]; boolean; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<java.util.HashMap; get[java.lang.Object]; org.sunflow.core.Texture; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<java.util.HashMap; put[java.lang.String, org.sunflow.core.Texture]; org.sunflow.core.Texture; org.sunflow.core.TextureCache; getTexture[java.lang.String, boolean]; org.sunflow.core.Texture; null; textures>
<java.util.HashMap; clear[]; void; org.sunflow.core.TextureCache; flush[]; void; null; textures>
<java.util.concurrent.PriorityBlockingQueue; add[org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket]; boolean; org.sunflow.core.renderer.ProgressiveRenderer; render[org.sunflow.core.Display]; void; null; smallBucketQueue>
<java.util.concurrent.PriorityBlockingQueue; poll[]; org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<java.util.AbstractCollection; isEmpty[]; boolean; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<java.util.concurrent.PriorityBlockingQueue; put[org.sunflow.core.renderer.ProgressiveRenderer.SmallBucket]; void; org.sunflow.core.renderer.ProgressiveRenderer; progressiveRenderNext[org.sunflow.core.IntersectionState]; int; null; smallBucketQueue>
<java.util.ArrayList; toArray[org.sunflow.core.gi.InstantGI.PointLight[]]; org.sunflow.core.gi.InstantGI.PointLight[]; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; map.virtualLights>
<java.util.ArrayList; size[]; int; org.sunflow.core.gi.InstantGI; init[org.sunflow.core.Scene]; boolean; null; map.virtualLights>
<java.util.ArrayList; add[org.sunflow.core.gi.InstantGI.PointLight]; boolean; org.sunflow.core.gi.InstantGI.PointLightStore; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; virtualLights>
<java.util.ArrayList; add[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.CausticPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; photonList>
<java.util.ArrayList; toArray[org.sunflow.core.photonmap.CausticPhotonMap.Photon[]]; org.sunflow.core.photonmap.CausticPhotonMap.Photon[]; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; photonList>
<java.util.ArrayList; size[]; int; org.sunflow.core.photonmap.CausticPhotonMap; balance[]; void; null; photonList>
<java.util.ArrayList; add[org.sunflow.core.photonmap.CausticPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.CausticPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; photonList>
<java.util.ArrayList; add[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.GlobalPhotonMap; prepare[org.sunflow.math.BoundingBox]; void; null; photonList>
<java.util.ArrayList; add[org.sunflow.core.photonmap.GlobalPhotonMap.Photon]; boolean; org.sunflow.core.photonmap.GlobalPhotonMap; store[org.sunflow.core.ShadingState, org.sunflow.math.Vector3, org.sunflow.image.Color, org.sunflow.image.Color]; void; null; photonList>
<java.util.ArrayList; toArray[org.sunflow.core.photonmap.GlobalPhotonMap.Photon[]]; org.sunflow.core.photonmap.GlobalPhotonMap.Photon[]; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; photonList>
<java.util.ArrayList; size[]; int; org.sunflow.core.photonmap.GlobalPhotonMap; balance[]; void; null; photonList>
<java.util.LinkedList; clear[]; void; org.sunflow.system.SearchPath; resetSearchPath[]; void; null; searchPath>
<java.util.LinkedList; add[java.lang.String]; boolean; org.sunflow.system.SearchPath; addSearchPath[java.lang.String]; void; null; searchPath>
<java.util.ArrayList; add[java.lang.String]; boolean; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<java.util.ArrayList; add[java.lang.String]; boolean; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<java.util.ArrayList; toArray[java.lang.String[]]; java.lang.String[]; org.sunflow.system.Parser; getNextLine[]; boolean; null; tokenList>
<java.util.ArrayList; add[org.sunflow.core.LightSource]; boolean; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>
<java.util.ArrayList; toArray[org.sunflow.core.LightSource[]]; org.sunflow.core.LightSource[]; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>
<java.util.ArrayList; size[]; int; org.sunflow.RenderObjectMap; updateScene[org.sunflow.core.Scene]; void; null; lightList>


Calls That Are Candidatas (0)



Calls That Broken Confinement (0)

